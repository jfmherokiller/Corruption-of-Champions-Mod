package classes {
    import fats.valueObjects.*;

    import flash.display.StageScaleMode;
    import flash.events.MouseEvent;
    import flash.net.SharedObject;
    import flash.net.registerClassAlias;
    import flash.utils.Proxy;
    import flash.utils.getDefinitionByName;

    import mx.binding.Binding;
    import mx.binding.BindingManager;
    import mx.binding.IBindingClient;
    import mx.binding.IWatcherSetupUtil2;
    import mx.collections.ArrayList;
    import mx.containers.Grid;
    import mx.containers.GridItem;
    import mx.containers.GridRow;
    import mx.controls.Button;
    import mx.controls.Image;
    import mx.controls.TextArea;
    import mx.core.DeferredInstanceFromFunction;
    import mx.core.IFlexModuleFactory;
    import mx.core.IStateClient2;
    import mx.core.UIComponentDescriptor;
    import mx.core.mx_internal;
    import mx.events.FlexEvent;
    import mx.events.PropertyChangeEvent;
    import mx.graphics.SolidColor;
    import mx.states.AddItems;
    import mx.states.SetStyle;
    import mx.states.State;
    import mx.styles.CSSCondition;
    import mx.styles.CSSSelector;
    import mx.styles.CSSStyleDeclaration;
    import mx.utils.ObjectUtil;

    import spark.components.Application;
    import spark.components.BorderContainer;
    import spark.components.DropDownList;
    import spark.components.Group;
    import spark.components.HGroup;
    import spark.components.Label;
    import spark.components.TextInput;
    import spark.components.VGroup;
    import spark.events.IndexChangeEvent;
    import spark.layouts.BasicLayout;
    import spark.layouts.HorizontalLayout;
    import spark.primitives.BitmapImage;
    import spark.primitives.Rect;


    use namespace mx_internal;

    public class noonedecompiled extends Application implements IBindingClient, IStateClient2 {

        private static var _watcherSetupUtil:IWatcherSetupUtil2;

        {
            registerClassAlias("src.valueObjects.Items", Items);
            registerClassAlias("src.valueObjects.Quests", Quests);
            registerClassAlias("src.valueObjects.Player", Species);
            registerClassAlias("src.valueObjects.Enemies", Enemies);
            registerClassAlias("src.valueObjects.Gender", Gender);
            registerClassAlias("src.valueObjects.NPCs", NPCs);
            registerClassAlias("src.valueObjects.Spells", Spells);
            registerClassAlias("src.valueObjects.DamageType", DamageType);
            registerClassAlias("src.valueObjects.Vendors", Vendors);
        }

        private var _239210683AeroPearl:Items;

        private var _1965151186Amulet:Items;

        private var _968416181Anaconda:Enemies;

        private var _111768269Antidote1:Spells;

        private var _63476538Apple:Items;

        private var _479099531ArcaneDamage:DamageType;

        private var _831548216Armorless:Items;

        private var _66286Axe:Items;

        private var _1982186831Badger:Species;

        private var _1745281018Bagofcandy:Items;

        private var _1112427139BashingDamage:DamageType;

        private var _66549Bat:Species;

        private var _103508077BattlemagesGarb:Items;

        private var _750677273BeachEntrance:Locations;

        private var _12935959BeachEvent:Locations;

        private var _1376551090BeachHub:Locations;

        private var _1476416438BeastclawBracers:Items;

        private var _1900790752BellyShirt:Items;

        private var _344512862BlackSword:Items;

        private var _1468039031BloatBees:Enemies;

        private var _1035889773BloatedLion:Enemies;

        private var _1648784200BlueJay:Species;

        private var _206167551BlueSwimTrunks:Items;

        private var _1006109364BlueberrySlime:Enemies;

        private var _331663727Bluejeans:Items;

        private var _1090757341BookOfCrystals:Items;

        private var _1323926225BoostAgility1:Spells;

        private var _2037292692BoostDefense1:Spells;

        private var _1253505891BoostDodge1:Spells;

        private var _178329651BoostStrength1:Spells;

        private var _1587018163BrutesHarness:Items;

        private var _2138305459BubbleOrca:Enemies;

        private var _1576889816BuriedTreasure:Locations;

        private var _1070700354ButtonDownShirt:Items;

        private var _368421628CabalCave:Locations;

        private var _2092632Cake:Items;

        private var _1788611134CapturedByWildlings:Locations;

        private var _2011305335Cattle:Species;

        private var _1760212690CentralSquare:Locations;

        private var _504732601ChainmailArmor:Items;

        private var _428943877CharredWand:Items;

        private var _1757550548Cheeseburger:Items;

        private var _1887932010Cheetah:Species;

        private var _2017797575Church:Locations;

        private var _1030350419ClerkClothes:Vendors;

        private var _1212841387ClerkEarl:Vendors;

        private var _443766567ClerkEquipment:Vendors;

        private var _83632883ClerkGeneral:Vendors;

        private var _456663832ClerkGrocery:Vendors;

        private var _478619023ClerkHospital:Vendors;

        private var _1812459307ClerkLizard:Vendors;

        private var _1422792377ClerkMagesGuild:Vendors;

        private var _1336923307ClerkSmithNormal:Vendors;

        private var _1663934475ClerkSmithSpecial:Vendors;

        private var _568932406ClerkWestTown:Vendors;

        private var _903283303ClothesStore:Locations;

        private var _1689082219Coconut:Items;

        private var _840221741CoconutTree:Locations;

        private var _1678124433Cookies:Items;

        private var _2024251599Cougar:Species;

        private var _2024379027Coyote:Species;

        private var _1505671850Cupcake:Items;

        private var _2039534506Dagger:Items;

        private var _617286371DeathDamage:DamageType;

        private var _2126094Deer:Species;

        private var _2044530831DenseTopaz:Items;

        private var _463030086DinosaurCenter:Locations;

        private var _1400493876DinosaurChief:Locations;

        private var _1401620367DinosaurDocks:Locations;

        private var _293508456DinosaurInn:Locations;

        private var _1414371689DinosaurRider:Enemies;

        private var _923472927DinosaurShaman:Locations;

        private var _1415419634DinosaurSmith:Locations;

        private var _66204800Docks:Locations;

        private var _68892Dog:Species;

        private var _793243202Dolphin:Species;

        private var _2052676188Donkey:Species;

        private var _1765640662DonutsSmall:Items;

        private var _1308404854DressGown:Items;

        private var _1916794684DressSkirt:Items;

        private var _66311556Drunk:Enemies;

        private var _70515008EastCityGates:Locations;

        private var _709593891EastRoad:Locations;

        private var _672630175EasternSquare:Locations;

        private var _1096693779EquipmentStore:Locations;

        private var _490815734ExpandedElephant:Enemies;

        private var _1054363978ExperimentCave:Locations;

        private var _1054883919ExperimentTown:Locations;

        private var _1497025829ExperimentTownFarm:Locations;

        private var _836422568ExperimentTownForge:Locations;

        private var _210540799ExperimentTownSmarty:Locations;

        private var _1663651759FatJaguar:Enemies;

        private var _587606251FatWolf:Enemies;

        private var _2058427238FatWyvern:Enemies;

        private var _365635324FeederAnt:Enemies;

        private var _2100660076Female:Gender;

        private var _67764241Fence:Locations;

        private var _2100825166Ferret:Species;

        private var _919947621FireDamage:DamageType;

        private var _499034762FireWand:Items;

        private var _1719948668Fireball1:Spells;

        private var _1719948670Fireball3:Spells;

        private var _1719948672Fireball5:Spells;

        private var _840128605ForestEvent:Locations;

        private var _840541990ForestFeast:Locations;

        private var _691859592ForestHub:Locations;

        private var _70831Fox:Species;

        private var _1276758454FruitFarm:Locations;

        private var _1638114553GeneralStore:Locations;

        private var _98471728GingerbreadHouse:Locations;

        private var _112144343GingerbreadWitch:Enemies;

        private var _1320996247GluttonSeparatist:Enemies;

        private var _503457372GluttonSeparatistBoss:Enemies;

        private var _2224955Goat:Species;

        private var _1258477019GoldStorage:HGroup;

        private var _1238408326GorgedCheetah:Enemies;

        private var _2140951720Grapes:Items;

        private var _1985456728GrasslandsEvent:Locations;

        private var _333514557GreatClub:Items;

        private var _556893183GreyKangaroo:Species;

        private var _269153268GroceryStore:Locations;

        private var _200628175HamSandwich:Items;

        private var _2241965Hawk:Species;

        private var _69599017Heal1:Spells;

        private var _69599018Heal2:Spells;

        private var _1971884547HeavyClub:Items;

        private var _990901420HeavyLance:Items;

        private var _1897535368HillsEvent:Locations;

        private var _1472881309HillsHub:Locations;

        private var _69732782Hippo:Species;

        private var _1395215469HoneySlime:Enemies;

        private var _69913533Horse:Species;

        private var _238984614Hospital:Locations;

        private var _1823139821HospitalDesk:Locations;

        private var _774210923HospitalInfirmary:Locations;

        private var _624746934HospitalOffice:Locations;

        private var _181983235HuntersGarb:Items;

        private var _70197954Hydra:Enemies;

        private var _1794782984HydraEvent:Locations;

        private var _872359494IceDamage:DamageType;

        private var _1001457909IceWand:Items;

        private var _1765131112InsectHive:Locations;

        private var _1499328537IronfistPebbles:Items;

        private var _841684925JungleEvent:Locations;

        private var _964483368JungleHub:Locations;

        private var _1952427574LargeHealthPotion:Items;

        private var _873655349LargeManaPotion:Items;

        private var _1254571811LargeWyvernEgg:Items;

        private var _1636873546LeatherArmor:Items;

        private var _268791883LemonSlime:Enemies;

        private var _1728291545Leopard:Species;

        private var _301979051LifeDamage:DamageType;

        private var _1605831988LightClub:Items;

        private var _1766793317LightLance:Items;

        private var _410464334LightningBolt1:Spells;

        private var _410464332LightningBolt3:Spells;

        private var _410464330LightningBolt5:Spells;

        private var _204849849LightningDamage:DamageType;

        private var _1649939402LightningWand:Items;

        private var _2368572Lion:Species;

        private var _852474749MageApprenticeRobe:Items;

        private var _301859455MageGuild:Locations;

        private var _2032125184MageGuildAlteration:Locations;

        private var _1588089969MageGuildDestruction:Locations;

        private var _101217958MageGuildHall:Locations;

        private var _842023942MageGuildLibrary:Locations;

        private var _549670819MageGuildRestoration:Locations;

        private var _1167938528MageGuildStore:Locations;

        private var _729461781MagicalFur:Enemies;

        private var _931434589MagicalHoney:Items;

        private var _1997761671Magpie:Species;

        private var _2390573Male:Gender;

        private var _2076005710Manticore:Enemies;

        private var _77598873MarketSquare:Locations;

        private var _380086639MeatMonster:Enemies;

        private var _1434899830MeatballSub:Items;

        private var _699393212MediumHealthPotion:Items;

        private var _691719215MediumManaPotion:Items;

        private var _1336621599MilkBottle:Items;

        private var _1567596991MilkJug:Items;

        private var _2024825972MilkMachine:Enemies;

        private var _352266221MountainEvent:Locations;

        private var _1099070712MountainHub:Locations;

        private var _74534021Mouse:Species;

        private var _2063846862MuscleFur:Enemies;

        private var _346774383NastyDagger:Items;

        private var _785992281Neutral:Gender;

        private var _2450417Oats:Items;

        private var _772992120ObeseBear:Enemies;

        private var _216375778ObsidianSpear:Items;

        private var _2146210908OceanEvent:Locations;

        private var _896089911OceanHub:Locations;

        private var _2007491667OddCookie:Items;

        private var _2466209Orca:Species;

        private var _76528636Otter:Species;

        private var _79716Owl:Species;

        private var _1495648609PaintedDog:Species;

        private var _76880314Panda:Species;

        private var _868024350Panther:Species;

        private var _958103381Pantsless:Items;

        private var _982166284Penguin:Species;

        private var _1835622900PiercingDamage:DamageType;

        private var _80238Pig:Species;

        private var _478646382PlatemailArmor:Items;

        private var _1061783368QueensSting:Items;

        private var _1854778310Rabbit:Species;

        private var _1662593729Raccoon:Species;

        private var _1854354635Rapier:Items;

        private var _81925Rat:Species;

        private var _78735088Raven:Species;

        private var _951661425RedKangaroo:Species;

        private var _1860079325RedSwimShirt:Items;

        private var _592804970Regenerate2:Spells;

        private var _220997469Restaurant:Locations;

        private var _78931412Rhino:Species;

        private var _79133066Robin:Species;

        private var _1288204229RoyalGuardWasp:Enemies;

        private var _1785381175RoyalJelly:Items;

        private var _662348347SandMound:Locations;

        private var _656856324SandSnake:Enemies;

        private var _2058111286SandyBox:Items;

        private var _758003725Sausage:Items;

        private var _1589564260SegmentataArmor:Items;

        private var _79847365Shark:Species;

        private var _1053408145Shirtless:Items;

        private var _746509567ShortSword:Items;

        private var _37501812SirensEvent:Locations;

        private var _79944435Skirt:Items;

        private var _79955834Skunk:Species;

        private var _437855540SlashingDamage:DamageType;

        private var _1249106326SmallHealthPotion:Items;

        private var _1585580287SmallManaPotion:Items;

        private var _1815080976Smarty:Enemies;

        private var _319362173SnakeVenom:Items;

        private var _749177003Snookums:Enemies;

        private var _1285892827SoldierAnt:Enemies;

        private var _327665456SouthCityGates:Locations;

        private var _366882413SouthRoad:Locations;

        private var _274449711SouthernSquare:Locations;

        private var _80089017Spear:Items;

        private var _1831188066SpectrumGem:Items;

        private var _3841112SphericalShark:Enemies;

        private var _752173793SplintArmor:Items;

        private var _716840071Squirrel:Species;

        private var _837721128StarHammer:Items;

        private var _80208174Steak:Items;

        private var _599083716StoreRoom:Locations;

        private var _1978518825StoreRoomOwner:Enemies;

        private var _696249933Strawberries:Items;

        private var _720660032StretchyFruit:Items;

        private var _673041432StretchySeaweed:Items;

        private var _2011263343SyrupVine:Enemies;

        private var _1797301677Tailor:Locations;

        private var _1674710529TeacherAlteration:Vendors;

        private var _901829744TeacherDestruction:Vendors;

        private var _495402669TeacherDinosaur:Vendors;

        private var _1255376764TeacherRestoration:Vendors;

        private var _1994581454TeacherSmarty:Vendors;

        private var _1082698657TestArea:Locations;

        private var _799655414TestEnemy:Enemies;

        private var _80778166Thief:Enemies;

        private var _318647306ThinFur:Enemies;

        private var _1398042112ThunderboltSpear:Items;

        private var _80806047Tiger:Species;

        private var _751223832ToughFur:Enemies;

        private var _1168124558TrainingGrounds:Locations;

        private var _1368414578TreasureChest:Items;

        private var _604670482Trident:Items;

        private var _1752798999Trousers:Items;

        private var _81170375Tunic:Items;

        private var _1680726905TuxedoJacket:Items;

        private var _1752450307TuxedoPants:Items;

        private var _2708UI:Group;

        private var _85346971UnidentifiedGem:Items;

        private var _2662768Vest:Items;

        private var _1907597038VoidOnyx:Items;

        private var _2688490Wall:Locations;

        private var _85735310Warhammer:Items;

        private var _1921233680WaterElemental:Enemies;

        private var _363418308WaterFlask:Items;

        private var _611915781WaterJug:Items;

        private var _327599076Watermelon:Items;

        private var _928263723Weaponless:Items;

        private var _1548572777WeirdBerry:Items;

        private var _540470962WestCityGates:Locations;

        private var _148731505WestRoad:Locations;

        private var _1282875257WestTownGates:Locations;

        private var _953287628WestTownHub:Locations;

        private var _953286872WestTownInn:Locations;

        private var _1271231392WestTownStore:Locations;

        private var _1142586129WesternSquare:Locations;

        private var _1108095264Wildling:Enemies;

        private var _75410041WildlingRitualist:Enemies;

        private var _247062549WizardStaff:Items;

        private var _247858238WizardTower:Locations;

        private var _45849141WizardsRobes:Items;

        private var _2701938Wolf:Species;

        private var _1566279590WyvernCave:Locations;

        private var _1973850483YourHouse:Locations;

        public var _Main_Grid2:Grid;

        public var _Main_Grid9:Grid;

        private var _1130434590_Main_GridItem75:GridItem;

        private var _1130434591_Main_GridItem76:GridItem;

        private var _875927820_Main_GridRow21:GridRow;

        public var _Main_Group23:Group;

        public var _Main_Group24:Group;

        public var _Main_Image2:Image;

        public var _Main_Image3:Image;

        public var _Main_Image4:Image;

        public var _Main_Image7:Image;

        public var _Main_Image8:Image;

        public var _Main_Label41:spark.components.Label;

        public var _Main_Label43:spark.components.Label;

        public var _Main_Label45:spark.components.Label;

        public var _Main_Label47:spark.components.Label;

        public var _Main_Label49:spark.components.Label;

        public var _Main_Label51:spark.components.Label;

        public var _Main_Label53:spark.components.Label;

        public var _Main_Label55:spark.components.Label;

        public var _Main_Label57:spark.components.Label;

        public var _Main_Label58:spark.components.Label;

        public var _Main_Label59:spark.components.Label;

        public var _Main_Label60:spark.components.Label;

        public var _Main_Label61:spark.components.Label;

        public var _Main_Label62:spark.components.Label;

        public var _Main_Label63:spark.components.Label;

        public var _Main_Label64:spark.components.Label;

        public var _Main_Label65:spark.components.Label;

        public var _Main_Label66:spark.components.Label;

        public var _Main_Label67:spark.components.Label;

        public var _Main_Label68:spark.components.Label;

        public var _Main_Label71:spark.components.Label;

        public var _Main_Label73:spark.components.Label;

        public var _Main_Object1:Object;

        public var _Main_Object10:Object;

        public var _Main_Object11:Object;

        public var _Main_Object12:Object;

        public var _Main_Object13:Object;

        public var _Main_Object14:Object;

        public var _Main_Object15:Object;

        public var _Main_Object16:Object;

        public var _Main_Object17:Object;

        public var _Main_Object18:Object;

        public var _Main_Object19:Object;

        public var _Main_Object2:Object;

        public var _Main_Object20:Object;

        public var _Main_Object21:Object;

        public var _Main_Object22:Object;

        public var _Main_Object23:Object;

        public var _Main_Object24:Object;

        public var _Main_Object25:Object;

        public var _Main_Object26:Object;

        public var _Main_Object27:Object;

        public var _Main_Object28:Object;

        public var _Main_Object29:Object;

        public var _Main_Object3:Object;

        public var _Main_Object30:Object;

        public var _Main_Object31:Object;

        public var _Main_Object32:Object;

        public var _Main_Object33:Object;

        public var _Main_Object34:Object;

        public var _Main_Object35:Object;

        public var _Main_Object36:Object;

        public var _Main_Object37:Object;

        public var _Main_Object38:Object;

        public var _Main_Object39:Object;

        public var _Main_Object4:Object;

        public var _Main_Object40:Object;

        public var _Main_Object41:Object;

        public var _Main_Object42:Object;

        public var _Main_Object43:Object;

        public var _Main_Object44:Object;

        public var _Main_Object45:Object;

        public var _Main_Object46:Object;

        public var _Main_Object47:Object;

        public var _Main_Object48:Object;

        public var _Main_Object49:Object;

        public var _Main_Object5:Object;

        public var _Main_Object50:Object;

        public var _Main_Object51:Object;

        public var _Main_Object52:Object;

        public var _Main_Object53:Object;

        public var _Main_Object54:Object;

        public var _Main_Object55:Object;

        public var _Main_Object56:Object;

        public var _Main_Object6:Object;

        public var _Main_Object7:Object;

        public var _Main_Object8:Object;

        public var _Main_Object9:Object;

        public var _Main_Rect1:Rect;

        public var _Main_Rect2:Rect;

        public var _Main_Rect3:Rect;

        public var _Main_Rect4:Rect;

        public var _Main_Rect9:Rect;

        public var _Main_TextArea2:TextArea;

        public var _Main_VGroup3:VGroup;

        private var _1161803523actions:Grid;

        private var _912542303allGold:Button;

        private var _593556272alphaWolf:Locations;

        private var _616418077ampleApple:Items;

        private var _1082810936anacondaBoss:Enemies;

        private var _608041144anacondaBossFight:Locations;

        private var _709710383antidotePotion:Items;

        private var _1147039638apatosaurus:Species;

        private var _2046640462backGround:Image;

        private var _1396158280battle:Defeats;

        private var _93610339beach:Zones;

        private var _1428610327beefStew:Items;

        private var _724337710bigSteak:Items;

        private var _1331757139blackBear:Species;

        private var _12386574blackDragon:Species;

        private var _93819220blank:Locations;

        private var _611059141bloatedBlueberry:Items;

        private var _466047219blueDragon:Species;

        private var _1374240449blueSlimeItem:Items;

        private var _1904650752breadLoaf:Items;

        private var _980779510brownBear:Species;

        private var _241352511button1:WrapButton;

        private var _241352512button2:WrapButton;

        private var _241352513button3:WrapButton;

        private var _241352514button4:WrapButton;

        private var _241352515button5:WrapButton;

        private var _241352516button6:WrapButton;

        private var _241352517button7:WrapButton;

        private var _241352518button8:WrapButton;

        private var _241352519button9:WrapButton;

        private var _1773821454buttonPanel:Group;

        private var _1278056433cabalCauldron:Items;

        private var _241706466cabalDragon:Enemies;

        private var _1335535550cabalDragonRobe:Items;

        private var _468391955cabalMap:Items;

        private var _851927083cabalRogue:Quests;

        private var _1607948472cabalRogueBossFight:Locations;

        private var _152728443cabalTownMap:Items;

        private var _182050914calamari:Items;

        private var _1002315762cheatAgility:spark.components.TextInput;

        private var _499832109cheatCancel:WrapButton;

        private var _349166325cheatDone:WrapButton;

        private var _1950509684cheatEndurance:spark.components.TextInput;

        private var _1535285574cheatFat:spark.components.TextInput;

        private var _349255635cheatGold:spark.components.TextInput;

        private var _646293775cheatHealth:spark.components.TextInput;

        private var _709366578cheatIntelligence:spark.components.TextInput;

        private var _810202699cheatOptions:VGroup;

        private var _175254484cheatStomach:spark.components.TextInput;

        private var _1216812596cheatStrength:spark.components.TextInput;

        private var _1361525545cheese:Items;

        private var _1081259261cheeseMonster:Enemies;

        private var _94631201chili:Items;

        private var _3053931city:Zones;

        private var _1582426929clerkDinoSmithNormal:Vendors;

        private var _1651710511clerkDinoSmithSpecial:Vendors;

        private var _967181130clerkRaccoon:Vendors;

        private var _94755854clock:spark.components.Label;

        private var _1354814997common:Grid;

        private var _950408103common2:BorderContainer;

        private var _951117504confirm:Button;

        private var _1695793435cookedFood:Quests;

        private var _1858636220cultistVillage:Locations;

        private var _1582242824customBack:WrapButton;

        private var _875569098customComplete:WrapButton;

        private var _1070532612dairyFarmBarn:Locations;

        private var _1978097826dairyFarmCenter:Locations;

        private var _58297308dairyFarmCenterQuest:Locations;

        private var _1168608033dairyFarmGates:Locations;

        private var _1167266057dairyFarmHouse:Locations;

        private var _1646239277dairyFarmPasture:Locations;

        private var _1071022185dairyFarmRoad:Locations;

        private var _1071045373dairyFarmShed:Locations;

        private var _1156977747dairyFarmStand:Locations;

        private var _357419989decision1:WrapButton;

        private var _357419990decision2:WrapButton;

        private var _357419991decision3:WrapButton;

        private var _357420055decisions:Grid;

        private var _678634720defaultNPC:NPCs;

        private var _2081446977defeatShaman:Quests;

        private var _434405132defendingTheHerd:Quests;

        private var _407477098depositAmount:spark.components.TextInput;

        private var _138071954depositToggle:WrapButton;

        private var _1543337306dessertVillage:Locations;

        private var _1115281910devoured:Defeats;

        private var _112859315dietPill:Items;

        private var _1576354194discardToggle:WrapButton;

        private var _2122071352donutShop:Locations;

        private var _1310330585earth1:Spells;

        private var _1310330583earth3:Spells;

        private var _894292950eatingContest:Quests;

        private var _921037478enchantedFighterArmor:Items;

        private var _1927565094enchantedKnightArmor:Items;

        private var _1490705443enchantedWarmageArmor:Items;

        private var _1615526464enduranceDownArrow:BitmapImage;

        private var _1280474663enduranceUpArrow:BitmapImage;

        private var _1794203315enemyImage:Image;

        private var _96891546event:LocationType;

        private var _31411943eventText:TextArea;

        private var _1928911965exploded:Defeats;

        private var _1507858902fallenStar:Items;

        private var _758268279fatnessDownArrow:BitmapImage;

        private var _838850786fatnessUpArrow:BitmapImage;

        private var _2010122246floating:Defeats;

        private var _1268786147forest:Zones;

        private var _1382165420foundGoldThread:Quests;

        private var _862190489friedChicken:Items;

        private var _1375361882fruitDryad:Enemies;

        private var _966888243fullnessBar:Rect;

        private var _1441528257fullnessDownArrow:BitmapImage;

        private var _645961240fullnessUpArrow:BitmapImage;

        private var _334462218gameImages:Group;

        private var _218068102gameVersion:spark.components.Label;

        private var _701581065giantAxe:Items;

        private var _1118296561giganticGrape:Items;

        private var _1243430084glaive:Items;

        private var _3178592gold:WrapButton;

        private var _1519603062goldThread:Items;

        private var _1245362759golemBoss:Enemies;

        private var _460987863golemBossFight:Locations;

        private var _975277042grasslands:Zones;

        private var _975326301grasslandsHub:Locations;

        private var _567584624greatSword:Items;

        private var _1626991350greenDragon:Species;

        private var _691048547hamHock:Items;

        private var _571812682hammerMap:Items;

        private var _248109500hammerQuest:Quests;

        private var _29266967healthBar:Rect;

        private var _1257899637healthDownArrow:BitmapImage;

        private var _499831858healthUpArrow:BitmapImage;

        private var _99281490hills:Zones;

        private var _1797858355honeyDipper:Items;

        private var _673102473horseArmorBroke:Items;

        private var _669668046horseArmorFixed:Items;

        private var _1044859654horsePantsBroke:Items;

        private var _1041425227horsePantsFixed:Items;

        private var _1899019578horseQuestArmor:Quests;

        private var _1201935747horseQuestClothes:Quests;

        private var _268431215horseQuestFreedom:Quests;

        private var _785042560horseQuestRetire:Quests;

        private var _697225626horseQuestStrength:Quests;

        private var _642456191horseQuestWeapon:Quests;

        private var _3226374ice1:Spells;

        private var _3226376ice3:Spells;

        private var _3226378ice5:Spells;

        private var _1681772017impassable:Zones;

        private var _70993637inputAgility:mx.controls.TextInput;

        private var _1358790647inputAngry:mx.controls.TextInput;

        private var _253990348inputArticle:mx.controls.TextInput;

        private var _1706417105inputBack:mx.controls.TextInput;

        private var _1359450668inputBelly:mx.controls.TextInput;

        private var _1292328285inputEndurance:mx.controls.TextInput;

        private var _1362448999inputFName:mx.controls.TextInput;

        private var _1706540184inputFeet:mx.controls.TextInput;

        private var _1706550104inputFoot:mx.controls.TextInput;

        private var _470692185inputFur:mx.controls.TextInput;

        private var _677225320inputFurred:mx.controls.TextInput;

        private var _1363627360inputFurry:mx.controls.TextInput;

        private var _1706596044inputHair:mx.controls.TextInput;

        private var _1706596185inputHand:mx.controls.TextInput;

        private var _1364874298inputHands:mx.controls.TextInput;

        private var _1706599626inputHead:mx.controls.TextInput;

        private var _635021935inputHeight:mx.controls.TextInput;

        private var _646984791inputIntelligence:mx.controls.TextInput;

        private var _1368913646inputMName:mx.controls.TextInput;

        private var _1369916189inputMouth:mx.controls.TextInput;

        private var _1706774901inputName:mx.controls.TextInput;

        private var _898054915inputStomach:mx.controls.TextInput;

        private var _1991007701inputStrength:mx.controls.TextInput;

        private var _1706953530inputTail:mx.controls.TextInput;

        private var _1376067550inputTeeth:mx.controls.TextInput;

        private var _1464960104instuction:Button;

        private var _2117909640intelligenceDownArrow:BitmapImage;

        private var _689950097intelligenceUpArrow:BitmapImage;

        private var _47547896inventoryPanel:Grid;

        private var _210527854jambalaya:Items;

        private var _1661890230learningToSmith:Quests;

        private var _1652294448lemonSampleItem:Items;

        private var _2014457784lemonSlimeItem:Items;

        private var _1884839841lizardWizard:Enemies;

        private var _1845207544loadGame:Button;

        private var _58296702locationText:spark.components.Label;

        private var _1616766393madCheese:Quests;

        private var _825431435madMilk:Quests;

        private var _1073648365magicalObsidian:Items;

        private var _835224652manaBar:Rect;

        private var _981062144manaDownArrow:BitmapImage;

        private var _1514643943manaUpArrow:BitmapImage;

        private var _1222211527miscText:TextArea;

        private var _2021648641mountainousTiger:Enemies;

        private var _457455494mountains:Zones;

        private var _1213385727nameInput:spark.components.TextInput;

        private var _705755691onBadTermsExperiments:Quests;

        private var _1164451989onGoodTermsExperiments:Quests;

        private var _1249474914options:Button;

        private var _1008851410orange:Items;

        private var _1242460512outrageousOrange:Items;

        private var _529493446overalls:Items;

        private var _2141650782overeating:Defeats;

        private var _858987473pageDown:WrapButton;

        private var _995752566pageUp:WrapButton;

        private var _1354094206pitcherPlant:Locations;

        private var _1121312206plentifulPeach:Items;

        private var _442492910polarBear:Species;

        private var _1115315194profusePumpkin:Items;

        private var _916010911pterodactyl:Species;

        private var _1637109442raccoonStore:Locations;

        private var _938210922raptor:Species;

        private var _649916932redDragon:Species;

        private var _1922002894restLvlBtn:WrapButton;

        private var _1554840485riceBowl:Items;

        private var _1481230267ridiculousRaspberry:Items;

        private var _2060064815sceneImage:Image;

        private var _2032664133shamanBoss:Enemies;

        private var _131689707shamanBossFight:Locations;

        private var _447492738shamanBossNormal:Enemies;

        private var _183810003sizableStrawberry:Items;

        private var _1817704567slimeQuest1:Quests;

        private var _1817704568slimeQuest2:Quests;

        private var _1817704569slimeQuest3:Quests;

        private var _1817704570slimeQuest4:Quests;

        private var _1817704571slimeQuest5:Quests;

        private var _66272643smithedArmor:Quests;

        private var _2134478141spearMap:Items;

        private var _1765157001spearQuest:Quests;

        private var _2057952248speciesDescriptors:VGroup;

        private var _965566861speciesDropDown:DropDownList;

        private var _951487488speedDownArrow:BitmapImage;

        private var _1612998631speedUpArrow:BitmapImage;

        private var _1434955290spellList:WrapButton;

        private var _2017368284staminaBar:Rect;

        private var _1542484264staminaDownArrow:BitmapImage;

        private var _1893947583staminaUpArrow:BitmapImage;

        private var _2104891376statPanel:Grid;

        private var _1740948907stegosaurus:Species;

        private var _109770977store:LocationType;

        private var _1607566010strengthDownArrow:BitmapImage;

        private var _282654035strengthUpArrow:BitmapImage;

        private var _1914619615stufftext:WrapButton;

        private var _2108153668surroundingstext:WrapButton;

        private var _1887791441sushiRoll:Items;

        private var _84654623swordMap:Items;

        private var _247002907swordQuest:Quests;

        private var _347908517takeoutTerror:Enemies;

        private var _105981727tempuraShrimp:Items;

        private var _228890991tigerFight:Locations;

        private var _1999549173transformed:Defeats;

        private var _479827462triceratops:Species;

        private var _1271542734tropicalShirt:Items;

        private var _1513529404tyrannosaurus:Species;

        private var _589699789uncommonTaste:Quests;

        private var _69454997unequipToggle:WrapButton;

        private var _382952678washedDishes:Quests;

        private var _794960390water1:Spells;

        private var _794960388water3:Spells;

        private var _116011162waterDamage:DamageType;

        private var _1349389412whiteDragon:Species;

        private var _219078596whiteGoldChunk:Items;

        private var _178787328whoppingWatermelon:Items;

        private var _1913214770wilderness:LocationType;

        private var _291844054wildlingCaptive:Locations;

        private var _1743265778wildlingShaman:Enemies;

        private var _168614043wildlingShamanBoss:Enemies;

        private var _3649545wine:Items;

        private var _1432452791wishingWell:Locations;

        private var _55201690wizardNotebook:Quests;

        private var _625367980yourselftext:WrapButton;

        private var __moduleFactoryInitialized:Boolean = false;

        protected var _351608024version:Number = 0.6;

        private var _1401507864iconStore:Class;

        private var _1330582995iconHospital:Class;

        private var _966040704iconChurch:Class;

        private var _1041948822iconRestaurant:Class;

        private var _486172660iconTailor:Class;

        private var _1638753456iconInn:Class;

        private var _738279176iconHome:Class;

        private var _203565645iconBuilding:Class;

        private var _1408432706iconLeave:Class;

        private var _737931093iconTest:Class;

        private var _1108376614iconTrainingGround:Class;

        private var _737845789iconWall:Class;

        private var _1413961928iconFence:Class;

        private var _1145310243iconFenceGate:Class;

        private var _737981639iconRoad:Class;

        private var _924861039iconUnknown:Class;

        private var _1411997351iconHills:Class;

        private var _873789962iconForest:Class;

        private var _1510421030iconMountain:Class;

        private var _505274037iconGrasslands:Class;

        private var _738322204iconGate:Class;

        private var _1417668502iconBeach:Class;

        private var _1405718523iconOcean:Class;

        private var _738143861iconMage:Class;

        private var _1638768558iconYes:Class;

        private var _1194062822iconNo:Class;

        private var _738109684iconNext:Class;

        private var _539400439iconReturn:Class;

        private var _1194062604iconUp:Class;

        private var _738398021iconDown:Class;

        private var _737990675iconRest:Class;

        private var _1418192826iconArmor:Class;

        private var _1415426145iconDrink:Class;

        private var _738338697iconFood:Class;

        private var _1405209065iconOther:Class;

        private var _747657688iconHealthPotion:Class;

        private var _365412371iconManaPotion:Class;

        private var _1401871107iconShirt:Class;

        private var _396825611iconWeapon:Class;

        private var _1404845341iconPants:Class;

        private var _1012262879iconAttack:Class;

        private var _940154640iconDevour:Class;

        private var _1395324131iconInventory:Class;

        private var _1638762322iconRun:Class;

        private var _501068252iconSpells:Class;

        private var _924049261iconSurrender:Class;

        private var _737845874iconWait:Class;

        private var _1159259719iconBlackMagic:Class;

        private var _1730411925iconGreyMagic:Class;

        private var _1239174051iconWhiteMagic:Class;

        private var _842839668downButton:Class;

        private var _1041236082hoverButton:Class;

        private var _367690157upButton:Class;

        protected var _857497426enemyImageSource:Class;

        private var _2106913748defaultEnemyImage:Class;

        private var _1976105670lemonSlimeImage:Class;

        private var _1878665721bearImage:Class;

        private var _671434081lionImage:Class;

        private var _696877381cheetahImage:Class;

        private var _103213527wolfImage:Class;

        private var _1058392029sphereSharkImage:Class;

        private var _874880302bubbleOrcaImage:Class;

        private var _1452486927milkMachineImage:Class;

        protected var _1022740664backgroundImageSource:Class;

        private var _785444433cityday:Class;

        private var _1092684403citynight:Class;

        private var _975299990grasslandsday:Class;

        private var _950960282grasslandsnight:Class;

        private var _1599135295forestDay:Class;

        private var _819813893forestNight:Class;

        private var _1537529878hillsDay:Class;

        private var _88003354hillsNight:Class;

        private var _1311902521beachDay:Class;

        private var _1972602763beachNight:Class;

        private var _125460022mountainsDay:Class;

        private var _317456434mountainsNight:Class;

        protected var _82449STR:Number = 0;

        protected var _64739AGI:Number = 0;

        protected var _72655INT:Number = 0;

        protected var _82446STO:Number = 0;

        protected var _68795END:Number = 0;

        protected var _3001967bSTR:Number = 0;

        protected var bAGI:Number = 0;

        protected var bINT:Number = 0;

        protected var bSTO:Number = 0;

        protected var bEND:Number = 0;

        protected var tenemySTRdebuff:Number = 0;

        protected var tenemyAGIdebuff:Number = 0;

        protected var tenemyINTdebuff:Number = 0;

        protected var tenemySTOdebuff:Number = 0;

        protected var tenemyENDdebuff:Number = 0;

        protected var _741782393tenemyFATdebuff:Number = 0;

        protected var tmagicSTRbuff:Number = 0;

        protected var tmagicAGIbuff:Number = 0;

        protected var tmagicINTbuff:Number = 0;

        protected var tmagicSTObuff:Number = 0;

        protected var tmagicENDbuff:Number = 0;

        protected var tmagicDEFbuff:Number = 0;

        protected var tmagicDODGEbuff:int = 0;

        protected var tmagicREGENbuff:int = 0;

        protected var tmagicREGENbuffDamage:int = 0;

        protected var tmagicREGENbuffRange:int = 0;

        protected var _1759950770strColor:uint;

        protected var _1543827488agiColor:uint;

        protected var _1699546952endColor:uint;

        protected var _538920116intColor:uint;

        protected var _1674063317stoColor:uint;

        protected var _506655396manaColor:uint;

        protected var _1937877401healthColor:uint;

        protected var _1081163399maxFUL:int = 1;

        protected var _1081161984maxHEA:int = 100;

        protected var _5147166bmaxHEA:int = 100;

        protected var _1209950092tmaxHEA:int = 100;

        protected var _843862443maxMANA:int = 1;

        protected var _1146398391tmaxMANA:int;

        protected var _71396HEA:int = 0;

        protected var _2358855MANA:Number = 0;

        protected var _69981FUL:int = 0;

        protected var _1844745556FULbarScale:Number = 0;

        protected var _197778469HEAbarScale:Number = 0;

        protected var _923207618MANAbarScale:Number = 0;

        protected var _82432STA:Number = 0;

        protected var _65138ATE:Number = 0;

        protected var _66727393Eaten:Number = 0;

        protected var _66292336Drank:Number = 0;

        protected var Inflated:Number = 0;

        protected var _347265009InflatedMass:Number = 0;

        protected var Calories:Number = 0;

        protected var _69369FAT:Number = 0;

        protected var questArray:Array;

        protected var repDairyFarmer:int = 0;

        protected var repEatingContest:int = 0;

        protected var _581260440playerHeight:int = 70;

        protected var _644509467playerSpecies:Species;

        protected var _2095657228playerName:String;

        protected var _609743614playerGender:Gender;

        protected var _2808XP:int = 0;

        protected var _671064017XPtoLevel:int = 100;

        protected var _75778LVL:int = 1;

        protected var LVLup:int = 0;

        protected var WEA:Items;

        protected var ARM:Items;

        protected var TOP:Items;

        protected var BTM:Items;

        protected var statusStomachStretch:int = 0;

        protected var statusStretchFruit:int = 0;

        protected var statusStretchFruitPower:int = 0;

        protected var statusDietPill:int = 0;

        protected var statusDietPillPower:int = 0;

        protected var statusBloatVenom:int = 0;

        protected var statusBloatVenomPower:int = 0;

        protected var statusPoison:int = 0;

        protected var statusPoisonPower:int = 0;

        protected var statusBurn:int = 0;

        protected var statusBurnPower:int = 0;

        protected var statusWellFed:int = 0;

        protected var statusWellFedPower:int = 0;

        protected var statusSTRBuff:int = 0;

        protected var statusSTRBuffPower:int = 0;

        protected var statusAGIBuff:int = 0;

        protected var statusAGIBuffPower:int = 0;

        protected var statusINTBuff:int = 0;

        protected var statusINTBuffPower:int = 0;

        protected var statusENDBuff:int = 0;

        protected var statusENDBuffPower:int = 0;

        protected var statusMANABuff:int = 0;

        protected var statusMANABuffPower:int = 0;

        protected var statusSTOBuff:int = 0;

        protected var statusSTOBuffPower:int = 0;

        protected var _99228day:int = 1;

        protected var _2012969AMPM:String = "AM";

        protected var _3208676hour:int = 9;

        protected var _1713983942displayHour:int = 8;

        protected var _534087082tensMinute:int = 0;

        protected var _370957503onesMinute:Number = 0;

        protected var _8439162mainText:String = "";

        protected var _1146800581miscellaneousText:String = "";

        protected var inShop:Boolean = false;

        protected var depositing:Boolean = false;

        protected var discarding:Boolean = false;

        protected var keyItems:Boolean = false;

        protected var voreing:Boolean = false;

        protected var _390589477appButtonVisibility:Boolean = false;

        protected var specialEvent:int = 0;

        protected var subEvent:String = "";

        protected var defeatedBy:Defeats;

        protected var _1844812210newGame:Boolean = true;

        protected var _1901043637location:Locations;

        protected var _150873280cameFrom:Locations;

        protected var btnchc:int = 0;

        protected var listen:Function;

        protected var _594426088invArray:Array;

        protected var _667849625keyInvArray:Array;

        protected var storageArray:Array;

        protected var storageGold:int;

        protected var _1959267872invPage:int = 1;

        protected var _1081159699maxInv:int = 18;

        protected var maxStorage:int = 36;

        protected var _70655GLD:int;

        protected var spellArray:Array;

        protected var _1434844201spellPage:int = 1;

        protected var NPC1:NPCs;

        protected var NPC2:NPCs;

        protected var NPC3:NPCs;

        protected var NPC4:NPCs;

        protected var Vendor:Vendors;

        protected var _96653192enemy:Enemies;

        protected var _1298718228enemyt:Enemies;

        protected var _3080287eHEA:int;

        protected var eMANA:int;

        protected var eDMG:int;

        protected var grapple:int;

        protected var cram:int;

        protected var surrender:Boolean = false;

        protected var devour:Boolean = false;

        protected var eStatusBurnPower:int = 0;

        protected var eStatusBurnTime:int = 0;

        protected var eStatusStunTime:int = 0;

        protected var eStatusSlowTime:int = 0;

        protected var eStatusSoakTime:int = 0;

        protected var pStatusStunTime:int = 0;

        protected var surroundingsArray:Array;

        protected var forestTravel:Array;

        protected var hillsTravel:Array;

        protected var plainsTravel:Array;

        protected var beachTravel:Array;

        protected var oceanTravel:Array;

        protected var mountainTravel:Array;

        protected var forestTravelSpecial:Array;

        protected var mountainTravelSpecial:Array;

        protected var _1420985874optionsMetric:Boolean = false;

        protected var _234717945optionsImperial:Boolean = true;

        protected var _1844160197optionsPopping:Boolean = false;

        protected var _1985628152optionsMales:Boolean = true;

        protected var _1269551657optionsFemales:Boolean = true;

        protected var _1938617982optionsDescription:Boolean = true;

        protected var captiveDispelled:Boolean;

        protected var captiveDispelsLeft:int;

        protected var captiveFeedsLeft:int;

        protected var captiveFattened:Boolean;

        protected var captiveFreed:Boolean;

        protected var i:int = 0;

        protected var chance:int = 0;

        protected var attemptsLeft:int = 0;

        protected var _67806DMG:int = 0;

        protected var tailorArray:Array;

        protected var selectedItem:Items;

        protected var _273738486depositLabel:String = "Depositing";

        protected var _1065338634discardLabel:String = "Using";

        protected var _731235727buttonLabel1:String;

        protected var _731235728buttonLabel2:String;

        protected var _731235729buttonLabel3:String;

        protected var _731235730buttonLabel4:String;

        protected var _731235731buttonLabel5:String;

        protected var _731235732buttonLabel6:String;

        protected var _731235733buttonLabel7:String;

        protected var _731235734buttonLabel8:String;

        protected var _731235735buttonLabel9:String;

        protected var _171037265buttonLabeldec1:String;

        protected var _171037266buttonLabeldec2:String;

        protected var _171037267buttonLabeldec3:String;

        protected var _1886345041buttonVisible1:Boolean;

        protected var _1886345042buttonVisible2:Boolean;

        protected var _1886345043buttonVisible3:Boolean;

        protected var _1886345044buttonVisible4:Boolean;

        protected var _1886345045buttonVisible5:Boolean;

        protected var _1886345046buttonVisible6:Boolean;

        protected var _1886345047buttonVisible7:Boolean;

        protected var _1886345048buttonVisible8:Boolean;

        protected var _1886345049buttonVisible9:Boolean;

        protected var _754635087buttonVisibledec1:Boolean;

        protected var _754635088buttonVisibledec2:Boolean;

        protected var _754635089buttonVisibledec3:Boolean;

        mx_internal var _Main_StylesInit_done:Boolean = false;

        private var _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995:Class;

        private var _embed_mxml_____Assets_woodframe_png_220704496:Class;

        private var _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533:Class;

        private var _embed_mxml_____Assets_books_png_195370380:Class;

        private var _embed_mxml_____Assets_icons_inventoryIcon_png_1695435037:Class;

        private var _embed_mxml_____Assets_downArrow_png_46682374:Class;

        private var _embed_mxml_____Assets_sign_png_183101168:Class;

        private var _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293:Class;

        private var _embed_mxml_____Assets_box_png_1678595406:Class;

        private var _embed_mxml_____Assets_icons_appearanceIcon_png_1870263667:Class;

        private var _embed_mxml_____Assets_gold_png_176888366:Class;

        private var _embed_mxml_____Assets_icons_returnIcon_png_1538788669:Class;

        private var _embed_mxml_____Assets_upArrow_png_1883230764:Class;

        private var _embed_mxml_____Assets_backGround_png_69632306:Class;

        private var _embed_mxml_____Assets_icons_restIcon_png_684131085:Class;

        private var _embed_mxml_____Assets_icons_spellsIcon_png_1621160259:Class;

        private var _embed_mxml_____Assets_icons_surroundingsIcon_png_528375619:Class;

        mx_internal var _bindings:Array;

        mx_internal var _watchers:Array;

        mx_internal var _bindingsByDestination:Object;

        mx_internal var _bindingsBeginWithWord:Object;

        public function noonedecompiled() {
            var target:Object = null;
            var watcherSetupUtilClass:Object = null;
            this._1401507864iconStore = null;
            this._1330582995iconHospital = null;
            this._966040704iconChurch = null;
            this._1041948822iconRestaurant = null;
            this._486172660iconTailor = null;
            this._1638753456iconInn = null;
            this._738279176iconHome = null;
            this._203565645iconBuilding = null;
            this._1408432706iconLeave = null;
            this._737931093iconTest = null;
            this._1108376614iconTrainingGround = null;
            this._737845789iconWall = null;
            this._1413961928iconFence = null;
            this._1145310243iconFenceGate = null;
            this._737981639iconRoad = null;
            this._924861039iconUnknown = null;
            this._1411997351iconHills = null;
            this._873789962iconForest = null;
            this._1510421030iconMountain = null;
            this._505274037iconGrasslands = null;
            this._738322204iconGate = null;
            this._1417668502iconBeach = null;
            this._1405718523iconOcean = null;
            this._738143861iconMage = null;
            this._1638768558iconYes = null;
            this._1194062822iconNo = null;
            this._738109684iconNext = null;
            this._539400439iconReturn = null;
            this._1194062604iconUp = null;
            this._738398021iconDown = null;
            this._737990675iconRest = null;
            this._1418192826iconArmor = null;
            this._1415426145iconDrink = null;
            this._738338697iconFood = null;
            this._1405209065iconOther = null;
            this._747657688iconHealthPotion = null;
            this._365412371iconManaPotion = null;
            this._1401871107iconShirt = null;
            this._396825611iconWeapon = null;
            this._1404845341iconPants = null;
            this._1012262879iconAttack = null;
            this._940154640iconDevour = null;
            this._1395324131iconInventory = null;
            this._1638762322iconRun = null;
            this._501068252iconSpells = null;
            this._924049261iconSurrender = null;
            this._737845874iconWait = null;
            this._1159259719iconBlackMagic = null;
            this._1730411925iconGreyMagic = null;
            this._1239174051iconWhiteMagic = null;
            this._842839668downButton = null;
            this._1041236082hoverButton = null;
            this._367690157upButton = null;
            this._2106913748defaultEnemyImage = null;
            this._1976105670lemonSlimeImage = null;
            this._1878665721bearImage = null;
            this._671434081lionImage = null;
            this._696877381cheetahImage = null;
            this._103213527wolfImage = null;
            this._1058392029sphereSharkImage = null;
            this._874880302bubbleOrcaImage = null;
            this._1452486927milkMachineImage = null;
            this._785444433cityday = null;
            this._1092684403citynight = null;
            this._975299990grasslandsday = null;
            this._950960282grasslandsnight = null;
            this._1599135295forestDay = null;
            this._819813893forestNight = null;
            this._1537529878hillsDay = null;
            this._88003354hillsNight = null;
            this._1311902521beachDay = null;
            this._1972602763beachNight = null;
            this._125460022mountainsDay = null;
            this._317456434mountainsNight = null;
            this._1759950770strColor = uint(0);
            this._1543827488agiColor = uint(0);
            this._1699546952endColor = uint(0);
            this._538920116intColor = uint(0);
            this._1674063317stoColor = uint(0);
            this._506655396manaColor = uint(0);
            this._1937877401healthColor = uint(0);
            this.questArray = new Array();
            this.WEA = this.Weaponless;
            this.ARM = this.Armorless;
            this.TOP = this.Shirtless;
            this.BTM = this.Pantsless;
            this._594426088invArray = [];
            this._667849625keyInvArray = [];
            this.storageArray = new Array();
            this.spellArray = [];
            this.NPC1 = this.defaultNPC;
            this.NPC2 = this.defaultNPC;
            this.NPC3 = this.defaultNPC;
            this.NPC4 = this.defaultNPC;
            this.surroundingsArray = new Array();
            this.forestTravel = [0, 1, 0, 2, 0, 0.5, 0, 2];
            this.hillsTravel = [0, 0.5, 0, 2, 0, 0.5, 0, 2];
            this.plainsTravel = [0, 0.5, 0, 2, 0, 0.5, 0, 2];
            this.beachTravel = [0, 1, 0, 2, 0, 1, 0, 2];
            this.oceanTravel = [0, 1, 0, 2];
            this.mountainTravel = [0, 1, 0, 2, 0, 1];
            this.forestTravelSpecial = [0, 1, 0, 1, 0, 1, 0, 1];
            this.mountainTravelSpecial = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1];
            this.tailorArray = new Array();
            this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995 = null ;
            this._embed_mxml_____Assets_woodframe_png_220704496 = null;
            this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533 = null;
            this._embed_mxml_____Assets_books_png_195370380 = null;
            this._embed_mxml_____Assets_icons_inventoryIcon_png_1695435037 = null;
            this._embed_mxml_____Assets_downArrow_png_46682374 = null;
            this._embed_mxml_____Assets_sign_png_183101168 = null;
            this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293 = null;
            this._embed_mxml_____Assets_box_png_1678595406 = null;
            this._embed_mxml_____Assets_icons_appearanceIcon_png_1870263667 = null;
            this._embed_mxml_____Assets_gold_png_176888366 = null;
            this._embed_mxml_____Assets_icons_returnIcon_png_1538788669 = null;
            this._embed_mxml_____Assets_upArrow_png_1883230764 = null;
            this._embed_mxml_____Assets_backGround_png_69632306 = null;
            this._embed_mxml_____Assets_icons_restIcon_png_684131085 = null;
            this._embed_mxml_____Assets_icons_spellsIcon_png_1621160259 = null;
            this._embed_mxml_____Assets_icons_surroundingsIcon_png_528375619 = null;
            this._bindings = [];
            this._watchers = [];
            this._bindingsByDestination = {};
            this._bindingsBeginWithWord = {};
            super();
            var bindings:Array = this._Main_bindingsSetup();
            var watchers:Array = [];
            target = this;
            if (_watcherSetupUtil == null) {
                watcherSetupUtilClass = getDefinitionByName("_MainWatcherSetupUtil");
                watcherSetupUtilClass["init"](null);
            }
            _watcherSetupUtil.setup(this, function (param1:String):* {
                return target[param1];
            }, function (param1:String):* {
                return noonedecompiled[param1];
            }, bindings, watchers);
            mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
            mx_internal::_watchers = mx_internal::_watchers.concat(watchers);
            this.width = 1100;
            this.height = 800;
            this.layout = this._Main_BasicLayout1_c();
            this.mxmlContentFactory = new DeferredInstanceFromFunction(this._Main_Array2_c);
            this.currentState = "default";
            this._Main_Items126_i();
            this._Main_Items119_i();
            this._Main_Enemies25_i();
            this._Main_Spells21_i();
            this._Main_Items1_i();
            this._Main_DamageType8_i();
            this._Main_Items87_i();
            this._Main_Items61_i();
            this._Main_Species39_i();
            this._Main_Items34_i();
            this._Main_DamageType1_i();
            this._Main_Species50_i();
            this._Main_Items96_i();
            this._Main_Locations30_i();
            this._Main_Locations81_i();
            this._Main_Locations80_i();
            this._Main_Items80_i();
            this._Main_Items103_i();
            this._Main_Items70_i();
            this._Main_Enemies8_i();
            this._Main_Enemies4_i();
            this._Main_Species4_i();
            this._Main_Items112_i();
            this._Main_Enemies14_i();
            this._Main_Items113_i();
            this._Main_Items129_i();
            this._Main_Spells18_i();
            this._Main_Spells19_i();
            this._Main_Spells20_i();
            this._Main_Spells17_i();
            this._Main_Items101_i();
            this._Main_Enemies19_i();
            this._Main_Locations87_i();
            this._Main_Items106_i();
            this._Main_Locations67_i();
            this._Main_Items35_i();
            this._Main_Locations77_i();
            this._Main_Species33_i();
            this._Main_Locations5_i();
            this._Main_Items89_i();
            this._Main_Items86_i();
            this._Main_Items20_i();
            this._Main_Species27_i();
            this._Main_Locations18_i();
            this._Main_Vendors3_i();
            this._Main_Vendors10_i();
            this._Main_Vendors1_i();
            this._Main_Vendors4_i();
            this._Main_Vendors2_i();
            this._Main_Vendors5_i();
            this._Main_Vendors12_i();
            this._Main_Vendors7_i();
            this._Main_Vendors8_i();
            this._Main_Vendors9_i();
            this._Main_Vendors6_i();
            this._Main_Locations24_i();
            this._Main_Items8_i();
            this._Main_Locations83_i();
            this._Main_Items36_i();
            this._Main_Species28_i();
            this._Main_Species11_i();
            this._Main_Items37_i();
            this._Main_Items72_i();
            this._Main_DamageType10_i();
            this._Main_Species34_i();
            this._Main_Items125_i();
            this._Main_Locations90_i();
            this._Main_Locations94_i();
            this._Main_Locations95_i();
            this._Main_Locations92_i();
            this._Main_Enemies30_i();
            this._Main_Locations93_i();
            this._Main_Locations91_i();
            this._Main_Locations29_i();
            this._Main_Species12_i();
            this._Main_Species1_i();
            this._Main_Species35_i();
            this._Main_Items38_i();
            this._Main_Items110_i();
            this._Main_Items118_i();
            this._Main_Enemies5_i();
            this._Main_Locations11_i();
            this._Main_Locations41_i();
            this._Main_Locations7_i();
            this._Main_Locations21_i();
            this._Main_Enemies16_i();
            this._Main_Locations68_i();
            this._Main_Locations71_i();
            this._Main_Locations72_i();
            this._Main_Locations73_i();
            this._Main_Locations74_i();
            this._Main_Enemies26_i();
            this._Main_Enemies1_i();
            this._Main_Enemies39_i();
            this._Main_Enemies36_i();
            this._Main_Gender2_i();
            this._Main_Locations3_i();
            this._Main_Species40_i();
            this._Main_DamageType4_i();
            this._Main_Items84_i();
            this._Main_Spells1_i();
            this._Main_Spells2_i();
            this._Main_Spells3_i();
            this._Main_Locations53_i();
            this._Main_Locations54_i();
            this._Main_Locations52_i();
            this._Main_Species13_i();
            this._Main_Locations78_i();
            this._Main_Locations23_i();
            this._Main_Locations56_i();
            this._Main_Enemies46_i();
            this._Main_Enemies27_i();
            this._Main_Enemies48_i();
            this._Main_Species36_i();
            this._Main_Enemies7_i();
            this._Main_Items4_i();
            this._Main_Locations76_i();
            this._Main_Items66_i();
            this._Main_Species41_i();
            this._Main_Locations22_i();
            this._Main_Items21_i();
            this._Main_Species5_i();
            this._Main_Spells14_i();
            this._Main_Spells15_i();
            this._Main_Items59_i();
            this._Main_Items65_i();
            this._Main_Locations59_i();
            this._Main_Locations58_i();
            this._Main_Species56_i();
            this._Main_Enemies15_i();
            this._Main_Species37_i();
            this._Main_Locations14_i();
            this._Main_Locations15_i();
            this._Main_Locations16_i();
            this._Main_Locations17_i();
            this._Main_Items99_i();
            this._Main_Enemies42_i();
            this._Main_Locations84_i();
            this._Main_DamageType5_i();
            this._Main_Items83_i();
            this._Main_Locations64_i();
            this._Main_Items71_i();
            this._Main_Locations97_i();
            this._Main_Locations96_i();
            this._Main_Items46_i();
            this._Main_Items49_i();
            this._Main_Items56_i();
            this._Main_Items88_i();
            this._Main_Enemies2_i();
            this._Main_Species29_i();
            this._Main_DamageType9_i();
            this._Main_Items58_i();
            this._Main_Items75_i();
            this._Main_Spells4_i();
            this._Main_Spells5_i();
            this._Main_Spells6_i();
            this._Main_DamageType6_i();
            this._Main_Items82_i();
            this._Main_Species30_i();
            this._Main_Items94_i();
            this._Main_Locations32_i();
            this._Main_Locations37_i();
            this._Main_Locations36_i();
            this._Main_Locations35_i();
            this._Main_Locations33_i();
            this._Main_Locations38_i();
            this._Main_Locations34_i();
            this._Main_Enemies31_i();
            this._Main_Items54_i();
            this._Main_Species10_i();
            this._Main_Gender1_i();
            this._Main_Enemies37_i();
            this._Main_Locations9_i();
            this._Main_Enemies9_i();
            this._Main_Items22_i();
            this._Main_Items45_i();
            this._Main_Items48_i();
            this._Main_Items42_i();
            this._Main_Items43_i();
            this._Main_Enemies17_i();
            this._Main_Locations63_i();
            this._Main_Locations62_i();
            this._Main_Species46_i();
            this._Main_Enemies32_i();
            this._Main_Items77_i();
            this._Main_Gender3_i();
            this._Main_Items6_i();
            this._Main_Enemies10_i();
            this._Main_Items78_i();
            this._Main_Locations86_i();
            this._Main_Locations85_i();
            this._Main_Items121_i();
            this._Main_Species2_i();
            this._Main_Species43_i();
            this._Main_Species6_i();
            this._Main_Species14_i();
            this._Main_Species53_i();
            this._Main_Species31_i();
            this._Main_Items111_i();
            this._Main_Species7_i();
            this._Main_DamageType2_i();
            this._Main_Species38_i();
            this._Main_Items92_i();
            this._Main_Items76_i();
            this._Main_Species47_i();
            this._Main_Species44_i();
            this._Main_Items73_i();
            this._Main_Species48_i();
            this._Main_Species8_i();
            this._Main_Species42_i();
            this._Main_Items105_i();
            this._Main_Spells16_i();
            this._Main_Locations19_i();
            this._Main_Species55_i();
            this._Main_Species9_i();
            this._Main_Enemies40_i();
            this._Main_Items55_i();
            this._Main_Locations82_i();
            this._Main_Enemies20_i();
            this._Main_Items131_i();
            this._Main_Items23_i();
            this._Main_Items91_i();
            this._Main_Species3_i();
            this._Main_Items102_i();
            this._Main_Items60_i();
            this._Main_Locations89_i();
            this._Main_Items114_i();
            this._Main_Species45_i();
            this._Main_DamageType3_i();
            this._Main_Items44_i();
            this._Main_Items47_i();
            this._Main_Enemies41_i();
            this._Main_Items128_i();
            this._Main_Enemies38_i();
            this._Main_Enemies33_i();
            this._Main_Locations12_i();
            this._Main_Locations42_i();
            this._Main_Locations8_i();
            this._Main_Items74_i();
            this._Main_Items127_i();
            this._Main_Enemies21_i();
            this._Main_Items90_i();
            this._Main_Species49_i();
            this._Main_Items69_i();
            this._Main_Items24_i();
            this._Main_Locations55_i();
            this._Main_Enemies45_i();
            this._Main_Items5_i();
            this._Main_Items51_i();
            this._Main_Items52_i();
            this._Main_Enemies3_i();
            this._Main_Locations25_i();
            this._Main_Vendors17_i();
            this._Main_Vendors15_i();
            this._Main_Vendors19_i();
            this._Main_Vendors16_i();
            this._Main_Vendors18_i();
            this._Main_Locations13_i();
            this._Main_Enemies52_i();
            this._Main_Enemies11_i();
            this._Main_Enemies34_i();
            this._Main_Items81_i();
            this._Main_Species32_i();
            this._Main_Enemies35_i();
            this._Main_Locations20_i();
            this._Main_Items130_i();
            this._Main_Items63_i();
            this._Main_Items117_i();
            this._Main_Items107_i();
            this._Main_Items108_i();
            this._Main_Items115_i();
            this._Main_Items123_i();
            this._Main_Items109_i();
            this._Main_Items124_i();
            this._Main_Locations2_i();
            this._Main_Items64_i();
            this._Main_Enemies18_i();
            this._Main_Items39_i();
            this._Main_Items40_i();
            this._Main_Items7_i();
            this._Main_Items57_i();
            this._Main_Items50_i();
            this._Main_Locations10_i();
            this._Main_Locations40_i();
            this._Main_Locations28_i();
            this._Main_Locations27_i();
            this._Main_Locations31_i();
            this._Main_Locations39_i();
            this._Main_Locations6_i();
            this._Main_Enemies12_i();
            this._Main_Enemies13_i();
            this._Main_Items85_i();
            this._Main_Locations65_i();
            this._Main_Items95_i();
            this._Main_Species15_i();
            this._Main_Locations66_i();
            this._Main_Locations4_i();
            this._Main_Locations57_i();
            this._Main_Items9_i();
            this._Main_Enemies49_i();
            this._Main_Locations100_i();
            this._Main_Items122_i();
            this._Main_Species20_i();
            this._Main_Defeats4_i();
            this._Main_Zones6_i();
            this._Main_Items28_i();
            this._Main_Items27_i();
            this._Main_Species51_i();
            this._Main_Species22_i();
            this._Main_Locations1_i();
            this._Main_Items13_i();
            this._Main_Species23_i();
            this._Main_Items143_i();
            this._Main_Items19_i();
            this._Main_Species52_i();
            this._Main_Items134_i();
            this._Main_Enemies44_i();
            this._Main_Items97_i();
            this._Main_Items133_i();
            this._Main_Quests22_i();
            this._Main_Locations70_i();
            this._Main_Items132_i();
            this._Main_Items31_i();
            this._Main_Items3_i();
            this._Main_Enemies29_i();
            this._Main_Items29_i();
            this._Main_Zones2_i();
            this._Main_Vendors13_i();
            this._Main_Vendors14_i();
            this._Main_Vendors11_i();
            this._Main_Quests4_i();
            this._Main_Locations101_i();
            this._Main_Locations47_i();
            this._Main_Locations45_i();
            this._Main_Locations46_i();
            this._Main_Locations44_i();
            this._Main_Locations51_i();
            this._Main_Locations49_i();
            this._Main_Locations43_i();
            this._Main_Locations50_i();
            this._Main_Locations48_i();
            this._Main_NPCs1_i();
            this._Main_Quests26_i();
            this._Main_Quests6_i();
            this._Main_Locations61_i();
            this._Main_Defeats1_i();
            this._Main_Items53_i();
            this._Main_Locations26_i();
            this._Main_Spells10_i();
            this._Main_Spells11_i();
            this._Main_Quests9_i();
            this._Main_Items98_i();
            this._Main_Items100_i();
            this._Main_Items93_i();
            this._Main_LocationType3_i();
            this._Main_Defeats3_i();
            this._Main_Items139_i();
            this._Main_Defeats5_i();
            this._Main_Zones4_i();
            this._Main_Quests2_i();
            this._Main_Items25_i();
            this._Main_Enemies6_i();
            this._Main_Items68_i();
            this._Main_Items17_i();
            this._Main_Items79_i();
            this._Main_Items120_i();
            this._Main_Enemies51_i();
            this._Main_Locations99_i();
            this._Main_Zones3_i();
            this._Main_Locations75_i();
            this._Main_Items67_i();
            this._Main_Species24_i();
            this._Main_Items26_i();
            this._Main_Items136_i();
            this._Main_Quests28_i();
            this._Main_Zones5_i();
            this._Main_Items62_i();
            this._Main_Items146_i();
            this._Main_Items147_i();
            this._Main_Items144_i();
            this._Main_Items145_i();
            this._Main_Quests13_i();
            this._Main_Quests12_i();
            this._Main_Quests16_i();
            this._Main_Quests11_i();
            this._Main_Quests15_i();
            this._Main_Quests14_i();
            this._Main_Spells7_i();
            this._Main_Spells8_i();
            this._Main_Spells9_i();
            this._Main_Zones1_i();
            this._Main_Items30_i();
            this._Main_Quests1_i();
            this._Main_Items141_i();
            this._Main_Items142_i();
            this._Main_Enemies47_i();
            this._Main_Quests8_i();
            this._Main_Quests7_i();
            this._Main_Items140_i();
            this._Main_Enemies43_i();
            this._Main_Zones7_i();
            this._Main_Quests24_i();
            this._Main_Quests25_i();
            this._Main_Items2_i();
            this._Main_Items10_i();
            this._Main_Items116_i();
            this._Main_Defeats2_i();
            this._Main_Locations102_i();
            this._Main_Items11_i();
            this._Main_Species54_i();
            this._Main_Items15_i();
            this._Main_Species17_i();
            this._Main_Locations88_i();
            this._Main_Species16_i();
            this._Main_Species25_i();
            this._Main_Items18_i();
            this._Main_Items12_i();
            this._Main_Enemies50_i();
            this._Main_Locations98_i();
            this._Main_Enemies28_i();
            this._Main_Items14_i();
            this._Main_Quests17_i();
            this._Main_Quests18_i();
            this._Main_Quests19_i();
            this._Main_Quests20_i();
            this._Main_Quests21_i();
            this._Main_Quests5_i();
            this._Main_Items135_i();
            this._Main_Quests27_i();
            this._Main_Species19_i();
            this._Main_LocationType1_i();
            this._Main_Items32_i();
            this._Main_Items137_i();
            this._Main_Quests29_i();
            this._Main_Enemies22_i();
            this._Main_Items33_i();
            this._Main_Locations69_i();
            this._Main_Defeats6_i();
            this._Main_Species18_i();
            this._Main_Items104_i();
            this._Main_Species21_i();
            this._Main_Quests10_i();
            this._Main_Quests3_i();
            this._Main_Spells12_i();
            this._Main_Spells13_i();
            this._Main_DamageType7_i();
            this._Main_Species26_i();
            this._Main_Items138_i();
            this._Main_Items16_i();
            this._Main_LocationType2_i();
            this._Main_Locations79_i();
            this._Main_Enemies23_i();
            this._Main_Enemies24_i();
            this._Main_Items41_i();
            this._Main_Locations60_i();
            this._Main_Quests23_i();
            this.addEventListener("applicationComplete", this.___Main_Application1_applicationComplete);
            var _Main_BorderContainer1_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_BorderContainer1_i);
            var _Main_DropDownList1_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_DropDownList1_i);
            var _Main_Grid4_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Grid4_i);
            var _Main_Grid5_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Grid5_i);
            var _Main_Grid6_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Grid6_i);
            var _Main_Grid7_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Grid7_i);
            var _Main_Grid8_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Grid8_i);
            var _Main_Grid9_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Grid9_i);
            var _Main_GridItem72_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_GridItem72_c);
            var _Main_GridItem73_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_GridItem73_c);
            var _Main_GridItem74_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_GridItem74_c);
            var _Main_GridItem75_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_GridItem75_i);
            var _Main_GridItem76_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_GridItem76_i);
            var _Main_Group2_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Group2_i);
            var _Main_HGroup10_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_HGroup10_i);
            var _Main_Image2_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Image2_i);
            var _Main_Image3_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Image3_i);
            var _Main_Image4_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Image4_i);
            var _Main_Image6_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Image6_i);
            var _Main_Image7_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Image7_i);
            var _Main_Image8_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Image8_i);
            var _Main_Label67_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Label67_i);
            var _Main_Label68_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Label68_i);
            var _Main_Label69_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Label69_i);
            var _Main_Label70_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Label70_i);
            var _Main_Label71_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Label71_i);
            var _Main_Label72_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Label72_i);
            var _Main_Label73_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_Label73_i);
            var _Main_TextArea3_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_TextArea3_i);
            var _Main_TextArea4_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_TextArea4_i);
            var _Main_TextInput35_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_TextInput35_i);
            var _Main_VGroup1_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_VGroup1_i);
            var _Main_VGroup2_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_VGroup2_i);
            var _Main_VGroup3_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_VGroup3_i);
            var _Main_WrapButton25_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_WrapButton25_i);
            var _Main_WrapButton26_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_WrapButton26_i);
            var _Main_WrapButton27_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_WrapButton27_i);
            var _Main_WrapButton28_factory:DeferredInstanceFromFunction = new DeferredInstanceFromFunction(this._Main_WrapButton28_i);
            states = [new State({
                "name": "default",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label70_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextInput35_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid6_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid5_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid4_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_BorderContainer1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                })]
            }), new State({
                "name": "combat",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label71_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid5_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid4_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image6_factory,
                    "destination": "gameImages",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["sceneImage"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new SetStyle().initializeFromObject({
                    "name": "backgroundColor",
                    "value": 16499899
                })]
            }), new State({
                "name": "inventory",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label70_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label67_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_WrapButton28_factory,
                    "destination": "_Main_GridItem76",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem76_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_WrapButton26_factory,
                    "destination": "_Main_GridItem75",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem75_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem74_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem73_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem72_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid7_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid5_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid4_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_BorderContainer1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new SetStyle().initializeFromObject({
                    "name": "backgroundColor",
                    "value": 14863615
                })]
            }), new State({
                "name": "combatInventory",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label71_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label67_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem76_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem75_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem74_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem73_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem72_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid7_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid5_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid4_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_BorderContainer1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image6_factory,
                    "destination": "gameImages",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["sceneImage"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new SetStyle().initializeFromObject({
                    "name": "backgroundColor",
                    "value": 16499899
                })]
            }), new State({
                "name": "spells",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label70_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label68_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem76_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem75_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem74_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem73_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem72_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid7_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid5_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid4_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_BorderContainer1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new SetStyle().initializeFromObject({
                    "name": "backgroundColor",
                    "value": 14863615
                })]
            }), new State({
                "name": "combatSpells",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label71_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label68_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem76_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem75_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem74_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem73_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem72_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid7_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid5_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid4_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_BorderContainer1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image6_factory,
                    "destination": "gameImages",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["sceneImage"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new SetStyle().initializeFromObject({
                    "name": "backgroundColor",
                    "value": 16499899
                })]
            }), new State({
                "name": "levelUp",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label70_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid5_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid4_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_BorderContainer1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new SetStyle().initializeFromObject({
                    "name": "backgroundColor",
                    "value": 14352350
                })]
            }), new State({
                "name": "surroundings",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label70_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem72_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid7_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                })]
            }), new State({
                "name": "defeated",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label70_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid5_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid4_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new SetStyle().initializeFromObject({
                    "name": "backgroundColor",
                    "value": 11250603
                })]
            }), new State({
                "name": "appearance",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label70_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem72_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid7_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                })]
            }), new State({
                "name": "storage",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label70_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label67_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_HGroup10_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_WrapButton27_factory,
                    "destination": "_Main_GridItem76",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem76_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_WrapButton25_factory,
                    "destination": "_Main_GridItem75",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem75_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem74_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem73_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem72_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid7_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid5_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid4_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_BorderContainer1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new SetStyle().initializeFromObject({
                    "name": "backgroundColor",
                    "value": 13476469
                })]
            }), new State({
                "name": "options",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label73_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label72_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label70_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Label69_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_DropDownList1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid9_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["buttonPanel"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_GridItem72_factory,
                    "destination": "_Main_GridRow21",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid7_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid5_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Grid4_factory,
                    "destination": "buttonPanel",
                    "propertyName": "mxmlContent",
                    "position": "first"
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_TextArea4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image8_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image7_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Group2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image4_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image3_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                }), new AddItems().initializeFromObject({
                    "itemsFactory": _Main_Image2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                })]
            }), new State({
                "name": "customSpecies",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup2_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                })]
            }), new State({
                "name": "cheat",
                "overrides": [new AddItems().initializeFromObject({
                    "itemsFactory": _Main_VGroup1_factory,
                    "destination": "UI",
                    "propertyName": "mxmlContent",
                    "position": "after",
                    "relativeTo": ["backGround"]
                })]
            })];
            var i:uint = 0;
            while (i < bindings.length) {
                Binding(bindings[i]).execute();
                i++;
            }
        }

        public static function set watcherSetupUtil(param1:IWatcherSetupUtil2):void {
            noonedecompiled._watcherSetupUtil = param1;
        }

        override public function set moduleFactory(param1:IFlexModuleFactory):void {
            var factory:IFlexModuleFactory = param1;
            super.moduleFactory = factory;
            if (this.__moduleFactoryInitialized) {
                return;
            }
            this.__moduleFactoryInitialized = true;
            if (!this.styleDeclaration) {
                this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
            }
            this.styleDeclaration.defaultFactory = function ():void {
                this.backgroundColor = 16777164;
            };
            mx_internal::_Main_StylesInit();
        }

        override public function initialize():void {
            super.initialize();
        }

        protected function btn1():void {
            this.btnchc = 1;
            this.listen();
        }

        protected function btn2():void {
            this.btnchc = 2;
            this.listen();
        }

        protected function btn3():void {
            this.btnchc = 3;
            this.listen();
        }

        protected function btn4():void {
            this.btnchc = 4;
            this.listen();
        }

        protected function btn5():void {
            this.btnchc = 5;
            this.listen();
        }

        protected function btn6():void {
            this.btnchc = 6;
            this.listen();
        }

        protected function btn7():void {
            this.btnchc = 7;
            this.listen();
        }

        protected function btn8():void {
            this.btnchc = 8;
            this.listen();
        }

        protected function btn9():void {
            this.btnchc = 9;
            this.listen();
        }

        protected function dec1():void {
            this.btnchc = 11;
            this.listen();
        }

        protected function dec2():void {
            this.btnchc = 12;
            this.listen();
        }

        protected function dec3():void {
            this.btnchc = 13;
            this.listen();
        }

        protected function restLvl():void {
            if (this.LVLup > 0) {
                this.doLevel();
            }
            else if (this.LVLup == 0) {
                this.doRest();
            }
        }

        protected function buttonIcons(param1:int, param2:Class):void {
            switch (param1) {
                case 1:
                    this.button1.setStyle("icon", param2);
                    break;
                case 2:
                    this.button2.setStyle("icon", param2);
                    break;
                case 3:
                    this.button3.setStyle("icon", param2);
                    break;
                case 4:
                    this.button4.setStyle("icon", param2);
                    break;
                case 5:
                    this.button5.setStyle("icon", param2);
                    break;
                case 6:
                    this.button6.setStyle("icon", param2);
                    break;
                case 7:
                    this.button7.setStyle("icon", param2);
                    break;
                case 8:
                    this.button8.setStyle("icon", param2);
                    break;
                case 9:
                    this.button9.setStyle("icon", param2);
                    break;
                case 11:
                    this.decision1.setStyle("icon", param2);
                    break;
                case 12:
                    this.decision2.setStyle("icon", param2);
                    break;
                case 13:
                    this.decision3.setStyle("icon", param2);
            }
        }

        protected function clrchc():void {
            this.btnchc = 0;
        }

        protected function clrBtnTxt():void {
            this.i = 1;
            while (this.i <= 9) {
                this.btntxt(this.i, "");
                this.i++;
            }
        }

        protected function btntxt(param1:int, param2:String):void {
            switch (param1) {
                case 1:
                    this.buttonLabel1 = param2;
                    this.buttonVisible1 = true;
                    break;
                case 2:
                    this.buttonLabel2 = param2;
                    this.buttonVisible2 = true;
                    break;
                case 3:
                    this.buttonLabel3 = param2;
                    this.buttonVisible3 = true;
                    break;
                case 4:
                    this.buttonLabel4 = param2;
                    this.buttonVisible4 = true;
                    break;
                case 5:
                    this.buttonLabel5 = param2;
                    this.buttonVisible5 = true;
                    break;
                case 6:
                    this.buttonLabel6 = param2;
                    this.buttonVisible6 = true;
                    break;
                case 7:
                    this.buttonLabel7 = param2;
                    this.buttonVisible7 = true;
                    break;
                case 8:
                    this.buttonLabel8 = param2;
                    this.buttonVisible8 = true;
                    break;
                case 9:
                    this.buttonLabel9 = param2;
                    this.buttonVisible9 = true;
                    break;
                case 11:
                    this.buttonLabeldec1 = param2;
                    this.buttonVisibledec1 = true;
                    break;
                case 12:
                    this.buttonLabeldec2 = param2;
                    this.buttonVisibledec2 = true;
                    break;
                case 13:
                    this.buttonLabeldec3 = param2;
                    this.buttonVisibledec3 = true;
            }
        }

        protected function appView(param1:int):void {
            if (param1 == 1) {
                this.appButtonVisibility = true;
            }
            else {
                this.appButtonVisibility = false;
            }
        }

        protected function invView(param1:int):void {
            if (param1 == 1) {
                this.inventoryPanel.visible = true;
            }
            else {
                this.inventoryPanel.visible = false;
            }
        }

        protected function clearButton(param1:int):void {
            switch (param1) {
                case 1:
                    this.buttonLabel1 = "";
                    this.buttonVisible1 = false;
                    this.button1.setStyle("icon", null);
                    break;
                case 2:
                    this.buttonLabel2 = "";
                    this.buttonVisible2 = false;
                    this.button2.setStyle("icon", null);
                    break;
                case 3:
                    this.buttonLabel3 = "";
                    this.buttonVisible3 = false;
                    this.button3.setStyle("icon", null);
                    break;
                case 4:
                    this.buttonLabel4 = "";
                    this.buttonVisible4 = false;
                    this.button4.setStyle("icon", null);
                    break;
                case 5:
                    this.buttonLabel5 = "";
                    this.buttonVisible5 = false;
                    this.button5.setStyle("icon", null);
                    break;
                case 6:
                    this.buttonLabel6 = "";
                    this.buttonVisible6 = false;
                    this.button6.setStyle("icon", null);
                    break;
                case 7:
                    this.buttonLabel7 = "";
                    this.buttonVisible7 = false;
                    this.button7.setStyle("icon", null);
                    break;
                case 8:
                    this.buttonLabel8 = "";
                    this.buttonVisible8 = false;
                    this.button8.setStyle("icon", null);
                    break;
                case 9:
                    this.buttonLabel9 = "";
                    this.buttonVisible9 = false;
                    this.button9.setStyle("icon", null);
                    break;
                case 11:
                    this.buttonLabeldec1 = "";
                    this.buttonVisibledec1 = false;
                    this.decision1.setStyle("icon", null);
                    break;
                case 12:
                    this.buttonLabeldec2 = "";
                    this.buttonVisibledec2 = false;
                    this.decision2.setStyle("icon", null);
                    break;
                case 13:
                    this.buttonLabeldec3 = "";
                    this.buttonVisibledec3 = false;
                    this.decision3.setStyle("icon", null);
            }
        }

        protected function clearTextView():void {
            this.buttonVisible1 = false;
            this.buttonVisible2 = false;
            this.buttonVisible3 = false;
            this.buttonVisible4 = false;
            this.buttonVisible5 = false;
            this.buttonVisible6 = false;
            this.buttonVisible7 = false;
            this.buttonVisible8 = false;
            this.buttonVisible9 = false;
            this.button1.setStyle("icon", null);
            this.button2.setStyle("icon", null);
            this.button3.setStyle("icon", null);
            this.button4.setStyle("icon", null);
            this.button5.setStyle("icon", null);
            this.button6.setStyle("icon", null);
            this.button7.setStyle("icon", null);
            this.button8.setStyle("icon", null);
            this.button9.setStyle("icon", null);
        }

        protected function clearDecisionView():void {
            this.buttonVisibledec1 = false;
            this.buttonVisibledec2 = false;
            this.buttonVisibledec3 = false;
            this.decision1.setStyle("icon", null);
            this.decision2.setStyle("icon", null);
            this.decision3.setStyle("icon", null);
        }

        protected function clearView():void {
            this.clearTextView();
            this.clearDecisionView();
            this.clrchc();
        }

        protected function nextView():void {
            this.clearView();
            this.appView(0);
            this.buttonIcons(12, this.iconNext);
            this.btntxt(12, "Next");
        }

        protected function yesView(param1:int):void {
            this.buttonIcons(param1, this.iconYes);
            this.btntxt(param1, "Yes");
        }

        protected function noView(param1:int):void {
            this.buttonIcons(param1, this.iconNo);
            this.btntxt(param1, "No");
        }

        protected function choiceButton():void {
            this.clearView();
            this.appView(0);
            this.yesView(11);
            this.noView(13);
        }

        protected function returnView(param1:int):void {
            this.btntxt(param1, "Return");
            this.buttonIcons(param1, this.iconReturn);
        }

        protected function upView():void {
            this.buttonIcons(11, this.iconUp);
            this.btntxt(11, "Page up");
        }

        protected function downView():void {
            this.buttonIcons(13, this.iconDown);
            this.btntxt(13, "Page down");
        }

        protected function pageView():void {
            this.upView();
            this.downView();
        }

        protected function leaveButton(param1:int):void {
            this.btntxt(param1, "Leave");
            this.buttonIcons(param1, this.iconLeave);
        }

        protected function tradeButton(param1:int):void {
            this.btntxt(param1, "Trade");
            this.buttonIcons(param1, this.iconStore);
        }

        protected function nextButton():void {
            this.nextView();
            this.listen = function ():void {
                if (btnchc == 12) {
                    doNext();
                }
            };
        }

        protected function doNext():void {
            switch (currentState) {
                case "inventory":
                    this.doInventory();
                    break;
                case "combat":
                    this.doBattle();
                    break;
                case "default":
                    this.general();
                    break;
                case "defeated":
                    this.doDefeat();
            }
        }

        protected function leaveMisc():void {
            switch (currentState) {
                case "combatInventory":
                    currentState = "combat";
                    this.doBattle();
                    break;
                case "storage":
                    this.doEvent(this.YourHouse);
                    this.depositing = true;
                    this.depositLabel = "Depositing";
                    currentState = "default";
                    break;
                case "inventory":
                    this.general();
                    this.discarding = false;
                    this.keyItems = false;
                    this.discardLabel = "Using";
                    currentState = "default";
                    break;
                case "spells":
                    this.general();
                    currentState = "default";
                    break;
                case "combatSpells":
                    currentState = "combat";
                    this.doBattle();
                    break;
                case "options":
                    currentState = "default";
                    if (this.newGame == true) {
                        this.introduction();
                    }
                    else if (this.location == this.YourHouse) {
                        this.specialEvent = 1;
                        this.subEvent = "";
                        this.locationUpdate(this.YourHouse);
                        this.doEvent(this.YourHouse);
                    }
                    else {
                        this.general();
                    }
                    break;
                default:
                    currentState = "default";
            }
            this.invPage = 1;
        }

        protected function instructions():void {
            currentState = "appearance";
            this.miscScene("<b>Buttons</b>" + "\n~~~~~~~~~~~~~~~~~~~~~~" + "\n<u>Stats</u> describes your appearance, equipment, quests, and any important status effects. " + "\n<u>Surroundings</u> gives you a description of your surroundings. " + "\n<u>Inventory</u> brings up your inventory. " + "\n<u>Rest</u> lets you rest for an hour. Regaining health and stamina and giving you a chance to digest. " + "\n<u>Spells</u> brings up a list of your spells. " + "\n" + "\nThe 12 buttons to the right are the choices your character can make. Usually referring to which direction you want to go. " + "\n" + "\nNear the center of the screen there\'s a few more buttons. " + "\n<u>Info</u> brings up this dialogue. " + "\n<u>Options</u> beings up the options menu. " + "\n<u>Load</u> allows you to load a previous save. ", true);
            this.miscScene("\n\n<b>Stats</b>" + "\n~~~~~~~~~~~~~~~~~~~~~~" + "\n<u>Strength</u> affects how much time/stamina it costs to travel somewhere. " + "\n<u>Agility</u> affects who goes first in combat as well as increasing your odds to dodge/escape during combat. It also reduces the time it takes to travel somewhere. " + "\n<u>Endurance</u> affects how quickly you lose stamina, as well as how quickly you regain health from resting. It also affects how much your maximum HP increases when you level up. " + "\n<u>Intelligence</u> affects your chance to dodge/escape from your opponent as well as allowing you to go first in combat. It also affects your maximum mana and which spells you can learn. " + "\n<u>Intelligence/Strength/Agility</u> each affect the damage scaling on different weapons based on the type of weapon. " + "Each stat also has an affect on special events where it\'s applicable. " + "\nYour secondary stats are: " + "\n<u>Health</u>, which you need to keep above 0 to stay alive. " + "\n<u>Stamina</u>, which you need to keep above 0 to be able to travel. " + "\n<u>Mana</u>, which you spend to cast spells you\'ve learned. " + "\n<u>Fullness</u>, which represents how much you can safely consume. ", false);
            this.miscScene("\n\n<b>Food</b>" + "\n~~~~~~~~~~~~~~~~~~~~~~" + "\nEating stuff obviously fills your stomach, and it usually gives you calories which turn into fat over time. " + "\nIf you eat over 100% of your stomach\'s regular capacity, your maximum health will be temporarily reduced based on how overstuffed you are. " + "However being over 100% full will also stretch your stomach out over time, increasing your stomach capacity. " + "\nIf you get to 130% of your stomach\'s capacity then your maximum health is reduced to 0, ostensibly causing you to \"explode\" or at least pass out, based on your interpretation. " + "So try to not to stuff yourself into unconsiousness, unless you feel like it of course. ", false);
            this.miscScene("\n\n<b>Exploration</b>" + "\n~~~~~~~~~~~~~~~~~~~~~~" + "\nOutside of the safety of the city there are three wilderness areas; the forest, the hills, and the plains. " + "In these areas you can randomly encounter various random enemies as well as finding special events and items. " + "Ostensibly, the forest has the easiest enemies, followed by the plains, which is followed by the hills which has the hardest enemies of those 3 areas. " + "There is also a small town to the west that leads to a beach area where you can also find random enemies/items/events as well as being home to the mage\'s guild. ", false);
            this.miscScene("\n\n<b>Specific locations</b>" + "\n~~~~~~~~~~~~~~~~~~~~~~" + "\n<u>Your house:</u> " + "You can save and load games from your bedroom inside your house. " + "You can also sleep there, which just lets you rest for 8 hours. " + "There is also your storage chest where you can store and receive items as well as gold. " + "\n<u>Restaurants:</u> " + "Eating at a restaurant confers a small temporary bonus to your stats. " + "\n<u>Training grounds:</u> " + "Training grounds allow you to burn fat and convert it into Strength/Agility as well as endurance. " + "\n<u>Stores:</u> " + "Any location with a store icon has some amount/type of items to sell. You can also sell things to most vendors. " + "\n<u>Hospital/Church:</u> " + "This is where you end up after being defeated. " + "\n<u>Mage\'s guild:</u> " + "In the town on the west side of the world there is a mage\'s guild where you can learn spells as well as train up your intelligence at the cost of fat. ", false);
            this.miscScene("\n\n<b>Combat</b>" + "\n~~~~~~~~~~~~~~~~~~~~~~" + "\nDefeating enemies gains you xp which allow you to level up. " + "When you level up, you can increase one of your stats as well as automatically healing you and increasing your max health. " + "You can also often find gold and sometimes find items dropped by defeated enemies. " + "\nDuring combat you have several actions you can take: " + "\n<u>Attack</u> causes you to attack your enemy with your equipped weapon. " + "\n<u>Item</u> let\'s you use an item from your inventory. " + "\n<u>Run</u> allows you to attempt to run away from combat. " + "\n<u>Spells</u> allows you to cast known spells at the cost of mana. " + "\n<u>Wait</u> allows your enemy to get a free attack in on you, but regains some of your stamina. " + "\n<u>Submit</u> allows you to surrender to your enemy and suffer whatever consequences that entails. " + "\n<u>Devour</u> allows you to attempt to devour your enemy if your stomach capacity is high enough and you can overpower/outwit/outmaneuver your opponent. " + "Be wary though, it only means you could successfully eat the foe on an empty stomach. " + "Depending on how full you already are, eating an enemy may push you over your limit and actually cause you to lose the fight. " + "It is also worth noting that devouring an enemy prevents you from picking up any items they may have otherwise dropped. " + "\n<u>Struggle</u> causes you to fight against your opponent once they have grappled you. " + "Whichever stat is highest between Strength/Agility/Intelligence is used against your opponents grapple until you finally break free. ", false);
            this.miscScene("\n\n<b>Status effects</b>" + "\n~~~~~~~~~~~~~~~~~~~~~~" + "\nThere are various status effects that you and your enemy can be subjected to. " + "Namely: " + "\n<u>Stunned</u> characters have a 1/3 chance of their action in combat not happening. " + "\n<u>Burned</u> characters take a certain amount of damage at the start of each of their actions. " + "\n<u>Poisoned</u> characters take a certain amount of damage at the start of each of their actions and you also take damage over time outside of combat. " + "\n<u>Slowed</u> characters act last in combat for a certain number of turns. " + "\n<u>Regeneration</u> characters regenerate a certain amount of health every turn, or every 10 minutes out of combat. The regeneration effect only lasts for a limited duration. " + "\n<u>Stat changes</u> (strength, agility, etc.) can be increased or decreased as a result of certain actions. " + "\nMost of these status effects are only temporary and go away after combat unless noted otherwise. ", false);
            this.miscScene("\n\n<b>Spells</b>" + "\n~~~~~~~~~~~~~~~~~~~~~~" + "\nIn the western town there\'s a mage\'s guild where you can learn spells. " + "You can only learn a spell if your base intelligence is high enough and if you have enough money to pay for them to teach you. " + "Certain spells can only be cast in combat, other spells can only be cast out of combat, and some spells can be cast either in or out of combat. " + "All spells require you to spend a certain amount of mana to cast them. " + "Mana is regained automatically over time or you can restore mana more directly by drinking mana potions. ", false);
            this.miscScene("\n\n<b>Defeat</b>" + "\n~~~~~~~~~~~~~~~~~~~~~~" + "\nIf your health drops to 0, either from damage or from overeating or any other reason, then you are defeated. " + "If any of your stats ever fall to 0 (usually from stat altering attacks) then you are also defeated. " + "You\'re character never actually permanently \"dies\" though, so depending on the situation you either end up at the hospital or church. " + "The penalties for this is the loss of some gold, plus the loss of everything you\'ve eaten and whatever calories you had stored up before being defeated. " + "Also most temporary status effects end when you are defeated. " + "So try not to be too reckless. ", false);
        }

        protected function credits():void {
            this.scene("Artwork for Interface/Background/Enemy by Sugarboy " + "\nButton icons by Forbic " + "\nCoding by Noone " + "\nA lot of the writing by Noone " + "\n~~~~~~~~~~~~~~~~~~~~~~" + "\nOther writing/ideas by: " + "\nRossmallo " + "\nBruyaglovae " + "\nDaioni " + "\nTrollololol" + "\nWerestritchy" + "\nPeameal" + "\nKrishonk" + "\nAnonymous", true);
            this.clearView();
            this.returnView(8);
            this.listen = function ():void {
                if (btnchc == 8) {
                    introduction();
                }
            };
        }

        protected function introduction():void {
            this.stage.scaleMode = StageScaleMode.SHOW_ALL;
            this.location = this.CentralSquare;
            this.backgroundImageSource = this.cityday;
            this.scene("\tYou are a member of society living on a small but peaceful and fertile patch of land. " + "In their recorded history no one has known of strife or want in this land of seemingly endless abundance. " + "Lately though the land has become peculiarly more fertile. Crops grow faster and larger than ever before. " + "The wilderness has started regrowing and encroaching back on civilization at an alarming rate. " + "The animals have responded by ravenously devouring everything in sight. " + "This includes the wild carnivores who have been glutting themselves on the hopelessley fattened animals. " + "Lately they have even been attacking and devouring the townsfolk who venture too far into the wilderness. " + "\n\tIn addition to the animals, even the more civilized denizens of the land have slowly begun to lose themselves to gluttony and hedonism, more so than usual anyway. " + "Nobody seems to know why the sudden change has come across everyone. In fact, nobody seems to even particularly notice or care. " + "\n\tToday though, you awake from another night of restless dreams and finally decide that there must be something more out there, " + "and thus begins your journey towards adventure! ", true);
            this.clearView();
            this.btntxt(1, "New Game");
            this.btntxt(2, "Load");
            this.btntxt(3, "Instructions");
            this.btntxt(8, "Credits");
            this.listen = function ():void {
                switch (btnchc) {
                    case 1:
                        selectSpecies();
                        break;
                    case 2:
                        tryLoad();
                        break;
                    case 3:
                        instructions();
                        break;
                    case 8:
                        credits();
                }
            };
        }

        protected function selectSpecies():void {
            this.bSTR = 15;
            this.bAGI = 15;
            this.bINT = 15;
            this.bEND = 15;
            this.bSTO = 20;
            this.Drank = 2;
            this.Eaten = 2;
            this.maxFUL = 130;
            this.bmaxHEA = 100;
            this.HEA = this.maxHEA;
            this.STA = 100;
            this.FAT = 5;
            this.Calories = 10;
            this.GLD = 30;
            this.WEA = ObjectUtil.copy(this.Weaponless) as Items;
            this.ARM = ObjectUtil.copy(this.Armorless) as Items;
            this.TOP = ObjectUtil.copy(this.Shirtless) as Items;
            this.BTM = ObjectUtil.copy(this.Pantsless) as Items;
            this.removeArrows();
            this.updateStats();
            this.scene("Please select your race... ", true);
            this.speciesDropDown.visible = true;
            this.nextButton();
            this.btntxt(11, "Custom Species");
            this.listen = function ():void {
                var _loc1_:Species = null;
                if (btnchc == 12 && speciesDropDown.selectedIndex != -1) {
                    _loc1_ = speciesDropDown.selectedItem.type;
                    playerSpecies = ObjectUtil.copy(_loc1_) as Species;
                    playerHeight = _loc1_.baseHeight;
                    chgStats(playerSpecies.statChange[0], playerSpecies.statChange[1], playerSpecies.statChange[2], playerSpecies.statChange[3], playerSpecies.statChange[4]);
                    FAT = FAT + playerSpecies.statChange[5];
                    selectGender();
                }
                if (btnchc == 11) {
                    currentState = "customSpecies";
                }
            };
        }

        protected function completeCustomSpecies():void {
            if (this.inputAngry.text != "" && this.inputArticle.text != "" && this.inputBack.text != "" && this.inputBelly.text != "" && this.inputFeet.text != "" && this.inputFName.text != "" && this.inputFoot.text != "" && this.inputFur.text != "" && this.inputFurred.text != "" && this.inputFurry.text != "" && this.inputHair.text != "" && this.inputHand.text != "" && this.inputHands.text != "" && this.inputHead.text != "" && this.inputMName.text != "" && this.inputName.text != "" && this.inputTail.text != "" && this.inputTeeth.text != "" && parseInt(this.inputStrength.text) + parseInt(this.inputAgility.text) + parseInt(this.inputEndurance.text) + parseInt(this.inputIntelligence.text) + parseInt(this.inputStomach.text) <= 25 && parseInt(this.inputHeight.text) >= 48 && parseInt(this.inputHeight.text) <= 144) {
                this.playerSpecies = ObjectUtil.copy(this.Lion) as Species;
                this.playerSpecies.angry = this.inputAngry.text;
                this.playerSpecies.article = this.inputArticle.text;
                this.playerSpecies.furBack = this.inputBack.text;
                this.playerSpecies.furBelly = this.inputBelly.text;
                this.playerSpecies.feet = this.inputFeet.text;
                this.playerSpecies.fName = this.inputFName.text;
                this.playerSpecies.foot = this.inputFoot.text;
                this.playerSpecies.fur = this.inputFur.text;
                this.playerSpecies.furred = this.inputFurred.text;
                this.playerSpecies.furry = this.inputFurry.text;
                this.playerSpecies.hair = this.inputHair.text;
                this.playerSpecies.hand = this.inputHand.text;
                this.playerSpecies.hands = this.inputHands.text;
                this.playerSpecies.furHead = this.inputHead.text;
                this.playerSpecies.mName = this.inputMName.text;
                this.playerSpecies.speciesName = this.inputName.text;
                this.playerSpecies.tail = this.inputTail.text;
                this.playerSpecies.teeth = this.inputTeeth.text;
                this.playerSpecies.baseHeight = parseInt(this.inputHeight.text);
                this.playerSpecies.statChange = [parseInt(this.inputStrength.text), parseInt(this.inputAgility.text), parseInt(this.inputEndurance.text), parseInt(this.inputIntelligence.text), parseInt(this.inputStomach.text), 5];
                switch (this.newGame) {
                    case true:
                        this.playerHeight = this.playerSpecies.baseHeight;
                        this.chgStats(this.playerSpecies.statChange[0], this.playerSpecies.statChange[1], this.playerSpecies.statChange[2], this.playerSpecies.statChange[3], this.playerSpecies.statChange[4]);
                        this.FAT = this.FAT + this.playerSpecies.statChange[5];
                        currentState = "default";
                        this.selectGender();
                        break;
                    case false:
                        this.FAT = this.FAT - 200;
                        switch (this.playerGender.name) {
                            case this.Male.name:
                                if (this.playerSpecies.mName != null) {
                                    this.playerSpecies.name = this.playerSpecies.mName;
                                }
                                else {
                                    this.playerSpecies.name = this.playerSpecies.speciesName;
                                }
                                break;
                            default:
                                if (this.playerSpecies.fName != null) {
                                    this.playerSpecies.name = this.playerSpecies.fName;
                                }
                                else {
                                    this.playerSpecies.name = this.playerSpecies.speciesName;
                                }
                        }
                        currentState = "default";
                        this.subEvent = "Change your Body";
                        this.doEvent(this.CabalCave);
                        this.scene("\t\"Alright then, hold still for a moment,\" she says as the circle you stand in begins to glow. " + "There is a surprisingly-painless series of shifts and pops in your bones, and your skin crawls as it changes consistency. " + "A small tendril of hazy red energy snakes its way out of you and into the rabbit\'s belly, making it almost imperceptibly larger before it dissipates. " + "In a few more moments, your body has changed, and you stand there feeling like a brand new " + this.playerSpecies.name + ". ", true);
                }
            }
        }

        protected function customSpeciesBack():void {
            switch (this.newGame) {
                case true:
                    currentState = "default";
                    this.selectSpecies();
                    break;
                case false:
                    currentState = "default";
                    this.subEvent = "Alter your Race";
                    this.doEvent(this.CabalCave);
            }
        }

        protected function displaySpeciesStats():void {
            var _loc1_:Species = null;
            var _loc2_:int = 0;
            if (this.newGame) {
                _loc1_ = this.speciesDropDown.selectedItem.type;
                this.scene("<b>" + this.capFirst(_loc1_.speciesName) + "</b>" + "\n~~~~~~~~~~~~~~~~~~~~~~\n", true);
                this.i = 0;
                while (this.i <= 5) {
                    _loc2_ = _loc1_.statChange[this.i];
                    if (_loc2_ > 0) {
                        this.scene("<li>", false);
                        switch (this.i) {
                            case 0:
                                this.scene("Strength: +", false);
                                break;
                            case 1:
                                this.scene("Agility: +", false);
                                break;
                            case 2:
                                this.scene("Endurance: +", false);
                                break;
                            case 3:
                                this.scene("Intelligence: +", false);
                                break;
                            case 4:
                                this.scene("Starting Stomach capacity: +", false);
                                break;
                            case 5:
                                this.scene("Starting fatness: +", false);
                        }
                        this.scene(_loc2_ + "</li>", false);
                    }
                    this.i++;
                }
                this.scene("<li>Starting height: " + Math.floor(_loc1_.baseHeight / 12) + "\'" + _loc1_.baseHeight % 12 + "\" (" + Math.floor(_loc1_.baseHeight * 2.54) + " centimeters)</li>", false);
            }
        }

        protected function selectGender():void {
            this.scene("Are you male or female? ", true);
            this.clearView();
            this.speciesDropDown.visible = false;
            this.btntxt(1, "Male");
            this.btntxt(3, "Female");
            this.btntxt(13, "Back");
            this.buttonIcons(13, this.iconReturn);
            this.listen = function ():void {
                var _loc1_:Gender = null;
                switch (btnchc) {
                    case 1:
                        if (playerSpecies.mName != null) {
                            playerSpecies.name = playerSpecies.mName;
                        }
                        else {
                            playerSpecies.name = playerSpecies.speciesName;
                        }
                        _loc1_ = Male;
                        playerGender = ObjectUtil.copy(_loc1_) as Gender;
                        selectName();
                        break;
                    case 3:
                        if (playerSpecies.fName != null) {
                            playerSpecies.name = playerSpecies.fName;
                        }
                        else {
                            playerSpecies.name = playerSpecies.speciesName;
                        }
                        _loc1_ = Female;
                        playerGender = ObjectUtil.copy(_loc1_) as Gender;
                        selectName();
                        break;
                    case 13:
                        selectSpecies();
                }
            };
        }

        protected function selectName():void {
            this.scene("What is your name? ", true);
            this.nameInput.visible = true;
            this.nameInput.text = "Hero";
            this.nameInput.setFocus();
            this.nameInput.selectAll();
            this.clearView();
            this.nextView();
            this.btntxt(13, "Back");
            this.buttonIcons(13, this.iconReturn);
            this.listen = function ():void {
                if (nameInput.text != "" && btnchc == 12) {
                    playerName = nameInput.text;
                    startNewGame();
                }
                if (btnchc == 13) {
                    clrchc();
                    nameInput.visible = false;
                    selectGender();
                }
            };
        }

        protected function startNewGame():void {
            this.doXP(0);
            this.doTime(0);
            this.nameInput.visible = false;
            this.common.visible = true;
            this.newGame = false;
            this.general();
            this.locationTravel(this.YourHouse);
            this.scene("", true);
        }

        protected function scene(param1:String, param2:Boolean):void {
            if (param2 == false) {
                this.mainText = this.mainText + param1;
            }
            else {
                this.mainText = param1;
                this.eventText.verticalScrollPosition = 0;
            }
        }

        protected function miscScene(param1:String, param2:Boolean):void {
            if (param2 == false) {
                this.miscellaneousText = this.miscellaneousText + param1;
            }
            else {
                this.miscellaneousText = param1;
            }
        }

        protected function capFirst(param1:String):String {
            return param1.charAt(0).toUpperCase() + param1.substr(1).toLowerCase();
        }

        protected function general():void {
            this.appView(1);
            this.clearView();
            this.removeArrows();
            this.rmvTempStats();
            this.updateStats();
            if (this.LVLup > 0) {
                this.restLvlBtn.label = "Level Up!";
            }
            if (this.LVLup == 0) {
                this.restLvlBtn.label = "Rest";
            }
            this.explore();
        }

        protected function doFat(param1:Number):void {
            this.FAT = this.FAT + param1;
            if (this.FAT < 0) {
                this.FAT = 0;
            }
            if (param1 > 0) {
                this.doArrow("FATup");
            }
            if (param1 < 0) {
                this.doArrow("FATdown");
            }
        }

        protected function chgStats(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number):void {
            this.removeArrows();
            if (param1 > 0) {
                this.doArrow("STRup");
            }
            if (param2 > 0) {
                this.doArrow("SPDup");
            }
            if (param3 > 0) {
                this.doArrow("ENDup");
            }
            if (param4 > 0) {
                this.doArrow("INTup");
            }
            if (param5 < 0) {
                this.doArrow("FULup");
            }
            if (param1 < 0) {
                this.doArrow("STRdown");
            }
            if (param2 < 0) {
                this.doArrow("SPDdown");
            }
            if (param3 < 0) {
                this.doArrow("ENDdown");
            }
            if (param4 < 0) {
                this.doArrow("INTdown");
            }
            if (param5 > 0) {
                this.doArrow("FULdown");
            }
            if (this.bSTR < 100) {
                this.bSTR = this.bSTR + param1;
            }
            if (this.bAGI < 100) {
                this.bAGI = this.bAGI + param2;
            }
            if (this.bEND < 100) {
                this.bEND = this.bEND + param3;
            }
            if (this.bINT < 100) {
                this.bINT = this.bINT + param4;
            }
            if (this.bSTO < 200) {
                this.bSTO = this.bSTO + param5;
            }
            if (this.bSTR >= 100) {
                this.bSTR = this.bSTR + param1 / (this.bSTR * 0.01);
            }
            if (this.bAGI >= 100) {
                this.bAGI = this.bAGI + param2 / (this.bAGI * 0.01);
            }
            if (this.bEND >= 100) {
                this.bEND = this.bEND + param3 / (this.bEND * 0.01);
            }
            if (this.bINT >= 100) {
                this.bINT = this.bINT + param4 / (this.bINT * 0.01);
            }
            if (this.bSTO >= 200) {
                this.bSTO = this.bSTO + param5 / (this.bSTO * 0.005);
            }
            this.updateStats();
        }

        protected function chgTempStats(param1:String, param2:Number):void {
            switch (param1) {
                case "AGI":
                    this.tenemyAGIdebuff = this.tenemyAGIdebuff - param2;
                    break;
                case "END":
                    this.tenemyENDdebuff = this.tenemyENDdebuff - param2;
                    break;
                case "INT":
                    this.tenemyINTdebuff = this.tenemyINTdebuff - param2;
                    break;
                case "STO":
                    this.tenemySTOdebuff = this.tenemySTOdebuff - param2;
                    break;
                case "STR":
                    this.tenemySTRdebuff = this.tenemySTRdebuff - param2;
                    break;
                case "stun":
                    this.pStatusStunTime = this.pStatusStunTime + param2;
                    break;
                case "poison":
                    this.statusPoisonPower = this.statusPoisonPower + param2;
                    break;
                case "burn":
                    this.statusBurnPower = this.statusBurnPower + param2;
                    break;
                case "fat":
                    this.tenemyFATdebuff = this.tenemyFATdebuff + param2;
                    break;
                default:
                    param1 = "debuff error";
            }
            if (this.inCombat()) {
                this.scene("\n\t<i>(", false);
                switch (param1) {
                    case "stun":
                        this.scene("You\'ve been stunned!", false);
                        break;
                    case "poison":
                        this.scene("You\'ve been poisoned!", false);
                        break;
                    case "burn":
                        this.scene("You\'re burning!", false);
                        break;
                    case "fat":
                        this.scene(param1, false);
                        if (param2 > 0) {
                            this.scene(" +" + param2, false);
                        }
                        if (param2 < 0) {
                            this.scene(" " + -param2, false);
                        }
                        break;
                    default:
                        this.scene(param1, false);
                        if (param2 > 0) {
                            this.scene(" -" + param2, false);
                        }
                        if (param2 < 0) {
                            this.scene(" +" + -param2, false);
                        }
                }
                this.scene(")</i> ", false);
            }
            this.updateStats();
        }

        protected function rmvTempStats():void {
            this.tenemySTRdebuff = 0;
            this.tenemyAGIdebuff = 0;
            this.tenemyINTdebuff = 0;
            this.tenemyENDdebuff = 0;
            this.tenemySTOdebuff = 0;
            this.tenemyFATdebuff = 0;
            this.tmagicSTRbuff = 0;
            this.tmagicAGIbuff = 0;
            this.tmagicINTbuff = 0;
            this.tmagicENDbuff = 0;
            this.tmagicSTObuff = 0;
            this.tmagicDEFbuff = 0;
            this.tmagicREGENbuff = 0;
            this.tmagicREGENbuffDamage = 0;
            this.tmagicREGENbuffRange = 0;
            this.tmagicDODGEbuff = 0;
            this.pStatusStunTime = 0;
        }

        protected function rmvTempBuffs():void {
            this.statusStretchFruitPower = 0;
            this.statusStretchFruit = 0;
            this.statusBloatVenomPower = 0;
            this.statusBloatVenom = 0;
            this.statusWellFedPower = 0;
            this.statusWellFed = 0;
            this.statusSTRBuff = 0;
            this.statusSTRBuffPower = 0;
            this.statusAGIBuff = 0;
            this.statusAGIBuffPower = 0;
            this.statusINTBuff = 0;
            this.statusINTBuffPower = 0;
            this.statusENDBuff = 0;
            this.statusENDBuffPower = 0;
            this.statusMANABuff = 0;
            this.statusMANABuffPower = 0;
            this.statusSTOBuff = 0;
            this.statusSTOBuffPower = 0;
            this.statusPoison = 0;
            this.statusPoisonPower = 0;
            this.statusBurn = 0;
            this.statusBurnPower = 0;
            this.updateStats();
        }

        protected function modStrength():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.statusWellFedPower;
            _loc1_ = _loc1_ + this.statusSTRBuffPower;
            _loc1_ = _loc1_ + this.WEA.strBuff;
            _loc1_ = _loc1_ + this.ARM.strBuff;
            return _loc1_;
        }

        protected function modSpeed():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.statusWellFedPower;
            _loc1_ = _loc1_ + this.statusAGIBuffPower;
            _loc1_ = _loc1_ + this.WEA.agiBuff;
            _loc1_ = _loc1_ + this.ARM.agiBuff;
            return _loc1_;
        }

        protected function modEndurance():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.statusWellFedPower;
            _loc1_ = _loc1_ + this.statusENDBuffPower;
            _loc1_ = _loc1_ + this.WEA.endBuff;
            _loc1_ = _loc1_ + this.ARM.endBuff;
            return _loc1_;
        }

        protected function modIntelligence():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.statusWellFedPower;
            _loc1_ = _loc1_ + this.statusINTBuffPower;
            _loc1_ = _loc1_ + this.WEA.intBuff;
            _loc1_ = _loc1_ + this.ARM.intBuff;
            return _loc1_;
        }

        protected function modStomach():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.statusStretchFruitPower;
            _loc1_ = _loc1_ + this.statusSTOBuffPower;
            if (this.questStage(this.foundGoldThread) > 0) {
                _loc1_ = _loc1_ + this.questStage(this.foundGoldThread) * 5;
            }
            return _loc1_;
        }

        protected function modMana():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.statusMANABuffPower;
            _loc1_ = _loc1_ + this.WEA.manaBuff;
            _loc1_ = _loc1_ + this.ARM.manaBuff;
            return _loc1_;
        }

        protected function modHealth():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.WEA.healthBuff;
            _loc1_ = _loc1_ + this.ARM.healthBuff;
            return _loc1_;
        }

        protected function tempStrength():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.tenemySTRdebuff;
            _loc1_ = _loc1_ + this.tmagicSTRbuff;
            return _loc1_;
        }

        protected function tempSpeed():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.tenemyAGIdebuff;
            _loc1_ = _loc1_ + this.tmagicAGIbuff;
            return _loc1_;
        }

        protected function tempEndurance():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.tenemyENDdebuff;
            _loc1_ = _loc1_ + this.tmagicENDbuff;
            return _loc1_;
        }

        protected function tempIntelligence():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.tenemyINTdebuff;
            _loc1_ = _loc1_ + this.tmagicINTbuff;
            return _loc1_;
        }

        protected function tempStomach():int {
            var _loc1_:Number = 0;
            _loc1_ = _loc1_ + this.tenemySTOdebuff;
            _loc1_ = _loc1_ + this.tmagicSTObuff;
            return _loc1_;
        }

        protected function doHealth(param1:int):void {
            this.HEA = this.HEA + param1;
            if (this.inCombat()) {
                if (param1 > 0) {
                    this.scene("\n\t<i>(Health +" + param1 + ")</i>", false);
                }
                if (param1 < 0) {
                    this.scene("\n\t<i>(Health " + param1 + ")</i>", false);
                }
            }
            if (param1 > 0) {
                this.doArrow("HEAup");
            }
            if (param1 < 0) {
                this.doArrow("HEAdown");
            }
            if (this.HEA > this.maxHEA) {
                this.HEA = this.maxHEA;
            }
            if (this.HEA < 0) {
                this.HEA = 0;
            }
            if (this.HEA / this.bmaxHEA <= 2 / 3) {
                this.healthBar.fill = new SolidColor(16750848, 1);
            }
            if (this.HEA / this.bmaxHEA <= 1 / 3) {
                this.healthBar.fill = new SolidColor(5570560, 1);
            }
            if (this.HEA / this.bmaxHEA > 2 / 3) {
                this.healthBar.fill = new SolidColor(21760, 1);
            }
            if (this.bmaxHEA > 0) {
                this.HEAbarScale = this.HEA / this.bmaxHEA;
            }
            if (this.bmaxHEA <= 0) {
                this.HEAbarScale = 0;
            }
        }

        protected function doEnemyHealth(param1:int):void {
            if (this.eHEA + param1 > this.enemyt.maxHEA) {
                param1 = this.enemyt.maxHEA - this.eHEA;
            }
            this.eHEA = this.eHEA + param1;
            if (param1 > 0) {
                this.scene("\n\t<i>(Enemy health +" + param1 + ")</i>", false);
            }
            if (param1 < 0) {
                this.scene("\n\t<i>(Enemy health " + param1 + ")</i>", false);
            }
            if (this.eHEA > this.enemyt.maxHEA) {
                this.eHEA = this.enemyt.maxHEA;
            }
            if (this.eHEA < 0) {
                this.eHEA = 0;
            }
        }

        protected function doMana(param1:Number):void {
            this.MANA = this.MANA + param1;
            if (param1 > 0) {
                this.doArrow("MANAup");
            }
            if (param1 < 0) {
                this.doArrow("MANAdown");
            }
            if (this.MANA > this.maxMANA) {
                this.MANA = this.maxMANA;
            }
            if (this.MANA < 0) {
                this.MANA = 0;
            }
        }

        protected function updateStats():void {
            this.STR = this.bSTR + this.tempStrength() + this.modStrength();
            this.AGI = this.bAGI + this.tempSpeed() + this.modSpeed();
            this.END = this.bEND + this.tempEndurance() + this.modEndurance();
            this.INT = this.bINT + this.tempIntelligence() + this.modIntelligence();
            this.STO = this.bSTO + this.tempStomach() + this.modStomach();
            this.maxMANA = this.bINT * 0.5 + this.tmaxMANA + this.modMana();
            if (this.maxMANA > 0) {
                this.MANAbarScale = this.MANA / this.maxMANA;
            }
            if (this.maxMANA <= 0) {
                this.MANAbarScale = 0;
            }
            if (this.STR < 0) {
                this.STR = 0;
            }
            if (this.AGI < 0) {
                this.AGI = 0;
            }
            if (this.END < 0) {
                this.END = 0;
            }
            if (this.INT < 0) {
                this.INT = 0;
            }
            if (this.STO < 0) {
                this.STO = 0;
            }
            if (this.maxMANA < 0) {
                this.maxMANA = 0;
            }
            this.fixFull();
            if (this.FUL > 100) {
                this.tmaxHEA = (this.maxFUL - this.FUL) / (this.maxFUL - 100) * (this.bmaxHEA + this.modHealth());
                if (this.tmaxHEA < 0) {
                    this.tmaxHEA = 0;
                }
                this.maxHEA = this.tmaxHEA;
                this.fullnessBar.fill = new SolidColor(16750848, 1);
                if (this.FUL > 120) {
                    this.fullnessBar.fill = new SolidColor(5570560, 1);
                }
                this.FULbarScale = 1;
            }
            if (this.FUL <= 100) {
                this.maxHEA = this.bmaxHEA + this.modHealth();
                this.fullnessBar.fill = new SolidColor(21760, 1);
                this.FULbarScale = this.FUL / 100;
            }
            if (this.STR < this.bSTR) {
                this.strColor = uint(5570560);
            }
            if (this.AGI < this.bAGI) {
                this.agiColor = uint(5570560);
            }
            if (this.END < this.bEND) {
                this.endColor = uint(5570560);
            }
            if (this.INT < this.bINT) {
                this.intColor = uint(5570560);
            }
            if (this.STO < this.bSTO) {
                this.stoColor = uint(5570560);
            }
            if (this.maxHEA < this.bmaxHEA) {
                this.healthColor = uint(5570560);
            }
            if (this.maxMANA < int(this.bINT * 0.5)) {
                this.manaColor = uint(5570560);
            }
            if (this.STR > this.bSTR) {
                this.strColor = uint(21760);
            }
            if (this.AGI > this.bAGI) {
                this.agiColor = uint(21760);
            }
            if (this.END > this.bEND) {
                this.endColor = uint(21760);
            }
            if (this.INT > this.bINT) {
                this.intColor = uint(21760);
            }
            if (this.STO > this.bSTO) {
                this.stoColor = uint(21760);
            }
            if (this.maxHEA > this.bmaxHEA) {
                this.healthColor = uint(21760);
            }
            if (this.maxMANA > int(this.bINT * 0.5)) {
                this.manaColor = uint(21760);
            }
            if (this.STR == this.bSTR) {
                this.strColor = uint(0);
            }
            if (this.AGI == this.bAGI) {
                this.agiColor = uint(0);
            }
            if (this.END == this.bEND) {
                this.endColor = uint(0);
            }
            if (this.INT == this.bINT) {
                this.intColor = uint(0);
            }
            if (this.STO == this.bSTO) {
                this.stoColor = uint(0);
            }
            if (this.maxHEA == this.bmaxHEA) {
                this.healthColor = uint(0);
            }
            if (this.maxMANA == int(this.bINT * 0.5)) {
                this.manaColor = uint(0);
            }
            if (this.GLD < 0) {
                this.GLD = 0;
            }
            if (this.HEA > this.maxHEA) {
                this.HEA = this.maxHEA;
            }
            if (this.HEA < 0) {
                this.HEA = 0;
            }
            if (this.MANA > this.maxMANA) {
                this.MANA = this.maxMANA;
            }
            if (this.MANA < 0) {
                this.MANA = 0;
            }
            if (this.STA > 100) {
                this.STA = 100;
            }
            if (this.STA < 0) {
                this.STA = 0;
            }
            if (this.HEA / this.bmaxHEA <= 2 / 3) {
                this.healthBar.fill = new SolidColor(16750848, 1);
            }
            if (this.HEA / this.bmaxHEA <= 1 / 3) {
                this.healthBar.fill = new SolidColor(5570560, 1);
            }
            if (this.HEA / this.bmaxHEA > 2 / 3) {
                this.healthBar.fill = new SolidColor(21760, 1);
            }
            if (this.bmaxHEA > 0) {
                this.HEAbarScale = this.HEA / this.bmaxHEA;
            }
            if (this.bmaxHEA <= 0) {
                this.HEAbarScale = 0;
            }
        }

        protected function fixFull():void {
            this.ATE = this.Eaten + this.Drank + this.Inflated;
            this.FUL = this.ATE / this.STO * 100;
            if (this.waistDiameter() > this.TOP.Expand && this.TOP.Popped == false && this.TOP.Expand > 0) {
                this.scene("<i>" + this.TOP.Popoff + "</i>", false);
                this.TOP.Popped = true;
            }
            if (this.waistDiameter() > this.BTM.Expand && this.BTM.Popped == false && this.BTM.Expand > 0) {
                this.scene("<i>" + this.BTM.Popoff + "</i>", false);
                this.BTM.Popped = true;
            }
        }

        protected function removeArrows():void {
            this.strengthUpArrow.visible = false;
            this.speedUpArrow.visible = false;
            this.enduranceUpArrow.visible = false;
            this.intelligenceUpArrow.visible = false;
            this.healthUpArrow.visible = false;
            this.manaUpArrow.visible = false;
            this.staminaUpArrow.visible = false;
            this.fullnessUpArrow.visible = false;
            this.fatnessUpArrow.visible = false;
            this.strengthDownArrow.visible = false;
            this.speedDownArrow.visible = false;
            this.enduranceDownArrow.visible = false;
            this.intelligenceDownArrow.visible = false;
            this.healthDownArrow.visible = false;
            this.manaDownArrow.visible = false;
            this.staminaDownArrow.visible = false;
            this.fullnessDownArrow.visible = false;
            this.fatnessDownArrow.visible = false;
        }

        protected function doArrow(param1:String):void {
            switch (param1) {
                case "STRup":
                    this.strengthUpArrow.visible = true;
                    break;
                case "SPDup":
                    this.speedUpArrow.visible = true;
                    break;
                case "ENDup":
                    this.enduranceUpArrow.visible = true;
                    break;
                case "INTup":
                    this.intelligenceUpArrow.visible = true;
                    break;
                case "FULup":
                    this.fullnessUpArrow.visible = true;
                    break;
                case "HEAup":
                    this.healthUpArrow.visible = true;
                    break;
                case "MANAup":
                    this.manaUpArrow.visible = true;
                    break;
                case "STAup":
                    this.staminaUpArrow.visible = true;
                    break;
                case "FATup":
                    this.fatnessUpArrow.visible = true;
                    break;
                case "STRdown":
                    this.strengthUpArrow.visible = false;
                    this.strengthDownArrow.visible = true;
                    break;
                case "SPDdown":
                    this.speedUpArrow.visible = false;
                    this.speedDownArrow.visible = true;
                    break;
                case "ENDdown":
                    this.enduranceUpArrow.visible = false;
                    this.enduranceDownArrow.visible = true;
                    break;
                case "INTdown":
                    this.intelligenceUpArrow.visible = false;
                    this.intelligenceDownArrow.visible = true;
                    break;
                case "FULdown":
                    this.fullnessUpArrow.visible = false;
                    this.fullnessDownArrow.visible = true;
                    break;
                case "HEAdown":
                    this.healthUpArrow.visible = false;
                    this.healthDownArrow.visible = true;
                    break;
                case "MANAdown":
                    this.manaUpArrow.visible = false;
                    this.manaDownArrow.visible = true;
                    break;
                case "STAdown":
                    this.staminaUpArrow.visible = false;
                    this.staminaDownArrow.visible = true;
                    break;
                case "FATdown":
                    this.fatnessUpArrow.visible = false;
                    this.fatnessDownArrow.visible = true;
            }
        }

        protected function d100():int {
            return Math.floor(Math.random() * 100) + 1;
        }

        protected function xdx(param1:int, param2:int):int {
            var _loc3_:int = 0;
            this.i = 1;
            while (this.i <= param1) {
                _loc3_ = _loc3_ + this.dXY(1, param2);
                this.i++;
            }
            return _loc3_;
        }

        protected function dXY(param1:int, param2:int):int {
            var _loc3_:int = param1;
            if (param2 > param1) {
                _loc3_ = Math.floor(Math.random() * (1 + param2 - param1)) + param1;
            }
            if (_loc3_ > param2) {
                _loc3_ = param2;
            }
            return _loc3_;
        }

        protected function randomSpecies():Species {
            var _loc1_:Species = this.randomHerbivore();
            if (this.dXY(1, 2) == 1) {
                _loc1_ = this.randomCarnivore();
            }
            return _loc1_;
        }

        protected function randomDinosaur():Species {
            var _loc1_:Array = new Array(this.raptor, this.tyrannosaurus, this.stegosaurus, this.pterodactyl, this.apatosaurus, this.triceratops);
            return _loc1_[this.dXY(0, _loc1_.length - 1)];
        }

        protected function randomDinosaurSteed():Species {
            var _loc1_:Array = new Array(this.tyrannosaurus, this.stegosaurus, this.apatosaurus, this.triceratops);
            return _loc1_[this.dXY(0, _loc1_.length - 1)];
        }

        protected function randomCarnivore():Species {
            var _loc1_:Array = new Array();
            switch (this.dXY(1, 4)) {
                case 1:
                    _loc1_ = [this.Wolf, this.Dog, this.Fox, this.Coyote, this.PaintedDog];
                    break;
                case 2:
                    _loc1_ = [this.Lion, this.Cheetah, this.Tiger, this.Leopard, this.Cougar, this.Panther];
                    break;
                case 3:
                    _loc1_ = [this.brownBear, this.blackBear, this.polarBear, this.Panda];
                    break;
                default:
                    _loc1_ = [this.whiteDragon, this.blueDragon, this.blackDragon, this.redDragon, this.greenDragon];
            }
            return _loc1_[this.dXY(0, _loc1_.length - 1)];
        }

        protected function randomHerbivore():Species {
            var _loc1_:Array = new Array();
            switch (this.dXY(1, 2)) {
                case 1:
                    _loc1_ = [this.Cattle, this.Deer, this.Goat, this.Horse, this.Donkey, this.Pig];
                    break;
                default:
                    _loc1_ = [this.Rabbit, this.Mouse, this.Rat, this.Squirrel];
            }
            return _loc1_[this.dXY(0, _loc1_.length - 1)];
        }

        protected function randomGender():Gender {
            var _loc1_:Gender = this.Male;
            if (this.optionsMales == this.optionsFemales) {
                if (this.dXY(1, 2) == 1) {
                    _loc1_ = this.Female;
                }
            }
            if (this.optionsMales != this.optionsFemales) {
                if (this.optionsFemales) {
                    _loc1_ = this.Female;
                }
            }
            return _loc1_;
        }

        protected function createNPC(param1:int, param2:Species, param3:Gender):void {
            var _loc4_:NPCs = ObjectUtil.copy(this.defaultNPC) as NPCs;
            _loc4_.species = ObjectUtil.copy(param2) as Species;
            _loc4_.gender = ObjectUtil.copy(param3) as Gender;
            switch (param3) {
                case this.Male:
                    if (param2.mName != null) {
                        _loc4_.species.name = param2.mName;
                    }
                    else {
                        _loc4_.species.name = param2.speciesName;
                    }
                    break;
                default:
                    if (param2.fName != null) {
                        _loc4_.species.name = param2.fName;
                    }
                    else {
                        _loc4_.species.name = param2.speciesName;
                    }
            }
            switch (param1) {
                case 1:
                    this.NPC1 = ObjectUtil.copy(_loc4_) as NPCs;
                    break;
                case 2:
                    this.NPC2 = ObjectUtil.copy(_loc4_) as NPCs;
                    break;
                case 3:
                    this.NPC3 = ObjectUtil.copy(_loc4_) as NPCs;
                    break;
                case 4:
                    this.NPC4 = ObjectUtil.copy(_loc4_) as NPCs;
            }
        }

        protected function randomNPC(param1:int):void {
            this.createNPC(param1, this.randomSpecies(), this.randomGender());
        }

        protected function setEnemy(param1:Enemies):void {
            this.enemy = param1;
            this.enemyt = ObjectUtil.copy(param1) as Enemies;
            if (param1.image != null) {
                this.enemyImageSource = param1.image;
            }
            if (param1.image == null) {
                this.enemyImageSource = this.defaultEnemyImage;
            }
            if (param1.species == null) {
                this.randomEnemyRace("any");
            }
            switch (param1.gender) {
                case this.Male:
                    this.setEnemyGender(this.Male);
                    break;
                case this.Female:
                    this.setEnemyGender(this.Female);
                    break;
                case this.Neutral:
                    this.setEnemyGender(this.Neutral);
                    break;
                default:
                    this.setEnemyGender(this.randomGender());
            }
            this.enemyt.name = ObjectUtil.copy(param1.name) as String;
            this.enemyt.victory = ObjectUtil.copy(param1.victory) as String;
            this.enemyt.description = ObjectUtil.copy(param1.description) as String;
            this.enemyt.introduction = ObjectUtil.copy(param1.introduction) as String;
            this.enemyt.defeat = ObjectUtil.copy(param1.defeat) as String;
            this.enemyt.playerEscape = ObjectUtil.copy(param1.playerEscape) as String;
            this.enemyt.playerEscapeFail = ObjectUtil.copy(param1.playerEscapeFail) as String;
            this.enemyt.grappleEscapeFail = ObjectUtil.copy(param1.grappleEscapeFail) as String;
            this.enemyt.grappleEscapeSucceed = ObjectUtil.copy(param1.grappleEscapeSucceed) as String;
            this.enemyt.itemFound = ObjectUtil.copy(param1.itemFound) as String;
        }

        protected function randomEnemyRace(param1:String):void {
            var _loc2_:Species = null;
            switch (param1) {
                case "carnivore":
                    _loc2_ = this.randomCarnivore();
                    break;
                case "herbivore":
                    _loc2_ = this.randomHerbivore();
                    break;
                default:
                    _loc2_ = this.randomSpecies();
            }
            this.enemyt.species = ObjectUtil.copy(_loc2_) as Species;
        }

        protected function setEnemyGender(param1:Gender):void {
            this.enemyt.gender = ObjectUtil.copy(param1) as Gender;
            switch (param1) {
                case this.Male:
                    if (this.enemyt.species.mName != null) {
                        this.enemyt.species.name = this.enemyt.species.mName;
                    }
                    else {
                        this.enemyt.species.name = this.enemyt.species.speciesName;
                    }
                    break;
                case this.Female:
                    if (this.enemyt.species.fName != null) {
                        this.enemyt.species.name = this.enemyt.species.fName;
                    }
                    else {
                        this.enemyt.species.name = this.enemyt.species.speciesName;
                    }
            }
        }

        protected function backupArray(param1:Array):Array {
            var _loc2_:Array = new Array();
            if (param1 != null) {
                this.i = 0;
                while (this.i < param1.length) {
                    _loc2_.push(param1[this.i]);
                    this.i++;
                }
            }
            return _loc2_;
        }

        protected function trySave():void {
            var saveGame:SharedObject = SharedObject.getLocal("FattyNew");
            this.clearView();
            this.clrBtnTxt();
            this.returnView(12);
            if (saveGame.data.saveGame1) {
                this.btntxt(1, "1 " + saveGame.data.saveGame1["name"] + " Day:" + saveGame.data.saveGame1["day"] + "," + saveGame.data.saveGame1["display hour"] + ":" + saveGame.data.saveGame1["tens minute"] + int(saveGame.data.saveGame1["ones minute"]));
            }
            if (saveGame.data.saveGame2) {
                this.btntxt(2, "2 " + saveGame.data.saveGame2["name"] + " Day:" + saveGame.data.saveGame2["day"] + "," + saveGame.data.saveGame2["display hour"] + ":" + saveGame.data.saveGame2["tens minute"] + int(saveGame.data.saveGame2["ones minute"]));
            }
            if (saveGame.data.saveGame3) {
                this.btntxt(3, "3 " + saveGame.data.saveGame3["name"] + " Day:" + saveGame.data.saveGame3["day"] + "," + saveGame.data.saveGame3["display hour"] + ":" + saveGame.data.saveGame3["tens minute"] + int(saveGame.data.saveGame3["ones minute"]));
            }
            if (saveGame.data.saveGame4) {
                this.btntxt(4, "4 " + saveGame.data.saveGame4["name"] + " Day:" + saveGame.data.saveGame4["day"] + "," + saveGame.data.saveGame4["display hour"] + ":" + saveGame.data.saveGame4["tens minute"] + int(saveGame.data.saveGame4["ones minute"]));
            }
            if (saveGame.data.saveGame5) {
                this.btntxt(5, "5 " + saveGame.data.saveGame5["name"] + " Day:" + saveGame.data.saveGame5["day"] + "," + saveGame.data.saveGame5["display hour"] + ":" + saveGame.data.saveGame5["tens minute"] + int(saveGame.data.saveGame5["ones minute"]));
            }
            if (saveGame.data.saveGame6) {
                this.btntxt(6, "6 " + saveGame.data.saveGame6["name"] + " Day:" + saveGame.data.saveGame6["day"] + "," + saveGame.data.saveGame6["display hour"] + ":" + saveGame.data.saveGame6["tens minute"] + int(saveGame.data.saveGame6["ones minute"]));
            }
            if (saveGame.data.saveGame7) {
                this.btntxt(7, "7 " + saveGame.data.saveGame7["name"] + " Day:" + saveGame.data.saveGame7["day"] + "," + saveGame.data.saveGame7["display hour"] + ":" + saveGame.data.saveGame7["tens minute"] + int(saveGame.data.saveGame7["ones minute"]));
            }
            if (saveGame.data.saveGame8) {
                this.btntxt(8, "8 " + saveGame.data.saveGame8["name"] + " Day:" + saveGame.data.saveGame8["day"] + "," + saveGame.data.saveGame8["display hour"] + ":" + saveGame.data.saveGame8["tens minute"] + int(saveGame.data.saveGame8["ones minute"]));
            }
            if (saveGame.data.saveGame9) {
                this.btntxt(9, "9 " + saveGame.data.saveGame9["name"] + " Day:" + saveGame.data.saveGame9["day"] + "," + saveGame.data.saveGame9["display hour"] + ":" + saveGame.data.saveGame9["tens minute"] + int(saveGame.data.saveGame9["ones minute"]));
            }
            this.scene("Where would you like to save? ", true);
            this.scene("\n\n<i>" + "Your saved games are stored locally on your computer either at: " + "\n(IE/FireFox/Other) - C:/Users/[username]/AppData/Roaming/Macromedia/Flash Player/#SharedObjects/[gibberish]/d.facdn.net/art/noone/1354413528.noone_main.swf/" + "\n\n(Chrome) - C:Users/[username]/AppData/Local/Google/Chrome/User Data/Default/Pepper Data/Shockwave Flash/WritableRoot/#SharedObjects/[gibberish]/d.facdn.net/art/noone/1354413528.noone_main.swf/" + "\n\nInside whichever relevant folder it is, there\'s a file called fattyNew.sol which represents all your saved games. " + "This is a temporary internet file that can and will get deleted any time your temporary internet files get cleaned out. " + "If you would like to make a backup of your save games, copy the fattyNew.sol file and save it somewhere else. " + "To restore your saved games; place a copy of your backup back in whichever folder it came from originally, making sure the file name is still fattyNew.sol. " + "<i>", false);
            this.listen = function ():void {
                switch (btnchc) {
                    case 1:
                        doSave(1);
                        break;
                    case 2:
                        doSave(2);
                        break;
                    case 3:
                        doSave(3);
                        break;
                    case 4:
                        doSave(4);
                        break;
                    case 5:
                        doSave(5);
                        break;
                    case 6:
                        doSave(6);
                        break;
                    case 7:
                        doSave(7);
                        break;
                    case 8:
                        doSave(8);
                        break;
                    case 9:
                        doSave(9);
                        break;
                    default:
                        if (btnchc == 12) {
                            specialEvent = 1;
                            subEvent = "";
                            doEvent(location);
                        }
                }
            };
        }

        protected function tryLoad():void {
            var saveGame:SharedObject = SharedObject.getLocal("FattyNew");
            currentState = "options";
            this.clearView();
            if (saveGame.data.saveGame1) {
                this.btntxt(1, "1 " + saveGame.data.saveGame1["name"] + " Day:" + saveGame.data.saveGame1["day"] + "," + saveGame.data.saveGame1["display hour"] + ":" + saveGame.data.saveGame1["tens minute"] + int(saveGame.data.saveGame1["ones minute"]));
            }
            if (saveGame.data.saveGame2) {
                this.btntxt(2, "2 " + saveGame.data.saveGame2["name"] + " Day:" + saveGame.data.saveGame2["day"] + "," + saveGame.data.saveGame2["display hour"] + ":" + saveGame.data.saveGame2["tens minute"] + int(saveGame.data.saveGame2["ones minute"]));
            }
            if (saveGame.data.saveGame3) {
                this.btntxt(3, "3 " + saveGame.data.saveGame3["name"] + " Day:" + saveGame.data.saveGame3["day"] + "," + saveGame.data.saveGame3["display hour"] + ":" + saveGame.data.saveGame3["tens minute"] + int(saveGame.data.saveGame3["ones minute"]));
            }
            if (saveGame.data.saveGame4) {
                this.btntxt(4, "4 " + saveGame.data.saveGame4["name"] + " Day:" + saveGame.data.saveGame4["day"] + "," + saveGame.data.saveGame4["display hour"] + ":" + saveGame.data.saveGame4["tens minute"] + int(saveGame.data.saveGame4["ones minute"]));
            }
            if (saveGame.data.saveGame5) {
                this.btntxt(5, "5 " + saveGame.data.saveGame5["name"] + " Day:" + saveGame.data.saveGame5["day"] + "," + saveGame.data.saveGame5["display hour"] + ":" + saveGame.data.saveGame5["tens minute"] + int(saveGame.data.saveGame5["ones minute"]));
            }
            if (saveGame.data.saveGame6) {
                this.btntxt(6, "6 " + saveGame.data.saveGame6["name"] + " Day:" + saveGame.data.saveGame6["day"] + "," + saveGame.data.saveGame6["display hour"] + ":" + saveGame.data.saveGame6["tens minute"] + int(saveGame.data.saveGame6["ones minute"]));
            }
            if (saveGame.data.saveGame7) {
                this.btntxt(7, "7 " + saveGame.data.saveGame7["name"] + " Day:" + saveGame.data.saveGame7["day"] + "," + saveGame.data.saveGame7["display hour"] + ":" + saveGame.data.saveGame7["tens minute"] + int(saveGame.data.saveGame7["ones minute"]));
            }
            if (saveGame.data.saveGame8) {
                this.btntxt(8, "8 " + saveGame.data.saveGame8["name"] + " Day:" + saveGame.data.saveGame8["day"] + "," + saveGame.data.saveGame8["display hour"] + ":" + saveGame.data.saveGame8["tens minute"] + int(saveGame.data.saveGame8["ones minute"]));
            }
            if (saveGame.data.saveGame9) {
                this.btntxt(9, "9 " + saveGame.data.saveGame9["name"] + " Day:" + saveGame.data.saveGame9["day"] + "," + saveGame.data.saveGame9["display hour"] + ":" + saveGame.data.saveGame9["tens minute"] + int(saveGame.data.saveGame9["ones minute"]));
            }
            this.miscScene("Which file would you like to load? ", true);
            this.miscScene("\n\n<i>" + "Your saved games are stored locally on your computer either at: " + "\n(IE/FireFox/Other) - C:/Users/[username]/AppData/Roaming/Macromedia/Flash Player/#SharedObjects/[gibberish]/d.facdn.net/art/noone/1354413528.noone_main.swf/" + "\n\n(Chrome) - C:Users/[username]/AppData/Local/Google/Chrome/User Data/Default/Pepper Data/Shockwave Flash/WritableRoot/#SharedObjects/[gibberish]/d.facdn.net/art/noone/1354413528.noone_main.swf/" + "\n\nInside whichever relevant folder it is, there\'s a file called fattyNew.sol which represents all your saved games. " + "This is a temporary internet file that can and will get deleted any time your temporary internet files get cleaned out. " + "If you would like to make a backup of your save games, copy the fattyNew.sol file and save it somewhere else. " + "To restore your saved games; place a copy of your backup back in whichever folder it came from originally, making sure the file name is still fattyNew.sol. " + "<i>", false);
            this.listen = function ():void {
                switch (btnchc) {
                    case 1:
                        doLoad(1);
                        break;
                    case 2:
                        doLoad(2);
                        break;
                    case 3:
                        doLoad(3);
                        break;
                    case 4:
                        doLoad(4);
                        break;
                    case 5:
                        doLoad(5);
                        break;
                    case 6:
                        doLoad(6);
                        break;
                    case 7:
                        doLoad(7);
                        break;
                    case 8:
                        doLoad(8);
                        break;
                    case 9:
                        doLoad(9);
                }
            };
        }

        protected function doSave(param1:int):void {
            var slot:int = param1;
            var saveGame:SharedObject = SharedObject.getLocal("FattyNew");
            var saveArray:Object = new Object();
            this.scene("Your game has been saved. ", true);
            this.nextView();
            this.listen = function ():void {
                if (btnchc == 12) {
                    common.visible = true;
                    specialEvent = 0;
                    subEvent = "";
                    doEvent(location);
                }
            };
            saveArray["locationName"] = this.location.Name;
            saveArray["strength"] = this.bSTR;
            saveArray["speed"] = this.bAGI;
            saveArray["intelligence"] = this.bINT;
            saveArray["stomach"] = this.bSTO;
            saveArray["endurance"] = this.bEND;
            saveArray["health"] = this.HEA;
            saveArray["max health"] = this.bmaxHEA;
            saveArray["MANA"] = this.MANA;
            saveArray["eaten"] = this.Eaten;
            saveArray["drank"] = this.Drank;
            saveArray["Inflated"] = this.Inflated;
            saveArray["InflatedMass"] = this.InflatedMass;
            saveArray["max full"] = this.maxFUL;
            saveArray["stamina"] = this.STA;
            saveArray["calories"] = this.Calories;
            saveArray["fat"] = this.FAT;
            saveArray["name"] = this.playerName;
            saveArray["player species"] = ObjectUtil.copy(this.playerSpecies) as Species;
            saveArray["gender"] = ObjectUtil.copy(this.playerGender) as Gender;
            saveArray["height"] = this.playerHeight;
            saveArray["inventory"] = this.backupArray(this.invArray);
            saveArray["keyInvArray"] = this.backupArray(this.keyInvArray);
            saveArray["max inventory"] = this.maxInv;
            saveArray["gold"] = this.GLD;
            saveArray["storage"] = this.backupArray(this.storageArray);
            saveArray["max storage"] = this.maxStorage;
            saveArray["storage gold"] = this.storageGold;
            saveArray["questArray"] = this.backupArray(this.questArray);
            saveArray["repDairyFarmer"] = this.repDairyFarmer;
            saveArray["repEatingContest"] = this.repEatingContest;
            saveArray["spellArray"] = this.backupArray(this.spellArray);
            saveArray["experience"] = this.XP;
            saveArray["xp to level"] = this.XPtoLevel;
            saveArray["level"] = this.LVL;
            saveArray["level up"] = this.LVLup;
            saveArray["weapon"] = ObjectUtil.copy(this.WEA) as Items;
            saveArray["armor"] = ObjectUtil.copy(this.ARM) as Items;
            saveArray["top"] = ObjectUtil.copy(this.TOP) as Items;
            saveArray["bottom"] = ObjectUtil.copy(this.BTM) as Items;
            saveArray["optionsMetric"] = this.optionsMetric;
            saveArray["optionsImperial"] = this.optionsImperial;
            saveArray["optionsPopping"] = this.optionsPopping;
            saveArray["optionsFemales"] = this.optionsFemales;
            saveArray["optionsMales"] = this.optionsMales;
            saveArray["optionsDescription"] = this.optionsDescription;
            saveArray["stomach stretch"] = this.statusStomachStretch;
            saveArray["stretch fruit"] = this.statusStretchFruit;
            saveArray["statusStretchFruitPower"] = this.statusStretchFruitPower;
            saveArray["statusBeeVenom"] = this.statusBloatVenom;
            saveArray["statusBeeVenomPower"] = this.statusBloatVenomPower;
            saveArray["statusWellFed"] = this.statusWellFed;
            saveArray["statusWellFedPower"] = this.statusWellFedPower;
            saveArray["statusDietPill"] = this.statusDietPill;
            saveArray["statusDietPillPower"] = this.statusDietPillPower;
            saveArray["statusSTRBuff"] = this.statusSTRBuff;
            saveArray["statusSTRBuffPower"] = this.statusSTRBuffPower;
            saveArray["statusINTBuff"] = this.statusINTBuff;
            saveArray["statusINTBuffPower"] = this.statusINTBuffPower;
            saveArray["statusENDBuff"] = this.statusENDBuff;
            saveArray["statusENDBuffPower"] = this.statusENDBuffPower;
            saveArray["statusAGIBuff"] = this.statusAGIBuff;
            saveArray["statusAGIBuffPower"] = this.statusAGIBuffPower;
            saveArray["statusMANABuff"] = this.statusMANABuff;
            saveArray["statusMANABuffPower"] = this.statusMANABuffPower;
            saveArray["statusSTOBuff"] = this.statusSTOBuff;
            saveArray["statusSTOBuffPower"] = this.statusSTOBuffPower;
            saveArray["day"] = this.day;
            saveArray["am pm"] = this.AMPM;
            saveArray["hour"] = this.hour;
            saveArray["display hour"] = this.displayHour;
            saveArray["tens minute"] = this.tensMinute;
            saveArray["ones minute"] = this.onesMinute;
            if (slot == 1) {
                saveGame.data.saveGame1 = saveArray;
            }
            if (slot == 2) {
                saveGame.data.saveGame2 = saveArray;
            }
            if (slot == 3) {
                saveGame.data.saveGame3 = saveArray;
            }
            if (slot == 4) {
                saveGame.data.saveGame4 = saveArray;
            }
            if (slot == 5) {
                saveGame.data.saveGame5 = saveArray;
            }
            if (slot == 6) {
                saveGame.data.saveGame6 = saveArray;
            }
            if (slot == 7) {
                saveGame.data.saveGame7 = saveArray;
            }
            if (slot == 8) {
                saveGame.data.saveGame8 = saveArray;
            }
            if (slot == 9) {
                saveGame.data.saveGame9 = saveArray;
            }
            saveGame.flush();
        }

        protected function doLoad(param1:int):void {
            var slot:int = param1;
            var saveGame:SharedObject = SharedObject.getLocal("FattyNew");
            var saveArray:Object = new Object();
            currentState = "default";
            this.scene("Your game has been loaded. ", true);
            switch (slot) {
                case 1:
                    saveArray = saveGame.data.saveGame1;
                    break;
                case 2:
                    saveArray = saveGame.data.saveGame2;
                    break;
                case 3:
                    saveArray = saveGame.data.saveGame3;
                    break;
                case 4:
                    saveArray = saveGame.data.saveGame4;
                    break;
                case 5:
                    saveArray = saveGame.data.saveGame5;
                    break;
                case 6:
                    saveArray = saveGame.data.saveGame6;
                    break;
                case 7:
                    saveArray = saveGame.data.saveGame7;
                    break;
                case 8:
                    saveArray = saveGame.data.saveGame8;
                    break;
                case 9:
                    saveArray = saveGame.data.saveGame9;
            }
            this.bSTR = saveArray["strength"];
            this.bAGI = saveArray["speed"];
            this.bINT = saveArray["intelligence"];
            this.bSTO = saveArray["stomach"];
            this.bEND = saveArray["endurance"];
            this.HEA = saveArray["health"];
            this.bmaxHEA = saveArray["max health"];
            if (saveArray["MANA"] != null) {
                this.MANA = saveArray["MANA"];
            }
            if (saveArray["MANA"] == null) {
                this.MANA = 0;
            }
            this.Eaten = saveArray["eaten"];
            this.Drank = saveArray["drank"];
            if (saveArray["Inflated"] != null) {
                this.Inflated = saveArray["Inflated"];
            }
            if (saveArray["InflatedMass"] != null) {
                this.InflatedMass = saveArray["InflatedMass"];
            }
            if (saveArray["Inflated"] == null) {
                this.Inflated = 0;
            }
            if (saveArray["InflatedMass"] == null) {
                this.InflatedMass = 0;
            }
            this.maxFUL = saveArray["max full"];
            this.STA = saveArray["stamina"];
            this.Calories = saveArray["calories"];
            this.FAT = saveArray["fat"];
            this.playerName = saveArray["name"];
            this.playerSpecies = ObjectUtil.copy(saveArray["player species"]) as Species;
            var loadedGender:Gender = ObjectUtil.copy(saveArray["gender"]) as Gender;
            switch (loadedGender.name) {
                case this.Male.name:
                    this.playerGender = ObjectUtil.copy(this.Male) as Gender;
                    break;
                default:
                    this.playerGender = ObjectUtil.copy(this.Female) as Gender;
            }
            this.playerHeight = saveArray["height"];
            this.invArray = new Array();
            this.invArray = this.backupArray(saveArray["inventory"]);
            this.keyInvArray = new Array();
            this.keyInvArray = this.backupArray(saveArray["keyInvArray"]);
            this.maxInv = saveArray["max inventory"];
            this.GLD = saveArray["gold"];
            this.questArray = new Array();
            this.questArray = this.backupArray(saveArray["questArray"]);
            if (saveArray["repDairyFarmer"] != null) {
                this.repDairyFarmer = saveArray["repDairyFarmer"];
            }
            if (saveArray["repEatingContest"] != null) {
                this.repEatingContest = saveArray["repEatingContest"];
            }
            this.spellArray = new Array();
            this.spellArray = this.backupArray(saveArray["spellArray"]);
            this.storageArray = new Array();
            this.storageArray = this.backupArray(saveArray["storage"]);
            this.maxStorage = saveArray["max storage"];
            this.storageGold = saveArray["storage gold"];
            this.XP = saveArray["experience"];
            this.XPtoLevel = saveArray["xp to level"];
            this.LVL = saveArray["level"];
            this.LVLup = saveArray["level up"];
            this.WEA = ObjectUtil.copy(saveArray["weapon"]) as Items;
            this.ARM = ObjectUtil.copy(saveArray["armor"]) as Items;
            this.TOP = ObjectUtil.copy(saveArray["top"]) as Items;
            this.BTM = ObjectUtil.copy(saveArray["bottom"]) as Items;
            if (saveArray["optionsMetric"] != null) {
                this.optionsMetric = saveArray["optionsMetric"];
            }
            if (saveArray["optionsImperial"] != null) {
                this.optionsImperial = saveArray["optionsImperial"];
            }
            if (saveArray["optionsMetric"] == null) {
                this.optionsMetric = false;
            }
            if (saveArray["optionsImperial"] == null) {
                this.optionsImperial = true;
            }
            if (saveArray["optionsPopping"] != null) {
                this.optionsPopping = saveArray["optionsPopping"];
            }
            if (saveArray["optionsPopping"] == null) {
                this.optionsPopping = false;
            }
            if (saveArray["optionsDescription"] != null) {
                this.optionsDescription = saveArray["optionsDescription"];
            }
            if (saveArray["optionsDescription"] == null) {
                this.optionsDescription = true;
            }
            if (saveArray["optionsFemales"] != null) {
                this.optionsFemales = saveArray["optionsFemales"];
            }
            if (saveArray["optionsFemales"] == null) {
                this.optionsFemales = true;
            }
            if (saveArray["optionsMales"] != null) {
                this.optionsMales = saveArray["optionsMales"];
            }
            if (saveArray["optionsMales"] == null) {
                this.optionsMales = true;
            }
            this.statusStretchFruit = saveArray["stretch fruit"];
            this.statusStomachStretch = saveArray["stomach stretch"];
            this.statusBloatVenom = saveArray["statusBeeVenom"];
            this.statusWellFed = saveArray["statusWellFed"];
            this.statusStretchFruitPower = saveArray["statusStretchFruitPower"];
            this.statusBloatVenomPower = saveArray["statusBeeVenomPower"];
            this.statusWellFedPower = saveArray["statusWellFedPower"];
            this.statusDietPill = saveArray["statusDietPill"];
            this.statusDietPillPower = saveArray["statusDietPillPower"];
            this.statusSTRBuff = saveArray["statusSTRBuff"];
            this.statusSTRBuffPower = saveArray["statusSTRBuffPower"];
            this.statusINTBuff = saveArray["statusINTBuff"];
            this.statusINTBuffPower = saveArray["statusINTBuffPower"];
            this.statusENDBuff = saveArray["statusENDBuff"];
            this.statusENDBuffPower = saveArray["statusENDBuffPower"];
            this.statusAGIBuff = saveArray["statusAGIBuff"];
            this.statusAGIBuffPower = saveArray["statusAGIBuffPower"];
            this.statusMANABuff = saveArray["statusMANABuff"];
            this.statusMANABuffPower = saveArray["statusMANABuffPower"];
            this.statusSTOBuff = saveArray["statusSTOBuff"];
            this.statusSTOBuffPower = saveArray["statusSTOBuffPower"];
            this.day = saveArray["day"];
            this.AMPM = saveArray["am pm"];
            this.hour = saveArray["hour"];
            this.displayHour = saveArray["display hour"];
            this.tensMinute = saveArray["tens minute"];
            this.onesMinute = saveArray["ones minute"];
            if (this.questCompleted(this.swordQuest)) {
                this.removeItem(this.swordMap);
                this.removeItem(this.magicalObsidian);
            }
            if (this.questCompleted(this.spearQuest)) {
                this.removeItem(this.spearMap);
                this.removeItem(this.whiteGoldChunk);
            }
            if (this.questCompleted(this.hammerQuest)) {
                this.removeItem(this.hammerMap);
                this.removeItem(this.fallenStar);
            }
            if (this.hasQuest(this.cabalRogue) && !this.questCompleted(this.cabalRogue) && !this.itemOwned(this.cabalMap)) {
                this.getItem(this.cabalMap);
            }
            var savedLocationName:String = saveArray["locationName"];
            switch (savedLocationName) {
                case this.WestTownInn.Name:
                    this.locationUpdate(this.WestTownInn);
                    break;
                case this.DinosaurInn.Name:
                    this.locationUpdate(this.DinosaurInn);
                    break;
                default:
                    this.locationUpdate(this.YourHouse);
            }
            this.nextView();
            this.listen = function ():void {
                if (btnchc == 12) {
                    newGame = false;
                    common.visible = true;
                    specialEvent = 0;
                    scene("", true);
                    doEvent(location);
                }
            };
        }

        protected function dayTime():Boolean {
            if (this.hour >= 21 || this.hour <= 5) {
                return false;
            }
            return true;
        }

        protected function saySun():String {
            if (this.dayTime()) {
                return "sun";
            }
            return "moon";
        }

        protected function timeOfDay():String {
            var _loc1_:String = null;
            switch (this.hour) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 21:
                case 22:
                case 23:
                    _loc1_ = "night";
                    break;
                case 6:
                case 7:
                case 8:
                case 9:
                    _loc1_ = "morning";
                    break;
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                    _loc1_ = "day";
                    break;
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                    _loc1_ = "evening";
            }
            return _loc1_;
        }

        protected function doTime(param1:Number):void {
            this.doDigest(param1);
            this.eventTime(param1);
            this.onesMinute = this.onesMinute + param1;
            while (this.onesMinute > 9) {
                this.tensMinute = this.tensMinute + 1;
                this.onesMinute = this.onesMinute - 10;
                if (this.tmagicREGENbuff > 0) {
                    this.doHealth(this.xdx(this.tmagicREGENbuffDamage, this.tmagicREGENbuffRange) + this.INT * 0.4);
                    this.tmagicREGENbuff--;
                    if (this.tmagicREGENbuff <= 0) {
                        this.tmagicREGENbuff = 0;
                        this.tmagicREGENbuffDamage = 0;
                        this.tmagicREGENbuffRange = 0;
                    }
                }
            }
            while (this.tensMinute > 5) {
                this.hour = this.hour + 1;
                this.tensMinute = this.tensMinute - 6;
                this.updateBackground();
            }
            while (this.hour > 23) {
                this.day = this.day + 1;
                this.hour = this.hour - 24;
                if (this.hasQuest(this.washedDishes)) {
                    this.questRemove(this.washedDishes);
                }
                if (this.hasQuest(this.cookedFood)) {
                    this.questRemove(this.cookedFood);
                }
                if (this.hasQuest(this.smithedArmor)) {
                    this.questRemove(this.smithedArmor);
                }
            }
            this.displayHour = this.hour;
            while (this.displayHour > 12) {
                this.displayHour = this.displayHour - 12;
            }
            if (this.displayHour == 0) {
                this.displayHour = 12;
            }
            this.AMPM = this.hour <= 11 ? "AM" : "PM";
        }

        protected function eventTime(param1:int):void {
            if (this.FUL > 100) {
                this.statusStomachStretch = this.statusStomachStretch + param1;
                if (this.statusStomachStretch >= 120) {
                    this.scene("\n<i>You\'ve spent so much time being full that your stomach has stretched out.</i> ", false);
                    this.chgStats(0, 0, 0, 0, 1);
                    this.statusStomachStretch = this.statusStomachStretch - 500;
                }
            }
            if (this.statusWellFed > 0) {
                this.statusWellFed = this.statusWellFed - param1;
                if (this.statusWellFed <= 0) {
                    this.statusWellFedPower = 0;
                    this.statusWellFed = 0;
                }
            }
            if (this.statusDietPillPower > 0) {
                this.statusDietPill = this.statusDietPill - param1;
                if (this.statusDietPill <= 0) {
                    this.FAT = this.FAT + this.statusDietPillPower;
                    if (this.statusDietPillPower > 0) {
                        this.scene("\n<i>Your stomach lets out a very audible \'glorp!\' and you\'re forced to stop still, puffing out your cheeks from a sudden sense of fullness. " + "With a groan your torso bloats outwards, as if you’ve been walking around all this time with your stomach sucked in.</i> ", false);
                        this.fixFull();
                        this.scene("<i>Within moments you’re left as big as you ever were, and no longer walking on air.</i> ", false);
                    }
                    this.statusDietPillPower = 0;
                    this.statusDietPill = 0;
                }
            }
            if (this.statusStretchFruit > 0) {
                this.statusStretchFruit = this.statusStretchFruit - param1;
                if (this.statusStretchFruit <= 0) {
                    this.scene("\n<i>Whatever was making your stomach so stretchy seems to be wearing off.</i> ", false);
                    this.statusStretchFruitPower = 0;
                    this.statusStretchFruit = 0;
                    this.updateStats();
                    if (this.FUL > this.maxFUL) {
                        if (this.maximumFullness() < this.ATE && this.ATE - this.maximumFullness() < 30) {
                            this.statusStretchFruitPower = this.ATE - this.maximumFullness();
                        }
                        if (this.maximumFullness() < this.ATE && this.ATE - this.maximumFullness() > 30) {
                            this.statusStretchFruitPower = 30;
                        }
                        this.statusStretchFruit = 40;
                        this.updateStats();
                        if (this.eventText.htmlText.match("Fortunately the shrinking eventually stops before you explode") == null) {
                            this.scene("\n\tYou hear an ominous gurgling sound emanating from your stomach. " + "You look down as you\'re struck by the all too familiar sensation of growing fuller and fuller. " + "You quickly realize that the stomach rubberizing effects are wearing off in spite of you exceeding your normal limits. " + "Fortunately the shrinking eventually stops before you explode, although you\'re stomach is still stretched to its absolute limit. " + "It seems the effects haven\'t completely worn off... yet. ", false);
                        }
                    }
                }
            }
            if (this.statusSTOBuff > 0) {
                this.statusSTOBuff = this.statusSTOBuff - param1;
                if (this.statusSTOBuff <= 0) {
                    if (this.statusSTOBuffPower > 0) {
                        this.scene("<i>You suddenly feel less hungry.</i> ", false);
                    }
                    if (this.statusSTOBuffPower < 0) {
                        this.scene("<i>You suddenly feel more hungry.</i> ", false);
                    }
                    this.statusSTOBuff = 0;
                    this.statusSTOBuffPower = 0;
                    this.updateStats();
                    if (this.FUL > this.maxFUL) {
                        if (this.maximumFullness() < this.ATE && this.ATE - this.maximumFullness() < 30) {
                            this.statusSTOBuffPower = this.ATE - this.maximumFullness();
                        }
                        if (this.maximumFullness() < this.ATE && this.ATE - this.maximumFullness() > 30) {
                            this.statusSTOBuffPower = 30;
                        }
                        this.statusSTOBuff = 40;
                        this.updateStats();
                        if (this.eventText.htmlText.match("Fortunately the shrinking eventually stops before you explode") == null) {
                            this.scene("\n\tYou hear an ominous gurgling sound emanating from your stomach. " + "You look down as you\'re struck by the all too familiar sensation of growing fuller and fuller. " + "You quickly realize that the powers affecting your stomach are wearing off in spite of you exceeding your normal limits. " + "Fortunately the shrinking eventually stops before you explode, although you\'re stomach is still stretched to its absolute limit. " + "It seems the effects haven\'t completely worn off... yet. ", false);
                        }
                    }
                }
            }
            if (this.statusBloatVenomPower > 0) {
                this.statusBloatVenom = this.statusBloatVenom + param1;
                if (this.statusBloatVenom >= 30) {
                    if (this.ATE + this.statusBloatVenomPower < this.maximumFullness() + 1) {
                        this.doInflate(this.statusBloatVenomPower, 0);
                        this.statusBloatVenomPower = this.statusBloatVenomPower - 0.5;
                        this.statusBloatVenom = this.statusBloatVenom % 30;
                        if (this.eventText.htmlText.match("You suddenly feel slightly more full due to the bloat venom") == null) {
                            this.scene("<i>You suddenly feel slightly more full due to the bloat venom</i> ", false);
                        }
                        if (this.statusBloatVenomPower <= 0) {
                            this.statusBloatVenomPower = 0;
                            this.statusBloatVenom = 0;
                            this.scene("<i>Fortunately, your head no longer feels fuzzy and it seems you\'re finally over the effect\'s of the bloat venom</i> ", false);
                        }
                    }
                    else {
                        this.doInflate(this.remainingCapacity(), 0);
                        this.statusBloatVenomPower = this.statusBloatVenomPower - 0.5;
                        this.statusBloatVenom = this.statusBloatVenom % 30;
                        if (this.eventText.htmlText.match("Your stomach creaks ominously as it grows ever more distended from the venom coursing through your veins. ") == null) {
                            this.scene("Your stomach creaks ominously as it grows ever more distended from the venom coursing through your veins. " + "Your stomach is stretched to the absolute bursting point and it\'s a miracle it hasn\'t exploded already. ", false);
                        }
                    }
                }
            }
            if (this.statusPoisonPower > 0) {
                this.statusPoison = this.statusPoison + param1;
                if (this.statusPoison > 15) {
                    this.doHealth(-this.statusPoisonPower);
                    this.statusPoison = this.statusPoison % 15;
                    this.statusPoisonPower = this.statusPoisonPower - 3;
                    if (this.statusPoisonPower <= 0) {
                        this.statusPoisonPower = 0;
                        this.statusPoison = 0;
                    }
                    if (this.HEA <= 0) {
                        this.setEnemy(this.RoyalGuardWasp);
                        this.enemyt.name = "poison";
                        this.scene("You stumble and fall to your knees as the poison coursing through your veins overpowers the last of your strength. " + "You fall down and wince in pain as the world slowly goes dark. ", false);
                        this.defeatEvent(this.battle);
                    }
                }
            }
            if (this.statusSTRBuff > 0) {
                this.statusSTRBuff = this.statusSTRBuff - param1;
                if (this.statusSTRBuff <= 0) {
                    if (this.statusSTRBuffPower > 0) {
                        this.scene("<i>You no longer feel as strong.</i> ", false);
                    }
                    if (this.statusSTRBuffPower < 0) {
                        this.scene("<i>You no longer feel as weak!</i> ", false);
                    }
                    this.statusSTRBuff = 0;
                    this.statusSTRBuffPower = 0;
                }
            }
            if (this.statusAGIBuff > 0) {
                this.statusAGIBuff = this.statusAGIBuff - param1;
                if (this.statusAGIBuff <= 0) {
                    if (this.statusAGIBuffPower > 0) {
                        this.scene("<i>You no longer feel as fast.</i> ", false);
                    }
                    if (this.statusAGIBuffPower < 0) {
                        this.scene("<i>You no longer feel as slow!</i> ", false);
                    }
                    this.statusAGIBuff = 0;
                    this.statusAGIBuffPower = 0;
                }
            }
            if (this.statusINTBuff > 0) {
                this.statusINTBuff = this.statusINTBuff - param1;
                if (this.statusINTBuff <= 0) {
                    if (this.statusINTBuffPower > 0) {
                        this.scene("<i>You no longer feel as smart.</i> ", false);
                    }
                    if (this.statusINTBuffPower < 0) {
                        this.scene("<i>You no longer feel as stupid!</i> ", false);
                    }
                    this.statusINTBuff = 0;
                    this.statusINTBuffPower = 0;
                }
            }
            if (this.statusENDBuff > 0) {
                this.statusENDBuff = this.statusENDBuff - param1;
                if (this.statusENDBuff <= 0) {
                    if (this.statusENDBuffPower > 0) {
                        this.scene("<i>You no longer feel as tough.</i> ", false);
                    }
                    if (this.statusENDBuffPower < 0) {
                        this.scene("<i>You no longer feel as sickly!</i> ", false);
                    }
                    this.statusENDBuff = 0;
                    this.statusENDBuffPower = 0;
                }
            }
            if (this.statusMANABuff > 0) {
                this.statusMANABuff = this.statusMANABuff - param1;
                if (this.statusMANABuff <= 0) {
                    if (this.statusMANABuffPower > 0) {
                        this.scene("<i>You no longer feel as empowered.</i> ", false);
                    }
                    if (this.statusMANABuffPower < 0) {
                        this.scene("<i>You no longer feel as disempowered!</i> ", false);
                    }
                    this.statusMANABuff = 0;
                    this.statusMANABuffPower = 0;
                }
            }
        }

        protected function staminaCost(param1:Number):Number {
            return param1 * Math.pow(0.8, this.END / 40);
        }

        protected function doStamina(param1:Number):void {
            if (param1 > 0) {
                this.doArrow("STAup");
                this.STA = this.STA + param1;
            }
            if (param1 < 0) {
                this.doArrow("STAdown");
                this.STA = this.STA + param1 * Math.pow(0.8, this.END / 40);
            }
            if (this.STA < 0) {
                this.STA = 0;
            }
            if (this.STA > 100) {
                this.STA = 100;
            }
        }

        protected function doWalk(param1:Number):void {
            var _loc2_:Number = (this.ATE / 2 + this.FAT / 5) / this.STR;
            var _loc3_:Number = this.AGI / 40 - _loc2_;
            if (_loc2_ > 20) {
                _loc2_ = 20;
            }
            this.doStamina(-param1 * Math.pow(1.25, _loc2_));
            if (_loc3_ < -20) {
                _loc3_ = -20;
            }
            if (_loc3_ > 20) {
                _loc3_ = 20;
            }
            var _loc4_:Number = param1 * Math.pow(0.8, _loc3_);
            if (_loc4_ <= 1) {
                _loc4_ = 1;
            }
            this.doTime(_loc4_);
        }

        protected function doDigest(param1:Number):void {
            var _loc2_:Number = NaN;
            var _loc3_:Number = NaN;
            var _loc4_:Number = NaN;
            var _loc5_:int = 0;
            var _loc7_:Number = NaN;
            this.fixFull();
            _loc2_ = this.ATE;
            _loc3_ = this.FAT;
            _loc4_ = this.STO * 0.75 / 1440;
            if (this.Eaten < this.Drank) {
                _loc5_ = this.Eaten / this.Drank;
                this.Eaten = this.Eaten - param1 * _loc4_ * _loc5_;
                this.Drank = this.Drank - param1 * _loc4_ * (1 - _loc5_);
            }
            else if (this.Eaten > this.Drank) {
                _loc5_ = this.Drank / this.Eaten;
                this.Eaten = this.Eaten - param1 * _loc4_ * (1 - _loc5_);
                this.Drank = this.Drank - param1 * _loc4_ * _loc5_;
            }
            else if (this.Eaten == this.Drank) {
                this.Eaten = this.Eaten - param1 * _loc4_ * 0.5;
                this.Drank = this.Drank - param1 * _loc4_ * 0.5;
            }
            var _loc6_:Number = param1 * 0.1;
            _loc7_ = this.Inflated;
            this.Inflated = this.Inflated - _loc6_;
            if (this.Inflated <= 0) {
                this.Inflated = 0;
                this.InflatedMass = 0;
            }
            if (_loc7_ != 0) {
                this.InflatedMass = this.InflatedMass * (this.Inflated / _loc7_);
            }
            if (this.Eaten <= 0) {
                this.Eaten = 0;
            }
            if (this.Drank <= 0) {
                this.Drank = 0;
            }
            this.doArrow("FULdown");
            this.updateStats();
            this.doFat(-0.004 * param1);
            var _loc8_:Number = this.MANA;
            this.doMana(this.maxMANA * 0.00417 * param1);
            this.FAT = this.FAT - (this.MANA - _loc8_) * 0.25;
            _loc2_ = (_loc2_ - this.ATE) / _loc2_;
            if (_loc2_ > 0) {
                this.doWeight(_loc2_);
            }
            if (_loc3_ < this.FAT) {
                this.doArrow("FATup");
            }
            if (_loc3_ > this.FAT) {
                this.doArrow("FATdown");
            }
            if (this.FAT <= 0) {
                this.FAT = 0;
            }
            if (this.Calories <= 0) {
                this.Calories = 0;
            }
        }

        protected function doWeight(param1:Number):void {
            var _loc2_:Number = NaN;
            _loc2_ = param1 * this.Calories;
            this.Calories = this.Calories - _loc2_;
            this.doFat(_loc2_);
        }

        protected function doConsume(param1:Number, param2:Number, param3:Number):void {
            this.Eaten = this.Eaten + param1;
            this.Drank = this.Drank + param2;
            this.Calories = this.Calories + param3;
            this.updateStats();
            if (this.maxFUL - this.FUL < 10 && this.eventText.htmlText.match("You feel like you\'ll explode if you get any fuller") == null) {
                this.scene("<i>(You feel like you\'ll explode if you get any fuller.)</i> ", false);
            }
            if (this.maxFUL - this.FUL < 20 && this.maxFUL - this.FUL >= 10 && this.eventText.htmlText.match("Your stomach feels painfully distended") == null) {
                this.scene("<i>(Your stomach feels painfully distended.)</i> ", false);
            }
            if (this.maxFUL - this.FUL > 20 && this.FUL > 100 && this.eventText.htmlText.match("You\'re so full it hurts") == null) {
                this.scene("<i>(You\'re so full it hurts.)</i> ", false);
            }
            if (param1 + param2 > 0) {
                this.doArrow("FULup");
            }
            if (param1 + param2 < 0) {
                this.doArrow("FULdown");
            }
        }

        protected function doConsumeQuiet(param1:Number, param2:Number, param3:Number):void {
            this.Eaten = this.Eaten + param1;
            this.Drank = this.Drank + param2;
            this.Calories = this.Calories + param3;
            this.updateStats();
            if (param1 + param2 > 0) {
                this.doArrow("FULup");
            }
            if (param1 + param2 < 0) {
                this.doArrow("FULdown");
            }
        }

        protected function doInflate(param1:Number, param2:Number):void {
            this.Inflated = this.Inflated + param1;
            this.InflatedMass = this.InflatedMass + param2;
            this.updateStats();
            if (this.maxFUL - this.FUL < 10 && this.eventText.htmlText.match("You feel like you\'ll explode if you get any fuller") == null) {
                this.scene("<i>(You feel like you\'ll explode if you get any fuller.)</i> ", false);
            }
            if (this.maxFUL - this.FUL < 20 && this.maxFUL - this.FUL >= 10 && this.eventText.htmlText.match("Your stomach feels painfully distended") == null) {
                this.scene("<i>(Your stomach feels painfully distended.)</i> ", false);
            }
            if (this.maxFUL - this.FUL > 20 && this.FUL > 100 && this.eventText.htmlText.match("You\'re so full it hurts") == null) {
                this.scene("<i>(You\'re so full it hurts.)</i> ", false);
            }
            if (param1 > 0) {
                this.doArrow("FULup");
            }
            if (param1 < 0) {
                this.doArrow("FULdown");
            }
        }

        protected function doUseItem(param1:Items):void {
            var _loc2_:int = 0;
            var _loc3_:int = 0;
            var _loc4_:Items = null;
            var _loc5_:Items = null;
            var _loc6_:Items = null;
            var _loc7_:Items = null;
            var _loc8_:int = 0;
            var _loc9_:int = 0;
            var _loc10_:Items = null;
            if (currentState != "combatInventory") {
                this.scene("", true);
            }
            if (currentState == "combatInventory") {
                this.combatDialogue();
                this.scene("<li><b>Item</b></li>", false);
            }
            if (param1.Heal != 0) {
                this.doHealth(param1.Heal);
            }
            if (param1.Mana != 0) {
                this.doMana(param1.Mana);
            }
            if (param1.Stamina != 0) {
                this.doStamina(param1.Stamina);
            }
            if (param1.eat != 0 || param1.drink != 0) {
                this.doConsume(param1.eat, param1.drink, param1.Calories);
            }
            switch (param1.itemUse) {
                case "You used the item! ":
                    if (param1.Food == true) {
                        this.scene("You ate the " + param1.Name + "! ", false);
                    }
                    if (param1.Drink == true) {
                        this.scene("You drank the " + param1.Name + "! ", false);
                    }
                    if (param1.Weapon == true || param1.Armor == true || param1.Top == true || param1.Bottom == true) {
                        this.scene("You equipped the " + param1.Name + "! ", false);
                    }
                    break;
                default:
                    switch (param1.eat > 0 || param1.drink > 0) {
                        case true:
                            if (!this.alive() && !this.inCombat()) {
                                switch (param1.overfilled) {
                                    case "":
                                        this.scene("\n\tYou force yourself to swallow the " + param1.Name + " down and swiftly realize it was more than your stomach can handle. " + "As your stomach stretches out, you\'re overwhelmed by the sensation of vast overindulgence and collapse to the ground in a bloated stupor. ", false);
                                        break;
                                    default:
                                        this.scene("\n\t" + param1.overfilled, false);
                                }
                            }
                            else {
                                this.scene(param1.itemUse, false);
                            }
                            break;
                        default:
                            this.scene(param1.itemUse, false);
                    }
            }
            if (param1.Status == true) {
                switch (param1.Name) {
                    case this.WeirdBerry.Name:
                        this.doConsume(5, 1, 6);
                        switch (this.alive()) {
                            case true:
                                switch (this.dXY(1, 2) == 1) {
                                    case true:
                                        this.scene("\n\tAfter a few more gulps, you finish off the berry and lick the juice off of your fingers and around your mouth. " + "Your stomach begins to gurgle loudly as you feel a small uncomfortable pain in your midsection. " + "You begin to realize that you probably shouldn\'t eat every little thing you find like a devolved glutton. " + "You press a hand onto your aching belly and slowly rub it, trying to relieve the stress. " + "But as you rub it, you can feel it slowly growing under your hand. That berry was poisonous! ", false);
                                        this.doHealth(-25);
                                        if (this.HEA < 1) {
                                            this.HEA = 1;
                                        }
                                        this.doStamina(-20);
                                        this.statusBloatVenomPower = 40;
                                        break;
                                    case false:
                                        this.scene("\n\tAfter a few more gulps, you finish off the berry and lick the juice off of your fingers and around your mouth. Your stomach gurgles a little before it settles back down. " + "You breath a sigh of relief, almost thinking for a second back there, you might have eaten a poisonous berry or something! ", false);
                                        this.doHealth(25);
                                }
                                break;
                            case false:
                                this.scene(param1.overfilled, false);
                                switch (this.optionsPopping) {
                                    case true:
                                        this.scene("As your stomach continues to swell in your hands, you can\'t help but feel lightheaded. " + "Your stomach begins to creak as slowly, slowly, it grows bigger and bigger. Before you know it, there was a loud POP, and you blackout. ", false);
                                        break;
                                    case false:
                                        this.scene("As your stomach continues to grow more and more, your vision begins to become clouded and hazy. The pain becomes too much for you as you fall into a dark slumber. ", false);
                                }
                                this.defeatEvent(this.overeating);
                        }
                        break;
                    case this.dietPill.Name:
                        if (this.statusDietPillPower > 0) {
                            this.scene("You eagerly pop another large blue pill and put your hands to your stomach. " + "Apart from a quiver and slight gurgling sound you don’t get any thinner, but at least you’re keeping the weight off. ", false);
                            this.statusDietPill = param1.StatusTime;
                        }
                        if (this.statusDietPillPower <= 0) {
                            _loc2_ = 50;
                            if (_loc2_ > this.FAT) {
                                _loc2_ = this.FAT;
                            }
                            this.scene("You regard the pill laying in your " + this.fatness() + " palm rather nervously, then clap your hand to your open mouth and gulp. Hmm, kind of minty. " + "The pill slips down your throat and hits your stomach. Almost at once you feel a funny gurgle in your middle, ", false);
                            switch (_loc2_ > 5) {
                                case true:
                                    this.scene("and look down in time to see your " + this.fatness() + " stomach shrinking! You put your hands to your middle and feel it melting away, along with some of the girth around your sides and rear. " + "A few moments later the funny feeling stops, but it feels like you’ve dropped a whole ", false);
                                    if (this.playerGender.name == this.Male.name) {
                                        this.scene("shirt", false);
                                    }
                                    if (this.playerGender.name == this.Female.name) {
                                        this.scene("dress", false);
                                    }
                                    this.scene(" size without even breaking a sweat. ", false);
                                    break;
                                default:
                                    this.scene("but you don\'t notice a huge change in your weight as you barely had any fat in the first place. ", false);
                            }
                            this.statusDietPillPower = _loc2_;
                            this.FAT = this.FAT - _loc2_;
                            this.statusDietPill = param1.StatusTime;
                        }
                        break;
                    case this.StretchySeaweed.Name:
                        if (this.statusStretchFruit > 0) {
                            this.scene("You feel the stretching effects on your stomach renew. ", false);
                        }
                        if (this.statusStretchFruit <= 0) {
                            this.scene("You stomach gives an odd gurgle, rather like running water, and you put your " + this.playerSpecies.hands + " against it nervously. " + "It gives another sloshy rumble, and the " + this.playerSpecies.fur + " of your torso stretches slightly. You suddenly feel like you could stomach a whole lot more food. ", false);
                        }
                        this.statusStretchFruitPower = 50;
                        this.statusStretchFruit = param1.StatusTime;
                        break;
                    case "stretchy fruit":
                        if (this.statusStretchFruit > 0) {
                            this.scene("You feel the stretching effects on your stomach renew. ", false);
                        }
                        if (this.statusStretchFruit <= 0) {
                            this.scene("You feel like you could eat a lot more food. ", false);
                        }
                        this.statusStretchFruitPower = 30;
                        this.statusStretchFruit = param1.StatusTime;
                        break;
                    case this.MagicalHoney.Name:
                        if (this.statusSTRBuffPower < 10) {
                            this.scene("You feel surprisingly stronger. ", false);
                            this.statusSTRBuff = param1.StatusTime;
                            this.statusSTRBuffPower = 10;
                        }
                        else {
                            this.scene("It\'s effects don\'t seem powerful enough to overcome whatever\'s already affecting you. ", false);
                        }
                        break;
                    case this.LargeWyvernEgg.Name:
                        if (this.statusENDBuffPower < 10) {
                            this.scene("You feel surprisingly tougher. ", false);
                            this.statusENDBuff = param1.StatusTime;
                            this.statusENDBuffPower = 10;
                        }
                        else {
                            this.scene("It\'s effects don\'t seem powerful enough to overcome whatever\'s already affecting you. ", false);
                        }
                }
            }
            if (param1.Weapon == true) {
                if (this.WEA.Name != "fists") {
                    this.getItem(this.WEA);
                }
                this.WEA = ObjectUtil.copy(param1) as Items;
            }
            if (param1.Armor == true) {
                if (this.ARM.Name != "unarmored") {
                    this.getItem(this.ARM);
                }
                this.ARM = ObjectUtil.copy(param1) as Items;
            }
            if (param1.Top == true) {
                if (param1.Expand <= this.waistDiameter() && param1.Expand > 0) {
                    this.scene(param1.Toosmall, true);
                    this.getItem(param1);
                }
                else {
                    if (this.TOP.Name != "naked chest") {
                        this.getItem(this.TOP);
                    }
                    this.TOP = ObjectUtil.copy(param1) as Items;
                }
            }
            if (param1.Bottom == true) {
                if (param1.Expand <= this.waistDiameter() && param1.Expand > 0) {
                    this.scene(param1.Toosmall, true);
                    this.getItem(param1);
                }
                else {
                    if (this.BTM.Name != "naked legs") {
                        this.getItem(this.BTM);
                    }
                    this.BTM = ObjectUtil.copy(param1) as Items;
                }
            }
            if (param1.Special == true) {
                switch (param1.Name) {
                    case this.antidotePotion.Name:
                        this.rmvTempBuffs();
                        this.rmvTempStats();
                        if (this.FUL > this.maxFUL) {
                            this.scene("Unfortunately, you feel your stomach returning to normal as well, and with as full as you are this proves to be very dangerous indeed. " + "As you feel your stomach stretch tighter and tighter around it\'s contents, you find it harder and harder to stay concious as you\'re overwhelmed by fullness. ", false);
                            this.defeatEvent(this.overeating);
                        }
                        break;
                    case this.RoyalJelly.Name:
                        this.chgStats(5, 0, 0, 0, 0);
                        break;
                    case this.OddCookie.Name:
                        _loc3_ = this.dXY(1, 11);
                        if (_loc3_ <= 8) {
                            this.scene("\tYou bite into the cookie, which tastes sweet but earthy, not unlike oatmeal. As it settles in your stomach you feel it gurgle in response. ", true);
                            if (this.ATE > 0) {
                                this.doDigest(480);
                                this.scene("You feel the pressure in your stomach lesson, as your metabolism goes to work digesting the contents of your stomach with new vigor. As it finishes you feel " + this.hungry() + ". ", false);
                            }
                            else {
                                this.doDigest(480);
                                this.scene("You don\'t feel any other effects though, aside from the fact that you somehow feel even more starved than before. ", false);
                            }
                        }
                        else if (_loc3_ <= 11) {
                            this.doConsume(20, 0, 13);
                            this.scene("\tYou bite into the cookie, which tastes sweet like molasses and cinnamon. As it settles in your stomach, you begin to feel... a bit funny. " + "You let loose a full and heavy belch, suddenly realising you\'re feeling a bit stuffed, " + "then realize that your stomach feels like it\'s expanding, and look on to see that indeed, it is filling out like a balloon. Whatever was in that cookie seems to be growing! " + "Within a few minutes your girth grows, your stomach sticking out " + this.sayDistance(this.waistDiameter()) + " before it settles with a final gurgle. ", true);
                            if (this.FUL > this.maxFUL && this.HEA <= 0 && currentState != "combatInventory" && currentState != "combat") {
                                this.scene("As your stomach stretches out, you\'re overwhelmed by the sensation of vast overindulgence and collapse to the ground in a bloated stupor. ", false);
                                this.defeatEvent(this.overeating);
                            }
                        }
                        else if (_loc3_ > 11) {
                            this.FAT = this.FAT + 30;
                            this.scene("\tYou bite into the cookie, the flavor surprisingly meaty for something covered in frosting. As it hits your stomach you feel a warm and tingly sensation throughout your body. " + "You murmur in pleasure for a moment, before realising that you\'re feeling a bit heavier, and watch in shock as suddenly you begin swelling up, " + "though you feel no fuller then you did a moment before. Like a water balloon, your arms, legs and belly swell with jiggling fat, leaving a much larger " + this.playerSpecies.name + " in it\'s wake. " + "By the time you stop expanding you are " + this.sayWeight(this.weight()) + ". ", true);
                        }
                        break;
                    case this.VoidOnyx.Name:
                        this.Eaten = 0;
                        this.Drank = 0;
                        this.Inflated = 0;
                        this.InflatedMass = 0;
                        this.Calories = 0;
                        this.FAT = this.FAT * 0.9;
                        break;
                    case this.AeroPearl.Name:
                        this.doInflate(60, -100);
                        if (this.HEA > 0 && this.weight() > 0) {
                            this.scene("and decide that there’s nothing more you can do about it till it finishes its work, " + "sitting down and petting your expanding middle, lifting it up and placing it on your legs so it doesn’t push them apart too far. " + "Gradually, you feel it come to a stop, and your mouth abruptly unblocks itself, snapping open and letting out a burp that brings the now-inert pearl up with it. " + "You spit it into your hand and look at it before tossing it out, having obviously used up any value it had. " + "As you stand, you give your gut a few inquisitive prods. You feel like it’s been permanently slightly stretched by the ordeal. ", false);
                            this.chgStats(0, 0, 0, 0, 1.5);
                        }
                        else {
                            this.scene("and you fall onto your rear rather lightly, before the gas within you starts to lift you off the ground. " + "You wiggle helplessly as you continue to bloat, floating away in the wind as some onlookers gaze on. " + "You rise higher and higher into the sky, and the thinning air begins to make your head spin, before it all becomes too much and you pass out. ", false);
                            this.inflateToFloating();
                            this.defeatEvent(this.floating);
                        }
                        break;
                    case this.DenseTopaz.Name:
                        this.doConsume(100, 0, 50);
                        if (this.HEA > 0) {
                            this.scene("filling them out with a little more weight as well, before splinters of the energy go down your arms and legs, swelling them as they go along. " + "As the power wanes from the gem, you look down at yourself, your stomach feeling very stretched and decidedly wider and heftier than before. ", false);
                            if (this.FAT * 0.05 > 100) {
                                this.FAT = this.FAT + 100;
                            }
                            else {
                                this.FAT = this.FAT * 1.05;
                            }
                        }
                        else {
                            this.scene("but you’re more concerned with the increasing warmth and pressure in your middle. You’re starting to feel a bit unwell, and to your concern, you can’t uncurl your hand from the gem. " + "As the warmth continues to grow, you begin to feel a bit dopey. " + "Once your weight becomes too much to handle, you can’t help but flop onto your back, and you feel the gem fizzle out of power and drop from your grasp as you lose consciousness. ", false);
                            this.defeatEvent(this.overeating);
                        }
                        break;
                    case this.SpectrumGem.Name:
                        this.chgStats(this.dXY(1, 2), this.dXY(1, 2), this.dXY(1, 2), this.dXY(1, 2), this.dXY(1, 2));
                        break;
                    case this.BookOfCrystals.Name:
                        switch (this.itemOwned(this.UnidentifiedGem)) {
                            case true:
                                this.scene("You take out one of the gems you found and open the book, flicking to the back pages. " + "You leaf through them until you find what you think is a match. After double checking it a few times, you find it’s ", false);
                                _loc5_ = this.Coconut;
                                this.chance = this.d100();
                                if (this.chance > 95) {
                                    _loc5_ = this.SpectrumGem;
                                }
                                else if (this.chance > 85) {
                                    _loc5_ = this.DenseTopaz;
                                }
                                else if (this.chance > 65) {
                                    _loc5_ = this.AeroPearl;
                                }
                                else if (this.chance > 35) {
                                    _loc5_ = this.VoidOnyx;
                                }
                                this.scene(_loc5_.article + " " + _loc5_.Name + "! ", false);
                                if (_loc5_ == this.Coconut) {
                                    this.scene("You really think you should\'ve noticed it was a coconut earlier, but it is a very nice coconut. ", false);
                                }
                                this.expendItem(this.invArray[this.itemFind(this.UnidentifiedGem)]);
                                _loc6_ = ObjectUtil.copy(_loc5_) as Items;
                                this.invArray.push(_loc6_);
                                break;
                            case false:
                                this.scene("You have no gems to identify. ", false);
                        }
                        break;
                    case this.SnakeVenom.Name:
                        this.doConsume(0, 40, 20);
                        if (this.HEA > 0) {
                            this.scene("You gently rub your gut, waiting to see if there’s any other effects, but your stomach settles with a gurgle and you feel safe that it’s done all that it’ll do. ", false);
                            this.chgStats(0, 0, 0, 0, 1);
                        }
                        else {
                            this.scene("You get the horrible feeling that drinking venom taken from a snake may not have been the cleverest idea. " + "You belch loudly, trying to ease the pressure on your stomach, but it doesn’t help – You soon keel over from the pain in your gut and fall unconscious. ", false);
                            this.defeatEvent(this.overeating);
                        }
                        break;
                    case this.SandyBox.Name:
                        _loc4_ = this.Apple;
                        switch (this.dXY(1, 5)) {
                            case 1:
                                _loc4_ = this.Coconut;
                                break;
                            case 2:
                                _loc4_ = this.ShortSword;
                                break;
                            case 3:
                                _loc4_ = this.RedSwimShirt;
                                break;
                            case 4:
                                _loc4_ = this.BlueSwimTrunks;
                        }
                        if (_loc4_ != this.Apple) {
                            this.scene(_loc4_.article + " " + _loc4_.Name + "! ", false);
                            _loc7_ = ObjectUtil.copy(_loc4_) as Items;
                            this.invArray.push(_loc7_);
                        }
                        if (_loc4_ == this.Apple) {
                            _loc8_ = this.dXY(7, 13);
                            this.scene(_loc8_ + " gold! ", false);
                            this.GLD = this.GLD + _loc8_;
                        }
                        break;
                    case this.TreasureChest.Name:
                        this.chance = this.dXY(1, 4);
                        if (this.chance == 4 || this.invArray.length == this.maxInv) {
                            _loc9_ = this.dXY(10, 25);
                            this.scene(_loc9_ + " gold! ", false);
                            this.GLD = this.GLD + _loc9_;
                        }
                        else {
                            if (this.chance + this.invArray.length > this.maxInv) {
                                this.chance = this.maxInv - this.invArray.length;
                            }
                            this.scene(this.chance + " unidentified gem", false);
                            if (this.chance > 1) {
                                this.scene("s", false);
                            }
                            this.scene("! ", false);
                            while (this.chance > 0) {
                                _loc10_ = ObjectUtil.copy(this.UnidentifiedGem) as Items;
                                this.invArray.push(_loc10_);
                                this.chance--;
                            }
                        }
                }
            }
            if (param1.eat > 0 || param1.drink > 0) {
                if (!this.alive() && !this.inCombat()) {
                    this.defeatEvent(this.overeating);
                }
            }
            this.updateStats();
            if (currentState != "combatInventory" && currentState != "defeated") {
                this.doNext();
            }
            if (currentState == "defeated") {
                this.nextButton();
            }
            if (currentState == "combatInventory") {
                currentState = "combat";
                this.scene("\n", false);
                this.enemyAttack();
                if (this.eHEA > 0 && this.inCombat()) {
                    this.nextButton();
                }
            }
        }

        protected function itemDescribe(param1:Items):void {
            this.scene("<b>" + this.capFirst(param1.Name) + ":</b><i>", false);
            if (param1.Top || param1.Bottom) {
                switch (param1.Popped) {
                    case true:
                        this.scene("\n\t" + param1.PoppedDescription, false);
                        break;
                    default:
                        this.scene("\n\t" + param1.Description, false);
                }
            }
            if (!param1.Top && !param1.Bottom) {
                this.scene("\n\t" + param1.Description, false);
            }
            this.scene("\n\t" + this.buyValue(param1) + " gold", false);
            if (param1.type != "" && param1.type != "other") {
                this.scene(", " + param1.type, false);
            }
            if (param1.Consume) {
                if (param1.Weapon || param1.Armor || param1.Top || param1.Bottom) {
                    this.scene(", equippable", false);
                }
                else {
                    this.scene(", consumable", false);
                }
            }
            if (param1.WEAd > 0) {
                this.scene("\n\tDeals " + param1.WEAd + "d" + param1.WEAr + " +" + int(param1.damageScaling * 100) + "% " + param1.damageStat + " " + param1.damageType.name + " damage. ", false);
                switch (param1.attackProc) {
                    case "stun":
                        this.scene("\n\tHas a " + param1.attackProcChance + "% chance to stun your enemy when you deal damage with this weapon. ", false);
                        break;
                    case "drain":
                        this.scene("\n\tHas a " + param1.attackProcChance + "% chance to restore " + int(param1.attackProcPower) + "% of the damage dealt by this weapon as health. ", false);
                }
            }
            if (param1.Defense > 0) {
                this.scene("\n\tIncreases defense by " + param1.Defense + ". ", false);
                switch (param1.damageStat) {
                    case "AGI":
                    case "STR":
                    case "INT":
                        this.scene("\n\tIncreases damaging scaling of " + param1.damageStat + " based weapons by " + int(param1.damageScaling * 100) + "%. ", false);
                }
            }
            if (param1.agiBuff != 0 || param1.strBuff != 0 || param1.endBuff != 0 || param1.intBuff != 0 || param1.manaBuff != 0 || param1.healthBuff != 0) {
                this.scene("\n\t", false);
            }
            if (param1.agiBuff > 0) {
                this.scene(" Agi +" + param1.agiBuff, false);
            }
            if (param1.agiBuff < 0) {
                this.scene(" Agi " + param1.agiBuff, false);
            }
            if (param1.strBuff > 0) {
                this.scene(" Str +" + param1.strBuff, false);
            }
            if (param1.strBuff < 0) {
                this.scene(" Str " + param1.strBuff, false);
            }
            if (param1.endBuff > 0) {
                this.scene(" End +" + param1.endBuff, false);
            }
            if (param1.endBuff < 0) {
                this.scene(" End " + param1.endBuff, false);
            }
            if (param1.intBuff > 0) {
                this.scene(" Int +" + param1.intBuff, false);
            }
            if (param1.intBuff < 0) {
                this.scene(" Int " + param1.intBuff, false);
            }
            if (param1.manaBuff > 0) {
                this.scene(" Max Mana +" + param1.manaBuff, false);
            }
            if (param1.manaBuff < 0) {
                this.scene(" Max Mana " + param1.manaBuff, false);
            }
            if (param1.healthBuff > 0) {
                this.scene(" Max Health +" + param1.healthBuff, false);
            }
            if (param1.healthBuff < 0) {
                this.scene(" Max Health " + param1.healthBuff, false);
            }
            if (param1.Heal > 0 || param1.Mana > 0 || param1.Stamina > 0) {
                this.scene("\n\tRestores: ", false);
                if (param1.Heal > 0) {
                    this.scene(param1.Heal + " health ", false);
                }
                if (param1.Mana > 0) {
                    this.scene(param1.Mana + " mana ", false);
                }
                if (param1.Stamina > 0) {
                    this.scene(param1.Stamina + " stamina ", false);
                }
            }
            this.scene("</i>", false);
        }

        protected function itemFind(param1:Items):int {
            var _loc2_:int = 0;
            var _loc3_:Items = null;
            var _loc4_:Items = null;
            _loc2_ = -1;
            switch (param1.Quest) {
                case true:
                    this.i = 0;
                    while (this.i < this.keyInvArray.length) {
                        _loc3_ = this.keyInvArray[this.i];
                        if (param1.Name == _loc3_.Name) {
                            _loc2_ = this.i;
                        }
                        this.i++;
                    }
                    break;
                default:
                    this.i = 0;
                    while (this.i < this.invArray.length) {
                        _loc4_ = this.invArray[this.i];
                        if (param1.Name == _loc4_.Name) {
                            _loc2_ = this.i;
                        }
                        this.i++;
                    }
            }
            return _loc2_;
        }

        protected function itemOwned(param1:Items):Boolean {
            var _loc2_:Boolean = false;
            _loc2_ = false;
            if (this.itemFind(param1) > -1) {
                _loc2_ = true;
            }
            return _loc2_;
        }

        protected function expendItem(param1:Items):void {
            var _loc2_:Items = null;
            _loc2_ = ObjectUtil.copy(param1) as Items;
            _loc2_.Charges--;
            switch (_loc2_.Charges > 0) {
                case true:
                    this.invArray.splice(this.invArray.indexOf(param1), 1, _loc2_);
                    break;
                default:
                    this.invArray.splice(this.invArray.indexOf(param1), 1);
            }
        }

        protected function removeItem(param1:Items):void {
            if (this.itemOwned(param1)) {
                switch (param1.Quest) {
                    case true:
                        this.keyInvArray.splice(this.itemFind(param1), 1);
                        break;
                    default:
                        this.invArray.splice(this.invArray.indexOf(param1), 1);
                }
            }
        }

        protected function testStackItem(param1:Items):int {
            var _loc2_:int = 0;
            var _loc3_:Items = null;
            _loc2_ = -1;
            this.i = 0;
            while (this.i < this.invArray.length) {
                _loc3_ = this.invArray[this.i];
                if (param1.Name == _loc3_.Name && _loc3_.Charges + param1.Charges <= _loc3_.StackLimit) {
                    _loc2_ = this.i;
                }
                this.i++;
            }
            return _loc2_;
        }

        protected function canStackItem(param1:Items):Boolean {
            var _loc2_:Boolean = false;
            _loc2_ = false;
            if (this.testStackItem(param1) > -1) {
                _loc2_ = true;
            }
            return _loc2_;
        }

        protected function stackItem(param1:Items, param2:int):void {
            var _loc3_:Items = null;
            _loc3_ = ObjectUtil.copy(param1) as Items;
            _loc3_.Charges = _loc3_.Charges + param2;
            this.invArray.splice(this.invArray.indexOf(param1), 1, _loc3_);
        }

        protected function forceGetItem(param1:Items):void {
            var _loc2_:Items = null;
            var _loc3_:Items = null;
            this.scene("<li>You got " + param1.article + " " + param1.Name + "!</li>", false);
            switch (param1.Quest) {
                case true:
                    _loc2_ = ObjectUtil.copy(param1) as Items;
                    this.keyInvArray.push(_loc2_);
                    break;
                default:
                    switch (this.canStackItem(param1)) {
                        case true:
                            if (this.canStackItem(param1)) {
                                this.stackItem(this.invArray[this.testStackItem(param1)], param1.Charges);
                            }
                            break;
                        case false:
                            _loc3_ = ObjectUtil.copy(param1) as Items;
                            this.invArray.push(_loc3_);
                    }
            }
        }

        protected function getItem(param1:Items):void {
            var keyItem:Items = null;
            var inventoryItem:Items = null;
            var ID:Items = param1;
            this.scene("<li>You got " + ID.article + " " + ID.Name + "!</li>", false);
            switch (ID.Quest) {
                case true:
                    keyItem = ObjectUtil.copy(ID) as Items;
                    this.keyInvArray.push(keyItem);
                    break;
                default:
                    if (this.canStackItem(ID)) {
                        this.stackItem(this.invArray[this.testStackItem(ID)], ID.Charges);
                    }
                    else if (this.invArray.length < this.maxInv) {
                        inventoryItem = ObjectUtil.copy(ID) as Items;
                        this.invArray.push(inventoryItem);
                    }
                    else {
                        this.clearView();
                        this.appView(0);
                        this.scene("Unfortunately you don\'t have room in your inventory. Do you want to discard this item or discard another item", false);
                        if (ID.Consume == false || ID.Useable == false) {
                            this.scene("? ", false);
                        }
                        if (ID.Consume) {
                            this.scene(", or use this now? ", false);
                            this.btntxt(13, "Use this now");
                        }
                        this.btntxt(11, "Discard this");
                        this.btntxt(12, "Discard another");
                        this.listen = function ():void {
                            switch (btnchc) {
                                case 11:
                                    doNext();
                                    break;
                                case 12:
                                    clearView();
                                    itemButtons();
                                    pageView();
                                    listen = function ():void {
                                        if (btnchc > 0 && btnchc < 10) {
                                            removeItem(invArray[btnchc - 1 + (invPage - 1) * 9]);
                                            getItem(ID);
                                            doNext();
                                        }
                                        if (btnchc == 11) {
                                            if (invPage > 1) {
                                                invPage--;
                                            }
                                            itemButtons();
                                        }
                                        if (btnchc == 13) {
                                            if (invPage < invArray.length / 9) {
                                                invPage++;
                                            }
                                            itemButtons();
                                        }
                                    };
                                    break;
                                case 13:
                                    doUseItem(ID);
                            }
                        };
                    }
            }
        }

        protected function doKeyInventory():void {
            var tempKeyItemWrite:Items = null;
            this.clearView();
            this.invView(0);
            this.invPage = 1;
            this.selectedItem = null;
            this.keyInvArray.sortOn("Name", Array.CASEINSENSITIVE);
            this.i = (this.invPage - 1) * 9;
            while (this.i < this.invPage * 9) {
                tempKeyItemWrite = this.keyInvArray[this.i];
                if (tempKeyItemWrite != null) {
                    this.writeItems(this.i, tempKeyItemWrite);
                }
                this.i++;
            }
            this.btntxt(12, "Normal inventory");
            this.listen = function ():void {
                switch (btnchc) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        if (keyInvArray[btnchc - 1 + (invPage - 1) * 9] != null) {
                            selectedItem = keyInvArray[btnchc - 1 + (invPage - 1) * 9];
                            scene("<b>" + capFirst(selectedItem.Name) + "</b>: \n\t" + selectedItem.Description, true);
                            switch (selectedItem.Useable) {
                                case true:
                                    scene("\n\nAre you sure you want to use this item? ", false);
                                    yesView(11);
                                    break;
                                default:
                                    buttonVisibledec1 = false;
                                    decision1.setStyle("icon", null);
                            }
                        }
                        break;
                    case 11:
                        scene("\t", true);
                        switch (selectedItem.Name) {
                            case cabalTownMap.Name:
                                switch (location.Name == MountainHub.Name) {
                                    case true:
                                        break;
                                    case false:
                                        scene("You pull out the map to the cave of cabal members. If not for the instructions given by their ", false);
                                }
                                break;
                            case cabalMap.Name:
                                switch (location.Name == MountainHub.Name) {
                                    case true:
                                        switch (questReady(cabalRogue)) {
                                            case true:
                                                scene("You pull out the map to the rogue cabal member\'s cave. Although now that he\'s been defeated, there\'s no real reason to go back there again. " + "You roll up the map and put it away again. ", false);
                                                break;
                                            case false:
                                                leaveMisc();
                                                locationTravel(cabalRogueBossFight);
                                                scene(selectedItem.itemUse, false);
                                        }
                                        break;
                                    case false:
                                        scene("You pull out the map to the rogue cabal member\'s cave. " + "A distant area is circled in red, indicating his \"hidden\" lair. Although until you\'re actually in the mountains, it\'s not too useful. " + "You roll up the map and put it away again. ", false);
                                }
                                break;
                            case spearMap.Name:
                                switch (location.Name == JungleHub.Name) {
                                    case true:
                                        switch (questReady(spearQuest)) {
                                            case true:
                                                scene("You pull out the map, but with your work there already completed, there\'s not really a reason for you to travel all the way back there. " + "You roll the map back up and put it away. ", false);
                                                break;
                                            case false:
                                                leaveMisc();
                                                locationTravel(anacondaBossFight);
                                                scene(selectedItem.itemUse, false);
                                        }
                                        break;
                                    case false:
                                        scene("You pull out the map, and while it\'s pretty to look at, it isn\'t a whole lot of help while you\'re outside of the jungle proper. You roll up the map and put it away. ", false);
                                }
                                break;
                            case hammerMap.Name:
                                switch (location.Name == JungleHub.Name) {
                                    case true:
                                        switch (questReady(hammerQuest)) {
                                            case true:
                                                scene("You pull out the map, but with your work there already completed, there\'s not really a reason for you to travel all the way back there. " + "You roll the map back up and put it away. ", false);
                                                break;
                                            case false:
                                                leaveMisc();
                                                locationTravel(shamanBossFight);
                                                scene(selectedItem.itemUse, false);
                                        }
                                        break;
                                    case false:
                                        scene("You pull out the map, and while it\'s pretty to look at, it isn\'t a whole lot of help while you\'re outside of the jungle proper. You roll up the map and put it away. ", false);
                                }
                                break;
                            case swordMap.Name:
                                switch (location.Name == JungleHub.Name) {
                                    case true:
                                        switch (questReady(swordQuest)) {
                                            case true:
                                                scene("You pull out the map, but with your work there already completed, there\'s not really a reason for you to travel all the way back there. " + "You roll the map back up and put it away. ", false);
                                                break;
                                            case false:
                                                leaveMisc();
                                                locationTravel(golemBossFight);
                                                scene(selectedItem.itemUse, false);
                                        }
                                        break;
                                    case false:
                                        scene("You pull out the map, and while it\'s pretty to look at, it isn\'t a whole lot of help while you\'re outside of the jungle proper. You roll up the map and put it away. ", false);
                                }
                        }
                        break;
                    case 12:
                        keyItems = false;
                        doInventory();
                }
            };
        }

        protected function doInventory():void {
            this.updateStats();
            this.clearView();
            this.appView(0);
            this.selectedItem = null;
            this.invArray.sortOn("Name", Array.CASEINSENSITIVE);
            if (this.inCombat()) {
                currentState = "combatInventory";
            }
            if (!this.inCombat()) {
                currentState = "inventory";
            }
            this.invView(1);
            this.listen = function ():void {
                switch (discarding) {
                    case true:
                        switch (btnchc) {
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                if (invArray[btnchc - 1 + (invPage - 1) * 9] != null) {
                                    selectedItem = invArray[btnchc - 1 + (invPage - 1) * 9];
                                    if (!inCombat()) {
                                        scene("", true);
                                    }
                                    if (inCombat()) {
                                        combatDialogue();
                                    }
                                    itemDescribe(selectedItem);
                                    scene("\nAre you sure you want to discard this item? ", false);
                                    yesView(11);
                                }
                                break;
                            case 11:
                                if (selectedItem != null) {
                                    removeItem(selectedItem);
                                    doInventory();
                                }
                        }
                        break;
                    case false:
                        switch (btnchc) {
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                if (invArray[btnchc - 1 + (invPage - 1) * 9] != null) {
                                    selectedItem = invArray[btnchc - 1 + (invPage - 1) * 9];
                                    if (!inCombat()) {
                                        scene("", true);
                                    }
                                    if (inCombat()) {
                                        combatDialogue();
                                    }
                                    itemDescribe(selectedItem);
                                    if (selectedItem.Useable) {
                                        scene("\nAre you sure you want to use this item? ", false);
                                        if (selectedItem.eat + selectedItem.drink > remainingCapacity() && selectedItem.eat + selectedItem.drink > 0) {
                                            scene("You\'re already " + hungry() + ". ", false);
                                        }
                                        yesView(11);
                                    }
                                    if (!selectedItem.Useable) {
                                        clearButton(11);
                                    }
                                }
                                break;
                            case 11:
                                if (selectedItem != null) {
                                    if (selectedItem.Consume) {
                                        expendItem(selectedItem);
                                    }
                                    doUseItem(selectedItem);
                                }
                                break;
                            case 12:
                                discarding = false;
                                keyItems = true;
                                doKeyInventory();
                        }
                }
            };
            this.itemButtons();
            if (!this.inCombat()) {
                this.btntxt(12, "Important items");
            }
        }

        protected function itemButtons():void {
            var _loc1_:Items = null;
            this.i = (this.invPage - 1) * 9;
            while (this.i < this.invPage * 9) {
                _loc1_ = this.invArray[this.i];
                if (_loc1_ != null) {
                    this.writeItems(this.i, _loc1_);
                }
                this.i++;
            }
        }

        protected function writeItems(param1:int, param2:Items):void {
            param1++;
            if (param1 > 9) {
                param1 = param1 % 9;
            }
            if (param1 == 0) {
                param1 = 9;
            }
            if (param2.Charges <= 1) {
                this.btntxt(param1, this.capFirst(param2.Name));
            }
            if (param2.Charges > 1) {
                this.btntxt(param1, this.capFirst(param2.Name) + " x" + param2.Charges);
            }
            this.iconItems(param1, param2);
        }

        protected function iconItems(param1:int, param2:Items):void {
            switch (param2.type) {
                case null:
                    this.buttonIcons(param1, null);
                    break;
                case "armor":
                    this.buttonIcons(param1, this.iconArmor);
                    break;
                case "shirt":
                    this.buttonIcons(param1, this.iconShirt);
                    break;
                case "pants":
                    this.buttonIcons(param1, this.iconPants);
                    break;
                case "drink":
                    this.buttonIcons(param1, this.iconDrink);
                    break;
                case "food":
                    this.buttonIcons(param1, this.iconFood);
                    break;
                case "mana potion":
                    this.buttonIcons(param1, this.iconManaPotion);
                    break;
                case "health potion":
                    this.buttonIcons(param1, this.iconHealthPotion);
                    break;
                case "weapon":
                    this.buttonIcons(param1, this.iconWeapon);
                    break;
                case "other":
                default:
                    if (!param2.Quest) {
                        this.buttonIcons(param1, this.iconOther);
                    }
            }
        }

        protected function doPageUp():void {
            if (currentState == "storage") {
                if (this.invPage > 1) {
                    this.invPage--;
                }
                this.doStorage();
            }
            if (currentState == "spells" || currentState == "combatSpells") {
                if (this.spellPage > 1) {
                    this.spellPage--;
                }
                this.doSpells();
            }
            else {
                if (this.invPage > 1) {
                    this.invPage--;
                }
                if (currentState == "inventory" || currentState == "combatInventory") {
                    this.doInventory();
                }
                else if (this.inShop == true) {
                    this.doVendoring();
                }
            }
        }

        protected function doPageDown():void {
            switch (currentState) {
                case "storage":
                    if (this.depositing == true) {
                        if (this.invPage < this.invArray.length / 9) {
                            this.invPage++;
                        }
                    }
                    else if (this.invPage < this.storageArray.length / 9) {
                        this.invPage++;
                    }
                    this.doStorage();
                    break;
                case "spells":
                case "combatSpells":
                    if (this.spellPage < this.spellArray.length / 9) {
                        this.spellPage++;
                    }
                    this.doSpells();
                    break;
                default:
                    if (this.invPage < this.invArray.length / 9) {
                        this.invPage++;
                    }
                    if (currentState == "inventory" || currentState == "combatInventory") {
                        this.doInventory();
                    }
                    else if (this.inShop == true) {
                        this.doVendoring();
                    }
            }
        }

        protected function doUnequip():void {
            this.invView(0);
            this.scene("You are wearing: \n", true);
            this.itemDescribe(this.TOP);
            this.scene("\n", false);
            this.itemDescribe(this.BTM);
            this.scene("\n", false);
            this.itemDescribe(this.ARM);
            this.scene("\n", false);
            this.itemDescribe(this.WEA);
            this.clearView();
            if (this.WEA.Name != "fists") {
                this.btntxt(1, "Weapon");
            }
            if (this.ARM.Name != "unarmored") {
                this.btntxt(3, "Armor");
            }
            if (this.TOP.Name != "naked chest") {
                this.btntxt(7, "Top");
            }
            if (this.BTM.Name != "naked legs") {
                this.btntxt(9, "Bottom");
            }
            this.returnView(12);
            this.listen = function ():void {
                if (btnchc == 1) {
                    tryUnequip("WEA");
                }
                if (btnchc == 3) {
                    tryUnequip("ARM");
                }
                if (btnchc == 7) {
                    tryUnequip("TOP");
                }
                if (btnchc == 9) {
                    tryUnequip("BTM");
                }
                if (btnchc == 12) {
                    doInventory();
                }
            };
        }

        protected function tryUnequip(param1:String):void {
            var ID:String = param1;
            this.clearView();
            if (this.invArray.length < this.maxInv) {
                switch (ID) {
                    case "WEA":
                        if (this.WEA.Name != "fists") {
                            this.WEA.Charges = 1;
                            this.invArray.push(this.WEA);
                        }
                        this.WEA = ObjectUtil.copy(this.Weaponless) as Items;
                        break;
                    case "ARM":
                        if (this.ARM.Name != "unarmored") {
                            this.ARM.Charges = 1;
                            this.invArray.push(this.ARM);
                        }
                        this.ARM = ObjectUtil.copy(this.Armorless) as Items;
                        break;
                    case "TOP":
                        if (this.TOP.Name != "naked chest") {
                            this.TOP.Charges = 1;
                            this.invArray.push(this.TOP);
                        }
                        this.TOP = ObjectUtil.copy(this.Shirtless) as Items;
                        break;
                    case "BTM":
                        if (this.BTM.Name != "naked legs") {
                            this.BTM.Charges = 1;
                            this.invArray.push(this.BTM);
                        }
                        this.BTM = ObjectUtil.copy(this.Pantsless) as Items;
                }
                this.doUnequip();
            }
            else {
                this.scene("\nYou don\'t have enough room in your inventory. Do you want to discard this item, or keep it equipped? ", false);
                this.clearDecisionView();
                this.btntxt(11, "Discard this");
                this.btntxt(13, "Keep Equipped");
                this.listen = function ():void {
                    switch (btnchc) {
                        case 11:
                            switch (ID) {
                                case "WEA":
                                    WEA = ObjectUtil.copy(Weaponless) as Items;
                                    break;
                                case "ARM":
                                    ARM = ObjectUtil.copy(Armorless) as Items;
                                    break;
                                case "TOP":
                                    TOP = ObjectUtil.copy(Shirtless) as Items;
                                    break;
                                case "BTM":
                                    BTM = ObjectUtil.copy(Pantsless) as Items;
                            }
                            doUnequip();
                            break;
                        case 13:
                            doUnequip();
                    }
                };
            }
        }

        protected function doStorage():void {
            var strItem:Items = null;
            var storageItem:Items = null;
            currentState = "storage";
            this.clearView();
            this.GoldStorage.visible = false;
            this.inventoryPanel.visible = true;
            this.scene("\tYou kick open your storage chest on the far side of your living room. ", true);
            if (this.storageArray.length <= 0 && this.storageGold <= 0) {
                this.scene("A lone moth flies out. Your treasure stockpile is disappointingly barren. ", false);
            }
            if (this.storageArray.length <= 0 && this.storageGold > 0) {
                this.scene("There\'s not much other than gold in there, but there\'s nothing wrong with that. ", false);
            }
            if (this.storageArray.length + 3 > this.maxStorage) {
                this.scene("It\'s so overflowing with booty you\'re not sure you can fit much more in there. ", false);
            }
            this.scene("\n\n", false);
            this.storageArray.sortOn("Name", Array.CASEINSENSITIVE);
            if (this.depositing == false) {
                this.scene("What would you like to withdraw? ", false);
                this.i = (this.invPage - 1) * 9;
                while (this.i < this.invPage * 9) {
                    strItem = this.storageArray[this.i];
                    if (strItem != null) {
                        this.writeItems(this.i, strItem);
                    }
                    this.i++;
                }
                this.listen = function ():void {
                    if (btnchc > 0 && btnchc < 10 && storageArray[btnchc - 1 + (invPage - 1) * 9] != null) {
                        if (invArray.length < maxInv) {
                            getItem(storageArray[btnchc - 1 + (invPage - 1) * 9]);
                            storageArray.splice(btnchc - 1 + (invPage - 1) * 9, 1);
                            doStorage();
                        }
                        else {
                            doStorage();
                            scene("\nThere\'s not enough room in your inventory. ", false);
                        }
                    }
                };
            }
            else {
                this.scene("What would you like to deposit? ", false);
                this.itemButtons();
                this.listen = function ():void {
                    if (btnchc > 0 && invArray[btnchc - 1 + (invPage - 1) * 9] != null) {
                        if (storageArray.length < maxStorage) {
                            storageArray.push(invArray[btnchc - 1 + (invPage - 1) * 9]);
                            removeItem(invArray[btnchc - 1 + (invPage - 1) * 9]);
                            doStorage();
                        }
                        else {
                            doStorage();
                            scene("\nThere\'s not enough room in your storage chest. ", false);
                        }
                    }
                };
            }
            this.scene("\n\nStorage contents" + "\n~~~~~~~~~~~~~~~~~~~~~~" + "\n<li>Gold: " + this.storageGold + "</li>", false);
            this.i = 1;
            while (this.i <= this.storageArray.length) {
                storageItem = this.storageArray[this.i - 1];
                if (storageItem != null) {
                    this.scene("<li>", false);
                    if (storageItem.Charges <= 1) {
                        this.scene(this.capFirst(storageItem.Name), false);
                    }
                    else {
                        this.scene(this.capFirst(storageItem.Name) + "x" + storageItem.Charges, false);
                    }
                    this.scene("</li>", false);
                }
                this.i++;
            }
        }

        protected function doStoreGold():void {
            this.clearView();
            this.GoldStorage.visible = true;
            this.inventoryPanel.visible = false;
            this.depositAmount.text = "0";
            this.depositAmount.setFocus();
            this.depositAmount.selectAll();
        }

        protected function confirmGold():void {
            var _loc1_:int = 0;
            _loc1_ = parseInt(this.depositAmount.text);
            if (this.depositing == false) {
                if (_loc1_ > this.storageGold) {
                    _loc1_ = this.storageGold;
                }
                this.GLD = this.GLD + _loc1_;
                this.storageGold = this.storageGold - _loc1_;
            }
            else {
                if (_loc1_ > this.GLD) {
                    _loc1_ = this.GLD;
                }
                this.GLD = this.GLD - _loc1_;
                this.storageGold = this.storageGold + _loc1_;
            }
            this.doStorage();
        }

        protected function doAllGold():void {
            if (this.depositing == false) {
                this.GLD = this.GLD + this.storageGold;
                this.storageGold = 0;
            }
            else {
                this.storageGold = this.storageGold + this.GLD;
                this.GLD = 0;
            }
            this.doStorage();
        }

        protected function toggleDeposit():void {
            this.depositing = !this.depositing;
            this.depositLabel = !!this.depositing ? "Depositing" : "Withdrawing";
            this.invPage = 1;
            this.doStorage();
        }

        protected function toggleDiscard():void {
            this.discarding = !this.discarding;
            this.discardLabel = !!this.discarding ? "Discarding" : "Using";
            this.invPage = 1;
            this.doInventory();
        }

        protected function doShop():void {
            var storeCosts:Items = null;
            var inventoryItem:Items = null;
            if (!this.inShop) {
                this.invPage = 1;
            }
            this.scene(this.Vendor.Buying + "\n", true);
            this.inShop = true;
            this.clearView();
            this.appView(0);
            this.Vendor.vendArray.sortOn("Name", Array.CASEINSENSITIVE);
            this.i = 0;
            while (this.i < this.Vendor.vendArray.length) {
                storeCosts = this.Vendor.vendArray[this.i];
                if (storeCosts != null) {
                    this.scene("<li>" + this.capFirst(storeCosts.Name) + "......" + this.buyValue(storeCosts) + " gold</li>", false);
                }
                this.i++;
            }
            this.scene("\n", false);
            this.i = 0;
            while (this.i < 9) {
                inventoryItem = this.Vendor.vendArray[this.i + 9 * (this.invPage - 1)];
                if (inventoryItem != null) {
                    this.writeItems(this.i, inventoryItem);
                }
                this.i++;
            }
            if (this.Vendor.vendArray.length > 9) {
                this.btntxt(11, "More items");
                this.buttonIcons(11, this.iconNext);
            }
            this.btntxt(12, "Sell");
            this.buttonIcons(12, this.iconStore);
            this.leaveButton(13);
            this.listen = function ():void {
                switch (btnchc) {
                    case 11:
                        switch (invPage < Math.ceil(Vendor.vendArray.length / 9)) {
                            case true:
                                invPage++;
                                break;
                            default:
                                invPage = 1;
                        }
                        doShop();
                        break;
                    case 12:
                        doVendoring();
                        break;
                    case 13:
                        leaveStore();
                        break;
                    default:
                        if (Vendor.vendArray[btnchc - 1 + 9 * (invPage - 1)] != null) {
                            tryBuyItem(Vendor.vendArray[btnchc - 1 + 9 * (invPage - 1)]);
                        }
                }
            };
        }

        protected function tryBuyItem(param1:Items):void {
            var ID:Items = param1;
            this.doShop();
            this.itemDescribe(ID);
            this.scene("\n", false);
            if (this.invArray.length >= this.maxInv) {
                this.scene("But you have no room. ", false);
            }
            else if (this.GLD >= this.buyValue(ID)) {
                this.scene("Are you sure you want to buy this? ", false);
                this.choiceButton();
                this.clrchc();
                this.listen = function ():void {
                    if (btnchc == 11) {
                        doBuyItem(ID);
                    }
                    if (btnchc == 13) {
                        doShop();
                        scene("\"Suit yourself.\" ", false);
                    }
                };
            }
            else if (this.GLD < this.buyValue(ID)) {
                this.doShop();
                this.scene(this.Vendor.NoMoney, false);
            }
        }

        protected function doBuyItem(param1:Items):void {
            this.doShop();
            this.scene("\n" + this.Vendor.Bought, false);
            this.getItem(param1);
            this.doGold(-this.buyValue(param1));
        }

        protected function doVendoring():void {
            var inventoryItem:Items = null;
            this.scene(this.Vendor.Selling + "\n", true);
            this.i = 1;
            while (this.i <= this.invArray.length) {
                inventoryItem = this.invArray[this.i - 1];
                if (inventoryItem != null) {
                    this.scene("\n" + this.capFirst(inventoryItem.Name) + "......" + this.sellValue(inventoryItem) + " gold", false);
                }
                this.i++;
            }
            this.clearView();
            this.appView(0);
            this.returnView(12);
            this.pageView();
            this.listen = function ():void {
                if (btnchc == 11) {
                    doPageUp();
                }
                if (btnchc == 13) {
                    doPageDown();
                }
                if (btnchc == 12) {
                    invPage = 1;
                    doShop();
                }
                else if (btnchc > 0 && btnchc < 10 && invArray[btnchc - 1 + (invPage - 1) * 9] != null) {
                    trySellItem(invArray[btnchc - 1 + (invPage - 1) * 9]);
                }
            };
            this.itemButtons();
        }

        protected function trySellItem(param1:Items):void {
            var ID:Items = param1;
            this.scene("\n" + ID.Description + "Are you sure you want to sell this for " + this.sellValue(ID) + " gold? ", false);
            this.choiceButton();
            this.listen = function ():void {
                if (btnchc == 11) {
                    doSellItem(ID);
                }
                if (btnchc == 13) {
                    doVendoring();
                }
            };
        }

        protected function doSellItem(param1:Items):void {
            this.removeItem(param1);
            this.doVendoring();
            this.scene("\n" + this.Vendor.Sold, false);
            this.doGold(this.sellValue(param1));
        }

        protected function enterStore(param1:Vendors):void {
            this.Vendor = ObjectUtil.copy(param1) as Vendors;
            this.Vendor.StoreExit = param1.StoreExit;
            this.doShop();
        }

        protected function leaveStore():void {
            this.inShop = false;
            this.locationTravel(this.Vendor.StoreExit);
            this.scene("\t" + this.Vendor.Leaving, true);
        }

        protected function buyValue(param1:Items):int {
            var _loc2_:Number = NaN;
            _loc2_ = param1.Value;
            if (param1.Charges > 0) {
                _loc2_ = param1.Charges * param1.Value;
            }
            return Math.ceil(_loc2_);
        }

        protected function sellValue(param1:Items):int {
            return Math.floor(this.buyValue(param1) * 0.5);
        }

        protected function tryTailor(param1:Items):void {
            var cost:int = 0;
            var ID:Items = param1;
            cost = Math.round(ID.Value / ID.Expand * (this.waistDiameter() * 1.2 + 3 - ID.Expand));
            if (cost < 0) {
                cost = cost * -1;
            }
            if (ID.Popped == true) {
                cost = cost + (1 + ID.Value * 0.1);
            }
            if (cost > 0) {
                this.scene("Do you want to tailor this? It will cost " + cost + " gold to tailor. ", true);
                this.clearView();
                if (this.GLD >= cost) {
                    this.yesView(11);
                }
                this.noView(13);
                this.listen = function ():void {
                    switch (btnchc) {
                        case 11:
                            doGold(-cost);
                            doTailor(ID);
                            break;
                        case 13:
                            doEvent(Tailor);
                    }
                };
            }
            else {
                this.scene("That article of clothing doesn\'t need tailoring. ", true);
            }
        }

        protected function doTailor(param1:Items):void {
            param1.Value = Math.round(param1.Value / param1.Expand * (this.waistDiameter() * 1.2 + 3));
            param1.Expand = this.waistDiameter() * 1.2 + 3;
            param1.Popped = false;
            this.doEvent(this.Tailor);
            this.scene("\tHe takes a few minutes to measure your sizes all over. ", true);
            if (this.weight() > 3000) {
                this.scene("It takes him a very long while before he can find a tailor\'s measuring tape long enough. ", false);
            }
            else if (this.weight() > 1500) {
                this.scene("It takes him a little while before he can find a tailor\'s measuring tape long enough. ", false);
            }
            this.scene("After he has your dimensions written down, he takes the " + param1.Name + " to the back and begins working on it. " + "Faster than what might otherwise seem possible, he comes back with the " + param1.Name + " better tailored to fit you. " + "\n\t\"There you are " + this.playerGender.sir + ". Is there anything else I can help you with?\" ", false);
            if (param1.Name.match("(T)") == null) {
                param1.Name = param1.Name + "(T)";
            }
        }

        protected function doEmbroider(param1:Items):void {
            param1.Expand = 0;
            param1.Popped = false;
            param1.Value = param1.Value + 200;
            param1.Description = param1.Description + "This item of clothing is embroidered with an enchanted gold thread that causes it to never break. ";
        }

        protected function alive():Boolean {
            if (this.HEA >= 1) {
                return true;
            }
            return false;
        }

        protected function testSkill(param1:Number, param2:Number):Boolean {
            var _loc3_:Boolean = false;
            _loc3_ = false;
            if (this.d100() <= param1 - param2) {
                _loc3_ = true;
            }
            return _loc3_;
        }

        protected function testSkillRange(param1:Number, param2:Number, param3:int, param4:int):Boolean {
            var _loc5_:Number = NaN;
            _loc5_ = param1 - param2;
            if (_loc5_ < param3) {
                _loc5_ = param3;
            }
            if (_loc5_ > param4) {
                _loc5_ = param4;
            }
            return this.testSkill(_loc5_, 0);
        }

        protected function changeOptions():void {
            this.clearView();
            this.appView(0);
            currentState = "options";
            this.miscScene("<b>Options</b>" + "\n~~~~~~~~~~~~~~~~~~~~~~", true);
            this.miscScene("<li>Measurement system: ", false);
            if (this.optionsMetric) {
                this.miscScene("Metric</li>", false);
            }
            if (this.optionsImperial) {
                this.miscScene("Imperial</li>", false);
            }
            this.miscScene("<li>Allow bursting: " + this.optionsPopping + "</li>", false);
            this.miscScene("<li>Long player description: " + this.optionsDescription + "</li>", false);
            this.miscScene("<li>Allow random male NPCs: " + this.optionsMales + "</li>", false);
            this.miscScene("<li>Allow random female NPCs: " + this.optionsFemales + "</li>", false);
            this.miscScene("<li>Go to cheat menu</li>", false);
            this.btntxt(1, "Metric/Imperial");
            this.btntxt(2, "Popping");
            this.btntxt(3, "Long player descriptions");
            this.btntxt(4, "Allow random males");
            this.btntxt(5, "Allow random females");
            this.btntxt(6, "Cheats");
            this.listen = function ():void {
                if (btnchc == 1) {
                    optionsMetric = !optionsMetric;
                    optionsImperial = !optionsImperial;
                    changeOptions();
                }
                if (btnchc == 2) {
                    optionsPopping = !optionsPopping;
                    changeOptions();
                }
                if (btnchc == 3) {
                    optionsDescription = !optionsDescription;
                    changeOptions();
                }
                if (btnchc == 4) {
                    optionsMales = !optionsMales;
                    changeOptions();
                }
                if (btnchc == 5) {
                    optionsFemales = !optionsFemales;
                    changeOptions();
                }
                if (btnchc == 6) {
                    currentState = "cheat";
                }
            };
        }

        protected function acceptCheat():void {
            if (this.cheatStrength.text != "") {
                this.bSTR = parseInt(this.cheatStrength.text);
            }
            if (this.cheatAgility.text != "") {
                this.bAGI = parseInt(this.cheatAgility.text);
            }
            if (this.cheatIntelligence.text != "") {
                this.bINT = parseInt(this.cheatIntelligence.text);
            }
            if (this.cheatEndurance.text != "") {
                this.bEND = parseInt(this.cheatEndurance.text);
            }
            if (this.cheatStomach.text != "") {
                this.bSTO = parseInt(this.cheatStomach.text);
            }
            if (this.cheatHealth.text != "") {
                this.bmaxHEA = parseInt(this.cheatHealth.text);
            }
            if (this.cheatFat.text != "") {
                this.FAT = parseInt(this.cheatFat.text);
            }
            if (this.cheatGold.text != "") {
                this.GLD = parseInt(this.cheatGold.text);
            }
            this.updateStats();
            this.changeOptions();
        }

        protected function maximumFullness():Number {
            var _loc1_:int = 0;
            var _loc2_:int = 0;
            this.fixFull();
            _loc1_ = this.maxFUL / 100 * this.STO;
            _loc2_ = (this.maxFUL - _loc1_ / this.STO) / (this.maxFUL - 100) * (this.bmaxHEA + this.modHealth());
            if (_loc2_ <= 0) {
                _loc1_--;
            }
            return _loc1_;
        }

        protected function remainingCapacity():Number {
            return this.maximumFullness() - this.ATE;
        }

        protected function inflateToFloating():void {
            if (this.weight() > 0) {
                this.doInflate(this.weight() * 0.5, -20 - this.weight());
            }
        }

        protected function stuffToBursting():void {
            var _loc1_:Number = NaN;
            _loc1_ = this.remainingCapacity() + 1;
            if (_loc1_ > 0) {
                this.doConsume(_loc1_, 0, _loc1_ * 0.5);
            }
        }

        protected function stuffToAlmostBursting():void {
            var _loc1_:Number = NaN;
            _loc1_ = this.remainingCapacity();
            if (_loc1_ > 0) {
                this.doConsume(_loc1_, 0, _loc1_ * 0.5);
            }
        }

        protected function doSleep():void {
            this.doRest();
            this.doRest();
            this.doRest();
            this.doRest();
            this.doRest();
            this.doRest();
            this.doRest();
            this.doRest();
        }

        protected function doRest():void {
            this.doTime(60);
            this.doStamina(25);
            this.doHealth(this.END);
            this.updateStats();
            if (this.location.type == this.wilderness && this.location.enemies != null) {
                if (this.dXY(1, 5) == 1) {
                    this.appView(0);
                    this.combatEvent(this.location.enemies[this.dXY(0, this.location.enemies.length - 1)]);
                    this.scene("\tYou are awoken from your sleep by " + this.enemyt.article + " " + this.enemyt.name + "! ", true);
                }
            }
        }

        protected function doArea():void {
            currentState = "surroundings";
            this.miscScene("\t" + this.location.Description, true);
        }

        protected function doGold(param1:int):void {
            this.GLD = this.GLD + param1;
            if (param1 != 0) {
                if (param1 > 0) {
                    this.scene("<li>+" + param1 + " gold!</li>", false);
                }
                if (param1 < 0) {
                    this.scene("<li>" + param1 + " gold!</li>", false);
                }
            }
            if (this.GLD < 0) {
                this.GLD = 0;
            }
        }

        protected function doXP(param1:int):void {
            if (param1 > 0) {
                this.scene("<li>+" + param1 + " XP!</li>", false);
            }
            while (param1 > 0) {
                this.XP = this.XP + param1;
                param1 = 0;
                if (this.XP >= this.XPtoLevel) {
                    this.scene("<li>Level up!</li>", false);
                    param1 = this.XP - this.XPtoLevel;
                    this.XP = 0;
                    this.XPtoLevel = 100 + (this.LVL - 1) * 10;
                    this.LVL++;
                    this.LVLup++;
                    this.bmaxHEA = this.bmaxHEA + Math.floor(this.bEND * 0.1);
                    this.updateStats();
                    this.HEA = this.maxHEA;
                }
            }
        }

        protected function doLevel():void {
            currentState = "levelUp";
            this.scene("You\'ve gained a level! Choose a stat to increase. ", true);
            this.clearView();
            this.btntxt(1, "Strength");
            this.btntxt(2, "Agility");
            this.btntxt(3, "Endurance");
            this.btntxt(4, "Intelligence");
            this.btntxt(5, "Stomach");
            this.listen = function ():void {
                var _loc1_:Array = null;
                _loc1_ = new Array(0, 0, 0, 0, 0);
                _loc1_.splice(btnchc - 1, 1, 5);
                chgStats(_loc1_[0], _loc1_[1], _loc1_[2], _loc1_[3], _loc1_[4]);
                LVLup--;
                currentState = "default";
                general();
            };
        }

        protected function sayWeight(param1:Number):String {
            if (this.optionsMetric == false) {
                return int(param1) + " pounds";
            }
            return int(param1 * 0.453592) + " kilograms";
        }

        protected function sayDistance(param1:int):String {
            var _loc2_:* = null;
            var _loc3_:int = 0;
            _loc2_ = Math.floor(param1) + " inches";
            _loc3_ = Math.round(param1 * 2.54);
            switch (this.optionsImperial) {
                case true:
                    if (param1 == 12) {
                        _loc2_ = "a foot";
                    }
                    if (param1 > 24) {
                        if (param1 % 12 == 0) {
                            _loc2_ = Math.floor(param1 / 12) + " feet";
                        }
                        if (param1 % 12 != 0) {
                            _loc2_ = Math.floor(param1 / 12) + "\'" + param1 % 12 + "\"";
                        }
                    }
                    if (param1 == 1) {
                        _loc2_ = "1 inch";
                    }
                    break;
                case false:
                    if (_loc3_ > 100) {
                        _loc2_ = _loc3_ / 100 + " meters";
                    }
                    else {
                        _loc2_ = "" + _loc3_;
                        if (_loc3_ == 1) {
                            _loc2_ = _loc2_ + " centimeter";
                        }
                        else {
                            _loc2_ = _loc2_ + " centimeters";
                        }
                    }
            }
            return _loc2_;
        }

        protected function walk():String {
            var _loc1_:String = null;
            var _loc2_:int = 0;
            _loc1_ = "walk";
            _loc2_ = this.ATE + this.FAT * 0.4;
            if (_loc2_ > 100) {
                _loc1_ = "wobble";
            }
            if (_loc2_ > 150) {
                _loc1_ = "waddle";
            }
            if (_loc2_ > 200) {
                _loc1_ = "lumber";
            }
            if (this.testImmobileClose() == true) {
                _loc1_ = "slowly " + _loc1_;
            }
            return _loc1_;
        }

        protected function walking():String {
            var _loc1_:String = null;
            var _loc2_:int = 0;
            _loc1_ = "walking";
            _loc2_ = this.ATE + this.FAT * 0.4;
            if (_loc2_ > 100) {
                _loc1_ = "wobbling";
            }
            if (_loc2_ > 150) {
                _loc1_ = "waddling";
            }
            if (_loc2_ > 200) {
                _loc1_ = "lumbering";
            }
            if (this.testImmobileClose() == true) {
                _loc1_ = "slowly " + _loc1_;
            }
            return _loc1_;
        }

        protected function doAppearance():void {
            var _loc1_:Number = NaN;
            var _loc2_:String = null;
            var _loc3_:* = null;
            var _loc4_:Array = null;
            var _loc5_:int = 0;
            var _loc6_:Quests = null;
            currentState = "appearance";
            this.updateStats();
            this.miscScene("<b>" + this.playerName + "</b>,\n\t", true);
            this.miscScene("You are a " + this.playerGender.name + " " + this.playerSpecies.name + " ", false);
            this.miscScene("that weighs " + this.sayWeight(this.weight()), false);
            this.miscScene(" and is " + this.sayDistance(this.playerHeight) + " tall. ", false);
            if (!this.optionsDescription) {
                this.miscScene("You have " + this.muscles() + " muscles under your " + this.fatness() + " body and have " + this.playerSpecies.furBack + " colored " + this.playerSpecies.fur + ". " + "Your " + this.playerSpecies.furBelly + " " + this.playerSpecies.furred + " stomach is " + this.waist() + " and sticks out " + this.sayDistance(this.waistDiameter()) + " and you are " + this.hungry() + ". ", false);
            }
            if (this.optionsDescription) {
                this.miscScene("\n\t" + this.describeGeneral() + this.describeShoulders() + this.describeUpperBody() + this.describeMidsection() + this.describeLegs() + "\n\tYour " + this.playerSpecies.furBelly + " " + this.playerSpecies.furred + " stomach is " + this.waist() + " and sticks out " + this.sayDistance(this.waistDiameter()) + " and you are " + this.hungry() + ". ", false);
            }
            this.miscScene("\n~~~~~~~~~~~~~~~~~~~~~~", false);
            this.miscScene("\n<b>You are wearing:</b> ", false);
            this.miscScene("<li>", false);
            this.miscScene(this.capFirst(this.TOP.Name) + "</li>\t\t", false);
            if (this.TOP.Popped == false) {
                this.miscScene(this.TOP.Description, false);
            }
            if (this.TOP.Popped == true) {
                this.miscScene(this.TOP.PoppedDescription, false);
            }
            this.miscScene("<li>", false);
            this.miscScene(this.capFirst(this.BTM.Name) + "</li>\t\t", false);
            if (this.BTM.Popped == false) {
                this.miscScene(this.BTM.Description, false);
            }
            if (this.BTM.Popped == true) {
                this.miscScene(this.BTM.PoppedDescription, false);
            }
            this.miscScene("<li>" + this.capFirst(this.ARM.Name) + "</li>" + "\t\t" + this.ARM.Description + "\n\t\t<i>" + this.ARM.Defense + " defense</i>", false);
            _loc1_ = 0.4;
            _loc2_ = "STR";
            if (this.WEA.damageScaling != 0) {
                _loc1_ = this.WEA.damageScaling;
            }
            if (this.WEA.damageStat != null) {
                _loc2_ = this.WEA.damageStat;
            }
            this.miscScene("<li>" + this.capFirst(this.WEA.Name) + "</li>" + "\t\t" + this.WEA.Description + "\n\t\t<i>Deals " + this.WEA.WEAd + "d" + this.WEA.WEAr + " +" + _loc1_ * 100 + "% " + _loc2_ + " " + this.WEA.damageType.name + " damage ", false);
            if (this.WEA.damageStat == "INT" && this.WEA.damageScaling > 0.4) {
                this.miscScene("\n\t\tIncreases spell damage/healing by " + this.WEA.damageScaling * 100 + "% INT ", false);
            }
            this.miscScene("</i> ", false);
            this.miscScene("\n~~~~~~~~~~~~~~~~~~~~~~" + "\n<b>Status effects:</b> ", false);
            _loc3_ = "";
            if (this.STA <= 5) {
                _loc3_ = _loc3_ + "<li>You\'re very tired.</li>";
            }
            if (this.Calories <= 0) {
                _loc3_ = _loc3_ + "<li>You feel physically drained.</li>";
            }
            if (this.FUL > 100) {
                _loc3_ = _loc3_ + "<li>Your stomach is painfully stretched full.</li>";
            }
            if (this.testImmobileClose() == true) {
            }
            if (this.statusStretchFruit > 0) {
                _loc3_ = _loc3_ + "<li>Your stomach feels stretchier than normal.</li>";
            }
            if (this.statusWellFed > 0) {
                _loc3_ = _loc3_ + "<li>You feel energized and well fed from recently eating an actual hot meal.</li>";
            }
            if (this.statusDietPillPower > 0) {
                _loc3_ = _loc3_ + "<li>You feel lighter than you ought to thanks to a diet pill.</li>";
            }
            if (this.statusSTRBuffPower > 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically stronger!</li>";
            }
            if (this.statusSTRBuffPower < 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically weaker.</li>";
            }
            if (this.statusAGIBuffPower > 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically faster!</li>";
            }
            if (this.statusAGIBuffPower < 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically slower.</li>";
            }
            if (this.statusINTBuffPower > 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically smarter!</li>";
            }
            if (this.statusINTBuffPower < 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically dumber.</li>";
            }
            if (this.statusENDBuffPower > 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically tougher!</li>";
            }
            if (this.statusENDBuffPower < 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically frail.</li>";
            }
            if (this.statusMANABuffPower > 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically empowered!</li>";
            }
            if (this.statusMANABuffPower < 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically drained of power.</li>";
            }
            if (this.statusSTOBuffPower > 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically hungrier!</li>";
            }
            if (this.statusSTOBuffPower < 0) {
                _loc3_ = _loc3_ + "<li>You feel mystically less hungry.</li>";
            }
            if (this.statusPoisonPower > 0) {
                _loc3_ = _loc3_ + "<li>You feel very ill as poison courses through your veins.</li>";
            }
            if (this.statusBloatVenomPower > 0 && this.statusBloatVenom > 0) {
                _loc3_ = _loc3_ + "<li>Your head feels slightly fuzzy, and there is an odd growing pressure in your stomach.</li>";
            }
            if (_loc3_ != "") {
                this.miscScene(_loc3_, false);
            }
            if (_loc3_ == "") {
                this.miscScene("<li>None!</li>", false);
            }
            this.miscScene("~~~~~~~~~~~~~~~~~~~~~~" + "\n<b>Quests:</b> ", false);
            _loc4_ = new Array();
            _loc5_ = 0;
            while (_loc5_ < this.questArray.length) {
                _loc6_ = this.questArray[_loc5_];
                if (_loc6_.visible == true && _loc6_.completed == false) {
                    _loc4_.push(_loc6_);
                }
                _loc5_++;
            }
            if (_loc4_.length == 0 || this.questArray == null) {
                this.miscScene("\nNone!", false);
            }
            if (_loc4_.length > 0) {
                this.i = 0;
                while (this.i < _loc4_.length) {
                    this.miscScene(this.questDescriptionDisplay(_loc4_[this.i]), false);
                    this.i++;
                }
            }
        }

        protected function questDescriptionDisplay(param1:Quests):String {
            var _loc2_:* = null;
            _loc2_ = "";
            _loc2_ = _loc2_ + ("<li><u>" + param1.questName + "</u>");
            if (param1.questTarget == null && param1.questGoal > 0) {
                _loc2_ = _loc2_ + " <i>(";
                if (param1.questProgress < param1.questGoal) {
                    _loc2_ = _loc2_ + (param1.questProgress + "/" + param1.questGoal);
                }
                if (param1.questProgress >= param1.questGoal) {
                    _loc2_ = _loc2_ + "Complete!";
                }
                _loc2_ = _loc2_ + ")</i>";
            }
            if (param1.questTarget != null) {
                _loc2_ = _loc2_ + (" <i>(" + this.capFirst(param1.questTarget.Name) + ")</i>");
            }
            _loc2_ = _loc2_ + ("</li>\t\t" + param1.questDescription);
            return _loc2_;
        }

        protected function weight():Number {
            return this.bodyMass() + this.Eaten + this.Drank + this.InflatedMass;
        }

        protected function bodyMass():Number {
            return this.bSTR * 3 + this.FAT + 40;
        }

        protected function waistDiameter():int {
            var _loc1_:int = 0;
            _loc1_ = 2 * Math.pow(90 * (this.ATE + (this.FAT + this.tenemyFATdebuff) * 0.21) / (4 * Math.PI), 1 / 3) - 5;
            if (_loc1_ <= 0) {
                _loc1_ = 0;
            }
            return _loc1_;
        }

        protected function fatness():String {
            var _loc1_:String = null;
            _loc1_ = "error " + this.FAT;
            if (this.FAT <= 1) {
                _loc1_ = "fatless";
            }
            else if (this.FAT <= 10) {
                _loc1_ = "lean";
            }
            else if (this.FAT <= 45) {
                _loc1_ = "average";
            }
            else if (this.FAT <= 60) {
                _loc1_ = "chubby";
            }
            else if (this.FAT <= 75) {
                _loc1_ = "pudgy";
            }
            else if (this.FAT <= 90) {
                _loc1_ = "fat";
            }
            else if (this.FAT <= 115) {
                _loc1_ = "doughy";
            }
            else if (this.FAT <= 140) {
                _loc1_ = "rotund";
            }
            else if (this.FAT <= 170) {
                _loc1_ = "squishy";
            }
            else if (this.FAT <= 210) {
                _loc1_ = "obese";
            }
            else if (this.FAT <= 270) {
                _loc1_ = "porcine";
            }
            else if (this.FAT <= 400) {
                _loc1_ = "incredibly obese";
            }
            else if (this.FAT <= 700) {
                _loc1_ = "elephantine";
            }
            else {
                _loc1_ = "whale-like";
            }
            return _loc1_;
        }

        protected function muscles():String {
            var _loc1_:String = null;
            var _loc2_:int = 0;
            _loc2_ = this.STR - this.FAT;
            if (_loc2_ <= 5) {
                _loc1_ = "unnoticeable";
            }
            else if (_loc2_ <= 10) {
                _loc1_ = "barely noticeable";
            }
            else if (_loc2_ <= 20) {
                _loc1_ = "average";
            }
            else if (_loc2_ <= 30) {
                _loc1_ = "well-defined";
            }
            else if (_loc2_ <= 40) {
                _loc1_ = "impressive";
            }
            else if (_loc2_ <= 50) {
                _loc1_ = "rippling";
            }
            else if (_loc2_ <= 60) {
                _loc1_ = "tremendous";
            }
            else if (_loc2_ <= 70) {
                _loc1_ = "bodybuilderesque";
            }
            else if (_loc2_ <= 80) {
                _loc1_ = "gargantuan";
            }
            else {
                _loc1_ = "mountain-like";
            }
            return _loc1_;
        }

        protected function waist():String {
            var _loc1_:String = null;
            var _loc2_:int = 0;
            _loc2_ = this.waistDiameter();
            if (_loc2_ <= 1) {
                _loc1_ = "flat";
            }
            else if (_loc2_ <= 3) {
                _loc1_ = "small";
            }
            else if (_loc2_ <= 4) {
                _loc1_ = "slightly rounded";
            }
            else if (_loc2_ <= 5) {
                _loc1_ = "rounded";
            }
            else if (_loc2_ <= 6) {
                _loc1_ = "swollen";
            }
            else if (_loc2_ <= 7) {
                _loc1_ = "bulging";
            }
            else if (_loc2_ <= 10) {
                _loc1_ = "basketball sized";
            }
            else if (_loc2_ <= 17) {
                _loc1_ = "beachball sized";
            }
            else if (_loc2_ <= 24) {
                _loc1_ = "too big to reach around";
            }
            else if (_loc2_ <= 30) {
                _loc1_ = "person sized";
            }
            else if (_loc2_ <= 55) {
                _loc1_ = "enormous";
            }
            else {
                _loc1_ = "big enough to reach the ground";
            }
            return _loc1_;
        }

        protected function hungry():String {
            var _loc1_:String = null;
            this.fixFull();
            if (this.FUL <= 10) {
                _loc1_ = "starving";
            }
            else if (this.FUL <= 25) {
                _loc1_ = "hungry";
            }
            else if (this.FUL <= 45) {
                _loc1_ = "not very hungry";
            }
            else if (this.FUL <= 55) {
                _loc1_ = "sated";
            }
            else if (this.FUL <= 65) {
                _loc1_ = "well fed";
            }
            else if (this.FUL <= 75) {
                _loc1_ = "pretty full";
            }
            else if (this.FUL <= 85) {
                _loc1_ = "stuffed";
            }
            else if (this.FUL <= 100) {
                _loc1_ = "bloated";
            }
            else if (this.FUL <= 110) {
                _loc1_ = "ready to pop";
            }
            else {
                _loc1_ = "on the verge of bursting";
            }
            return _loc1_;
        }

        protected function bodyFatTier():String {
            var _loc1_:String = null;
            _loc1_ = "";
            if (this.FAT <= 25) {
                _loc1_ = "malnourished";
            }
            else if (this.FAT <= 75) {
                _loc1_ = "healthy";
            }
            else if (this.FAT <= 150) {
                _loc1_ = "robust";
            }
            else if (this.FAT <= 250) {
                _loc1_ = "overweight";
            }
            else if (this.FAT <= 400) {
                _loc1_ = "chubby";
            }
            else if (this.FAT <= 600) {
                _loc1_ = "corpulent";
            }
            else if (this.FAT <= 900) {
                _loc1_ = "obese";
            }
            else if (this.FAT <= 1300) {
                _loc1_ = "morbidly obese";
            }
            else if (this.FAT <= 1800) {
                _loc1_ = "massive";
            }
            else if (this.FAT <= 2300) {
                _loc1_ = "spherical";
            }
            else if (this.FAT <= 3000) {
                _loc1_ = "mountainous";
            }
            else if (this.FAT > 3000) {
                _loc1_ = "colossal";
            }
            return _loc1_;
        }

        protected function bodyStrengthTier():String {
            var _loc1_:String = null;
            var _loc2_:Number = NaN;
            _loc1_ = "";
            _loc2_ = (this.STR + this.STR + this.AGI + this.END) / 4.2;
            if (_loc2_ <= 50) {
                _loc1_ = "regular";
            }
            else if (_loc2_ <= 150) {
                _loc1_ = "athletic";
            }
            else if (_loc2_ <= 250) {
                _loc1_ = "muscular";
            }
            else if (_loc2_ > 250) {
                _loc1_ = "bodybuilder";
            }
            return _loc1_;
        }

        protected function describeGeneral():String {
            var _loc1_:String = null;
            _loc1_ = "";
            switch (this.playerGender.name) {
                case this.Male.name:
                    switch (this.bodyFatTier()) {
                        case "malnourished":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a wretchedly underfed and unexercised physique. People feel their nurturing instinct triggering when they happen upon you, insisting that you eat something and stop making everyone feel uncomfortable with your coat-hanger frame. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a thin body that has nevertheless met some physical challenges, and is quite fit and energetic as a result. Overweight people striving to shape up are looking up to your efficient and pragmatic constitution, but are discouraged from following in your footsteps by the telltale rugged wiriness of a low-intake athlete. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a strong body with plenty of muscle on your bones, without a single suggestion of idle flesh. You are a model of selfless self-improvement, a likely candidate for any exercise-intensive tasks and an intimidating presense to anyone used to resolving their issues with brute force alone. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have the magnificent body of a mighty warrior or a legendary craftsman. The bulk of tangled, rippling, yet bewilderingly lean muscle that you bear so lightly is enough to put anyone in awe, whether it\'s a friend, a foe or even a wild beast. ";
                            }
                            break;
                        case "healthy":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have an inconspicuous, slim physique. People hardly ever notice you in the crowd, although with the recent shifts in the definition of being mundanely proportioned, your meager form may make a few round-cheeked heads turn. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have an fit, agile build of a person leading an active life and benefiting from healthy food rationing that gives your frame a subtle gloss without furnishing it with any noticeable surplus flesh. Country folk of both genders find your vivacious springy form easy on the eyes, and there is a world of adventuring and social opportunity for someone of your build. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a burly body with plenty of trained flesh on your bones that naturally assumes a posture that accentuates this brawn and a lack of loose weight to obscure it. You are an example of what a male should aspire to be physically, and your peers look up to you and do their best to avoid getting on your bad side. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a spectacularly trained body that would have befitted a deity reigning over war, labor or hunt. The sheer bulky brawn that your constitution boasts is a radiant beacon of might that common folk are quick to flock to for protection and guidance. ";
                            }
                            break;
                        case "robust":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a throughly healthy body of someone who hasn\'t been skipping his meals often, although it might also have been due to an indolent lifestyle. Your appearance, being soft and nonthreatening, has a way of putting others at ease, and you seldom encounter adversity when looking for work around the town or attending a feast thrown by a local noble. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a lush, healthy body brimming with vitality, evident of both an active lifestyle and a splendid appetite. People find you pleasant to be around, whether the occasion is a scouting foray or a dining soiree. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a strong, well-fed body that enhances its already admirable brawny volume with consequences of a frequent hearty meals. While most pay respects to your obvious physical prowess, you don\'t come off as overtly intimidating due to the contours of your hard muscles having softer outlines. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a staggeringly mountainous body, rendered so grand and solid by hard work and effort, and perfected by your partiality to an occasional epic feast. Even in the most worldly towns desensitized to curios, your visit is an event to remember, and although you are an obvious threat, the soft gloss you sport on top of your brawn dispells some of those concerns. ";
                            }
                            break;
                        case "overweight":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a mellow, slightly pudgy body, with no significant strength to even out the added weight, leaving you out of your depth when labor and fleetness of feet are needed. The way you look tends to leave others well-disposed towards you, not expecting any wrong-doing from someone so fluffy, and appreciating your apparent ability to indulge your appetites. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a body that is on a bit on a heavy side, but has seen a lot of exercise and firmed up where necessary. People you meet are quick to propose their camaraderie, sensing an active and jovial person in their new acquaintance. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a very powerful body with some superfluous weight that you can clearly afford to carry around. Wherever you go, you are met with ample cheerful greetings and respectful bows of the common folk who can appreciate your mighty and well-fed appearance the best. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a heavily built body, profoundly muscled after over a life of journeys, battles and training and quite well-padded courtesy of all the banquets you\'ve attended. Your stout frame commands respect and turns away any unwelcome attentuion of shady folks, although the softer appearance leaves the door open for friendly chitchat with the decent kind of people. ";
                            }
                            break;
                        case "chubby":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a quite fleshy body ideal for filling loose clothes or lounging on a sofa, but ill-equipped for menial chores and amateur warfare. The more peaceful citizenry that you come across tend to regard you with gracious amity, acknowledging your very apparent ability to keep yourself well-fed and away from the dangerous and bothersome life outside the walls. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a robust body that is richly flabby around the edges, but firm and energetic in its base, representing a workable arrangement between a challenging, outgoing life and a proclivity for plentiful dining. Even the much thinner acquaintances of yours who cherish their slim builds give credit to how little your heavier frame slows you down. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a pudgy and thickset body developed through a balanced combination of heavy meals and hard exercise. The folk you bump into always greet you with courtesy, and depending on your mood either pester your with banquet invitation and friendly gossip, or stay well out of your way. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a powerful body that has thick, mighty muscle coexisting peacefully with soft flab. Even despite the significant squishiness to your constitution, people only need one look to realize that this well-fed fellow has enough solid force at his disposal to put them through a brick wall if they\'re not careful, but they mostly like you sincerely anyway. ";
                            }
                            break;
                        case "corpulent":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a full-formed, fat body with uncannily fortunate proportions that give you a dignified look, even if your usual slack posture does suggest a deficiency of bodily challenges in your life. Your appearance most commonly draws respect and cordiality, although it would be difficult for you to apply for any of the more physical professions without getting treated to a lot of skepticism. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a superbly well-fed constitution, and every part of you is so well padded as to become firm, although you are clearly unafraid of testing the limits of your endurance. Although you are usually pigeonholed as a person of leisure at the start, people who get to know you better soon become aware of the lively pace you adopt in everything you do. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a very pudgy body that still has a suspicious ease of movement and firmness of frame that betray the highly exercised and toned flesh beneath. People are equally ready to include you into their evening gorging festivities or to ask you for a bit of help with heavylifting or subduing an unruly tipsy miscreant. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a tremendously stout build, although the amount of softer flesh that you carry around does smoothen and soften the awesome display of physical development that your body would have otherwise presented. Both the spoiled townsfolk and hardy adventurers envy your splendid balance of jovial robustness and heroic brawn, and it\'s uncommon for you to be appointed of momentous enterprises for your looks alone. ";
                            }
                            break;
                        case "obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have the exceedingly fleshy build of a voracious gourmand, and its heaving mass takes its toll on everything you do, be it escaping a robbery or putting on trousers. Your acquaintances and even complete strangers often treat you like a lifelong comrade from the get go, for your weighty presence serves as a reassuring pillar of certainty in a tumultuous world, while your laborious breathing and bearing attracts sympathy. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have the exceedingly fleshy build of a voracious gourmand, and its heaving mass takes its toll on everything you do, although in a pinch you are capable of admirable bursts of activity. Your acquaintances and even complete strangers often treat you like a lifelong comrade from the get go, for your weighty presence serves as a reassuring pillar of certainty in a tumultuous world. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a burly constitution with a great abundance of idle weight pulling you down, but you bear yourself in a way that suggests physical prowess to match your size. Those who meet you for the first time often inquire if your talents lie in the fields of luxury cuisine or metalcraft, since you look the type, but never in an obnoxiously cheeky manner. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a bulky body haunted by the ghosts of the grand banquets of old, but the overall sturdy girth of your frame drops enough clues about what kind of power lies buried underneath. Although you could easily pass for a townsperson of indolence behind the heavily-laden restaurant table, it\'s just too much trouble to restrain your might to preserve meek appearances, and your peers often get treated to displays of strength that make them lavish admiration and respect on you accordingly. ";
                            }
                            break;
                        case "morbidly obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have an excessively corpulent body that needs a few seconds to stop trembling and shaking in the wake of each movement, and constantly threatens to leave you sprawled on the ground whenever you forget to account for the inertia of all the loose weight. Even among the big eaters and fabled layabouts of the town scene, you are regarded as the fat one, but given the recent developments in the world, such title is bestowed more in good humour and admiration than out of contempt. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have an excessively corpulent body that needs a few seconds to stop trembling and shaking in the wake of each movement, and often threatens to leave you sprawled on the ground whenever you forget to account for the inertia of all the loose weight, but you have a few tricks up your sleeve when it comes to keeping balance. Even among the big eaters and fabled layabouts of the town scene, you are regarded as the fat one, but given the recent developments in the world, such title is bestowed more in good humour and admiration than out of contempt. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a body marverlously rich in doughy flesh, boasting wide curves and thick folds, and its only through your mastery of managing that bulging, wobbling abundance that your formidable brawn is revealed. Your burly, rounded dimensions stand out on the wild trail more than behind the table of a diner at the edge of town, but even in the safer havens your bulk draws curiosity and admiring glances. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have an imposingly heavyset constitution burdened with layers upon layers of fat that make it difficult to control the way your softer parts behave, but the mighty fimness at the core asserts itself through the confidence of your bearing. Any crowd you find yourself mingling always treats you to a plenty of intrigued attention, and people part to let you pass at the slightest suggestion of your path intersecting their current position, preferring to orbit and shadow you instead of risking getting trampled. ";
                            }
                            break;
                        case "massive":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a lavishly obese body that takes a great effort to motivate, and an even greater deal of exertion to stop, and you are so intensely filled out that your wide, rolling curves have become almost solid to the touch. You have a way of wrapping people\'s attention and discussion subjects around yourself without making an effort, and they often show you as much veneration as if your were as wealthy in gold as you are in bodily splendor, although you often hear good-natured jabs at your heftiness. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have an unapologetically obese body that takes great effort to motivate, and just as much strain to stop, and you are so intensely filled out that your wide, rolling curves have become almost solid to the touch. You have a way of wrapping people\'s attention and discussion subjects around yourself without making an effort, and they often show you as much veneration as if your were as wealthy in gold as you are in bodily splendor, although on occassion you do hear an odd good-natured jab at your heftiness. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have an unstintingly blubbery frame with its horizontal dimensions challenging the vertical ones, and even though the labored heaving that accompanies your movement puts a fine point on how undeniable your mass is, you face the challenges it throws your way with mettle and resolve. You are known for filling up space around you even when outdoors, and like a fountain in the middle of the town square, the citizenry find your whereabouts to be a splendid point of congregation, and you\'re never in a want for an audience or gossip venues. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a supremely fleshy body that implies in the subtlest of ways the profound strength being concealed within, although it\'s nigh impossible for the less perceptive to recognize that by looking at your bloated form with rolling waves disturbing its smooth curvature every now and again. The rest quickly catch on to the clues, and many of those you meet are at a loss whether they should dread or cheer you, especially when they get a glimpe of the paradoxial agility and power of your by all rights tremendously overweight frame. ";
                            }
                            break;
                        case "spherical":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a body that is massively overweight even by the lax local standards, with each blubbery fold and swelling on your frame seemingly having a mind of its own when you set your oppressive bulk in motion, which is a dreadfully difficult task in itself, your grossly inadequate level of fitness considering. You are the one who people point to when they need to explain to a foreigner the effect the recent burgeoning abundance had on the folks around here, and although a good number of people are still willing to approach and have dealings with you, regarding your grand physique as a mark of living one\'s life to the full, many others seem to get overtly concerned for your well-being, or becoming downright disturbed by such extravagant appearance. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a body that is massively overweight even by the lax local standards, with each blubbery fold and swelling on your frame seemingly having a mind of its own when you set your oppressive bulk in motion, which is a dreadfully difficult task in itself, your inadequate level of fitness considering. You are the one who people point to when they need to explain to a foreigner the effect the recent burgeoning abundance had on the folks around here, and although a good number of people are still willing to approach and have dealings with you, regarding your grand physique as a mark of living one\'s life to the full, many others seem to get overtly concerned for your well-being. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a body that is massively overweight even by the lax local standards, with each blubbery fold and swelling on your frame seemingly having a mind of its own when you set your oppressive bulk in motion, which is a quite difficult task in itself, your severely lacking level of fitness considering. You are the one who people point to when they need to explain to a foreigner the effect the recent burgeoning abundance had on the folks around here, and although a good number of people are still willing to approach and have dealings with you, regarding your grand physique as a mark of living one\'s life to the full, many others seem to get overtly concerned for your well-being, although these worries are quick to melt away in the face of your astoundingly fleet degree of mobility for someone who shouldn\'t be able to move at all. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have the immensely obese constitution of someone who eats for a living while sprawled on the softest and toughest of royal beds, and yet the deeply seated physical power earned through torturous training and harsh experiences allows you to fracture everyone\'s expectations of you to be an embodiment of sloth. Be it around the campfire during a journey or in a crowded dining hall, people strive to secure your amicable disposition towards them and maybe even protection, but only the bravest venture too near you, considering the popular stereotype of cannibalistic gluttons matching your burly, bloated appearance perfectly. ";
                            }
                            break;
                        case "mountainous":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a body that is so profoundly obese that it would be more accurate to describe it as an immense accumulation of blubber with a person trapped inside it, and although you retain the ability to move, it is always entails a catastrophic display of jiggling folds, rippling curves and heavy breathing, and the dreadful prospect of collapsing looms over your body in the same way your body does over everyone else. Strangers stop to gape in awe at the first glimpse of your enormity, and even your close ones often get distracted midsentence by the fascinating sight of constantly shifting and rearranging flesh, but in the end both tend to cope with their amazement by changing their perception of you to that of a mysterious mythical creature or a spawn of some magical mishap, and dote upon your borderline helpless form out of kindness or superstitious awe. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a body that is so profoundly obese that it would be more accurate to describe it as an immense accumulation of blubber with a fit person trapped inside it, and although you retain the ability to move, it is always entails a catastrophic display of jiggling folds, rippling curves and heavy breathing, and the dreadful prospect of collapsing looms over your body in the same way it does over everyone else. Strangers stop to gape in awe at the first glimpse of your enormity, and even your close ones often get distracted midsentence by the fascinating sight of constantly shifting and rearranging flesh, but in the end both tend to cope with their amazement by changing their perception of you to that of a sentient mythical creature or a magical mishap\'s result, and dote upon your overburdened form out of kindness or superstitious awe. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a body that is so profoundly obese that it would be more accurate to describe it as an immense accumulation of blubber with a capable person trapped inside it, and although you retain the ability to move, it is always entails a catastrophic display of jiggling folds, rippling curves and heavy breathing, and the dreadful prospect of collapsing can never be entirely ruled out. Strangers stop to gape in awe at the first glimpse of your enormity, and even your close ones often get distracted midsentence by the fascinating sight of constantly shifting and rearranging flesh, but in the end both tend to cope with their amazement by changing their perception of you to that of a sentient mythical creature or a magical mishap\'s result, and dote upon your arduosly struggling form out of kindness or admiration. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have an increadibly ponderous physique, with every part of your body greatly distended with thickly compressed fat, and although it is difficult to imagine such a bloated body out there in the wilderness, there is an unmistakable confidence in your bearing that could make any doubting party reconsider dismissing you as a pampered butterball. While both within and without the city walls you are regarded as something of a unique phenomenon far beyond being merely an obese person, and ascertaining your friendiness is an immediate priority for any local leadership unused to the sight of you, people are a quick to recognize their oddly-proportioned champion and cheer him on with all the befitting courtesy and generosity. ";
                            }
                            break;
                        case "colossal":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You inhabit a form so drastically blown out of proportion by your history of unrestrained culinary hedonism that it dwarfs caravan carts fully loaded for a distant journey; it is only vaguely recognizable as a person\'s body, with its grandiose cascading folds and bulges overlapping and flowing into each other to further the difficulty of discerning limb from limb, and the sight of your bodily overabundance being set into motion by excruciatingly pained effort is blood-curdling even for the stoutests of heart. Even the folks who have witnessed their share of bizarre things in this world get overwhelmed by your oppressive vastness waddling about in a menacingly unsteady manner, and although few dare approaching you with ill intent, even the more decent folk only ever show you horrified trepidation or uncomprehending worship, and precious few bring themselves hobnob with an entity so vividly evoking the tales of ritualistically fattened offerings to the giant voracious beasts and demons. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You inhabit a form so drastically blown out of proportion by your history of unrestrained culinary hedonism that it dwarfs caravan carts fully loaded for a distant journey; it is only vaguely recognizable as a person\'s body, with its grandiose cascading folds and bulges overlapping and flowing into each other to further the difficulty of discerning limb from limb, and the sight of your bodily overabundance being set into motion by pained effort is blood-curdling even for the stoutests of heart. Even the folks who have witnessed their share of bizarre things in this world get overwhelmed by your oppressive vastness waddling about in an eerily unsteady manner, and although few dare approaching you with ill intent, even the more decent folk only ever show you horrified trepidation or uncomprehending worship, and precious few bring themselves to treat an entity of such formidable presence with any degree of familiarity. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You inhabit a form so drastically blown out of proportion by your history of unrestrained culinary hedonism that it dwarfs caravan carts fully loaded for a distant journey; it is only vaguely recognizable as a person\'s body, with its grandiose cascading folds and bulges overlapping and flowing into each other to further the difficulty of discerning limb from limb, and the sight of your bodily overabundance being set into motion by grittily concentrated effort is awe-inspiring even for the stoutests of heart. Even the folks who have witnessed their share of bizarre things in this world get overwhelmed by your oppressive vastness waddling about in a barely controlled way, and although few dare approaching you with ill intent, even the more decent folk only ever show you horrified trepidation or uncomprehending worship, and precious few bring themselves to treat an entity of such formidable presence with any degree of familiarity. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a truly terrifying build comparable to that to the largest of beasts, to the point of having to squeeze gently through the widest city gates, although the incontestable majority of your magnificent mass is comprised of unfathomably thick layers of wobbling blubber; however, the unfazed manner in which you steer this massively bloated form gives a well-founded impression of your body being less of a prison, and more of an unassailable, astonishingly mobile fortress of flesh. People seldom socialize with you casually, intimidated beyond all wit by the implications of having such an avatar of corpulence and gluttony around, but party leaders and town officials approaching you with deferential ceremony is something of a common occurrence to you, and your own instances of addressing people never fail to guarantee their enthralled attention. ";
                            }
                    }
                    break;
                case this.Female.name:
                    switch (this.bodyFatTier()) {
                        case "malnourished":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a nearly weightless body with neither health not vigour to boast. Your airy build is highly polarizing to people you encounter, who either consider you a paragon of feminine beauty or an unfortunate victim of a particularly vicious diet. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a lean, toned and flexible body of an outgoing girl. It\'s difficult for others to fault your vitality but your lack of volume in traditionally feminine areas makes it easy to discount your gender altogether. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a decidedly athletic constitution lacking any superfluous weight. It\'s not unheard of to encounter a woman so strong and resilient, although such an appearance of physical accomplishment in someone so unlikely makes people - especially the males - wary and intimidated. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have an immaculatly sculpted body of a warrior princess, superbly muscled and devoid of fat. The reaction that your appearance tends elicit from those who surround you is either cautious fear or cheers of adoration. ";
                            }
                            break;
                        case "healthy":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have an ordinary body with somewhat pleasant features, but your lack of exercise or fresh air is evident as well. Folks around your tend to regard you as being on the cute side of homely, and don\'t mind your presence. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have an fit and flexible body of an outgoing girl who isn\'t afraid to act on her ambitions - especially if it involves exciting activities or travel. Most young men and a number of girls as well find both your swift, measured motions intensely entrancing, and even the rest are comfortable to have someone light-footed still waltzing through the ranks of the increasingly portly populace of this land. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a decidedly athletic constitution that glow with lush vigour and stamina despite lacking any external pudge. It would have been intimidating for some to come across a lady of such powerful stature if your feminine features weren\'t so well-pronounced and attention-gripping. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a gloriously built, burly body that is the picture of paramount athletic success and proportionately distributed brawn. It is a veritable one-person martial parade when you plod down the streets of any town, and many people automatically assume you to be a military leader or someone of equal authority and capability. ";
                            }
                            break;
                        case "robust":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a somewhat curvaceous figure, but it would be a far cry to call you fat - rather, every surface of your body is delicately and finely enhanced with results of hearty meals past. Your peers don\'t hesitate to include you in their enterprises, although being mindful of your self-evident distaste for physical activity. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a capable and resourceful body, with a fashionable little of extra weight evenly distributed among its features. You find a degree of admiration wherever you turn, either for your adventerous spirit and energy, or for your pleasant proportions. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a powerful and nimble frame that is subtly softened in some places and given additional volume in others. Folk around you are often prone to oogling your strong, statueque, yet inescapably feminine constitution. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have an excellently trained and developed physique that is given a bit of tenderness by the softer contours that people who reach such breathtaking athletic heights can seldom afford to keep. Some of the more conservative-minded of the friendly folks you can encounter in the unforgiving wilderness have a hard time aligning in their minds your excellent survival skills with your somewhat plush bodily texture, but the rest express humbled and honoured attitude to your presence. ";
                            }
                            break;
                        case "overweight":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a flossy plump figure, untouched by hard work or deprivations of long journey, making the challenges of dabbling in those matters uncomfortably arduous. People around you are often friendly and accepting of your presence, especially if you agree to share a dining table with them. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a reasonably full figure, but the rounder curves don\'t do much to impede your vigorous lifestyle even if the tone of your muscles remains concealed. Strangers and acquaintances alike consider themselves fortunate to share your company, eager to enjoy your vim and your healthy looks. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a decently filled-out body that has been rendered firm and maneuverable by an arduous and adventerous lifestyle. People in your vicinity are often surprised by the displays of power and grace that your ostensibly plush frame is capable of, and there are few situations where you cannot either make your strengths profitably useful or garner popularity by conversing over a full plate and foaming tankard. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a thickset constitution owing most of its girth to the great metallic might that evidences itself unmistakably despite the noticeable padding of your frame. Those who find themselves in your festively conspicuous presence are eager to accept your protection and authority should you choose to take charge, and your curvaceousness is seldom left uncomplimented by the more audacious folks. ";
                            }
                            break;
                        case "chubby":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a generously replete body that lends profoundly to the naturally prominent areas of female physique, but lacks the vigour to support that slpendor properly. In a social setting, you are welcome, admired and appreciated, but the life of physical exertion would seem to be an uncooth absurdity for someone like you. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a plushly pudgy body that is, oddly enough, more fit and flexible than those of less encumbered girls. Those leading a more indolent lifestyle are often taken aback by your bouts of energetic activity, and people of action don\'t think less of your abilities for the bouncy quality of your movements. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a seasoned, strong body that is also richly enough padded to exaggerate every forceful movement with a bit of delayed fleshy feedback. Though you tend to mingle around leaner, more athletic types, both the squishy townspeople and the hardened wilderness explorers recognize your ability and strive to be the ones sitting beside you around the fire. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a thick, powerful physique of an accomplished athlete that still remains downy to the touch, and your unstoppable charges and dashing evasive rolls appear even more impressive for the volume-enchancing keepsakes of old ample meals dancing in time with the action. Unless you\'re too far removed from civilization or being discreet, there is always an audience gathering to see your fights and your feasts, and you tend to finish both with more friends and admirers than you started with. ";
                            }
                            break;
                        case "corpulent":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a profoundly plump, heavyset body that, despite proudly displaying outstanding curves, is visibly burdensome for you to move around. Most often you are perceived as matronly and good-tempered, and on occassions receive caring advices to avoid unnecessary exertion. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a body as well-fed and filled out as decency allows while still remaining energetic and flexible, although the limits of your mobility are significantly diminished. Ladies of your constitution often cannot keep up with you, and your willinglness to take up physical challenges makes fitter people disregard your chubby looks as a source of prohibitive encumberance; however, your pleasantly portly looks are always a welcome decoration of a merry evening feast. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a fairly fat body with more than enough power under all the supple layers to compensate for the supefluous weight, even if it trades litheness for greater force. More often than not your generous proportions leave your unfortunate foes and travel companions aghast at how little they drag you down in quickly unravelling situations, but you would never refuse an hour of resting and feasting by the fire after an arduous and fighting-intensive venture. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a phenomenally burly frame with an abundance of flab softening and firming parts of you, but it\'s a well-balanced arrangement that prevents you from being viewed as overtly angular or flabby. Folks from all walks of life are thrilled to be bask in the confidence and stalwart power you weave with your posture alone; after all, a dame that has evidentally been able to acquire such might without the effort stripping her of lush gravitas is a natural object of admiration. ";
                            }
                            break;
                        case "obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a thoroughly well-fed, lush constitution with ample curves making up the most of you, and the lack of appropriately intensive exercise needed to account for that luxuriant build is made evident whenever you face physical challenges. Those you meet and interact with seldom fail to adopt an ingratiating tone, suspecting that a person of your weight and bearing absolutely must be someone to be reckoned with, although many shift into a more familiar attitude soon after. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a thoroughly well-fed, lush constitution with ample curves making up the most of you, and while the lack of appropriately intensive exercise need to account for that luxuriant build is made evident whenever you face physical challenges, you do have some untapped resources for mobility. Those you meet and interact with seldom fail to adopt an ingratiating tone, suspecting that a person of your weight and bearing absolutely must be someone to be reckoned with, although many shift into a more familiar attitude soon after. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a more than generously filled-out body, but it\'s quite obvious that not all of your thickness had come from good eating, if only by the firmness and confidence of your movements. Wherever you go, the sheer size of you and your adroitness in handling it makes the local populace see an authority that naturally puts you in charge of handling any crises if such should arise, no matter the severity thereof. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a body remarkably rich in both muscle and fat, and although the latter tends to hide the former most of the time, it\'s your unwavering fortitude of stance and the force of moves that introduce you as a lady of action first, and a voluptuous gourmand dame second. The attitude towards you tends to be that of admiration and deference with a hint of judicious wariness, since your formidable athleticism insinuates its way through the tender layers of your dignified looks a little too strongly. ";
                            }
                            break;
                        case "morbidly obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a profoundly portly body swimming with expansive convexities and sloshing bulges, and all that flesh starts to quake and shiver at the slightest turn or jolt, requiring a constant vigil over your posture to avoid a noisy collapse. People in your vicinity often lend you their respect as well as curiosity, aware of how much it must have cost to attain and maintain such a grand physique, although your laborious motions and shortness of breath attracts some sympathetic glances as well. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a profoundly portly body swimming with expansive curves and thick folds, and all that flesh starts to quake and shiver at a slightest turn or jolt, requiring a constant vigil over your posture to avoid a noisy collapse, and you never fail to keep it. People in your vicinity often lend you their respect as well as curiosity, aware of how much it must have cost to attain and maintain such grand physique, although your laborious motions lead them to conjecture that you don\'t belong with the adventuring lot. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have an inordinately corpulent body with sloping protrusions given to wobbling and undulating at the changes of their momentum, but you are in definite control over setting your path. Friends and miscellaneous townfolk find your heavy frame to be both a sign of prosperity and social class, and you are never refused a hearty smile and a reverential bow, and even beyond the city gates your massive stature is a beacon of security for those seeking shelter. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a stout body with a clear feel of might and potency to your stance and martial prowess, made all the more impressive for the billowing rotund bulk of excess weight that you manage to keep in check, with the exception of harmless rippling and quivering after each dash or swing. In the social scene of any town you visit, your hardy confidence and determination in conjunction with your mass are quick to earn you a reputation of a mother figure to the entire community, making people flock to you for advice, protection and recipe consultations. ";
                            }
                            break;
                        case "massive":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have the body of a lifelong glutton that is given most of its voluminous definition by firm and bountiful layers of fat rather then bones or muscle, and it takes all of your strength and focus to combat the wild swings of the more bulging parts of you that any drastic movement entails. Seeing as the most prominently well-fed folks around tend to be either successful gastronoms and combatants or savoury morsels for the countryside\'s numerous predators, your difficulties in managing the weighty baggage of your loose flesh engender sympathy and protective attitude in those around you, although in safer settings behind the city walls you are often treated as a goddess of plenty and a paragon of epicurean living. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have the body of a lifelong glutton that is given most of its voluminous definition by firm and bountiful layers of fat rather then bones or muscle, and it takes most of your strength and focus to combat the wild swings of the bulging parts of you that any drastic movement entails. Seeing the most prominently well-fed folks around tend to be either successful gastronoms and combatants or savoury morsels for the countryside\'s numerous predators, your shortcomings in managing the weighty baggage of your loose flesh properly engender sympathy and protective attitude in those around you, although in safer settings behind the city walls you are often treated as a goddess of plenty and a paragon of epicurian living. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have an immensely fat constitution with abounding, lush curves dancing with delicate ripples and forceful quivering on the rare occasions you are forced to move quickly, but the very fact of you being capable of such bouts despite the obvious hindrance speaks volumes about the strength your round supple surfaces hide. Those you have dealings with are usually inclined to give any request or inquiry of yours top priority, recognizing how your corporeal weight reflects that of your experience in life, your confident bearing and expansive presence further cementing your authority and securing further admiration. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have an outstandingly corpulent frame, its vast rounded surfaces firmed with grandiose fat deposits and plenty of harder flesh that gives you laboured, yet precise control of your rotund body in and out of the sweat-wringing efforts in craft or combat. It is hard to overstate how noticeable you are in a crowd, and since due to the recent history of the region that crowd can be composed almost exclusively of strapping or blubbery denizens, that is saying something, and you in all your fleshy, yet firmly powerful glory are an obvious go-to person for grim emergencies and lavish revelries both. ";
                            }
                            break;
                        case "spherical":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have an amazingly blubbery frame that represents the degree of obesity that a small gathering of self-indulgent gourmands couldn\'t hope to match even if put together, and there is so much swing in your lushly fleshed protuberances and even the thick coating of pudge closer to your miserably sapless muscle and bones that you can barely move without compromising your balance and losing your breath altogether. Your appearance becomes the talk of whatever town you choose to waddle in, and although even those who\'d had time to get used to the rampant corpulence of the folks of these parts occasionally treat you to a bewildered stare, the gravity of your clearly harmless form most often warrants a warm welcome bordering on a massive celebration. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have an amazingly blubbery frame that represents the degree of obesity that a small gathering of self-indulgent gourmands couldn\'t hope to match even if put together, and there is so much swing in your lushly fleshed protuberances and even the thick coating of pudge closer to your unfortunately outmassed muscle and bones that you can barely move without compromising your balance and losing your breath altogether. Your appearance becomes the talk of whatever town you choose to waddle in, and although even those who\'d had time to get used to the rampant corpulence of the folks of these parts occasionally treat you to a bewildered stare, the gravity of your clearly harmless form most often warrants a warm welcome bordering on a massive celebration. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have an amazingly blubbery frame that represents the degree of obesity that a small gathering of self-indulgent gourmands couldn\'t hope to match even if put together, and there is so much swing in your lushly fleshed protuberances and even the thick coating of pudge closer to your marginally adequate muscle and bones that you can barely move without compromising your balance and losing your breath altogether. Your appearance becomes the talk of whatever town you choose to waddle in, and although even those who\'d had time to get used to the rampant corpulence of the folks of these parts occasionally treat you to a bewildered stare, the gravity of your clearly almost harmless form most often warrants a warm welcome bordering on a massive celebration. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a breathtakingly corpulent body, furnished with blubber to a degree that it takes a dozen seconds to for all its rolling curves to stop sloshing about after you\'ve come to a halt from a slow stroll, and yet there is a suspicious hardiness to your posture and movements that a great deal of hidden brawn could be inferred from. Around the city premises, your heavy steps often serve as a call for all sorts of sincere admirers and ingratiating sycophants, and your girthy form\'s confidence of bearing means that even the most chivalrous of disposition don\'t hesitate to hide behind your expansive back when the alarm bells ring. ";
                            }
                            break;
                        case "mountainous":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a constitution so prodigiously saturated with blubber that in a frighteningly likely event of losing your balance through carelessness or excruciating exhaustion, the fall itself would be mercifully quick and amply cushioned, seeing as your lower body\'s opulent deposits of heaving flesh are never too far away from the ground, although there would still be the prolonged and nearly impossible quest for regaining leverage and rising again to undertake. Many unfamiliar folks find themsleves too overwhelmed by your rampantly fattened form to approach, instead preferring to warily study from afar with concern and pity in their stares, but the more flexibly-minded and aware individuals rush to greet and offer their services to you, realizing that in this realm, every pound of trembling fatty flesh that a person can accrue without getting waylaid by a crafty predator or burning it off at the gymnasium is worth its weight in gold, and by that standard you must be the most affluent and powerful lady in the vicinity. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a constitution so prodigiously saturated with blubber that in a likely event of losing your balance through carelessness or excruciating exhaustion, the fall itself would be mercifully quick and amply cushioned, seeing as your lower body\'s opulent deposits of heaving flesh are never too far away from the ground, although there would still be the prolonged and hellishly rigorous quest for regaining leverage and rising again to undertake. Many unfamiliar folks find themsleves too overwhelmed by your rampantly fattened form to approach, instead preferring to warily study from afar with concern and wonder in their stares, but the more flexibly-minded and aware individuals rush to greet, offer their services to you, realizing that in this realm, every pound of trembling flesh that a person can accrue without getting waylaid by a crafty predator or burning it off at the gymnasium is worth its weight in gold, and by that standard you must be the most affluent and powerful lady in the vicinity. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a constitution so prodigiously saturated with blubber that in a consistently avoided event of losing your balance through unforeseen heave of a blubbery hip or an excruciating exhaustion, the fall itself would be mercifully quick and amply cushioned, seeing as your lower body\'s opulent deposits of heaving flesh are never too far away from the ground, although there would still be the prolonged and arduous quest for regaining leverage and rising again to undertake. Many unfamiliar folks find themsleves too overwhelmed by your rampantly fattened form to approach, preferring instead to warily study from afar with concern and wonder in their stares, but the more flexibly-minded and aware individuals rush to greet, offer their services to you, realizing that in this realm, every pound of trembling flesh that a person can accrue without getting waylaid by a crafty predator or burning it off at the gymnasium is worth its weight in gold, and by that standard you must be the most affluent and powerful lady in the vicinity. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a staggeringly blubbery form so full of the the proudly worn keepsakes of unbridled gluttony that in some towns your hips graze walls on both sides of alleys wide enough to admit two-horse carriages, and the loose flesh galore that your frame reluctantly, but diligently supports, swings in complex and expansive arcs that are still not enough to throw your hardy body off balance. Your adventuring comrades in arms are proud to have a veritable war machine among their ranks, and your mellower town contacts always site your visits as a manifold blessing and an exalted honour, while those who have yet to earn your trust make a point of getting out of your way with all possible alacrity or humbly cheering you on from the sidelines. ";
                            }
                            break;
                        case "colossal":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a body boasting uncharted levels of obesity that far outclasses the physique of even the most well-insulated bestial denizens of the cold north, serving as the ultimate proof that there is no limit to how fat someone can get these days, and every aspect of your constitution is so engorged with lard and sprawling out so far from your bones and muscles that some of the most ponderously sagging features of yours outright ignore slight changes in your stance, remaining inert and only jiggling lightly; when you do sway your entire glorious bulk into action by exerting yourself to the point of bitter anguish, there isn\'t a part of you that remains untouched by the stormy undulations of flesh adding even more unbearable strain to your frame. Although the recent mysterious developments have made fuller physiques commonplace, the magnitude of your bountiful fleshiness leaves most of your new acquaintances shaking their heads in disbelief or gazing with rapt adoration, and while your perpetually exhausted appearance puts some at ease, it doesn\'t change the fact that you only ever get addressed by a stranger on rare occassions and in a nervous, overtly polite manner. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a body boasting uncharted levels of obesity that far outclasses the physique of even the most well-insulated bestial denizens of the cold north, and every aspect of your constitution is so engorged with lard and sprawling out so far from your bones and muscles that some of the most ponderously sagging features of yours outright ignore slight changes in your stance, remaining inert and only jiggling lightly; when you do sway your entire glorious bulk into action by exerting yourself to the point of drained exasperation, there isn\'t a part of you that remains untouched by the stormy undulations of flesh adding even more unbearable strain to your frame. Although the recent mysterious developments have made fuller physiques commonplace, the magnitude of your bountiful fleshiness leaves most of your new acquaintances shaking their heads in disbelief or gazing with rapt adoration, and while your frequently exhausted appearance puts some at ease, it doesn\'t change the fact that you only ever get addressed by a stranger on rare occassions and in a nervous, overtly polite manner. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a body boasting uncharted levels of obesity that far outclasses the physique of even the most well-insulated bestial denizens of the cold north, and every aspect of your constitution is so engorged with lard and sprawling out so far from your bones and muscles that some of the most ponderously sagging features of yours outright ignore slight changes in your stance, remaining inert and only jiggling lightly; when you do sway your entire glorious bulk into action by exerting yourself to the point of surly discontent, there isn\'t a part of you that remains untouched by the stormy undulations of flesh adding even more unbearable strain to your frame. Although the recent mysterious developments have made fuller physiques commonplace, the magnitude of your bountiful fleshiness leaves most of your new acquaintances shaking their heads in disbelief or gazing with rapt adoration, and while the sight of your grittily laborious movements engenders respect in some, it doesn\'t change the fact that you only ever get addressed by a stranger on rare occassions and in a nervous, overtly polite manner. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a body more befitting of a great sea leviathan than a lady - massive and bulging with convex, curving and folding surfaces that fill even the most cavernous of confined spaces, and need little encourgement to launch into a fluid dance of wobbling fatness; while one might consider such portliness incompatible with active lifestyles, the unflinching determination of your heaving movement is indicative of the hidden titanic fortitude of your bloated form. Since you\'ve gone far beyond the boundaries of what even the most morbidly obese people should look like, it is understandably problematic for the townfolk to accept you as one of their own, but they are more then willing to applaud and praise you as an exceptional entity, especially since its quite clear that any friends of yours would be guaranteed both paramount degree of protection and - judging by your apparent appetite - an exclusive dining club membership. ";
                            }
                    }
            }
            return _loc1_;
        }

        protected function describeShoulders():String {
            var _loc1_:* = null;
            _loc1_ = "";
            switch (this.playerGender.name) {
                case this.Male.name:
                    switch (this.bodyFatTier()) {
                        case "malnourished":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a practically cadaverous face with pronounced cheekbones and jawline, a thin and sinewy neck, and sagging shoulders with " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " stretched tautly around them. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a gaunt face with animated features, an ascetic neck with pronounced sinews, and ruggedly built shoulders tightly wrapped in " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " that you keep firm and high. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have an angular, sharp-featured face with powerful cords rolling under your jaw when you speak, a thick, hard-textured neck and broad, well-developed shoulders with " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " wrapped firmly around them. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a blocky, rock-hard face that radiates determination and might, a thick neck bulging with powerful bulging flesh and immensely broad shoulders with iron trapezius and looming deltoids stretching their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                            }
                            break;
                        case "healthy":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a regularly shaped face, a lean neck and unimpressive shoulders covered in " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a face with animated features, a firmly held neck and equally toned shoulders that have the beginnings of might budding under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a strong-jawed face, a thick hardy neck and broad shoulders with well-developed muscles apparent under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have an iron-jawed, sturdy face that a king of old might have had, a hefty, potent neck, and broad shoudlers with their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " crawling with the restless overdeveloped trapezius and deltoids. ";
                            }
                            break;
                        case "robust":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a tender-featured face, a smooth neck and shoulders with insignificant soft padding under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have an alert, smooth face, a neck that doesn\'t quite reveal the reason for its firmness, and shoulders with vague suggestion of strength under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a supple, strong-jawed face, a smooth stalwart neck and broad shoulders whose formidable might is softened by the slimmest of padding under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have an slightly plump angular face, an unyielding neck bulging with powerful flesh, and immensely broad, well-trained shoulders that stretch their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " tautly, but have the outlines of rippling brawn subdued a fraction by the meager cover of fat. ";
                            }
                            break;
                        case "overweight":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a mildly rounded face, a soft feeble neck and sagging shoulders with quite a bit of padding under the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have an animated, plump-cheeked face, a neck that is tender to the touch, but implying tone and firmness by its brisk movements, and seemingly tender shoulders smoothly wrapped in " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " held firmly upright. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a plushly cheeked, but strong-featured face, a mighty neck that is downy to the touch, and strong broad shoulders mostly advertised as such by the joint volume of toned flesh and plump padding under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a full-blooded and brawny face, an imposingly strong neck, and profoundly developed broad shoulders appearing even broader for the added volume your padding its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                            }
                            break;
                        case "chubby":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a full face with round drooping cheeks, a feeble neck with enough flab to form a second chin under the jaw, and slumping soft shoulders amply padded under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a face with quick features and rounded cheeks, a second chin only visible when you sink your neck into your doughy shoulders, which have a good proportion of loose and hardened flesh under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a stout, hard-featured face, a thick hardy neck that also has substantial padding, and broad, heavyset shoulders with their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " bolstered by a hearty testament to your dining habits. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a face with focused, controlled features that remain imposing even in spite of the soft cheeks, a thick neck with power subtly shifting under its doughy exterior, and immensely developed deltoids well-hidden by a plush cover of fat under the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " your broad shoulders. ";
                            }
                            break;
                        case "corpulent":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a rounded face with firmly plump cheeks, an untoned neck so chubby it runs streamlined from your collarbone to your chin, and limply hanging shoulders with a good helping of fat under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have an alert face with robust cheeks, a toned neck that is still so chubby it runs streamlined from from your collarbone to your chin, and firm, plump shoulders given an nice swell by a layer of fat under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a hard-featured face with pudgy cheeks, a sturdy neck that is so thick and generously padded it runs streamlined from your collarbone to your chin, and broad, heavy shoulders richly lined with fat under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a seasoned athlete\'s face softened by the chubby cheeks, a mighty neck that is still plump enough to run streamlined from your collarbone to your chin, and colossally broad shoulders that conceal their awesome strength with the significant layer of fat under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                            }
                            break;
                        case "obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a face with pouting pudgy cheeks smoothly flowing into your thick and swollen neck, and down to your heavily slouching shoulders that are very thickly padded under your " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a face with pouting pudgy cheeks smoothly flowing into your thick and swollen neck, and down to your shoulders that are very thickly padded under your " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have an alert face with cheeks plumply standing out and smoothly your neck that has the stiffness of tone as well as the lush yielding texture of fat, and broad, thick shoulders that you need to really push into to hit hard muscle under the padding of their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a hard-featured, but tender-textured face sporting pouting chubby cheeks that flow down to your thick, hardy neck also wrapped generously in a more supple flesh, and lower into formidably broad shoulders that are so well padded under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " that one can only guess as to the extent of terrific strength lurking within. ";
                            }
                            break;
                        case "morbidly obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a doughy face with cheeks bulging prominently before slightly swelling into your fat neck, and down to your powerlessly slumped shoulders that are thickened with a great deal of soft flesh under your " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a well-fed face with firm cheeks bulging prominently before slightly swelling into your fat neck, and down to your slumped shoulders that are thickened with a great deal of soft flesh under your " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have an animated face with firmly bulging cheeks that expand slightly into your thick, firmly held neck that is given most of its soft volume by its fat, and broad, burly shoulders that have a impressive amount of padding under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a hard-eyed, yet amply rounded face with firmly bulging cheeks gaining volume as they flow into your sturdy, but generously fattened neck, and imposingly spanning shoulders with prodigiously thick padding under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                            }
                            break;
                        case "massive":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have the tired face of an eating contest champion, with bulging blubbery cheeks resting on the thick collar of fat around your tender neck, and your helplessly drooping shoulders have lush pudge tautly stretching their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have the face of an eating contest champion with bulging blubbery cheeks resting on the thick collar of fat around your neck, and your drooping shoulders have lush pudge tautly stretching their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have an alert face with ripely pouting lardy cheeks resting on the thick collar of fat around your neck, and your broad, heavily built shoulders that have copious amounts of adipose padding their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a face obviously touched by hardship and effort under its gorgerously chubby cheeks that rest on the thick collar of fat around your rigidly held neck, and your sprawling, indomitable shoulders have their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " engorged with layers of flab. ";
                            }
                            break;
                        case "spherical":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "The massive bulk of your body makes your head look tiny in comparison, and your perpetually tired face is blubbery, with your " + this.playerSpecies.mouth + " nearly halfway engulfed by the portly cheeks drooping onto the weighty roll of flab your neck is bulging with; your pathetically hanging shoulders have an immensely thick coating of fat under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "athletic":
                                    _loc1_ = "The massive bulk of your body makes your head look tiny in comparison, and your face is blubbery, with your " + this.playerSpecies.mouth + " nearly halfway engulfed by the portly cheeks drooping onto the weighty roll of flab your neck is bulging with; your weakly hanging shoulders have an immensely thick coating of fat under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "muscular":
                                    _loc1_ = "The massive bulk of your body makes your head look tiny in comparison, and your energetic face is blubbery, with your " + this.playerSpecies.mouth + " nearly halfway engulfed by the portly cheeks drooping onto the weighty roll of flab your neck is bulging with; your exhaustedly slumped broad shoulders have an immensely thick coat of fat under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "The massive bulk of your body makes your head look tiny in comparison, and your world-weary face is supremely well-fed, with your " + this.playerSpecies.mouth + " nearly halfway engulfed by the poutng chubby cheeks folding below against the weighty roll of flab your neck is bulging with; your unbelievably firm-looking, broad shoulders have their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " copiously padded with fat. ";
                            }
                            break;
                        case "mountainous":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "The giant doming mass of your body makes your head look diminutive in comparison, and your anguished face is swollen enough to make half of your " + this.playerSpecies.mouth + " sink into the ladaceous cheeks sprawled on the slab of fat that your weak neck is distended by; your pitifully slouched shoulders have a barrelful of blubber stretching their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "athletic":
                                    _loc1_ = "The giant doming mass of your body makes your head look diminutive in comparison, and your vexed face is swollen enough to make half of your " + this.playerSpecies.mouth + " sink into the ladaceous cheeks sprawled on the slab of fat that your neck is distended by; your pitifully slouched shoulders have a barrelful of blubber stretching their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "muscular":
                                    _loc1_ = "The giant doming mass of your body makes your head look diminutive in comparison, and your focused face is swollen enough to make half of your " + this.playerSpecies.mouth + " sink into the ladaceous cheeks sprawled on the slab of fat that your alertly kept neck is distended by; your heavily slouched broad shoulders have a barrelful of blubber stretching their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "The giant doming mass of your body makes your head look diminutive in comparison, and your resolute face is so stuffed with blubber that half of your " + this.playerSpecies.mouth + " sinks into the swollen cheeks sprawled on the slab of fat that your neck is distended by; your shoulders, while broad and brawny in size, have their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " unstintingly bolstered with lard. ";
                            }
                            break;
                        case "colossal":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "The gargantuan bulk of your body makes your head look miniscule in comparison, and your desperately tortured face is so well-fed that most of your " + this.playerSpecies.mouth + " has become smothered between your bloated cheeks, which spill onto the multiple loaf-thick rolls of fat that engorge your unsteady neck; your shoulders lack the power to support themselves, but are propped up by your swollen sides, and have their own " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " tautly stretched by the incredible abundance of blubber underneath. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "The gargantuan bulk of your body makes your head look miniscule in comparison, and your tortured face is so well-fed that most of your " + this.playerSpecies.mouth + " has become smothered between your bloated cheeks, which spill onto the multiple loaf-thick rolls of fat that engorge your unsteady neck; your shoulders lack enough power to support themselves, but are propped up by your swollen sides, and have their own " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " tautly stretched by the incredible abundance of blubber underneath. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "The gargantuan bulk of your body makes your head look miniscule in comparison, and your alert, but pained face is so well-fed that most of your " + this.playerSpecies.mouth + " has become smothered between your bloated cheeks, which spill onto the multiple loaf-thick rolls of fat that engorge your unsteady neck; your broad shoulders possess just about enough power to support themselves, but are propped up by your swollen sides anyway, and have their own " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " tautly stretched by the incredible abundance of blubber underneath. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "The gargantuan bulk of your body makes your head look miniscule in comparison, and your enduring and hard-eyed face is wantonly fattened to the point of your " + this.playerSpecies.mouth + " becoming mostly trapped between the bouncing blubbery masses of your cheeks, which rest on multiple loaf-thick rolls of fat wrapped around your hardy neck; your broad shoulders ride proudly on the cushions of your filled-out sides, but harbour terrific might under all the countless layers of lard stretching their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                            }
                    }
                    break;
                case this.Female.name:
                    switch (this.bodyFatTier()) {
                        case "malnourished":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a frail, sickly face, a dainty neck with thin " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " covering it, and weakly slumped shoulders. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a face of nobly ascetic features, an elegantly thin neck tautly wrapped in " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " and shoulders that you carry with grace despite seemingly not having much flesh on them. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a chisled, rigid face, a strong and lithe neck with all that gives it power evident through its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and exceptionally hardened shoulders. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a tough, roughly-featured face, the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your thick neck is constantly shifting with the steely muscles coiling underneath, and your broad amazonian shoulders brim with condensed might. ";
                            }
                            break;
                        case "healthy":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a typical soft-featured face, a narrow neck with a hint of vitality under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and fairly frail shoulers. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a face with mercurial features, an elegant thin neck with sinews barely visible through the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and shoulders that you keep straight without effort. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a finely toned face, a strong and lithe neck with clear strength under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and hardened shoulders that nonetheless remain smoothly elegant. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have tough, yet refined features, a titanically developed neck tautly wrapped in " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and broad, looming shoulders rife with toil-hardened flesh. ";
                            }
                            break;
                        case "robust":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a modestly full-cheeked face, a smooth tender neck with glossy " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " around it, and soft, slightly sagging shoulders. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a soft face with animated features, an agile neck smoothly covered in " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " and firmly held, but supply-textured shoulders. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a hard-boned, yet delicately rounded face, a strong, hardy neck with a smattering of flab under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and smoothly elegant shoulders that are nonetheless increadibly well-exercised and resilient. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a solid face with its hardest edges smoothened just a bit, a sturdy neck that suggests lightning reflexes despite its thickness and a scarce padding under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and broad powerful shoulders are given a degree of elegance by your natural softness. ";
                            }
                            break;
                        case "overweight":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a delicately rounded face, a tender neck with little strength under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and slightly sagging shoulders with a decent layer of downy flesh covering them. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have an ample, expressive face, a firm neck with its volume enhanced by a layer of fluff under your " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and firmly held, but smoothly rounded shoulders. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a decisive, strong-featured face evened out by downy cheeks, a toned and pliant neck made supple by the softer flesh under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and powerful shoulders with hard muscles subtly hinted at by their volume and vague outlines. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a face with sharp and focused features smoothened a little by your supple cheeks, a mighty neck which is still quite soft to the touch due to minor pudginess under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", while the steep arch of your broad, lightly padded shoulders are nothing short of grandiose in terms of brawn. ";
                            }
                            break;
                        case "chubby":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a doughy face with prominent cheeks, a bit of a second chin, a plump neck with very little strength flowing under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and droopy shoulders saturated with fat. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a face touched by urgency and work, but otherwise quite plump, firmly held neck with a good deal of squishier stuff under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and liberally filled-out shoulders that you hold upright nonetheless. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a hard-featured face with peculiarly prominent cheeks, a mighty neck with enough fluff under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " to give it a doughy texture, and excellently developed shoulders concealing their strength under the plush exterior. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a strong-jawed face with modestly pouting cheeks, a flabby neck that is still evident as being splendidly developed under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and formidable broad shoulders with all their brawn nearly completely covered up by yielding fat. ";
                            }
                            break;
                        case "corpulent":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a well-fed face with round, firmly plump cheeks, a tenderly chubby neck with its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " stretching softly from your collarbone to your chin, and meekly slumped pudgy shoulders. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a quick-featured face with heartily chubby cheeks, a fatty, yet agile neck with its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " stretching softly from your collarbone to your chin, and shoulders held with dignified grace that isn\'t diminished by how well-padded they are. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have an athletic face, sharp-eyed and concentrated, but with pudgy, firm cheeks, a fleshy neck with its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " stretching softly from your collarbone to your chin and its strength revealing itself during dashing gymnastic bouts, and broad, thoroughly plumped up shoulders hiding significant power deep down. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a face of a mighty lady brawler adorned with firm, rounded cheeks, a plushly padded neck with its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " stretching softly from your collarbone to your chin and physical power evidencing itself despite all the glossy cover, and broad burly shoulders that nonetheless look merely thick and pudgy unless a flex brings their true power to the forefront. ";
                            }
                            break;
                        case "obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a face with rounded pouting cheeks smoothly flowing into your generously pudgy, supple neck that lends its padding\'s softness to its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and slack shoulders sporting significant insulation. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a face with rounded pouting cheeks smoothly flowing into your generously pudgy, supple neck that lends its padding\'s softness to its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and often drooping shoulders sporting significant insulation with a tiniest hint of vigor surfacing every once in a while. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a quick-eyed, martial face decorated with plumply pouting cheeks that flow smoothly into your firmly held neck that has a profound abundance of pudge under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and thickset, evidently well-developed, but also intesively fleshy shoulders. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a face hardened by toil, but then softened still by a set of pudgy cheeks proudly standing out and smoothly flowing into your thickly built and hardy-looking neck wrapped in thick flab under its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and stout, imposingly broad shoulders with enough padding to fully obscure the texture of iron muscle. ";
                            }
                            break;
                        case "morbidly obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a fluffy face with doughy cheeks bulging forth, expanding gently into your tender, voluminous neck that has more than enough soft fat padding its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and languidly slouched shoulders also rife with jiggling flesh. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a quick-eyed face with doughy cheeks bulging forth, expanding gently into your tender, voluminous neck that has more than enough soft fat padding its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and shoulders that you strain to keep upright, also rife with jiggling flesh. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a determined face with firm cheeks bulging cheerfully, swelling moderately downwards into your surprisingly graceful neck wrapped in thick, soft layers of pudge beneath its " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ", and firmly balanced, but throughly corpulent shoulders. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a face that doesn\'t flinch at the smithy\'s smoldering heat nor at the sound of battle, and has cheeks ripely bulging from the sides of your head, meagerly growing in girth as they flow into your steady, but profusely flabby neck, and hardily built shoulders that area still unbelievably soft-fleshed under their " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". ";
                            }
                            break;
                        case "massive":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a face rounded and plumped by scores of hearty meals, and have swollen cheeks resting on the thick collar of fat under the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your downy neck, and amazingly fleshy shoulders slumped mirthlessly. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You have a face rounded and plumped by scores of hearty meals, and have swollen cheeks resting on the thick collar of fat under the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your soft neck, and amazingly fleshy shoulders that get slumped sadly whenever you\'re not watching your posture. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You have a face with quick features weighted down by by the robust, chubby cheeks resting on the thick collar of fat under the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your strong neck, and admirably well-held, stoutly built shoulders jiggling with the flab padding them. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You have a portly face with heroic features and generously flabby cheeks resting on the thick collar of fat under the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your mighty neck, and broad, brawny, but still profusely blubbery shoulders. ";
                            }
                            break;
                        case "spherical":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "The heaving mass of your body makes your head appear disproportionately small, and your pained chubby face has its " + this.playerSpecies.mouth + " beginning to drown in the prominent blubbery cheeks sagging onto the voluminous roll of fat stretching the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your neck; your gloriously chubby shoulders are always hopelessly slouched. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "The heaving mass of your body makes your head appear disproportionately small, and your chubby face has its " + this.playerSpecies.mouth + " beginning to drown in the prominent blubbery cheeks sagging onto the voluminous roll of fat stretching the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your neck; your gloriously chubby shoulders can often be seen hopelessly slouched. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "The heaving mass of your body makes your head appear disproportionately small, and your alert chubby face has its " + this.playerSpecies.mouth + " beginning to drown in the prominent blubbery cheeks sagging onto the voluminous roll of fat stretching the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your neck; your gloriously chubby shoulders are slouched whenever you are at rest, and assume a hard, rigid posture at times of need. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "The heaving mass of your body makes your head appear disproportionately small, and your resolute face is heavily padded and has its " + this.playerSpecies.mouth + " beginning to drown in the weighty bouncing cheeks laying on the voluminous roll of fat stretching the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your sturdy neck; your steadfast, burly shoulders are inordinately full of softer flesh. ";
                            }
                            break;
                        case "mountainous":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "The grandiose bell-shape of your body makes your head appear peculiarly petite, and your beset fatty face has a smothered quality to it because your " + this.playerSpecies.mouth + " is halfway enfolded by the bulging corpulent cheeks that spill onto the blubbery scarf tightly padding the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your feeble neck; your shoulders, mind-bogglingly both softened and solidified by the plentiful layers of flab, are desperately slumped down even at the best of times. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "The grandiose bell-shape of your body makes your head appear peculiarly petite, and your harassed fatty face has a smothered quality to it because your " + this.playerSpecies.mouth + " is halfway enfolded by the bulging corpulent cheeks spilling onto the blubbery scarf tightly padding the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your neck; your shoulders, mind-bogglingly both softened and solidified by the plentiful layers of flab, are weakly slumped down even at the best of times. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "The grandiose bell-shape of your body makes your head appear peculiarly petite, and your alert fatty face has a smothered quality to it because your " + this.playerSpecies.mouth + " is halfway enfolded by the bulging corpulent cheeks spilling onto the blubbery scarf tightly padding the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your neck; your hardy shoulders, mind-bogglingly both softened and solidified by the plentiful layers of flab, are slumped heavily when at ease. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "The grandiose bell-shape of your body makes your head appear peculiarly petite, and your quick-featured portly face has a " + this.playerSpecies.mouth + " halfway sunken into the firm lardy cheeks propped up on the blubbery scarf tightly padding the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your mighty neck; your shoulders are given expansive volume and breadth by a ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "few dozen centimeters";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "foot";
                                    }
                                    _loc1_ = _loc1_ + "-thick layer of fat as well as the harder flesh buried deep, deep inside them, and have a dignified tone to their bearing. ";
                            }
                            break;
                        case "colossal":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "The monumental measurements of your body make your head to appear insignificant in comparison, and your face is locked in an expression of overworldly anguish, and your " + this.playerSpecies.mouth + " is nearly all gone into the stifling embrace of the wobbling lardaceous cheeks flagging onto the multiple loaf-thick rolls of fat stretching the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your weak neck; your frailly muscled shoulders are saved from slouching by the generous padding of your sides, and are magnificently padded with fat themselves. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "The monumental measurements of your body make your head appear insignificant in comparison, and your face is locked in an expression of overworked desperation, and your " + this.playerSpecies.mouth + " is nearly all gone into the stifling embrace of the wobbling lardaceous cheeks flagging onto the multiple loaf-thick rolls of fat stretching the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your strained neck; your slightly muscled shoulders are saved from slouching by the generous padding of your sides, and are magnificently padded with fat themselves. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "The monumental measurements of your body make your head appear insignificant in comparison, and your face is locked in an expression of resignation to unceasing effort, and your " + this.playerSpecies.mouth + " is nearly all gone into the stifling embrace of the wobbling lardaceous cheeks flagging onto the multiple loaf-thick rolls of fat stretching the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your resilient neck; your respectably muscled shoulders are saved from slouching by the generous padding of your sides, and are magnificently padded with fat themselves. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "The monumental measurements of your body make your head appear insignificant in comparison, and your harassed, but uncompromisingly resolute face has its " + this.playerSpecies.mouth + " nearly engulfed by the unbelievably filled out cheeks drooping onto the multiple loaf-thick rolls of fat padding the " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + " of your burly neck; your broad shoulders are hardy and excellently developed despite the massive coat of lard padding them and the thick stuffing on your sides that prop your shoulders up a little. ";
                            }
                    }
            }
            return _loc1_;
        }

        protected function describeUpperBody():String {
            var _loc1_:String = null;
            _loc1_ = "";
            switch (this.playerGender.name) {
                case this.Male.name:
                    switch (this.bodyFatTier()) {
                        case "malnourished":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms have hardly any tone or dexterity to them, your ribs are distinctly displayed, while your back has a ridge of pronounced vertebrae running along it. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are deceptively skinny for the quickness and force they are capable of, your upper body is a slightly starved-looking basrelief of bone and hard muscle, while your back is thoroughly exercised. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your muscular arms are as powerful as they look, your torso is impressively barrel-shaped from all the muscle wrapped around it without a trace of idle flesh, while your broad back is sharply-textured and rugged, with its every knot, rope and strand easily discernable. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are a tangle of ale keg-thick serpents in a deadlock, your massively muscular chest has enormous pectorals and serratis rippling in the front, while your statuesque back appears ready to withstand a cave-in. ";
                            }
                            break;
                        case "healthy":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms don\'t seem to have much tone, your chest muscles lack definition while your back isn\'t very firm, but on the whole your upper body is still adequately fit. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are capable of quickness and pack a wallop, your torso displays adequate muscle tone and power, while your back is thoroughly exercised. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your muscular arms are as powerful as they look, your torso is impressively barrel-shaped, while your back is formidably and reliably sturdy. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are colossaly musclebound and thick as a treetrunk, your strapping chest is wide enough to shield a small adventuring party, while your back is monolithic in its tone and resilience. ";
                            }
                            break;
                        case "robust":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are soft and unexercised, your chest lacks tone and your back isn\'t very hard or firm, but it\'s a fine torso for a person of leisure. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are quite agile and capable despite their texture not showing it, your chest has subtly defined muscles, while your firm back is handsomely smooth. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your strong, thick arms are deceptively smooth, your wide chest conveys its power with partly obscured outlines of hard perctorals, while your back is strong and flat. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are covered in thick, bulging muscles that are somewhat softer around the edges than those of more dedicated athletes, your massive, doorframe-eclipsing chest makes its strength obvious through volume alone, while your mighty, yet glossy back is seemingly devoid of any weakness. ";
                            }
                            break;
                        case "overweight":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are a tad flabby, your chest is feeble and untoned and your soft back doesn\'t seem to be up to any heavy lifting. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your fluffy arms are surprisingly quick and exercised, your chest is well-toned despite looking smooth, while your back is hardened and flexible under its plush surface. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are tough and nimble under their slight soft cover, your wide chest hides great strength hinted at by its general burliness and the softened shifting when you flex or strain, while your slightly plump back is hardy and endurant. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are mightily muscled and not even a bit of flab on top can cover their grand proportions; your colossal torso flashes engorged pectorals whenever you move or turn, while your back hides unfathomable power under its smooth, supple exterior. ";
                            }
                            break;
                        case "chubby":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are pudgy and hang down loosely more often than not, your sagging chest advertizes idleness, while your back is mildly burdened by the fleshy baggage of your torso. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms have been intimately acquainted with toil and challenges, but didn\'t lose their flabby flesh in the process, your well-fed upper body is exercised to a certain extent, while your firm back possesses respectable limberness despite its plump appearance. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are flabby to the touch, but their extrordinary strength can be inferred from their volume and vague definition, your wide, doughy chest rearranges itself into a more formidable display when you flex its powerful muscles, while your trained back has only just enough soft flesh to cover up and smoothen it. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms have the appearance of being tremedously powerful even through a good deal of pudgy padding, your expansive upper body is developed beyond belief aside from looking profoundly well-fed, while your luxuriantly fleshed back doesn\'t need to strain to keep your heroic torso proudly erect. ";
                            }
                            break;
                        case "corpulent":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are fairly feeble and very fleshy, your soft, doughy chest could conceal a good deal of muscle, but doesn\'t, while your perpetually strained back is thickly lined with pudge. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms quite pudgy, but are exercised enough to keep up with the challenges of their soft lining, your generously fleshed chest doesn\'t betray much power underneath, even if there is something faintly hinted at by the way you move, while your profoundly plump back just about manages to keep itself straight without much effort. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are very well-developed, but also quite thickly padded, your imposingly wide chest suggests serious might slumbering under the soft cover, while your meaty back displays its hardiness by sustaining a flexible, springy posture even against the odds of your stout frame. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are thickly and softly bosltered from fabulous feasting, but under the cover shift the hardest biceps one could hope to develop, and your burly, fleshy torso is given a good deal of its width by the brawn pulsing from within, while your tremendously powerful back can afford its hearty padding. ";
                            }
                            break;
                        case "obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are thick and smooth with flab and jiggle quite a bit when you move them, your chest is given much extra volume by its padding, although it\'s lean compared to the gut hanging below. Your lushly pudgy back fights a losing fight against the oppressive weight it has to support. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are thick and smooth with fat and jiggle quite a bit when you move them, your chest is given much extra volume by its padding, although it\'s lean compared to the gut hanging below. Your lushly pudgy back fights an admirable fight against the oppressive weight it has to support. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are voluminous and downy to the touch and jiggle quite a bit when you move them, but are also infused with great strength, and your wide and profoundly pudgy chest is nonetheless athletically firm. Your tough back compensates for the surplus mass nicely. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms have an extrodinary thickness and firmness of build, but are also thickly padded and jiggle quite a bit when you move them, and your expansive, mighty torso is richly lined with flab. Your profoundly doughy-textured back is so superbly trained that its excess fleshiness fails to rob it of its powerful appearance. ";
                            }
                            break;
                        case "morbidly obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are incredibly doughy, thick as a fit person\'s thigh and wobble a good deal when you move them, while your chest is so plump and sagging it would make a good number of ladies envious. Your back is strained to its limits propping up your physique. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are incredibly doughy, thick as a fit person\'s thigh and wobble a good deal when you move them, while your chest is so chubby and protuberant it would make a good number of ladies envious. Your back is strained almost to its limits propping up your physique. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are flabby and stout, thick as a fit person\'s thigh and wobble a good deal when you move them, while your expansive chest is lined heavily with doughy flesh. Your thickly and softly padded back has sufficient resilience to endure the strain. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are firmed by the cruelest physical challenges, but are still predominantly squishy, thick as a plump person\'s thigh and wobbly a good deal when you move them, while your vast, burly chest is rendered tender to the touch by all its flab. Your sturdy back is thickly lined with rippling softness perfectly obscuring its might. ";
                            }
                            break;
                        case "massive":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are exceedingly chubby, thick as a particularly fluffy pillow and wobble strongly when you move them; your torso is barrel-shaped solely on the account of its surplus weight and your swollen breasts are propped up by the slope of the heavy gut beneath. Your astoundlingly fleshy back is forced into a curve mimicking that of your belly at all times for the purposes of balance. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are exceedingly chubby, thick as a particularly plump pillow and wobble strongly when you move them; your torso is barrel-shaped solely on the account of its surplus weight, and your swollen breasts are propped up by slope of the heavy gut beneath. Your astoundlingly fleshy back is forced into a curve mimicking that of your belly most of the time in the interests of balance. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are sturdy despite their prodigious flabbiness, thick as a plump person\'s thigh and wobble strongly when you move them; your large chest is stocked with flab, and your plump breasts rest on the slope of the heavy belly beneath. Your wide back has just enough brawn inside to keep your rotund belly from winning the perpetual tug-of-war, as well as an abundance of its own weighty supple flesh. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are stoutly capable and quite blubbery at the same time, are as thick as a plump person\'s thigh and wobble strongly when you move them, and your ridiculously meaty upper body has firmly pudgy breasts hovering above the slope of the heavy belly beneath. Your gloriously fattened back boasts the width and the unseen power to support your ponderous frame. ";
                            }
                            break;
                        case "spherical":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are formidably fattened, thick as a keg of ale and slosh around mightily when you move them; your chest is lavishly corpulent, and mostly consists of two swollen bags of flesh capping the tremendous paunch beneath. Your tormented back needs to be thrust backwards at all times to combat the monstrous weight of your abdomen, and is profusely chubby and doughy in its own right. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are formidably fattened, thick as a keg of ale and slosh around mightily when you move them; your chest is lavishly corpulent, and mostly consists of two swollen bags of flesh capping the tremendous paunch beneath. Your tormented back needs to be thrust backwards at all times to combat the monstrous weight of your abdomen, but it\'s a manageable chore considering that its cause is helped by how profusely chubby and doughy it is. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are formidably fattened, thick as a keg of ale and slosh around mightily when you move them; your chest is lavishly corpulent, and mostly consists of two swollen bags of flesh capping the tremendous paunch beneath. Your tormented back needs to be thrust backwards at most times to combat the monstrous weight of your abdomen - a feat that it accomplishes splendidly - and is profusely chubby and doughy in its own right. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are awesomely powerful, but are given their firm, smooth rotundity by the opulent layer of fat on them, and are as thick as a sack of grain, quivering with great intensity when you move them; your phenomenally wide and fleshy torso has doughy breasts resting against the slope of the ponderous belly below. Your oak-like, looming back that has the resilience to stave off flopping forward due to the weight in the front, is heavily and lushly lined with blubber as an added accolade to its bearing power. ";
                            }
                            break;
                        case "mountainous":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are profoundly and tenderly obese, thick as a small beer barrel and swim with fluid undulatons when you shift them; your supremely fleshy torso is doughy and voluminous, especially the baggy breasts covering the summit of the enormous stomach below. Your gorgeously padded back lacks the sufficiently potent tone and is heavy with its own furrowing blubber, but is charged with the agonizing ordeal of supporting your girth nonetheless. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are profoundly and tenderly obese, thick as a small beer barrel and swim with fluid undulatons when you shift them; your supremely fleshy torso is doughy and voluminous, especially the baggy breasts covering the summit of the enormous stomach below. Your gorgeously padded back lacks the proper tone and is heavy with its own furrowing blubber, but is charged with the challenging ordeal of supporting your girth nonetheless, and manages it somehow. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are profoundly obese, thick as a small beer barrel and swim with fluid undulatons when you shift them; your supremely fleshy torso is doughy and voluminous, especially the baggy breasts covering the summit of the enormous stomach below. Your gorgeously padded back has a barely sufficient tone and is heavy with its own furrowing blubber, but tackles the rigorous ordeal of supporting your girth with remarkable disregard for difficulty. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are stoutly built and outstandingly furnished with blubber, are as thick as a small beer barrel, and their bulging surface starts jostling and heaving as soon as your budge them; your fascinatingly expansive and lavishly filled out chest sports firmly chubby breasts folding against the rounded bulk of the gut under them. Your back has its generous padding of lard aiding it in keeping your overburdened frame straight, but its inherent brawn alone is usually quite adequate for this purpose. ";
                            }
                            break;
                        case "colossal":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are spectacularly blubbery, thick as a great treasure chest, and when you move them their abundant loose flesh quivers so powerfully it sends ripples through the adjacent surfaces of your torso; your tremendously doughy and expansive chest is endowed with hefty, thickly bolstered bosoms that collapse on top of your gargantuan belly\'s nearly horizontal surface. Your pathetically ailing back is forced to endure the relentless onslaught of your gut\'s terrible weight, although the smallest of reliefs comes from its own opulent deposits of lard that help in maintaining a semblance of balance. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are spectacularly blubbery, thick as a great treasure chest, and when you move them their abundant loose flesh quivers so powerfully it sends ripples through the adjacent surfaces of your torso; your tremendously doughy and expansive chest is endowed with hefty, thickly bolstered bosoms that collapse on top of your gargantuan belly\'s nearly horizontal surface. Your cruelly overstressed back is forced to endure the relentless onslaught of your gut\'s terrible weight, although the smallest of reliefs comes from its own opulent deposits of lard that help in maintaining a semblance of balance. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are spectacularly blubbery, thick as a great treasure chest, and when you move them their abundant loose flesh quivers so powerfully it sends ripples through the adjacent surfaces of your torso; your tremendously doughy and expansive chest is endowed with hefty, thickly bolstered bosoms that collapse on top of your gargantuan belly\'s nearly horizontal surface. Your hardy, but severely strained back is forced to endure the relentless onslaught of your gut\'s terrible weight, although the smallest of reliefs comes from its own opulent deposits of lard that help in maintaining a semblance of balance. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are grossly engorged with lard, thick as a horse\'s torso and start quivering and sloshing like a running creek when your move them; your titanic grand chest is overgenerous in both its mighty flesh and wobbling blubber aspects, with its superbly chubby breasts smushed against the plateau of your globulous gut\'s upper pole. Your wide, stout back possesses sufficient brawn to withstand the pull of your giant belly, aided in keeping its firm balance by its own thick padding of fat that furrows and folds to rest heavily against the bulk of your bottom. ";
                            }
                    }
                    break;
                case this.Female.name:
                    switch (this.bodyFatTier()) {
                        case "malnourished":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are unseeminlgy bony, your chest is scantly fleshed with practically no breasts to speak of, while your back is too fragile to keep straight without a considerable effort. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms have all the signs of strength and pliancy, your toned chest has next to no unnecessary flesh on it, while your back is always prepared to perform a speedy transition from a firm posture into quick motion. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms have firm tissues tighly wound around them, your chest has well-defined muscles with little else to push against a bodice or a breastplate, while your strong back is like a spring straining under immense tension and ready to fly into action at any second. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are bound in firm, unyielding muscles that give them respectable girth, your small-bosomed chest is otherwise profoundly fleshed with pectorals and serratis, while your broad, rippling, knot-riddled back is might made manifest. ";
                            }
                            break;
                        case "healthy":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are slender and seemingly unused to labour, your chest is rather slim and moderately endowed, while your back is too delicate for its own sake. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms may appear slender, but there is a firmness and agility to their texture, your toned chest has respectable bosoms decorating it, while your back is lithe, powerful, but smooth. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are evidently powerful, your chest is well-developed and not lacking in its softer aspect, while your strong back is like a wound spring ready to fly into action. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are incomparably brawny and awesomely thick, the flesh of your chest is perfected through punishing exercise, with feminine features just modest enough not to get in the way, while your tighly-wound and stalwart back naturally keeps a heroic posture. ";
                            }
                            break;
                        case "robust":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are downy and delicate, your tender chest is supporting quite impressive bosoms, while your smooth back is a little limp. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms may be smooth in texture, but swift and strong in function, your subtly toned chest has large, firm bosoms decorating it and your back, while tender to the touch, harbours quite a bit of both strength and pliancy. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms look powerful even despite the seeming tenderness, your chest is well-developed as well as well-endowed, while your back is powerful and smooth. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms fail to hide thick steely muscles under their soft exterior, your upper body is superbly developed, which also goes for your sizable breasts that assert their presence in motion, while your thoroughly exercised, yet elegantly smooth back lends your stance an air of feminine regality. ";
                            }
                            break;
                        case "overweight":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are pudgy within the bounds of propriety, your downy chest is significantly and softly buxom, while your dainty, yet well-padded back is a nice substitute for chair cushions when you are forced to content your sitting needs with hard furniture. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are soft and yielding to the touch, but possess uncanny limberness and capable of applying force, your somewhat pudgy chest has some tone deep down and benefits from the extra volume in the bust area, while your exercised back shies away from making its athletic nature apparent. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms have a bit of padding making the outlines of trained muscles slightly blurry, your firm and proudly held chest is otherwise quite fleshy, while your stoutly built back is hardened far beyond its plush appearance. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms possess an outward tenderness that is betrayed by their volume and the occasional mighty flexing motion, your outstandingly sturdy upper body is profoundly filled out in all aspects, while your broad, heavily muscular back is bolstered with soft flab, but not quiet well enough to mask the underlying brawn. ";
                            }
                            break;
                        case "chubby":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms don\'t have much strong flesh on them despite being quite fleshy, your pudgy chest is blessed with large, doughy bosoms; your plush back is elegantly smooth, but is deprived of strength and flexibility, and there is a number of folds that appear where it meets the curve of your hips. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are well-exercised and nimble, but also doughy in texture, your smooth chest has a good tone completely obscured by the plentiful padding and your enviably-sized breasts; your steady back clearly belongs to someone who\'s been eating well, and there is a number of small folds that appear where it meets the curve of your hips. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms have quite a bit of padding making the outlines of your strong biceps blurry, your chest is throughly athletic on the inside, but is so plumped up on the outside and supports such a weighty bust that it nearly makes its mighty musculature unnoticeable; your limber, tough back has its strength covered up by the results of good eating equally well, and there is a number of minor folds that appear where it meets the curve of your hips. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are unmistakably powerful and gorgeously thick, even with the plump texture that they assume at rest, your tenderly-padded, heavily buxom torso is otherwise tremendously strong; your indomitable back\'s plentyful fluff only lends to its graceful fluidity, and there are a few tiny folds that appear where it meets the curve of your hips. ";
                            }
                            break;
                        case "corpulent":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms haven\'t ever received a proper training and are soft with flossy flab, your exceptionally plump chest supports heavy, firm bosoms; your poor richly-fleshed back is sagging under its burden, and there are multiple thick folds where it meets the slope of your hips. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are pudgy and yielding to the touch, but are capable far beyond their soft appearance, your well-padded chest breathes exuberant energy and sports a large, bouncy bust; your very plump back does a good job keeping your torso steady, and there are multiple folds where it meets the slope of your hips. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are thick and firm, implying strong, well-developed muscles lying below the fluffy cover, while your chest, thoroughly athletic though it is, appears smooth and tender unless you flex it, and is further covered by the plump, heavy mammaries; your smoothly pudgy back is evidently stalwart enough to cope with your body\'s challenges as well as those imposed by the adventuring life, and there are multiple folds where it meets the slope of your hips. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are very well-padded, but also greatly tempered by work and fighting, your generously pudgy torso has heroic musculature flexing through its softer lining and is endowed with firm, weighty breasts; your lushly fleshy back shows off its immense power through your steeled stance and posture, and there are multiple small folds where it meets the slope of your hips. ";
                            }
                            break;
                        case "obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms have their volume significantly increased by all the squishy flesh on them that jiggles quite a bit when you move, and your thoroughly chubby chest is endowed with ripely firm, heaving breasts. Your pitiably strained back is superbly well-padded, and the flesh under the shoulder blades folds up against the plump slopes of your hips, forming deep creases. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms have their volume significantly increased by all the squishy flesh on them that jiggles quite a bit when you move, and your thoroughly chubby chest is endowed with ripely firm, heaving breasts. Your back has a an air of defiant dignity about its strained bearing, it is lushly well-padded, and the flesh under the shoulder blades folds up against the plump slopes of your hips, forming deep creases. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are very pudgy as well as sturdy and jiggle quite a bit when you move, and your thickly insulated chest displays a weighty, robustly rounded bust. Your luxuriantly doughy back is steadily coping with the serious challenges imposed on it due to its training and brawn, and the flesh under the shoulder blades folds up against the plump slopes of your hips, forming thin creases. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are powerful in form and function, despite the generous cover of fat that jiggles quite a bit when you move, and your outstandingly well-fed upper body has faced training more than sufficient to account for the added weight, is gorgeously buxom. Your profoundly well-padded back ripples whenever the powerful, hardened strength inside is called upon, and the flesh under the shoulder blades folds up against the plump slopes of your hips, forming minor creases. ";
                            }
                            break;
                        case "morbidly obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms have the texture of a tender souffle, are as thick as a fit person\'s thigh, and jiggle a good deal when you move, while your lushly doughy chest cowers under the weight of its own supple flesh and that of the voluminous and heavy bosoms spilling onto your belly. Your sprawling portly back has its strength grievously tested at all times, and the flesh under the shoulder blades folds up against the girthy slopes of your hips, forming creases deep enough to engulf a finger lengthwise. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms have the texture of a cheesecake, are as thick as a fit person\'s thigh and jiggle a good deal when you move, while your lushly doughy chest cowers under the weight of its own supple flesh and that of the grand voluminous and heavy bosoms spilling onto your belly. Your sprawling portly back has its strength tested at all times, but shows no signs of giving in, and the flesh under the shoulder blades folds up against the girthy slopes of your hips, forming creases deep enough to engulf a finger lengthwise. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are amazingly chubby, are as thick as a fit person\'s thigh and jiggle a good deal when you move, while your voluminous, squishy torso flaunts sizable heaving breasts spilling down to your belly. Your burly, thickset back has it work cut out for it given the magnitude of all the flabby weight swaying on your frame, and the flesh under the shoulder blades folds up against the girthy slopes of your hips, forming creases deep enough to engulf a finger lengthwise. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are sturdy and firm even with all the plentiful flab in the way, are as thick as a plump person\'s thigh and jiggle a good deal when you move, and your stalwartly maintained, stout chest is laden with plumped out breasts larger than a person\'s head. Your wide back utterly conceals its formidable musculature under the strata of pudge, and the flesh under the shoulder blades folds up against the girthy slopes of your hips, forming deep creases. ";
                            }
                            break;
                        case "massive":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are poor in exercised muscle but affluent in fat, have the thickness of a particularly fluffy pillow, and jiggle strongly when you move; your luxuriantly chubby torso has huge, majestically fleshy breasts flattened against the expanse of your stomach. Your ailing, tormented back needs to be kept staight for fear of falling over, although that feat is helped by its own rich supply of blubber, and the flesh under the shoulder blades folds up against the nearly horizontal slopes of your hips, forming creases that extend far enough to cut into your belly, and are deep enough to envelop a hand\'s length. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are are poor in exercised muscle but affluent in fat, have the thickness of a particularly plump pillow, and jiggle strongly when you move; your luxuriantly chubby torso has huge, majestically fleshy breasts flattened against the expanse of your stomach. Your ailing back needs to be kept staight for fear of falling over, although that feat is helped by its own rich supply of blubber, and the flesh under the shoulder blades folds up against the nearly horizontal slopes of your hips, forming creases that extend far enough to cut into your belly, and are deep enough to envelop a hand\'s length. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are unstitingly fat, thick as a plump person\'s thigh and jiggle strongly when you move; your marvelously fleshy upper body has gorgeous swaying bosoms flattened against the expanse of your stomach. Your overtly chubby back does its best to safeguard you against toppling forward by the merit of its strength, and the flesh under the shoulder blades folds up against the nearly horizontal slopes of your hips, forming creases that extend far enough to cut into your belly, and are deep enough to envelop a hand\'s length. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are unbelievably chubby and frighteningly mighty at the same time, are as thick as a plump person\'s thigh and jiggle greatly when you move; your burly, superbly fleshy chest sports a set of magnificent weighty mammaries flattened against the expanse of your stomach. Your thoroughly blubbery back admirably bears the stress of maintaining the tilting influences of your belly and hips, and the flesh under the shoulder blades folds up against the nearly horizontal slopes of your hips, forming creases that extend far enough to cut into your belly, and are deep enough to envelop a hand\'s length. ";
                            }
                            break;
                        case "spherical":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are heavy with tender, fatty flesh that suggests a cozy life devoid of menial labor, are as thick as a small treasure chest and quiver powerfully at the slightest action; your amazingly doughy upper body has voluptuously swollen bosoms the size of a ripe pumpkin sagging against the incline of your gut underneath. Your burdensomely fattened back is giving everything it\'s got to mediate the terrible weights of your stomach and backside see-sawing beneath. The flesh under your shoulder blades bunches up against the bloated bulges of your hips, forming creases that run alongside your flanks, almost meeting in the middle of the belly, and are deep enough to enwrap a forearm\'s length. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are heavy with tender, fatty flesh that suggests a cozy life of little to no menial labor, are as thick as a small treasure chest and quiver powerfully at the slightest action; your amazingly doughy upper body has voluptuously swollen bosoms the size of a ripe pumpkin sagging against the incline of your gut underneath. Your burdensomely fattened back is giving everything it\'s got to mediate the terrible weights of your stomach and backside see-sawing beneath. The flesh under your shoulder blades bunches up against the bloated bulges of your hips, forming creases that run alongside your flanks, almost meeting in the middle of the belly, and are deep enough to enwrap a forearm\'s length. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are heavy with tender, fatty flesh that suggests a life of all the menial labor outweighed by unrestrained dining, are as thick as a small treasure chest, and quiver powerfully at the slightest action; your amazingly doughy upper body has voluptuously swollen bosoms the size of a ripe pumpkin sagging against the incline of your gut underneath. Your burdensomely fattened back is capable of successfully mediating the terrible weights of your stomach and backside see-sawing beneath. The flesh under your shoulder blades bunches up against the bloated bulges of your hips, forming creases that run alongside your flanks, almost meeting in the middle of the belly, and are deep enough to enwrap a forearm\'s length. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms, firmed and hardened through arduous training though they are, have a soft consistency due to the plentiful blubbery padding, are as thick as a grain bag and tremble strongly at every wave or flexing; your large, wonderously doughy torso supports rotund, fleshy breasts the size of a ripe pumpkin slouching against the incline of your paunch below. Your magnificently powerful back defies the odds by doing a sterling job with keeping your heavy form aloft despite being quite lavishly padded with blubber itself. The flesh under your shoulder blades bunches up against the firm bulges of your hips, forming creases that run alongside your flanks before nearly meeting in the middle of the belly, and are deep enough to enfold a forearm\'s length. ";
                            }
                            break;
                        case "mountainous":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are munificently packed with soft, yielding flab, are as thick as a fatted sheep\'s belly, and become agitated with silky tremors for a little while after you move them; your unbelievable blubbery chest strains to accommodate the pendulous overripe mammaries the size of a refugee\'s travelling sack that spill over the upper hemisphere of your belly. Your back is excessively bolstered with flab, and is constantly belleaguered by the battling weights of your stomach and your hips. The flesh under your shoulder blades gathers into thick rolls against the gigantic expanse of your hips, forming folds that run alongside your flanks and around your belly, cutting deep enough to swallow an arm\'s length. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are munificently packed with soft, yielding flab, are as thick as a fatted sheep\'s belly, and become agitated with silky tremors for a little while after you move them; your unbelievable blubbery chest strains to accommodate the pendulous overripe mammaries the size of a refugee\'s travelling sack that spill over the upper hemisphere of your belly. Your back is excessively bolstered with flab, and although the rivalling weights of your stomach and hips require constant effort to hold in balance, even the lackluster tone of your torso is enough to do it. The flesh under your shoulder blades gathers into thick rolls against the gigantic expanse of your hips, forming folds that run alongside your flanks and around your belly, cutting deep enough to swallow an arm\'s length. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are munificently packed with soft, solid flab, are as thick as a fatted sheep\'s belly, and become agitated with silky tremors for a little while when you move them; your unbelievable blubbery chest strains to accommodate the pendulous overripe mammaries the size of a refugee\'s travelling sack that spill over the upper hemisphere of your belly. Your back is excessively bolstered with flab, and although the rivalling weights of your stomach and hips require constant effort to hold in balance, your body have the fortitude for the job. The flesh under your shoulder blades gathers into thick rolls against the gigantic expanse of your hips, forming folds that run alongside your flanks and around your belly, cutting deep enough to swallow an arm\'s length. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are stupendously fleshed, endowed with hardened muscles amply swaddled in blubber, are as thick as an oak tree\'s trunk, and their flesh stirs and jostles when the limbs are put to use; your great torso is swollen with fat and radiates robust vitality, supporing voluptuously heaving, treasure chest-sized bosoms that obscure the uppermost reaches of the tremendous belly below. Your lardaceous back is has also enough well-hidden toned flesh to alleviate the toil of maintaining the favourable alignment of your backside and gut. The flesh under your shoulder blades gathers into thick rolls against the gigantic expanse of your hips, forming folds that run alongside your flanks and around your belly, cutting deep enough to swallow an arm\'s length. ";
                            }
                            break;
                        case "colossal":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Your arms are excessively crammed with blubber, are as thick as the largest of seals, and become a heaving, billowing image of a restless sea if your move them too strongly; your incomparably fleshy and soft chest is utterly obscured by humongous globulous bosoms that sprawl over the upper platform of your massively overgrown stomach, covering it. Your back is so completely devoid of strength that mediating the great pendulous masses of your belly and your hips imposes an nigh unbearable degree of duress on it, and the rich yielding layer of lard that gives volume to your back is hardly much help. The flesh under your shoulder blades forms anvil-heavy baggy folds that crush the engorged mass of your hips from above, forming multiple ravines that girdle your entire body, the largest of which are deep enough to hide a small person inside them. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your arms are excessively crammed with blubber, are as thick as the largest of seals, and become a heaving, billowing image of a restless sea if your move them too strongly; your incomparably fleshy and soft chest is utterly obscured by humongous globulous bosoms that sprawl over the upper platform of your massively overgrown stomach, covering it. Your back is so lacking in strength that mediating the great pendulous masses of your belly and your hips imposes immense strain on it, and the rich yielding layer of lard that gives volume to your back only occassionaly helps preserve the equilibrium. The flesh under your shoulder blades forms anvil-heavy baggy folds that crush the engorged mass of your hips from above, forming multiple ravines that girdle your entire body, the largest of which are deep enough to hide a small person inside them. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Your arms are excessively crammed with blubber, are as thick as the largest of seals, and become a heaving, billowing image of a restless sea if your move them too strongly; your incomparably fleshy and soft chest is utterly obscured by humongous globulous bosoms that sprawl over the platform of your massively overgrown stomach, covering it. Your back is creaking with aching effort, but somehow succeeds in mediating the great pendulous masses of your belly and your hips, and the rich yielding layer of lard that gives volume to your back presents a substantial boon in preserving the equilibrium. The flesh under your shoulder blades forms anvil-heavy baggy folds that crush the engorged mass of your hips from above, forming multiple ravines that girdle your entire body, the largest of which are deep enough to hide a small person inside them. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Your arms are unimaginably bloated with plentiful fat that camouflages the highly developed musculature within; they are as thick as an obese person\'s waist, and get stirred into a flurry of shuddering flesh whenever you flex or extend them. Your fantastically padded upper body is wide and thick with burly might as well as blubber, and is all but hidden behind your humongous rolling breasts that conceal the dome of the wildly expanded gut beneath their masses. Your expansive, sturdy back deals admirably with keeping your stomach and your hips from toppling you, and is bolstered by a nearly solid cover of fat. The flesh under your shoulder blades forms anvil-heavy baggy folds that crush the engorged mass of your hips from above, forming multiple ravines that girdle your entire body, the largest of which are deep enough to hide a small person inside them. ";
                            }
                    }
            }
            return _loc1_;
        }

        protected function describeMidsection():String {
            var _loc1_:* = null;
            _loc1_ = "";
            switch (this.playerGender.name) {
                case this.Male.name:
                    switch (this.bodyFatTier()) {
                        case "malnourished":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "On an empty stomach, which seems to be a near permanent state for you, your midsection is as thin as they come; your waist is marked with the pelic bones jutting out sharply, while your bottom is lean and scrawny. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "On an empty stomach, your abdomen is well-toned and respectably exercised despite its lean quality; your waist is narrow and thin, while your buttocks are slimly-built. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "On an empty stomach, your belly is an ornate barrier of hardened abs; your hips are equally well-fleshed and exercised, while your backside is austerely athletic. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "On an empty stomach, your lower body is nevertheless standing out for how rife it is with brawny hardened flesh, both the seemingly unbreachable abdomen and the fat-deprived sculpted hips, while your glutes are superbly developed and lean. ";
                            }
                            break;
                        case "healthy":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "On an empty stomach, your midsection is stingily fleshed; your waist is very lean, but not enough so to make you appear starved, while your bottom is modestly fleshed. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "On an empty stomach, your abdomen looks fairly toned; your waist is narrow and solid, while your buttocks are firm and toned. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "On an empty stomach, your belly retains a bit of volume because of the superbly toned abs; your hips are equally generously lined with exercised flesh, while your backside is athletically meaty. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "On an empty stomach, your lower body is still standing out for how heavily fleshed it is, both the seemingly unassailable abdomen and the sculpted waistline, while your glutes are heavily-built and well-developed. ";
                            }
                            break;
                        case "robust":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "On an empty stomach, your abdomen is slighty supple and feeble to the touch despite falling short of deserving to be called a proper belly; your waist has some healthy volume to it, but little tone, while your average-sized bottom is somewhat flabby. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "On an empty stomach, your belly looks firm if a little plush; your waist is adequately exercised and smooth, while your toned buttocks have a bit of on padding on them. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "On an empty stomach, your midsection shows well-developed flesh through the thin layer of fat padding it; your hips are solidly built, while your meaty backside is admirably toned. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "On an empty stomach, your excellently developed lower body reveals its formidable abs even with a bit of extra volume in the way; your waist is strong beyond belief, but it takes a little poke to reach the hardy brawn underneath, while your powerful glutes have a meager cover of fat. ";
                            }
                            break;
                        case "overweight":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "On an empty stomach, your midsection swells into a modest chubby belly; your waist is weak despite its robust surfaces and your pudgy bottom is scarcely exercised. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "On an empty stomach, your abdomen sports a slight belly which you can still harden or suck in at will; your plush waist has seen some training, while your well-padded buttocks are adequately toned. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "On an empty stomach, your slight belly contends with hardened muscle for giving your lower body its definition; your waistline is soft to the touch, but give it a poke and there\'s some firmness there, while your stout backside is well-developed. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "On an empty stomach, your mighty abdominal muscles refuse to be entirely eclipsed by the fat of your belly; your waist is lined with plump tissue, but its mighty frame is still evident, while your powerful glutes still have a good amount of flab covering them. ";
                            }
                            break;
                        case "chubby":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "On an empty stomach, your significant belly protrudes softly outwards; your hips have little strength and a good deal of flab, and multiple minor folds appear on your sides when you turn or tilt or twist your torso, while your unexercised bottom is prodigiously fat. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "On an empty stomach, your midsection swells into a good-sized doughy belly hiding toned flesh under it; your lithe and capable waist is plumped up a good deal, and multiple fatty folds appear on your sides whenever you turn or tilt or twist your torso, while your toned buttocks have a decent amount of pudge padding them. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "On an empty stomach, your abdomen bulges forward a good deal on account of your soft, plump belly, as well as the strong muscles underneath; your waist is firmly and athletically built under all the plush padding, and multiple small folds appear whenever you turn or tilt or twist your torso, while your innerly powerful backside is doughy and soft to the touch. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "On an empty stomach, your respectable squishy belly just about covers the impossibly well-developed abs; your hips are potently built, but with quite a bit superfluous flesh on them, and small elusive folds appear on your sides whenever you turn or tilt or twist your torso, while your profoundly pudgy tail end hides iron glutes. ";
                            }
                            break;
                        case "corpulent":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "On an empty stomach, your abdomen bulges with a sizable and proud potbelly; your hips are pudgy, but much less so than the centerpiece of your midsection, there are a couple of squishy rolls on your sides, while your fattened bottom is devoid of exercised tone. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "On an empty stomach, your taut round belly pouts out a good deal, and the best your exercised abs can do is to make it jiggle slightly; your generously plump hips remain well-developed deep down, there are a couple of squishy rolls on your sides, while your soft heavy buttocks have a bit of strength to them. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "On an empty stomach, your midsection is defined by your firm, heavy belly that vaguely hint at the strong flesh underneath; your waist is meaty and soft to the touch, but strong and resilient, there are a couple of ill-defined squishy rolls on your sides, while your very pudgy backside is mightily developed. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "On an empty stomach, your abdomen sports a very firm, but substantial belly shrouding the titanic brawn beyond it; your waist is wrapped in strong flesh finished with a hearty layer of fat, with a couple of minor squishy rolls on your sides, while your excellently developed glutes are barely discernable under their thick padding. ";
                            }
                            break;
                        case "obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "On an empty stomach, which appears to be a very rare circumstance, your rotund, heavy belly curves smoothly into your profoundly pudgy hips and sags down just below your crotch, trembling intensely with each step; there are fatty rolls on your sides that form deep crevices, and your soft and tender bottom is fairly blubbery. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "On an empty stomach, which appears to be a very rare circumstance, your rotund, heavy belly curves smoothly into your profoundly pudgy hips and sags down just below your crotch, trembling intensely with each step; there are fatty rolls on your sides that form deep crevices, while your buttocks are fairly blubbery, but oddly retain the look of firmness. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "On an empty stomach, which appears to be a very rare circumstance, your weighty flabby belly curves smoothly into your thick and robustly padded hips and sags down just below your crotch, trembling intensely with each step; there are fatty rolls on your sides that form thin crevices, while your decently exercised backside has a remarkable abundance of pudge on it. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "On an empty stomach, which appears to be a very rare circumstance, your burly, bulging belly curves smoothly into your generously flabby, but strong hips, and sags just below your crotch, trembling intensely with each step; there are fatty rolls on your sides that form minor crevices, and although your glutes are toned and powerful, your tail end is too thickly packed with fat to show them off properly. ";
                            }
                            break;
                        case "morbidly obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "On an empty stomach, which appears to be a very rare circumstance, the ponderous, doughy-textured slab of blubber constituting your belly flows smoothly into your portly flanks and spills down halfway past your thighs, swaying and quivering potently after each step; there are fatty rolls on your sides that form crevices deep enough to engulf a finger, while your bottom droops heavily, brimming with fat. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "On an empty stomach, which appears to be a very rare circumstance, the ponderous, doughy-textured slab of blubber constituting your belly flows smoothly into your portly flanks and spills down halfway past your thighs, swaying and quivering potently after each step; there are fatty rolls on your sides that form crevices deep enough to engulf a finger, while your buttocks droop heavily, brimming with fat. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "On an empty stomach, which appears to be a very rare circumstance, your great doming belly flows smoothly into your stout flanks and spills down halfway past your thighs, bouncing and undulating joyously after each step; there are fatty rolls on your sides that form crevices deep enough to engulf a finger, while your immensely chubby backside have the firmness to them suggesting some athletic capability. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "On an empty stomach, which appears to be a very rare circumstance, your mightily protruding belly flows smoothly into your sturdy, chubby flanks, and sags halfway past your thighs, ripples and shivers running along its sloping surface; there are fatty rolls on your sides that form deep crevices, while your abundantly blubbery tail end provides too much cover for your iron glutes to display their brawn. ";
                            }
                            break;
                        case "massive":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "On an empty stomach, as bizarrely unlikely as that state might appear to be, your belly - nearly half as large as the rest of you - resembles nothing short of a huge, round caudlron that merges seamlessly with your fattened flanks and hangs down nearly to your knees, swinging pendulously after each step and firmly anchoring you to any unfortunate piece of furniture you might decide to test; there are thick folds on your sides that stretch from under your shoulders to your gut, and are a hand\'s length deep. The curves of your bottom are tightly packed with blubber. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "On an empty stomach, as bizarrely unlikely as that state might appear to be, your belly - nearly half as large as the rest of you - resembles nothing short of a huge, round caudlron that that merges seamlessly with your fattened flanks and hangs down nearly to your knees, swinging pendulously after each step and making it a challenge to rise to your feet; there are thick folds on your sides that stretch from under your shoulders to your gut, and are a hand\'s length deep. The curves of your buttocks are thickly packed with blubber. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "On an empty stomach, as bizarrely unlikely as that state might appear to be, your monstrously prominent belly - nearly half as large as the rest of you - merges seamlessy with your rotund flanks and hangs down nearly to your knees, billowing and sloshing after each step and covering your thighs when you sit down; there are thick folds on your sides that stretch from under your shoulders to your gut, and are a hand\'s length deep. Your stoutly built backside is extravagantly thickened with flab. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "On an empty stomach, as bizarrely unlikely as that state might appear to be, your unbelievably corpulent belly - nearly half as large as the rest of you - merges seamlessly into your firm blubbery flanks, and hangs down nearly to your knees, flabbily undulating after each step and constantly challenging your powerful muscles with its unpredicatble swaying; there are thick folds on your sides that stretch from under your shoulders to your gut, and are a hand\'s length deep. Your stout and burly tail end is munificently padded with fat. ";
                            }
                            break;
                        case "spherical":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Whenever you break a streak of glutting yourself with highly nutritious delicacies for long enough, your tremendous gut - nearly as large and heavy as the rest of you, its circumference dominating your silhouette - is a rotund entity in itself, and makes it look like you\'ve just emptied a town\'s winter provision cellar; if someone were to embrace you, they\'d have to recline on its upper shaky slope, or try their luck squeezing themselves into its reluctantly yielding mass. It forms a single whole with your massively chubby hips, and dangles down to your knees, powerful tremors washing over it with each labored step; the thick folds on your flanks are a forearm\'s length deep, and nearly encircle your form from under the shoulders to the belly, stopping just short of meeting in the middle of it. Your delicate and soft bottom is filled out with a layer of blubber at least a ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "few dozen centimeters";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "foot";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Whenever you break a streak of glutting yourself with highly nutritious delicacies for long enough, your tremendous gut - nearly as large and heavy as the rest of you, its circumference dominating your silhouette - is a rotund entity in itself, and makes it look like you\'ve just emptied a town\'s winter provision cellar; if someone were to embrace you, they\'d have to recline on its upper protruding slope, or try their luck squeezing themselves into its reluctantly yielding mass. It forms a single whole with your massively chubby hips, and dangles down to your knees, powerful tremors washing over it with each labored step; the thick folds on your flanks are a forearm\'s length deep, and nearly encircle your form from under the shoulders to the belly, stopping just short of meeting in the middle of it. Your delicate and soft buttocks are filled out with a layer of blubber at least a ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "few dozen centimeters";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "foot";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Whenever you break a streak of glutting yourself with highly nutritious delicacies for long enough, your tremendous gut - nearly as large and heavy as the rest of you, its circumference dominating your silhouette - is a rotund entity in itself, and makes it look like you\'ve just emptied a town\'s winter provision cellar; if someone were to embrace you, they\'d have to recline on its upper slope, or try their luck squeezing themselves into its reluctantly yielding mass. It forms a single whole with your massively chubby hips, and dangles down to your knees, powerful tremors washing over it with each labored step; the thick folds on your flanks are a forearm\'s length deep, and nearly encircle your form from under the shoulders to the belly, stopping just short of meeting in the middle of it. Your delicate and soft backside is filled out with a layer of blubber at least a ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "few dozen centimeters";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "foot";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Whenever you break a streak of glutting yourself with highly nutritious delicacies for long enough, your stupendously filled out paunch - nearly as large and heavy as the rest of you, its circumference dominating your silhouette - constitutes a near-globe that lags a few seconds behind the movements of your body proper and making you look as if you\'ve just turned an acre of ripe fruit orchards into a bereft skeletal shadow of their former selves; if someone were to embrace you, they\'d have to recline on its upper slope, since the expansive dome of your gut is too solidly to allow squeezing into it. It forms a single whole with your stout, yet heavily fattened hips, and hangs down to your knees, sloshing violently after each step; the thick folds on your flanks a forearm\'s length deep, and nearly encircle your form from under the shoulders to the belly, stopping just short of meeting in the middle of it. Your massively obese tail end sags down despite the mighty musculature lurking under all the padding. ";
                            }
                            break;
                        case "mountainous":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "During brief lulls in your feasting schedule when you are not stuffed to the gills, your immense belly - about as large and heavy as the rest of you, and the definite focal point of your anatomy - has its own center of mass and inertia that asserts itself whenever a rapid movement is made, and looks like you have just swallowed a small cow; if someone were to embrace you, they\'d have to climb onto its upper sloping suface, and extending a hand in greeting to a more modestly built person would invite them to brush against your paunch to make the clasp. Your belly incorporates your astoundingly filled-out hips, and sinks down past the knees, with each lumbering step making it wobble and slosh threateningly; the great blubbery rolls on your flanks are an arm\'s length deep and encircle your form from under the shoulders to the middle of the belly. Your bottom has the texture of a fine spongy dessert, and is given its girth by a cusion of lard ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "nearly two feet";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "During brief lulls in your feasting schedule when you are not stuffed to the gills, your immense belly - about as large and heavy as the rest of you, and the definite focal point of your anatomy - has its own center of mass and inertia that asserts itself whenever a rapid movement is made, and looks like you have just swallowed a small cow; if someone were to embrace you, they\'d have to climb onto its upper sloping suface, and extending a hand in greeting to a more modestly built person would invite them to brush against your paunch to make the clasp. Your belly incorporates your astoundingly filled-out hips, and sinks down past the knees, with each heavy step making it wobble and slosh terribly; the great blubbery rolls on your flanks are an arm\'s length deep and encircle your form from under the shoulders to the middle of the belly. Your buttocks have the texture of a fine spongy dessert, and are given their girth by a cusion of lard ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "nearly two feet";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "During brief lulls in your feasting schedule when you are not stuffed to the gills, your immense belly - about as large and heavy as the rest of you, and the definite focal point of your anatomy - has its own center of mass and inertia that asserts itself whenever a rapid movement is made, and looks like you have just swallowed a small cow; if someone were to embrace you, they\'d have to climb onto its upper sloping suface, and extending a hand in greeting to a more modestly built person would invite them to brush against your paunch to make the clasp. Your belly incorporates your astoundingly filled-out hips, and sinks down past the knees, with each resounding step making it wobble and slosh powerfully; the great blubbery rolls on your flanks are an arm\'s length deep and encircle your form from under the shoulders to the middle of the belly. Your backside has the texture of a fine spongy dessert, and is given its girth by a cusion of lard ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "nearly two feet";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "During brief lulls in your feasting schedule when you are not stuffed to the gills, your overflowing stomach - about as large and heavy as the rest of you, and definitely the focal point of your stout anatomy - is so overgrown that its forceful and unpredictable impetus is hard to counteract even for your mighty muscles, and in addition it gives you an appearance of someone who has just gorged himself on a small flock of sheep; if someone were to embrace you, they\'d have to scale its mounting enormity, and extending a hand in greeting to a more modestly built person would invite them to brush against your paunch to make the clasp. Your belly absorbs your heavy, blubbery hips, and drops down past the knees, adopting a squishy pattern of wobbling throughout its spherical surface whenever you waddle forward; the hefty folds on your hardy flanks are an arm\'s length deep, and encircle your form from under the shoulders to the middle of your belly. Your tail end conceals the prodigious athleticism of its glutes by the pillow of quivering fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "nearly two feet";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                            }
                            break;
                        case "colossal":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "On the elusively unlikely occasion of you having had enough time to process all of your last fabulously immoderate banquet before delving into the next one, your dreadfully enormous gut - comprising the indisputed majority of your physique in weight, size and nutritional equivalent - swells into a tremendous segmented mass in front of you, and looks like you have just had a small whale for breakfast; if someone wished to shake hands with you, they\'d have to squeeze hard into the softer outer layers of lard just to make a clasp. Your paunch and your astoundlingly thoroughly fattened hips meld together, and swag low enough to brush against the ground, and every time you make a step the entire great bulk explodes into a breathtaking dispay of wobbing and quivering flesh that has different amplitude and patterns depending on the agitated part, and it lasts for a dozen seconds at the very least; the flesh on your sides is compressed into barrel-thick stratas of lard by its own weight, and the deepest folds - deep enough to lose a suit of plate armour in - encircle your form from under the shoulders to the middle of the belly. Your buttocks consist of tightly pressed, fold-ridden, swollen cushions of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "On the elusively unlikely occasion of you having had enough time to process all of your last fabulously immoderate banquet before delving into the next one, your dreadfully enormous gut - comprising the indisputed majority of your physique in weight, size and nutritional equivalent - swells into a tremendous segmented mass in front of you, and looks like you have just had a small whale for breakfast; if someone wished to shake hands with you, they\'d have to squeeze hard into the softer outer layers of lard just to make a clasp. Your paunch and your astoundlingly thoroughly fattened hips meld together, and swag low enough to brush against the ground, and every time you make a step the entire great bulk explodes into a breathtaking dispay of wobbing and quivering flesh that has different amplitude and patterns depending on the agitated part, and it lasts for a dozen seconds at the very least; the flesh on your sides is compressed into barrel-thick stratas of lard by its own weight, and the deepest folds - deep enough to lose a suit of plate armour in - encircle your form from under the shoulders to the middle of the belly. Your backside consists of tightly pressed, fold-ridden, swollen cushions of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "On the elusively unlikely occasion of you having had enough time to process all of your last fabulously immoderate banquet before delving into the next one, your dreadfully enormous gut - comprising the indisputed majority of your physique in weight, size and nutritional equivalent - swells into a tremendous segmented mass in front of you, and looks like you have just had a small whale for breakfast; if someone wished to shake hands with you, they\'d have to squeeze hard into the softer outer layers of lard just to make a clasp. Your paunch and your astoundlingly well-fattened hips meld together, and swag low enough to brush against the ground, and every time you make a step the entire great bulk explodes into a breathtaking dispay of wobbing and quivering flesh that has different amplitudes and patterns depending on the agitated part, and it lasts for about a dozen seconds; the flesh on your sides is compressed into barrel-thick stratas of lard by its own weight, and the deepest folds - deep enough to lose a suit of plate armour in - encircle your form from under the shoulders to the middle of the belly. Your backside consists of tightly pressed, fold-ridden, swollen cushions of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "On an elusively unlikely occasion of you having had enough time to process all of your last fabulously immoderate banquet before delving into the next one, your colossal gut - comprising the indisputed majority of your physique in weight, size and nutritional equivalent - is so ponderous and independently mobile that a forceful motion is liable to send it into an avalanche of conflicting swings, sways and heaves that even your outstanding brawn would not hope to contain, and it looks swollen with a freshly swallowed small, but portly wyvern; if someone wanted to shake hand with you, they\'d have to climb on the yielding slope on your belly just to make the clasp. Your paunch and your gorgeously filled-out hips lack definitive features separating them, and plummet low enough to scrape the ground, surging with mercurial ripples and breathtaking, fold-rearranging waves after every heavy step; the flesh on your flanks furrows into a lumber pile-thick slabs of lard, with the deepest fold - deep enough to lose a suit of plate armor in - encircles your form from under the shoulders to the middle of your belly. Your intensely trained glutes are throughly buried under a padding of flab ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                            }
                    }
                    break;
                case this.Female.name:
                    switch (this.bodyFatTier()) {
                        case "malnourished":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "When you\'ve been fasting for a while - and fasting appears to feature quite heavily in your life - your belly looks sunken and sapless; your bony hips are lent their breadth almost exclusively by the hip bones, narrowing into your poorly-fleshed waist, and your posterior is destitutely skinny. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "When you\'ve been fasting for a while, your stomach is flat and lean, but there is a bit of strength apparent by its taut tone; your hips have a slightly increased volume thanks to an active lifestyle and exercise, and your behind is hardily built. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "When you\'ve been fasting for a while, your abdomen becomes rigid and knotted with its well-developed abs; your hips have undergone arduous training, and your rear is slim and meaty. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "When you\'ve been fasting for a while, your stomach\'s texture becomes solid and unassailable by the overabundant abs gripping it; your hips likewise exude immense endurance and might, although your waist remains slender and narrow, and your lean gluteus is developed intensely enough to define your rump thoroughly. ";
                            }
                            break;
                        case "healthy":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "When you\'ve been fasting for a while, your belly retracts humbly; your hips don\'t possess much strength or volume, but expand below you waist just enough to complement it, and your soft posterior is modestly fleshed. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "When you\'ve been fasting for a while, your stomach flattens a bit, but there is a bit of strength inside that is hinted at whenever you turn or bend down; your hips have a modest swell to them thanks to good nutrition and exercise, and your slightly padded behind is fairly firm. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "When you\'ve been fasting for a while, your abdomen assumes a hardened, yet elegant outline; your waist and hips are prominently toned and muscled, and contrast between them accentuates your ladylike proportions despite the strapping physique, and your subtly rounded rear is hardened by exercise. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "When you\'ve been fasting for a while, your stomach is given a solid and unassailable texture; your hips likewise exude immense power and segue smoothly into your legs, while your waist remains fairly slender, and your curvy rump is heavily built. ";
                            }
                            break;
                        case "robust":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "When you\'ve been fasting for a while, your belly retains a soft roundness to it, but doesn\'t protrude much; your hips may not be very well toned, but have a good swell to them, and your soft posterior is largely unexercised. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "When you\'ve been fasting for a while, your stomach alternates between showcasing its exercised muscles and reverting to an unassuming soft appearance; your hips boast a significant swell, but remain firm and strong, and your equally toned behind is plushly textured. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "When you\'ve been fasting for a while, your abdomen\'s appearance becomes a middle ground between extensive athletic segmentation and graceful smoothness; your waist is splendidly developed and expands into wide hips that are given most of their volume by muscle, and your well-exercised rear is softened just a little. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "When you\'ve been fasting for a while, your stomach becomes defined by the slightly softened, yet magnificently exercised abs; your wide, firm hips are superbly toned and developed, and your strong rump is modestly padded. ";
                            }
                            break;
                        case "overweight":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "When you\'ve been fasting for a while, your slight downy belly is just large enough to be called such, your rounded hips have a profound swell to them owing very little to muscles, and your sizable posterior is virtually unexercised. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "When you\'ve been fasting for a while, your abdomen keeps a modest pout of your soft belly that feels as if there\'s more tone behind it than meets the eye, your generously-padded hips conceal some good, toned flesh, and your plump behind doesn\'t hamper your gymnastic ability much. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "When you\'ve been fasting for a while, your lower body remains visibly toned despite its downy cover; your waist swells into firm, yet very well-rounded wide hips, and your technically athletic rear is still quite pudgy. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "When you\'ve been fasting for a while, your work-hardened midsection reveals powerful abdominal muscles through its supple padding, your flexible, thick waist descends down to the strongly-built, but also heartily plump hips, and your rump has its well-develeoped gluteus hidden under its shapely soft curves. ";
                            }
                            break;
                        case "chubby":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "When you\'ve been fasting for a while, your midsection is endowed with a quite heavy belly that is none the less downy to the touch; your richly-fleshed waist swells out into the munificently padded hips that curve into your scantly exercised, fleshy posterior. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "When you\'ve been fasting for a while, your belly remains pudgy and soft to the touch, but the exercised muscles hidden behind it are capable of firming it significantly; your plump waist swells out into the toned flabby hips that are given much of their volume by their generous padding, and that curve into your adequately developed, but fatty behind below. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "When you\'ve been fasting for a while, your abdomen has a pouting belly decorating it, as well as suggestions of the underlying hard exercised flesh; your modestly stout waist swells out into the wide, well-muscled hips that are richly insulated with soft fat, and curve into your heavily fleshed, but athletic rear below. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "When you\'ve been fasting for a while, your lower body has its powerful muscles all but covered by a supple, plump belly; your thickly built waist swells out into the stout, hardy hips that are richly insulated with soft fat, and that curve into your profoundly well-fed and excellently trained rump below. ";
                            }
                            break;
                        case "corpulent":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "When you\'ve been fasting for a while, your chubby stomach stands out confidently, impossible to retract, but also firm enough to avoid sagging; your waistline, although already very plump, still greatly contrasts the rotund, meaty hips below that curve into your fat, heavy posterior that hasn\'t been exercised in any meaningful way. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "When you\'ve been fasting for a while, your generously padded midsection flaunts a taut, rounded belly; your pudgy, yet deceptively bendy waistline bulges into expansive, jiggling hips that curve into your richly chubby behind that has a good tone to it, even it is nigh unnoticeable. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "When you\'ve been fasting for a while, your belly stands its ground, pouting out cheerfully and firmly; your thick, steady waist segues into profoundly curvaceous, excellently well-fed hips that curve into your athletic rear that conceals most of its tone under thick layers of fat. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "When you\'ve been fasting for a while, your abdomen forms a heavy, supple-looking belly that the excessively developed abs underneath can form into some remarkable shapes; your waist, thick and resilient as an oak trunk and soft as snow to the touch, widens into superbly plump, jiggling hips that curve into your hard-muscled rump, although the latter is given an unassumingly soft look by its ample flabby padding. ";
                            }
                            break;
                        case "obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "When you\'ve been fasting for a while, if such an occurrence ever comes about, your large, squishy belly sags just below your pelvis; your pudgy waist swells into enormously filled-out hips that undulate in time with your stride, and curve into your scantly exercised, tremendously fleshy posterior. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "When you\'ve been fasting for a while, if such an occurrence ever comes about, your large, squishy belly sags down to just below your pelvis; your pudgy waist swells into enormously filled-out hips that undulate in time with your stride, and curve into your exercised, but tremendously fleshy behind. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "When you\'ve been fasting for a while, if such an occurrence ever comes about, your belly still feigns being stuffed and sags down to just below your pelvis; your stoutly chubby waist swells into throughly fattened hips that quiver in time with your stride, and curve into your heavy, blubbery, but surprisingly firm rear. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "When you\'ve been fasting for a while, if such an occurrence ever comes about, your rotund belly is somewhat unyielding to the touch due to hard abs deeply-buried in fat, and sags down to just below your pelvis; your burly, yet lushly fleshed waist swells into thickly chubby hips that sway a little in time with your stride, and curve into your bulging, supple rump that is given a good deal of apparent tone by the mighty glutes beneath. ";
                            }
                            break;
                        case "morbidly obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "When you\'ve been fasting for a while, if such an occurrence ever comes about, the sizable tender pillow of your belly droops halfway below your thighs, sloshing when disturbed; your superbly chubby waist swells into generously blubbery hips that rock and sway in time with your stride, expansively curving into your posterior which is swollen with a layer of fat a ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "few dozen centimeters";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "foot";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "When you\'ve been fasting for a while, if such an occurrence ever comes about, the sizable tender pillow of your belly droops halfway below your thighs, sloshing when disturbed; your superbly chubby waist swells into generously blubbery hips that rock and sway in time with your stride, expansively curving into your behind which is made firm by healthy exercise and a layer of fat a ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "few dozen centimeters";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "foot";
                                    }
                                    _loc1_ = _loc1_ + " thick. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "When you\'ve been fasting for a while, if such an occurence ever comes about, your lovingly fattened belly sags down halfway past your thighs, quivering when disturbed; your firmly chubby waist swells into extravagantly portly hips that undulate in time with your stride, expansively curving into your thoroughly blubbery rear that astonishingly maintains a semblance of tone. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "When you\'ve been fasting for a while, if such an occurence ever comes about, your belly is weighty, amply curvaceous, and sags down halfway past your thighs; your lushly meaty waist swells into boisterously bulging hips that shift and jiggle in time with your stride, expansively curving into your rump that has been both intensely exercised and recklessly fattened. ";
                            }
                            break;
                        case "massive":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "When you\'ve been fasting for a while, even if such an event is annual at best, your unfathomably chubby belly - easily a half of your entire body in weight, but still well balanced by your sizable stern - droops down almost to your knees, billowing and shaking when disturbed; your portly waist swells into hips bulging with a layer of fat nearly a ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "few dozen centimeters";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "foot";
                                    }
                                    _loc1_ = _loc1_ + " thick that undulate strongly as you walk, curving below into your profoundly blubbery posterior that seems to bind you to whatever surface you find yourself lounging on. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "When you\'ve been fasting for a while, even if such an event is annual at best, your sumptuously chubby belly - easily a half of your entire body in weight, but still well balanced by your sizable stern - droops down almost to your knees, billowing and shaking when disturbed; your portly waist swells into hips bulging with a layer of fat nearly a ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "few dozen centimeters";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "foot";
                                    }
                                    _loc1_ = _loc1_ + " thick that undulate strongly as you walk, curving below into your profoundly blubbery behind that makes every instance of standing up a hard exercise. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "When you\'ve been fasting for a while, even if such an event is annual at best, your phenomenally fleshy belly - easily a half of your entire body in weight, but still fairly well balanced by your sizable stern - droops down almost to your knees, quaking and trembling when disturbed; your stout and chubby waist swells into hips packed with a layer of fat nearly a ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "few dozen centimeters";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "foot";
                                    }
                                    _loc1_ = _loc1_ + " thick that quivers tremulously as you walk, curving below into your substantially obese, yet surprisingly firm rear. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "When you\'ve been fasting for a while, even if such an event is annual at best, your belly - easily a half of your entire body in weight, but still fairly well balanced by your sizable stern - remains formidably rotund and solid in consistency despite the occasional ripples running along its surface, and droops down almost to your knees; your stout and bloated waist swells into hardily built hips wrapped in a layer of far nearly a ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "few dozen centimeters";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "foot";
                                    }
                                    _loc1_ = _loc1_ + " thick that wobble and bounce as you walk, curving below into your meaty rump that has a smooth, firm surface due to the mighty muscles hiding at the core of its dense stratas of blubber. ";
                            }
                            break;
                        case "spherical":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "In a rare event of your impending gigantic banquet becoming uncomfortably separate from the previous one, your outstandingly fleshy belly - rivalling the remainder of your body in weight, but somewhat balanced by your ample hindquarters - has the convexity of a small mound, and leads others to suspect you of having just exhausted the larder of an entire restaurant; if someone were to hug you, they\'d have to flatten themselves against your great stomach and smush into the huge bosoms resting on it. Your gut flows into your engorged flanks and hangs down to your knees, experiencing liquid perturbations with every move; your obese waist swells into hips bulging with a layer of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "nearly a couple feet";
                                    }
                                    _loc1_ = _loc1_ + " thick that sloshes mightily as you walk, curving below into your posterior that\'s even more lavishly padded. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "In a rare event of your impending gigantic banquet becoming uncomfortably separate from the previous one, your outstandingly fleshy belly - rivalling the remainder of your body in weight, but somewhat balanced by your ample hindquarters with the aid of your back\'s pained efforts - has the convexity of a small mound, and leads others to suspect you of having just exhausted the larder of an entire restaurant; if someone were to hug you, they\'d have to flatten themselves against your great stomach and smush into the huge bosoms resting on it. Your gut flows into your engorged flanks and hangs down to your knees, experiencing liquid perturbations with every move; your obese waist swells into hips bulging with a layer of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "nearly a couple feet";
                                    }
                                    _loc1_ = _loc1_ + " thick that sloshes mightily as you walk, curving below into your behind that\'s even more lavishly padded. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "In a rare event of your impending gigantic banquet becoming uncomfortably separate from the previous one, your outstandingly fleshy belly - rivalling the remainder of your body in weight, but balanced by your ample hindquarters with the aid of your back\'s tone - has the convexity of a small mound, and leads others to suspect you of having just exhausted the larder of an entire restaurant; if someone were to hug you, they\'d have to flatten themselves against your great stomach and smush into the huge bosoms resting on it. Your gut flows into your engorged flanks and hangs down to your knees, experiencing liquid perturbations with every move; your obese waist swells into hips bulging with a layer of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "nearly a couple feet";
                                    }
                                    _loc1_ = _loc1_ + " thick that sloshes mightily as you walk, curving below into your rear that\'s even more lavishly padded. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "In a rare event of your impending gigantic banquet becoming uncomfortably separate from the previous one, your imposingly rotund belly - rivalling the remainder of your body in weight, but balanced by your ample hindquarters with the aid of your back\'s hardiness - makes you look like you\'ve just single-handedly decimated a townhall banquet, yet possesses such firmness to its thick layers of blubber that a measure of trained muscle could be believed to be hiding under them; if someone where to hug you, they\'d have to flatten themselves against your great stomach and smush into the huge bosoms resting on it. Your gut flows into your swollen flanks and sags down to your knees; your heavily fleshy waist swells into hips wrapped in a layer of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "nearly a couple feet";
                                    }
                                    _loc1_ = _loc1_ + " thick that billow as you walk, curving below into your even more lardaceous and wide rump. ";
                            }
                            break;
                        case "mountainous":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "In case your conventional routine of gorging yourself near the point of bursting is interrupted for a while, your butterball of a paunch - matching the weight of the rest of your form, but kept from toppling you you by the hefty hindquarters coupled with a prudently chosen stance - is an absolute nightmare to prevent from swinging whichever way it pleases, and it looks like you\'ve just transferred all the squawking contents of a huge overcrowded chicken coup inside it; if someone were to hug you, they\'d have to climb onto your gut and then squeeze between the massive busts, and even shaking hands with someone not quite as inordinately obese as you would mean the other party having to brush against your squishy belly\'s surface. Your gut merges seamlessly into your hefty fattened flanks, and swags past the knees, shuddering and swaying at the merest disturbance; your fabulously portly waist swells into hips engorged with a layer of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter thick";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " thick that quivers wildly when your walk, curving below into your even wider and more corpulent posterior. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "In case your conventional routine of gorging yourself near the point of bursting is interrupted for a while, your butterball of a paunch - matching the weight of the rest of your form, but kept from toppling you you by the hefty hindquarters coupled with a prudently chosen stance - is quite an ordeal to keep from swinging whichever way it pleases, and it looks like you\'ve just transferred all the squawking contents of a huge overcrowded chicken coup inside it; if someone were to hug you, they\'d have to climb onto your gut and then squeeze between the massive bosoms, and even shaking hands with someone not quite as inordinately obese as you would mean the other party having to brush against your squishy belly\'s surface. Your gut merges seamlessly into your hefty fattened flanks, and swags past the knees, shuddering and swaying at the merest disturbance; your fabulously portly waist swells into hips engorged with a layer of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter thick";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " thick that quivers wildly when your walk, curving below into your even wider and more corpulent behind. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "In case your conventional routine of gorging yourself near the point of bursting is interrupted for a while, your butterball of a paunch - matching the weight of the rest of your form, but kept from toppling you you by the hefty hindquarters coupled with a prudently chosen stance - is a constant bother to prevent from swinging whichever way it pleases, and it looks like you\'ve just transferred all the squawking contents of a huge overcrowded chicken coup inside it; if someone were to hug you, they\'d have to climb onto your gut and then squeeze between the massive bosoms, and even shaking hands with someone not quite as inordinately obese as you would mean the other party having to brush against your squishy belly\'s surface. Your gut merges seamlessly into your hefty stout flanks, and swags past the knees, shuddering and swaying at the merest disturbance; your fabulously portly waist swells into hips engorged with a layer of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter thick";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " thick that quivers wildly when your walk, curving below into your even wider and more corpulent rear. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "In case your conventional routine of gorging yourself near the point of bursting is interrupted for a while, your humongously fattened gut - matching the weight of the rest of your form, but kept from toppling you by the hefty hindquarters coupled with a firm, sturdy stance - mocks the formidable muscles encased in its layers by the segmented topography of its folded surface, and makes it easy to believe you\'ve just made a meal of a feral horse; if someone were to hug you, they\'d have to climb onto your gut and then squeeze between the massive bosoms, and even shaking hands with someone not quite as inordinately obese would mean the other party having to brush against your squishy belly\'s surface. Your paunch merges seamlessly with your chunky swollen flanks and droops down past your knees; your expansive and luxuriantly fleshy waist swells into hips swaddled in a layer of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter thick";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " thick that quivers voluptuously when you walk, curving below into your even more overwhelmingly fleshy rump that hides steely glutes somewhere in its blubbery depths. ";
                            }
                            break;
                        case "colossal":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "In those astronomically rare cases when you find that at the moment you\'re experiencing genuine hunger born of the emptiness in your stomach rather than unbridled greed, your mountainous gut - easily surpassing the remainder of your form in terms of mass and girth, and only kept in check by the bulk of your blubbery hindquarters and desperate resolve - lays a claim to its autonomy every time you move a little too urgently, with its folds and stratas or lard surging and tumbling in conflicting patterns until your hopelessly outmatched muscles and sinews cry for mercy, and on top of that it looks like a couple of particularly large and well-fed bears have recently vanished into its depths; if someone offered to kiss your hand, that unhealthily chivalrous person would have to push through the enveloping softness of your stomach\'s doughy exterior in order to make the gesture. Your gut melts into your magnificently engorged hips, and sinks low enough to graze the ground, with slightest actions initiating a lengthy commotion of quivering curves; your rampantly corpulent waist swells into wonderously broad hips stuffed with a layers a lard ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter thick";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " thick that roll and billow tumultously in time with your waddle, curving below into an even more staggeringly obese posterior. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "In those astronomically rare cases when you find that at the moment you\'re experiencing genuine hunger born of the emptiness in your stomach rather than unbridled greed, your mountainous gut - easily surpassing the remainder of your form in terms of mass and girth, and only kept in check by the bulk of your blubbery hindquarters and desperate resolve - lays a claim to its autonomy every time you move a little too urgently, with its folds and stratas or lard surging and tumbling in conflicting patterns until your hopelessly outmatched muscles and sinews cringe at the strain, and on top of that it looks like a couple of particularly large and well-fed bears have recently vanished into its depths; if someone offered to kiss your hand, that unhealthily chivalrous person would have to push through the enveloping softness of your stomach\'s doughy exterior in order to make the gesture. Your gut melts into your magnificently engorged hips, and sinks low enough to graze the ground, with slightest actions initiating a lengthy commotion of quivering curves; your rampantly corpulent waist swells into wonderously broad hips stuffed with a layers a lard ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter thick";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " thick that roll and billow tumultously in time with your waddle, curving below into an even more staggeringly obese posterior. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "In those astronomically rare cases when you find that at the moment you\'re experiencing genuine hunger born of the emptiness in your stomach rather than unbridled greed, your mountainous gut - easily surpassing the remainder of your form in terms of mass and girth, and only kept in check by the bulk of your blubbery hindquarters and resolve - lays a claim to its autonomy every time you move a little too urgently, with its folds and stratas or lard surging and tumbling in conflicting patterns until your hopelessly outmatched muscles and sinews moan at the effort, and on top of that it looks like a couple of particularly large and well-fed bears have recently vanished into its depths; if someone offered to kiss your hand, that unhealthily chivalrous person would have to push through the enveloping softness of your stomach\'s doughy exterior in order to make the gesture. Your gut melts into your magnificently engorged hips, and sinks low enough to graze the ground, with slightest actions initiating a lengthy commotion of quivering curves; your rampantly corpulent waist swells into wonderously broad hips stuffed with a layers a lard ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter thick";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " thick that roll and billow tumulously in time with your waddle, curving below into an even more staggeringly obese posterior. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "In those astronomically rare cases when you find that at the moment you\'re experiencing genuine hunger born of the emptiness in your stomach rather than unbridled greed, your absurdly voluminous belly - holding decisive sway over the rest of your body in terms of mass and girth, and only kept in check by the bulk of your blubbery hindquarters and tenacity of your powerful frame - never betrays the might sleeping near its core, discounting the impressive feats of reining its intractable heaves, and it has the appearance suggesting that you have just finished quaffing a small lake dry; if someone offered to kiss your hand, that unhealthily chivalrous person would have to climb onto mounting slope of your gut first. Your belly segues subtly into your prodigiously lardaceous flanks and plummets so low that it nearly shuffles against the ground, and every ponderous step causes a prominent noisy disturbance in its supple texture that doesn\'t abate until a few seconds later; your waist swells into hips crammed to the point of bursting with slabs of fat ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "more than a meter thick";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a few feet";
                                    }
                                    _loc1_ = _loc1_ + " that slosh around riotously when you waddle forth, curving below into the rump even more gratuitously overfurnished with jiggling blubber. ";
                            }
                    }
            }
            return _loc1_;
        }

        protected function describeLegs():String {
            var _loc1_:* = null;
            _loc1_ = "";
            switch (this.playerGender.name) {
                case this.Male.name:
                    switch (this.bodyFatTier()) {
                        case "malnourished":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You aren\'t used to travelling on foot, and your unsteady legs have malnourished thighs, followed by spindly calves. Your legs are sorely underqualified for a life of adventure, being vulnerable to aches and spraining. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You are light on your feet, and your lean-thighed and thin-calved legs are quick and flexible. Your legs can be trusted to get you out of any trouble, or make up for your general lack of mass in times when a situation calls for a firm kick. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You are no stranger to the hardships of a long journey, and your legs have well-developed thighs bulging with granite quadriceps and thoroughly exercised lean calves. Your legs seem to be composed of nothing but sinew, bone and hard muscle, and never give you any trouble no matter the situation or terrain. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You are superbly sure-footed, striding with wide, steady steps, and your legs are columns of unbreakable bones enwrapped by thick, mighty flesh of your thighs and calves. Your legs appear capable of carrying the heaviest of weights across the roughest of landscapes, even when the added challenge of charging into a fight or fleeing factors in. ";
                            }
                            break;
                        case "healthy":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You aren\'t too used to travelling on foot, and your unremarkable legs have toneless thighs and supple calves. Your legs are more at home pacing on a hardwood floor than tramping on a rocky road, and only exhibit any fitness in a safe, secure environments where the jogging is seldom a life-saving course of action. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You are light on your feet, and your speedy legs have exercised, yet lean thighs and firm calves. Your legs are perfectly at ease both during a stroll, a jog or a sprint - as long as there is no heavy load weighting you down. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You are no stranger to hardships of a long journey, and your husky legs have thick musclular thighs and sturdy calves. Your legs have excellent tolerance for prolonged stress, and never give you any trouble no matter the situation or terrain. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You are superbly sure-footed, striding with wide, steady steps, and your massively developed legs have mighty thighs and outstandingly hardy calves. Your legs have been known to tirelessly eat up miles of craggy slopes, bramble thicket and barren rock without giving you as much a fleeting ache at the journey\'s end. ";
                            }
                            break;
                        case "robust":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You aren\'t too used to travelling by foot, and your bumbling legs have marshmallow thighs and downy calves. Your legs have spent a little too much timy in cushy beds and behind dinner tables, and can only manage an uneven pace that isn\'t well-suited for a long journey. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You are light on your feet, and your vigorous legs have healthy-looking thighs and toned calves that are still slightly chubby. Your legs benefit from almost inexhaustible resources for moderately fleet journeys and don\'t get worn out easily despite their voluptuous texture - provided you are travelling light. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You are no stranger to hardships of a long journey, and your steady legs have meaty thighs and toned calves that keep their firmness in spite of their light padding. Your legs give you a fortitudinous stance most useful in withstanding heavy blows in combat, and a springy, bouncing gait on the move. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You are superbly sure-footed, striding with wide, steady steps, and your exemplarily trained like legs are enveloped in thick, strong flesh of your burly thighs and succulently meaty calves. Your legs are given awesome power by their overgrown musculature bostered stintingly by a tiny amount of flab, are quick to leap or kick, and impossible to tire even by a lengthy, heavilly-laden travel. ";
                            }
                            break;
                        case "overweight":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Unaccustomed as you are to moving around a lot, you are a poor traveller, and your awkwardly moving legs are doughy-thighed and supple-calved. Your legs have a definite predispoition for basking in warmth and indolence, and don\'t permit you to undergo any far-reaching amblings, else they start aching and complaining. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You are in a good shape for pedestrian forays despite your inherent baggage, and your firm legs have thighs and calves that are strong enough despite being consistently flabby. Your legs have a good working relationship with their decent baggage of loose flesh, and allow you to leave a good distance behind you before you start running out of breath and vigour. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You are a weathered journeyman used to carrying an bit of insurance against luckless foraging under your belt, and your hardy legs have stout thighs and juicy calves boating remarkable hardiness. Your legs may be less gymnastics-oriented in their function, but the rhythm and quickness of their pace suggests that the extra weight you bear doesn\'t come close to your full carrying capacity, even when forced to travel heavy and for far. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You tread ahead with an unstoppable tenacity in your heavy and firm steps, and your vigorously robust legs have strong, thick thighs and mightily meaty calves. Your legs are sturdy in the extreme, and their softer look doesn\'t compromise the fact that there isn\'t a slope you cannot climb nor a fallen log you can\'t fling away with a kick. ";
                            }
                            break;
                        case "chubby":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Unaccustomed as you are to moving around a lot, you are a poor traveller, and your underused legs have very flabby thighs and wobbly calves. Your legs are significantly stressed by your generous proportions, and ther curves seem to attract hard doorframes, table edges and trees stumps. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You are in a good shape for pedestrian forays despite your inherent baggage, and your defiantly quick legs are quite well-developed despite the added weight, and are flabby-thighed, plush-calved. Your legs give you a deep appreciation for comforts of home, but they also can keep you comfortable on an occasional trek through the wilderness. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You are a weathered journeyman used to carrying under your belt a bit of insurance against luckless foraging, and your intensely trained legs are plump-thighed and hardy-calved. Your legs have left enough hard miles behind them, and are so reliable that hardly ever let you feel their heavier, squishier aspects during a fight or a flight. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You tread ahead with an unstoppable tenacity in your heavy and firm steps, and your superiorly athletic legs have voluminous meaty thighs and tremendously exercised, yet luxuriantly plump calves. Your legs have the balance and power that allow to you can tackle any part of the adventuring life without giving any care to your slightly pudgy means of locomotion. ";
                            }
                            break;
                        case "corpulent":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Unaccustomed as you are to moving around a lot, you are a poor traveller, and your strained legs have chubby thighs that rub together a little as you stroll, followed by the juicily-fleshed calves below. Your legs are understandably overstressed considering they have to take care of your upper bodily chubbiness on top of their own, and being so harassed they tend to find objects to stumble against even on the flattest of pavements. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You are in a good shape for pedestrian forays despite your inherent baggage, and your tolerably trained legs have fatty thighs that rub together a little as you stroll, followed by the firm, chubby calves below. Your legs are struggling to keep their hefty fleshiness from influencing your chosen trajectory, and even though it costs you a lot of effort, they are fully capable of seeing you through a perilous expedition. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You are a weathered journeyman used to carrying under your belt a bit of insurance against luckless foraging, and your uncommonly hardy legs have powerful and heavy thighs that rub together a little as you stroll, followed by the firm and meaty calves below. Your legs are prevented from realizing their full potential of gymnasitc prowess by the filled-out nature of your body, but otherwise aren\'t much affected by the heaving weight they support. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You tread ahead with an unstoppable tenacity in your heavy and firm steps, and your tremendously steadfast legs have overwhelmingly muscular, plump thighs that rub together a little as you stroll, followed by the robust stout calves below. Your legs don\'t perform too well when asked for a sudden feat of sprinting, but are affluent enough in their power reserves to allow an effortless march regardless of its duration, difficulty of landscape, the contents of your way bags or how heavy a meal you\'ve just had. ";
                            }
                            break;
                        case "obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Never more than a hair\'s breadth away from getting stopped in your tracks by your girth panting and wheezing, you belong in a cushy homestead, and your infirm legs have profoundly chubby thighs that rub together a lot when you waddle forth, followed by the doughy calves below. Your legs are a constant source of duress and frustration whenever getting somewhere on time is of essence. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "To you a road of any description is always a formidable opponent that you frequently strive to avoid rather than vanquish, and your legs are out of shape, have profoundly chubby thighs that rub together a lot when you waddle forth, followed by the doughy calves below. Your legs are a constant source of duress and frustration whenever getting somewhere on time is of essence, although you can make your body move at a respectable pace through grit and determination alone. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Strugging and exerting yourself to overcome the sloshing intertia of your rounded parts, you still confidently plow through the thickets and over the dunes, and your sturdy legs have thick, fatty thighs that rub together a lot when you waddle forth, followed by into the fleshy, but toned calves below. Hard of step and kick alike, your legs naturally adopt a more defensive stance in fights that draw on your resilient stability rather than flashy maneuvers, and you always take care to pace yourself on lengthy trips. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Hampered as well as aided by the dire momentum of your bulk, you take to the road with the relentless flow of a drifting iceberg, and your stoutly built legs have profoundly flabby thighs that rub together a lot when you waddle forth, followed by the firmly chubby calves below. Your legs have long since developed a set of tactics for turning the cumbersome weight above to your advantage in combat or on the move, allowing you to root yourself into he ground in anticipation of a blow, and fly into a charge the next moment. ";
                            }
                            break;
                        case "morbidly obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Never more than a hair\'s breadth away from getting stopped in your tracks by your girth panting and wheezing, you belong in a cushy homestead, and your awkward legs have bulging thighs that get squeezed together forcibly as you trundle along, followed by the richly fleshy calves below. Your legs are as much a liability during an arduous journey as the rest of you, but at least they cushion the campfire vigils when chance catches you camping in a particularly rocky country. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "To you a road of any description is always a formidable opponent that you frequently strive to avoid rather than vanquish, and your awkward legs have bulging thighs that get squeezed together forcibly as you trundle along, followed by the richly fleshy calves below. Your legs are nearly as much a liability during an arduous journey as the rest of you, but at least they cushion the campfire vigils when chance catches you camping in a particularly rocky country, and can help you get away from a slow enough opponent. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Strugging and exerting yourself to overcome the sloshing intertia of your rounded parts, you still confidently plow through the thickets and over the dunes, and your trusty legs have softly thighs that get squeezed together forcibly as you trundle along, followed by sturdy, but very thickly-padded calves below. Your legs make sauntering through the dark woods and ominous hills easy enough, but take some resolve and concentration to keep that ease during heated confrontation or while making a strategic retreat, for the wild swaying of your abounding flab is a chaotic force that is hard to adjust for. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Hampered as well as aided by the dire momentum of your bulk, you take to the road with the relentless flow of a drifting iceberg, and your sure-footed legs have impressively portly, but well-trained thighs that get squeezed together forcibly as you trundle along, followed by the mightily fleshed calves below. Your legs turn your corpulent lumbering frame into a body of a competent and mobile combatant, and show remarkable disdain for the roughness of terrain when exploring the wilds, although there\'s a limit to their resources. ";
                            }
                            break;
                        case "massive":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Never more than a hair\'s breadth away from getting stopped in your tracks by your girth panting and wheezing, you belong in a cushy homestead, and your unstable legs have blubbery thighs that get squeezed together even when you set your knees apart, followed by the abundantly fatty calves below. Your legs get in your way constantly, straining, creaking and aching, and are far from being a proper means of locomotion for a town crier, let alone a hardy adventurer. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "To you a road of any description is always a formidable opponent that you frequently strive to avoid rather than vanquish, and your overstrained legs have blubbery thighs that get squeezed together even when you set your feet apart, followed by the abundantly fatty calves below. Your legs get in your way most of the time, and are far from being a proper means of locomotion for a town crier, let alone a hardy adventurer, but through effort and will to improve you somehow manage to pull through even the most ridiculously challenging situations for someone of your weight category. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Strugging and exerting yourself to overcome the sloshing intertia of your rounded parts, you still confidently plow through the thickets and over the dunes, and your burdened legs have stout and awesomely porty thighs that get squeezed together even when you set your feet aside, followed by the fleshy calves below. Your legs are the wardens of your precarious balance, and take this grave responsibility seriously, and even though quicker gaits and sudden maneuvers are right out for your bulk, you can at least be assured of a steady amble and a firm stance. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Hampered as well as aided by the dire momentum of your bulk, you take to the road with the relentless flow of a drifting iceberg, and your stout and sturdy legs have thighs with solid muscle and ample blubber giving them the girth that make them get squeezed together even when you set your feet aside, followed by the meaty calves below. Your legs have the power and resilience to cope with your bloated form most of the time, whether it\'s a long trudging expedition or a heated engagement, and on occasion are capable of turning the impeding weight into added force behind a combat lunge, but the tradeoff in balance makes the latter less than feasible. ";
                            }
                            break;
                        case "spherical":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Considering the magnitude of loose weight dragging your frame down, its continuing mobility seems downright miraculous, although you know bitterly well that it\'s nothing but excruciating toil that keeps you moving, and your tormented legs have luxuriantly fattened thighs thick as small beer barrels that are slammed together so hard your knees are forced apart, followed by the blubbery calves below. Your legs aren\'t much help when it comes to shifting your formidable bulk around, and every heavy step feels like trudging through a mire, nevermind attempting to hurry up your pace. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your traversing most often takes form of a barely controlled continuous collapse forward, accompanied by the wild swinging of your bulging rotundities and the haunting dread of having to stop at some point, and your underqualified legs have luxuriantly fattened thighs thick as small beer barrels that are slammed together so hard your knees are forced apart, followed by the blubbery calves below. Your legs aren\'t much help when it comes to shifting your formidable bulk around, and every heavy step feels like trudging through a mire, nevermind attempting to hurry up your pace, but the extensive experience of overcoming encumbrance allows you to rally in times of need and undertake an unexpected rush or two. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Just managing the maddening feat of harnessing the impetus of your overflowing dimensions in motion, you doggedly waddle towards the destination of your choice, and your belleaguered legs have luxuriantly fattened, yet sturdy thighs thick as small beer barrels that are slammed together so hard your knees are forced apart, followed by the blubbery calves below. Your legs are capable of hauling your formidable bulk around, but only just, and every heavy step feels like trudging through a mire, even though you can push yourself far beyond your comfortable limit. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Grass, sand, dirt and snow alike tremble at your ponderous advance, and even though you have left your capacity for springy acrobatics far behind and deep within, the tectonic inexorability of your pace in and out of combat never fails to impress, and your reliable legs have burly, blubbery thighs thick as small beer barrels that are slammed together so hard your knees are forced apart, followed by the firm, but lushly corpulent calves below. Your legs are constrained to a measured stroll in terms of speed, but for someone of your proportions, speed isn\'t nearly as much of an asset as stability, which your legs dutifully provide no matter the landscape. ";
                            }
                            break;
                        case "mountainous":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Considering the magnitude of loose weight dragging your frame down, its continuing mobility seems downright miraculous, although you know bitterly well that it\'s nothing but excruciating toil that keeps you moving, and your trembling legs have massive thighs thick as yearling walruses that are smushed together tightly enough to force your knees widely apart, followed by the corpulent calves below. Your legs are pitifully overstrained carrying your staggeringly obese form, and even with a firm cobbled road beneath your feet and an empty travelling bag behind your back, you move by careening and lurching drunkedly, using every surface within reach for support, and in an event of clumsily running away from a fierce beast, not even the prospect of becoming your pursuer\'s banquet makes the desire for a lengthy lie-down any less tempting. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your traversing most often takes form of a barely controlled continuous collapse forward, accompanied by the wild swinging of your bulging rotundities and the haunting dread of having to stop at some point, and your harassed legs have massive thighs thick as yearling walruses that are smushed together tightly enough to force your knees widely apart, followed by the corpulent calves below. Your legs are substantially overstrained carrying your staggeringly obese form, and even with a firm cobbled road beneath your feet and an empty travelling bag behind your back, you move by careening and lurching drunkedly, using every surface within reach for support, and in an event of clumsily running away from a fierce beast, not even the prospect of becoming your pursuer\'s banquet makes the desire for a lengthy lie-down any less tempting. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Just managing the maddening feat of harnessing the impetus of your overflowing dimensions in motion, you doggedly waddle towards the destination of your choice, and your ailing legs have massive thighs thick as yearling walruses that are smushed together tightly enough to force your knees widely apart, followed by the corpulent calves below. Your legs are only just sufficiently developed to go on carrying your staggeringly obese form, and even with a firm cobbled road beneath your feet and an empty travelling bag behind your back, you move in uncertain lurches, using every surface within reach for support, and in an event of running away from a fierce beast, only the prospect of becoming your pursuer\'s banquet makes the idea of an immediate lengthy lie-down less appealing. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Grass, sand, dirt and snow alike tremble at your ponderous advance, and even though you have left your capacity for springy acrobatics far behind and deep within, the tectonic inexorability of your pace in and out of combat never fails to impress, and your heroically tenacious legs have mightily portly thighs as thick cathedral pillars that are smushed together so hard that your knees are forced widely apart, followed by the lavishly padded and meaty calves below. Your legs are formidable enough to accomplish their appointed task of transporting your inconceivably massive form around, and even offering a modicum of maneuverability in combat, but the severity of the stress they endure mean they can\'t be safely forced too far beyond their limits. ";
                            }
                            break;
                        case "colossal":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Considering the magnitude of loose weight dragging your frame down, its continuing mobility seems downright miraculous, although you know bitterly well that it\'s nothing but excruciating toil that keeps you moving, and your buckling legs have tremendous thighs neither of which could fit into a town well, and that are squeezed together so tightly they prohibit your knees from getting anywhere close to each other; even the superbly fleshy, jiggling calves below look slim in comparison to what hangs above. Your legs have nothing in terms of power and flexibility to account for your unparalleled obesity, and even a simple thing like getting out of bed or climbing a set of stairs - something that an ordinarily-built person would have found trivial and mundane - turns into a quest of epic proportions for you, with all its due breathless exhaustion, disastrous downfalls and heroic triumphs. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Your traversing most often takes form of a barely controlled continuous collapse forward, accompanied by the wild swinging of your bulging rotundities and the haunting dread of having to stop at some point, and and your cumbersome legs have tremendous thighs neither of which could fit into a town well, and that are squeezed together so tightly they prohibit your knees from getting anywhere close to each other; even the superbly fleshy, jiggling calves below look slim in comparison to what hangs above. Your legs have almost nothing in terms of power and flexibility to account for your unparalleled obesity, and even a simple thing like getting out of bed or climbing a set of stairs - something that an ordinarily-built person would have found trivial and mundane - turns into a quest of epic proportions for you, with all its due breathless exhaustion, disastrous downfalls and heroic triumphs. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Just managing the maddening feat of harnessing the impetus of your overflowing dimensions in motion, you doggedly waddle towards the destination of your choice, and your staggering legs have tremendous thighs neither of which could fit into a town well, and that are squeezed together so tightly they prohibit your knees from getting anywhere close to each other; even the superbly portly calves below look slim in comparison to what hangs above. Your legs have very little in terms of power and flexibility to account for your unparalleled obesity, and even a simple thing like getting out of bed or climbing a set of stairs - something that an ordinarily-built person would have found trivial and mundane - turns into an arduous quest with all of its gruelling vexations, but the reward of staying on your feet despite the absurd enormity of your physique is worth the investment. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Grass, sand, dirt and snow alike tremble at your ponderous advance, and even though you have left your capacity for springy acrobatics far behind and deep within, the tectonic inexorability of your pace in and out of combat never fails to impress, and your defiantly tough legs have bloated thighs neither of which could fit into a town well, and that are compressed together so hard that your knees are prevented from coming anywhere near each other; below, there are the firm, but inescapably lardaceous calves that are still humbled by the great bulks hanging above. Your legs are apparently as stubbornly unyielding as mountains, or else there would have been no secular, non-magical excuse for you to wander around as if you weren\'t as overwhelmingly overweight as you are, and it is often the shock of witnessing the maddening quickness of your frame that seals the fate of your adversaries, leaving them open to a flattening attack. ";
                            }
                    }
                    break;
                case this.Female.name:
                    switch (this.bodyFatTier()) {
                        case "malnourished":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You move in an uncertain amble, and your rickety legs have barely prominent calves and pitiably underfed thighs. Your legs are feebly built, making you prone to stumbling and making even the most harmless stretches of journeying unwelcome and trying experiences. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You walk with brisk determination, and your briskly agile legs have starkly muscled calves and toned, narrow thighs. Your legs are clearly capable of impressive gymnastic feats, and make you already airy frame appears capable of soaring in the air when you move quickly. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You travel at a steady, confident pace, and your superbly trained legs have ornamentally muscled thighs and calves sturdy as rock. Your legs are as formidably strong as they are agile, and their heightened mobility rivals your inexhaustible stamina. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You readily choose a foot journey over a caravan ride, used as you are to prolonged arduous travel, and your outstandingly built legs are lean-fleshed, solid-thighed and gnarly-calved. Your legs are a perfect compromise between being excessively muscular and gymnastically mobile, and are more than capable of leaving even a mounted pursuit soaped and winded without even breaking a sweat. ";
                            }
                            break;
                        case "healthy":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You have a cautious townsperson\'s gait, and your slim, leisure-spoiled legs have untoned calves and tender narrow thighs. Your only have the overall modest weight of your body for their apparent quickness, and are in fact the reason you tend to start longing for a soft chair after anything more than a short stroll. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You walk with a sense of purpose and grace, and your fleet and springy legs have firm calves and toned lean thighs. Your legs are the definition of acrobatic litheness, and suggest their owner to be an accomplished runner or dancer. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You travel at a steady, confident pace, and your strong, shapely legs have muscle-hardened calves, well-developed thighs, are as formidably strong as they are agile and graceful. Your legs hold the strength and vigour surpassing those of your male athlete counterparts, and allow for easy and time-efficient adventuring on the wild side. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You readily choose a foot journey over a caravan ride, used as you are to prolonged arduous travel, and your grandiosely muscled legs have iron calves and meaty thighs. Your legs are second to none in terms of stamina and force they are capable of exerting, and permit you find your way around the deadliest of treasure-bearing loci, and make a speedy retreat across the same landscape with the loot jingling in the sack behind your back. ";
                            }
                            break;
                        case "robust":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You walk at a leisurable townsperson\'s pace, and your shapely legs have calves that are soft to the touch and rounded thighs slightly lacking in their firmness. Your legs don\'t lack in vitality, but are deficient in tone, and often compel you to seek an easier path far removed from risks and challenges. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You move with a sense of purpose and grace, and your vivacious legs are firm-calved and healthy-thighed. Your legs always thirst for a quick dash or a measured jog, exhibiting a subtle voluptuous bounce and swagger to their gait even when strolling, and are nimble enough to get you in, through or out of the fight. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You travel at a steady, confident pace, and your exuberantly springy legs have athletic calves and enviably well-developed thighs. Your legs are muscular enough to guarantee an advantage of heightened mobility and superior balance, even though the richness of their texture allows a subtle lively jiggle accompany their motions. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You readily choose a foot journey over a caravan ride, used as you are to prolonged arduous travel, and your pillar-like legs have magnificently sculpted calves and powerful thighs that are still somewhat lushly fleshed. Your legs show unsurpassed mastery of equilibrium both in motion and holding your ground, and are ever ready to leave any challenge trampled underfoot. ";
                            }
                            break;
                        case "overweight":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You step gingerly, striving not to lose your balance due to an errant sway of the hip, and your weak legs have doughy calves and somewhat portly thighs. Your legs aren\'t much for facilitating adventuring in remote, hazard-riddled places, and their lackluster tone is prohibitive of any sort of travel other than a brief promenade across familiar, cultivated terrain. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You move along with an effortless voluptuous swagger, and your surprisingly limber legs have firm, plump calves and fairly strong thighs that are tender to the touch. Your legs may not be on top of their game as far as fitness goes, but they still allow many acrobatic options that few would expect from someone so fluffy-looking. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You traverse the land with vigorous jiggle accompanying your steady, confident march, and your stalwart legs have thick calves and well-developed thighs that require a good poke to reach the hard muscle. Your legs are brimming with vim and carry you and your burdens switfly along, coming to your aid in resolving hostilities as well opening new ways of traversing uneven landscapes. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You take on a road with a surefooted pace of a stout traveller prepared for anything, and your gloriously powerful legs have robust calves and strong, thick thighs that are also generously softened. Your legs lend you a dazzling degree of endurance, power and stability, and carry their modest chubbiness like a badge of honor - in addition to giving motion to the rest of your habitually hefty hauls from daring adventures. ";
                            }
                            break;
                        case "chubby":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You step gingerly, striving not to lose your balance due to an errant sway of the hip, and your clumsy legs have tender, flabby calves and generously plump thighs that lightly rub together when you walk. Your legs have trouble maintaining a steady pace even on a paved, even ground for more than a few minutes at a time. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You move along with an effortless voluptuous swagger, and your vigorous and robust legs have firm, yet pudgy calves and sizable thighs that lightly rub together when you walk. Your legs don\'t stumble easily or tire quickly unless sprinting is involved, circumventing their hefty inhibitions by tricks of leverage and balance. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You traverse the land with vigorous jiggle accompanying your steady, confident march, and your tempered legs have robust calves and generously fleshy, but also very athletic thighs that lightly rub together when you walk. Your legs give you splendid sprinting speed, a tenacity of travel, and provide you with a powerful stance and efficient footwork in combat. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You take on a road with a surefooted pace of a stout traveller prepared for anything, and your luxuriantly built legs have firm, meaty calves, and mightly, but sparingly-padded thighs that lightly rub together when you walk. Your legs neatly eliminate balance and leverage from the list of your outdoors hazard-managing concerns, and they also permit any acquired weight to be dragged along with impunity - including the weight accrued from the overtly nutritious dinners. ";
                            }
                            break;
                        case "corpulent":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "You step gingerly, striving not to lose your balance due to an errant sway of the hip, and your easily exhaustable legs have chubby calves and remarkably fleshy thighs that grind together quite a bit when you saunter about. Your legs are shamefully underwhelming in terms of bearing properties and constitute a major inconvenience whenever your schedule includes quick jog or a prolongued stretch of trundling. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "You move along with an effortless voluptuous swagger, and your moderately exercised legs have plump calves and fleshy thighs that grind together quite a bit when you saunter about. Your legs may lack the weightless alacrity of your younger slimmer self, but they get you to your destination eventually through all the obstacles and confrontations, nevermind the amount of panting exacted by the exploit once you get there. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "You traverse the land with vigorous jiggle accompanying your steady, confident march, and your robustly strong legs have splendidly developed, healthy calves and heavily muscled and pudgy thighs that grind together quite a bit when you saunter about. Your legs are molded after the standards of heavyweight athleticism, and guarantee your a firmly grounded stance and a hard kick to your foes, even if the finer gymnastic feats are a little more tricky to undertake. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "You take on a road with a surefooted pace of a stout traveller prepared for anything, and your divinely potent legs have meaty calves and thoroughly plump, but powerful thighs that grind together quite a bit when you saunter about. Your legs treat their added girth and mass as a thrilling challenge rather than a sever hindrances, and can give your burdened form such an unstoppable momentum that very few onlookers would fail to be left amazed, and the same goes for the spectacular grace of your sway-intensive combat maneuvers. ";
                            }
                            break;
                        case "obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Waddling at an ailing pace, you radiate unhurried indolence and dread the thought of a wobbling, breathless spectacle you get reduced to whenever there is an urgency of travel, and your pampered legs have overtly flabby calves and blubbery thighs that squash together forcibly as you proceed forward. Your legs are dragging your down in the most literal sense to the extent that even climbing a few sets of stairs becomes an arduous exploit, and always long for the comfort of a soft-cushioned bed by the fireplace. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Resigning yourself to the constant struggle against the contradictory jostles of your gorgeously filled-out curves, you brave your way towards the distant goal regardless, and your heavily built legs have very flabby calves and pillow-like thighs that squash together forcibly as you proceed forward. Your legs are dragging your down in the most literal sense to the extent that even climbing a few sets of stairs becomes a tricky business, and often long for the comfort of a soft-cushioned bed by the fireplace. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Perambulation doesn\'t come easily to you, but the training and brawn you\'ve managed to accrue works wonders in taming the heaving and bouncing of your frame, and your sturdily fleshy legs have firmly pudgy calves and thick, corpulent thighs that squash together forcibly as you proceed forward. The weight and texture of your legs rules out certain activities like precarious climbing or sudden blitzes, but their power makes up for it in the way you can stand your ground and maintain a measured march. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Unflinching in your steady stride during the journey, you transcend the limitations of the ample superfluous weight of your body, no matter how it quivers and sways, and your mightily stout legs have strong doughy calves and well-developed, thickly padded thighs that squash together a good deal as you proceed forward. Your legs allow feats of strength an insure a degree of endurance that the majority of corpulent folk cannot even dream about, and all but nullify the encumbrance in your fights and forays into the unknown. ";
                            }
                            break;
                        case "morbidly obese":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Waddling at an ailing pace, you radiate unhurried indolence and dread the thought of a wobbling, breathless spectacle you get reduced to whenever there is an urgency of travel, and your roly-poly, delicate legs have tenderly pudgy calves and pillow-like grand thighs that squash together even when you set your feet apart. Your legs stunt your mobility considerably, only allowing your amble to cover a small distance before asserting their weight and demanding recuperation - and that only refers to navigating the interior of the town perimeter, outside of which it gets incalculably worse. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Resigning yourself to the constant struggle against the contradictory jostles of your gorgeously filled-out curves, you brave your way towards the distant goal regardless, and your grudgingly managing legs have pudgy calves and pillow-like voluminous thighs that squash together even when you set your feet apart. Your legs stunt your mobility considerably, only allowing your amble to cover an short distance before asserting their weight and demanding recuperation, even though you\'ve long since gotten used to push yourself a little past that threshold. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Perambulation doesn\'t come easily to you, but the training and brawn you\'ve managed to accrue works wonders in taming the heaving and bouncing of your frame, and your burly legs have smoothly chubby calves and stout, thickly padded thighs that squash together even when you set your feet apart. Your legs carry you steadily through the uneven landscapes of the wilderness, and provide confidence when blundering into a local hazard, but there is always a sense that a smallest misjudgment of how your fleshy extremities are aligned would result in a fall that you may not be able to recover from. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Unflinching in your steady stride during the journey, you transcend the limitations of the ample superfluous weight of your body, no matter how it quivers and sways, and your fortitudinous legs have thick, pudgy calves and amply fleshed thighs that squash together even when you set your feet apart. Your legs painstakingly wrest control of your maneuvers from the random influence of your undulating loose flesh, are quite capable of transferring a momentary loss of balance into a strike of significantly augmented potency; outside combat, they allow you to enjoy the scenic views when you stray outside the city walls without constantly insisting on your return to the realm of the cushy and refined. ";
                            }
                            break;
                        case "massive":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "Waddling at an ailing pace, you radiate unhurried indolence and dread the thought of a wobbling, breathless spectacle you get reduced to whenever there is an urgency of travel, and your luxuriantly coddled legs have downy, chubby calves and blubbery thighs thick as a barrel that are flattened against each other most of the time. Your legs only permit you a minimal degree of mobility, and conduct a concerto of fleshy unpleasantness whenever their limits are put to the test. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Resigning yourself to the constant struggle against the contradictory jostles of your gorgeously filled-out curves, you brave your way towards the distant goal regardless, and your luxuriantly unexercised legs have downy, chubby calves and blubbery thighs thick as a barrel that are flattened against each other most of the time. Your legs only permit you a minimal degree of mobility, and give you a really hard time whenever their limits are put to the test, but that is not something you would allow to stop you from getting where you want to be on time. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Perambulation doesn\'t come easily to you, but the training and brawn you\'ve managed to accrue works wonders in taming the heaving and bouncing of your frame, and your perplexingly sturdy legs have intensely doughy calves and blubbery thighs thick as a barrel that are flattened against each other most of the time. Your legs never let you down where traversing short distances or weathering minor battles is concerned, but any logistcal exploits of greater magnitude become taxing gauntlets for your voluptuous constitution, occupying all your thoughts with concerns about coordination and frustration at the intractable loose flesh. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Unflinching in your steady stride during the journey, you transcend the limitations of the ample superfluous weight of your body, no matter how it quivers and sways, and your monumentally hardy legs have corpulent calves and wonderously portly thighs that are flattened against each other most of the time. Your legs stalwartly accept the challenges your weight and the elusive center of mass throw at them, although it isn\'t without great difficulty and energy expenditure, and even though it\'s an astonishing sight to behold when you fight or surge forward, the bills of heavy panting, lengthy rests and hearty meals that your body produces at the resolution of those exploits are nothing to scoff at. ";
                            }
                            break;
                        case "spherical":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "It is a veritable mystery how someone as immoderately corpulent can still be moving about without assistance, but you make it happen through grit and tears, and your staggering legs have tender bulging calves and blubbery thighs; the latter are as girthy as prize-winning fattened hogs and squash against each other so strongly that your knees are forced widely apart. Your legs creak and agonize at having to endure such overwhelming stress, veering closer to expansive couches and sturdy-looking benches without your conscious input, and are the exact opposite of what a capable explorer of wilderness could want for her lower limbs. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Setting your form lurching forward in an avalanche of blubber is something you have no trouble doing, but it\'s the steering and decellerating that demand feats of strength and balance, and your sluggish legs have tender bulging calves and lardy thighs; the latter are as girthy as prize-winning fattened hogs and squash against each other so potently that your knees are forced widely apart. Your legs creak and ache at having to endure such overwhelming stress, veering closer to expansive couches and sturdy-looking benches without your conscious input, and aren\'t exactly what a capable explorer of wilderness would want for her lower limbs. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Something about the thunderous echo of your heavy footsteps betrays a highly trained traveller to whom her massive sloshing abundance of idle flesh is just one more obstacle to overcome, and your astonishingly resilient legs have bulging doughy calves and blubbery thighs; the latter are as girthy as prize-winning fattened hogs and squash against each other so strongly that your knees are forced widely apart. Your legs lament having to endure such overwhelming stress by persistently reminding of their plight by dull aching and veering closer to expansive couches and sturdy-looking benches without your conscious input, but refuse to succumb and faithfully carry you through your panting-intensive escapades. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Even though your bloated form imposes limitations that are impossible to mitigate via any means available to mortals, the sheer might of your limbs makes travelling through hazardous regions on foot not only conceivable, but comfortable, and your unyielding legs have blubbery calves and thighs that are fabulously fattened, yet firm; the latter are the size of prize-winning fattened hogs and squash against each other so strongly that your knees are forced widely apart. Your legs grudgingly support your swollen body when bracing for an enemy charge or when a lengthy trek becomes unavoidable, with the beckoning visions of the lavish festivities to follow your return with hard-won booty serving as an added incentive. ";
                            }
                            break;
                        case "mountainous":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "It is a veritable mystery how someone as immoderately corpulent can still be moving about without assistance, but you make it happen through grit and tears, and your shakey legs have fatty quivering calves and bloated thighs; the latter are as girthy a grown ox\'s chest and crush each other so forcefully that your knees cannot be brought together closer that ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a couple feet";
                                    }
                                    _loc1_ = _loc1_ + " apart. Your legs are driven way past their comfortable limits of exertion while you stand, and aren\'t shy about constantly informing you of their misery, and that continuous droning chorus of tension and hurt firmly prescribes you a relaxed lifestyle in a well-guarded town. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Setting your form lurching forward in an avalanche of blubber is something you have no trouble doing, but it\'s the steering and decellerating that demand feats of strength and balance, and your struggling legs have fatty quivering calves and bloated thighs; the latter are as girthy a fully grown ox\'s chest and crush each other so forcefully that your knees cannot be brought together closer that ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a couple feet";
                                    }
                                    _loc1_ = _loc1_ + " apart. Your legs are driven way past their comfortable limits of exertion while you stand, and aren\'t shy about constantly informing you of their hardship, and that continuous droning chorus of tension and aching firmly prescribes you a relaxed lifestyle in a well-guarded town. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Something about the thunderous echo of your heavy footsteps betrays a highly trained traveller to whom her massive sloshing abundance of idle flesh is just one more obstacle to overcome, and your long-suffering legs have stoutly meaty calves and bloated thighs; the latter are as girthy a fully grown ox\'s chest and crush each other so forcefully that your knees cannot be brought together closer that ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a couple feet";
                                    }
                                    _loc1_ = _loc1_ + " apart. Your legs are courting the limits of their physical prowess when you lumber through the action-intesive parts of your journeys, but any bout of motion leads to lengthy periods of exhaustion and aches that would make anyone long for a relaxed lifestyle in a well-guarded town. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Even though your bloated form imposes limitations that are impossible to mitigate via any means available to mortals, the sheer might of your limbs makes travelling through hazardous regions on foot not only conceivable, but comfortable, and your defiantly stalwart legs have chubby, meaty calves and magnificently corpulent thighs; the latter have the volume of an ancient oak tree trunk and compress each other so forcefully that your knees cannot be brought together closer than ";
                                    if (this.optionsMetric) {
                                        _loc1_ = _loc1_ + "half a meter";
                                    }
                                    if (!this.optionsMetric) {
                                        _loc1_ = _loc1_ + "a couple feet";
                                    }
                                    _loc1_ = _loc1_ + " apart. Your legs are so stoutly built that during the more peaceful promenades you can even steal a few minutes untroubled by the chore of minding your stance and watching your step, but whenever the only course of action is urgent movement you find that your locomotive resources are very quick to exhaust and easy to squander. ";
                            }
                            break;
                        case "colossal":
                            switch (this.bodyStrengthTier()) {
                                case "regular":
                                    _loc1_ = "It is a veritable mystery how someone as immoderately corpulent can still be moving about without assistance, but you make it happen through grit and tears, and your brutally tortured legs have lardy, supple calves and titanic thighs; the latter are as girthy as a bathing barrel and squash together so hard that your knees cannot be brought anywhere near each other. Your legs are only capable of hefting your enormous bulk upright and keeping it that way by calling upon virtually every flimsy muscle of your upper body in a desperate bid for leverage and balance, and what feeble stability you manage to muster this way must always be insured by having a sturdy wall to lean against, and the only mode of travel you can honestly afford is an inexorable glacial crawl forward accompanied by groans and booming footfalls. ";
                                    break;
                                case "athletic":
                                    _loc1_ = "Setting your form lurching forward in an avalanche of blubber is something you have no trouble doing, but it\'s the steering and decellerating that demand feats of strength and balance, and your severelyailing legs have lardy, supple calves and titanic thighs; the latter are as girthy as a bathing barrel and squash together so hard that your knees cannot be brought anywhere near each other. Your legs are only capable of hefting your enormous bulk upright and keeping it that way by calling upon virtually every hidden muscle of your upper body in a desperate bid for leverage and balance, and what feeble stability you manage to muster this way must always be insured by having a sturdy wall to lean against, and the only mode of travel you can honestly afford is an inexorable glacial crawl forward accompanied by panting and booming footfalls. ";
                                    break;
                                case "muscular":
                                    _loc1_ = "Something about the thunderous echo of your heavy footsteps betrays a highly trained traveller to whom her massive sloshing abundance of idle flesh is just one more obstacle to overcome, and your pained, but unrelenting legs have lardy, supple calves and titanic thighs; the latter are as girthy as a bathing barrel and squash together so hard that your knees cannot be brought anywhere near each other. Your legs are only capable of hefting your enormous bulk upright and keeping it that way by calling upon the formidable musclature of your upper body in order to gain leverage and balance, and although it\'s always safest to have a sturdy wall to lean against for stability, your hardy means of locomotion are powerful enough to allow somewhat stable travel over short distances, even your booming steps render it an outrageously loud affair. ";
                                    break;
                                case "bodybuilder":
                                    _loc1_ = "Even though your bloated form imposes limitations that are impossible to mitigate via any means available to mortals, the sheer might of your limbs makes travelling through hazardous regions on foot not only conceivable, but comfortable, and your epically tenacious legs have firm-surfaced blubbery calves and outrageously bloated thighs; the latter are fatter than a hibernating bear and are rammed into each other so heavily that your knees cannot be brought anywhere near to each other. Your legs are heroically stalwart in preserving the appearance of motive confidence, unhindered by the unreal girth and mass of what they carry, but a heave too strong brings your entire grandiose bulk to the brink of dramatically collapsing, which never bodes well in a combat situation or where buildings and people might get in the way of your destructive momentum - even though you have long since learned to measure your movements to work around this risk. ";
                            }
                    }
            }
            return _loc1_;
        }

        protected function inCombat():Boolean {
            if (currentState == "combat" || currentState == "combatInventory") {
                return true;
            }
            return false;
        }

        protected function combatDialogue():void {
            this.scene("\t" + this.enemyt.description, true);
            this.scene("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n", false);
        }

        protected function combatButtons():void {
            var slimesHeld:int = 0;
            var testLemonItem:Items = null;
            var blueSlimesHeld:int = 0;
            var blueTestItem:Items = null;
            this.clearView();
            if (this.grapple > 0) {
                this.btntxt(1, "Struggle");
            }
            if (this.grapple <= 0) {
                this.btntxt(1, "Attack");
            }
            this.buttonIcons(1, this.iconAttack);
            if (this.grapple <= 0) {
                this.btntxt(2, "Item");
                this.buttonIcons(2, this.iconInventory);
            }
            if (this.enemy.bossOf == null && this.grapple <= 0) {
                this.btntxt(3, "Run");
                this.buttonIcons(3, this.iconRun);
            }
            if (this.spellArray.length != 0 && this.grapple <= 0) {
                this.btntxt(4, "Spells");
                this.buttonIcons(4, this.iconSpells);
            }
            this.btntxt(5, "Wait");
            this.buttonIcons(5, this.iconWait);
            if (this.grapple <= 0) {
                if (this.enemyt.name == this.LemonSlime.name) {
                    if (this.hasQuest(this.slimeQuest1) && !this.questCompleted(this.slimeQuest1) && !this.itemOwned(this.lemonSampleItem)) {
                        this.btntxt(6, "Capture");
                    }
                    if (this.hasQuest(this.slimeQuest2) && !this.questCompleted(this.slimeQuest2) && !this.itemOwned(this.lemonSlimeItem)) {
                        this.btntxt(6, "Capture");
                    }
                    if (this.hasQuest(this.slimeQuest3) && !this.questCompleted(this.slimeQuest3)) {
                        slimesHeld = 0;
                        this.i = 0;
                        while (this.i < this.keyInvArray.length) {
                            testLemonItem = this.keyInvArray[this.i];
                            if (testLemonItem.Name == this.lemonSlimeItem.Name) {
                                slimesHeld++;
                            }
                            this.i++;
                        }
                        if (slimesHeld + this.questStage(this.slimeQuest3) < 3) {
                            this.btntxt(6, "Capture");
                        }
                    }
                }
                if (this.enemyt.name == this.BlueberrySlime.name) {
                    if (this.hasQuest(this.slimeQuest4) && !this.questCompleted(this.slimeQuest4) && !this.itemOwned(this.blueSlimeItem)) {
                        this.btntxt(6, "Capture");
                    }
                    if (this.hasQuest(this.slimeQuest5) && !this.questCompleted(this.slimeQuest5)) {
                        blueSlimesHeld = 0;
                        this.i = 0;
                        while (this.i < this.keyInvArray.length) {
                            blueTestItem = this.keyInvArray[this.i];
                            if (blueTestItem.Name == this.blueSlimeItem.Name) {
                                blueSlimesHeld++;
                            }
                            this.i++;
                        }
                        if (blueSlimesHeld + this.questStage(this.slimeQuest5) < 4) {
                            this.btntxt(6, "Capture");
                        }
                    }
                }
            }
            if (this.enemyt.voreable == true && this.enemyt.weight <= this.maximumFullness() && this.grapple <= 0) {
                this.btntxt(7, "Devour");
                this.buttonIcons(7, this.iconDevour);
            }
            this.btntxt(8, "Submit");
            this.buttonIcons(8, this.iconSurrender);
            this.listen = function ():void {
                var _loc1_:int = 0;
                combatDialogue();
                removeArrows();
                switch (btnchc) {
                    case 1:
                        if (grapple > 0) {
                            _loc1_ = STR;
                            if (INT > _loc1_) {
                                _loc1_ = INT;
                            }
                            if (AGI > _loc1_) {
                                _loc1_ = AGI;
                            }
                            grapple = grapple - _loc1_;
                            if (grapple < 0) {
                                grapple = 0;
                            }
                            scene("<li><b>Struggle</b></li>", false);
                            switch (grapple) {
                                case 0:
                                    combatButtons();
                                    scene(enemyt.grappleEscapeSucceed + "\n", false);
                                    playerAttack();
                                    break;
                                default:
                                    scene(enemyt.grappleEscapeFail + "\n", false);
                                    if (enemyStunEffect() == false) {
                                        enemyAttack();
                                    }
                                    enemyBurnEffect();
                            }
                        }
                        else {
                            switch (AGI + INT >= enemyt.AGI + enemyt.INT || enemySlowEffect()) {
                                case true:
                                    if (playerStatusEffect() == false) {
                                        playerAttack();
                                    }
                                    scene("\n", false);
                                    if (eHEA > 0 && enemyStunEffect() == false) {
                                        enemyAttack();
                                    }
                                    enemyBurnEffect();
                                    break;
                                default:
                                    if (enemyStunEffect() == false) {
                                        enemyAttack();
                                    }
                                    enemyBurnEffect();
                                    scene("\n", false);
                                    if (HEA > 0 && grapple <= 0 && currentState != "defeated" && playerStatusEffect() == false) {
                                        playerAttack();
                                    }
                            }
                        }
                        break;
                    case 2:
                        doInventory();
                        break;
                    case 3:
                        scene("<li><b>Run</b></li>", false);
                        switch (enemyt.escapable) {
                            case true:
                                switch (testSkillRange(25 + AGI + INT, enemyt.AGI + enemyt.INT, 10, 75)) {
                                    case true:
                                        scene(enemyt.playerEscape, false);
                                        currentState = "default";
                                        endCombat();
                                        nextButton();
                                        break;
                                    default:
                                        scene(enemyt.playerEscapeFail + "\n", false);
                                        if (enemyStunEffect() == false) {
                                            enemyAttack();
                                        }
                                        enemyBurnEffect();
                                }
                                break;
                            case false:
                                scene(enemyt.playerEscape + "<i>(You can\'t escape this fight)</i> ", false);
                                if (enemyStunEffect() == false) {
                                    enemyAttack();
                                }
                                enemyBurnEffect();
                        }
                        break;
                    case 4:
                        doSpells();
                        break;
                    case 5:
                        scene("<li><b>Wait</b></li>", false);
                        doStamina(15);
                        playerStatusEffect();
                        if (enemyStunEffect() == false) {
                            enemyAttack();
                        }
                        enemyBurnEffect();
                        break;
                    case 6:
                        if (hasQuest(slimeQuest1) && !questCompleted(slimeQuest1)) {
                            switch (testSkillRange(AGI + STR + INT, enemyt.AGI + enemyt.STR + enemyt.INT + eHEA, 10, 90)) {
                                case true:
                                    scene("<li><b>Capture</b></li>", false);
                                    scene("\t", false);
                                    getItem(lemonSampleItem);
                                    currentState = "default";
                                    endCombat();
                                    nextButton();
                                    break;
                                case false:
                                    scene("<li><b>Capture</b></li>", false);
                                    scene("\t", false);
                                    if (enemyStunEffect() == false) {
                                        enemyAttack();
                                    }
                                    enemyBurnEffect();
                            }
                        }
                        if (hasQuest(slimeQuest2) && !questCompleted(slimeQuest2)) {
                            switch (testSkillRange(AGI + STR + INT, enemyt.AGI + enemyt.STR + enemyt.INT + eHEA, 10, 90)) {
                                case true:
                                    scene("<li><b>Capture</b></li>", false);
                                    scene("\tYou lunge for the large lemon cuboid and land on top of it, squashing it down with a THRRRRRRP noise as though it were a whoopee cushion. " + "The slime monster squirts lemon-scented goo and bounces frantically beneath you, but you ", false);
                                    if (weight() < 150) {
                                        scene("cling on frantically like a rodeo rider", false);
                                    }
                                    if (weight() >= 150 && weight() < 300) {
                                        scene("keep it pinned beneath you with your sizeable belly while it wriggles and wobbles", false);
                                    }
                                    if (weight() >= 300) {
                                        scene("use your enormous weight to squash it into submission", false);
                                    }
                                    scene(" until it eventually subsides, apparently exhausted. Getting up cautiously, you prize the inert jello-like cuboid from the ground with a rather unpleasant sucking noise. ", false);
                                    getItem(lemonSlimeItem);
                                    currentState = "default";
                                    endCombat();
                                    nextButton();
                                    break;
                                case false:
                                    scene("<li><b>Capture</b></li>", false);
                                    scene("\tYou make a lunge for the large yellow cuboid, but it proves to be particularly slippery- and wobbly! " + "Making a strange squeaking noise the slime squeezes out of your grip like a bar of soap, " + "landing on the forest floor a couple of feet away and leaving your arms and chest covered in citrus-smelling gunge. ", false);
                                    if (enemyStunEffect() == false) {
                                        enemyAttack();
                                    }
                                    enemyBurnEffect();
                            }
                        }
                        if (hasQuest(slimeQuest3) && !questCompleted(slimeQuest3)) {
                            switch (testSkillRange(AGI + STR + INT, enemyt.AGI + enemyt.STR + enemyt.INT + eHEA, 10, 90)) {
                                case true:
                                    scene("<li><b>Capture</b></li>", false);
                                    scene("\tYou lunge for the large lemon cuboid and land on top of it, squashing it down with a THRRRRRRP noise as though it were a whoopee cushion. " + "The slime monster squirts lemon-scented goo and bounces frantically beneath you, but you ", false);
                                    if (weight() < 150) {
                                        scene("cling on frantically like a rodeo rider", false);
                                    }
                                    if (weight() >= 150 && weight() < 300) {
                                        scene("keep it pinned beneath you with your sizeable belly while it wriggles and wobbles", false);
                                    }
                                    if (weight() >= 300) {
                                        scene("use your enormous weight to squash it into submission", false);
                                    }
                                    scene(" until it eventually subsides, apparently exhausted. Getting up cautiously, you prize the inert jello-like cuboid from the ground with a rather unpleasant sucking noise. ", false);
                                    getItem(lemonSlimeItem);
                                    currentState = "default";
                                    endCombat();
                                    nextButton();
                                    break;
                                case false:
                                    scene("<li><b>Capture</b></li>", false);
                                    scene("\tYou make a lunge for the large yellow cuboid, but it proves to be particularly slippery- and wobbly! " + "Making a strange squeaking noise the slime squeezes out of your grip like a bar of soap, " + "landing on the forest floor a couple of feet away and leaving your arms and chest covered in citrus-smelling gunge. ", false);
                                    if (enemyStunEffect() == false) {
                                        enemyAttack();
                                    }
                                    enemyBurnEffect();
                            }
                        }
                        if (hasQuest(slimeQuest4) && !questCompleted(slimeQuest4)) {
                            switch (testSkillRange(AGI + STR + INT, enemyt.AGI + enemyt.STR + enemyt.INT + eHEA, 10, 90)) {
                                case true:
                                    scene("<li><b>Capture</b></li>", false);
                                    scene("\tYou charge the large blue cuboid, ", false);
                                    if (weight() < 150) {
                                        scene("scrabbling for purchase across its wide sides", false);
                                    }
                                    if (weight() >= 150 && weight() < 300) {
                                        scene("colliding with a gelatinous SLAP", false);
                                    }
                                    if (weight() >= 300) {
                                        scene("smacking into it so hard as to make it ripple", false);
                                    }
                                    scene(". It seems stunned by this novel tactic, and seizing the opportunity you ", false);
                                    if (weight() < 150) {
                                        scene("spring lightly", false);
                                    }
                                    if (weight() >= 150 && weight() < 300) {
                                        scene("leap laboriously", false);
                                    }
                                    if (weight() >= 300 && weight() < 500) {
                                        scene("heave yourself weightily", false);
                                    }
                                    if (weight() >= 500) {
                                        scene("flop whale-like", false);
                                    }
                                    scene(" on top of it. The Blueberry slime makes strange bubbling, glorping noises as it sinks down under your weight, spraying slime and struggling to free itself from your grip. " + "But although by now thoroughly slime-soaked, you ", false);
                                    if (weight() < 150) {
                                        scene("cling on frantically like a rodeo rider as it bucks and bounces", false);
                                    }
                                    if (weight() >= 150 && weight() < 300) {
                                        scene("keep it pinned beneath you with your sizeable belly while it wriggles and wobbles", false);
                                    }
                                    if (weight() >= 300) {
                                        scene("use your enormous weight to squash it into submission", false);
                                    }
                                    scene(", until finally it shows signs of tiring out. With a struggle you manage to heave the large jello-like mass from the ground. " + "After a few astonished quivers it subsides, apparently completely confused as to where it is. Thus subdued, you are able to stash it safely. ", false);
                                    getItem(blueSlimeItem);
                                    currentState = "default";
                                    endCombat();
                                    nextButton();
                                    break;
                                case false:
                                    scene("<li><b>Capture</b></li>", false);
                                    scene("\tYou charge the large blue cuboid, ", false);
                                    if (weight() < 150) {
                                        scene("scrabbling for purchase across its wide sides", false);
                                    }
                                    if (weight() >= 150 && weight() < 300) {
                                        scene("colliding with a gelatinous SLAP", false);
                                    }
                                    if (weight() >= 300) {
                                        scene("smacking into it so hard as to make it ripple", false);
                                    }
                                    scene(", but it flings you off with a mighty quiver. ", false);
                                    if (enemyStunEffect() == false) {
                                        enemyAttack();
                                    }
                                    enemyBurnEffect();
                            }
                        }
                        if (hasQuest(slimeQuest5) && !questCompleted(slimeQuest5)) {
                            switch (testSkillRange(AGI + STR + INT, enemyt.AGI + enemyt.STR + enemyt.INT + eHEA, 10, 90)) {
                                case true:
                                    scene("<li><b>Capture</b></li>", false);
                                    scene("\tYou charge the large blue cuboid, " + "[scrabbling for purchase across its wide sides/colliding with a gelatinous SLAP/smacking into it so hard as to make it ripple]" + ". It seems stunned by this novel tactic, and seizing the opportunity you ", false);
                                    if (weight() < 150) {
                                        scene("spring lightly", false);
                                    }
                                    if (weight() >= 150 && weight() < 300) {
                                        scene("leap laboriously", false);
                                    }
                                    if (weight() >= 300 && weight() < 500) {
                                        scene("heave yourself weightily", false);
                                    }
                                    if (weight() >= 500) {
                                        scene("flop whale-like", false);
                                    }
                                    scene(" on top of it. The Blueberry slime makes strange bubbling, glorping noises as it sinks down under your weight, spraying slime and struggling to free itself from your grip. " + "But although by now thoroughly slime-soaked, you ", false);
                                    if (weight() < 150) {
                                        scene("cling on frantically like a rodeo rider as it bucks and bounces", false);
                                    }
                                    if (weight() >= 150 && weight() < 300) {
                                        scene("keep it pinned beneath you with your sizeable belly while it wriggles and wobbles", false);
                                    }
                                    if (weight() >= 300) {
                                        scene("use your enormous weight to squash it into submission", false);
                                    }
                                    scene(", until finally it shows signs of tiring out. With a struggle you manage to heave the large jello-like mass from the ground. " + "After a few astonished quivers it subsides, apparently completely confused as to where it is. Thus subdued, you are able to stash it safely. ", false);
                                    getItem(blueSlimeItem);
                                    currentState = "default";
                                    endCombat();
                                    nextButton();
                                    break;
                                case false:
                                    scene("<li><b>Capture</b></li>", false);
                                    scene("\tYou charge the large blue cuboid, ", false);
                                    if (weight() < 150) {
                                        scene("scrabbling for purchase across its wide sides", false);
                                    }
                                    if (weight() >= 150 && weight() < 300) {
                                        scene("colliding with a gelatinous SLAP", false);
                                    }
                                    if (weight() >= 300) {
                                        scene("smacking into it so hard as to make it ripple", false);
                                    }
                                    scene(", but it flings you off with a mighty quiver. ", false);
                                    if (enemyStunEffect() == false) {
                                        enemyAttack();
                                    }
                                    enemyBurnEffect();
                            }
                        }
                        break;
                    case 7:
                        scene("<li><b>Devour</b></li>", false);
                        if (playerStatusEffect() == false) {
                            playerVore();
                        }
                        enemyBurnEffect();
                        if (inCombat() && eHEA > 0 && enemyStunEffect() == false) {
                            enemyAttack();
                        }
                        break;
                    case 8:
                        scene("<li><b>Surrender</b></li>", false);
                        surrender = true;
                        enemyAttack();
                }
            };
            this.updateStats();
        }

        protected function doBattle():void {
            this.appView(0);
            if (!this.inCombat()) {
                this.eHEA = this.enemyt.maxHEA;
                this.grapple = 0;
                if (this.enemyt.introduction != "") {
                    this.scene(this.enemyt.introduction, true);
                }
                else {
                    this.scene(this.enemyt.description, true);
                }
            }
            if (this.inCombat()) {
                this.combatDialogue();
            }
            this.voreing = false;
            this.surrender = false;
            currentState = "combat";
            this.combatButtons();
        }

        protected function endCombat():void {
            this.surrender = false;
            this.devour = false;
            this.grapple = 0;
            this.rmvTempStats();
            this.eStatusBurnPower = 0;
            this.eStatusBurnTime = 0;
            this.eStatusStunTime = 0;
            this.eStatusSlowTime = 0;
            this.eStatusSoakTime = 0;
        }

        protected function winBattle(param1:String):void {
            var winText:String = param1;
            this.scene("<li><u>Victory!</u></li>", false);
            if (winText != "") {
                this.scene(winText, false);
            }
            currentState = "default";
            this.endCombat();
            this.doXP(this.enemyt.XP);
            if (this.enemyt.GLD > 0) {
                this.doGold(this.dXY(this.enemyt.GLD * 0.8 + 1, this.enemyt.GLD * 1.2 - 1));
            }
            this.nextView();
            this.listen = function ():void {
                if (btnchc == 12) {
                    if (enemy.bossOf != null) {
                        doEvent(enemy.bossOf);
                    }
                    if (enemy.bossOf == null) {
                        doNext();
                    }
                }
            };
            if (this.enemyt.item != null && this.d100() <= this.enemyt.itemChance && this.voreing == false) {
                this.scene("\n\t" + this.enemyt.itemFound, false);
                this.getItem(this.enemyt.item);
            }
            switch (this.enemy) {
                case this.BloatedLion:
                case this.GorgedCheetah:
                    this.questAdvance(this.defendingTheHerd);
                    break;
                case this.MilkMachine:
                    this.questAdvance(this.madMilk);
                    break;
                case this.cheeseMonster:
                    this.questAdvance(this.madCheese);
                    break;
                case this.anacondaBoss:
                    this.questAdvance(this.spearQuest);
                    break;
                case this.shamanBoss:
                    this.questAdvance(this.hammerQuest);
                    break;
                case this.golemBoss:
                    this.questAdvance(this.swordQuest);
                    break;
                case this.shamanBoss:
                case this.shamanBossNormal:
                    this.questAdvance(this.defeatShaman);
                    break;
                case this.cabalDragon:
                    this.questAdvance(this.cabalRogue);
            }
        }

        protected function combatEvent(param1:Enemies):void {
            this.setEnemy(param1);
            this.startFight();
        }

        protected function startFight():void {
            this.eHEA = this.enemyt.maxHEA;
            this.eMANA = this.enemyt.maxMANA;
            this.grapple = 0;
            currentState = "combat";
            this.clearView();
            this.appView(0);
            this.buttonIcons(12, this.iconAttack);
            this.btntxt(12, "Fight!");
            this.listen = function ():void {
                if (btnchc == 12) {
                    doNext();
                }
            };
        }

        protected function doDefeat():void {
            this.endEvent(this.defeatedBy.location);
            this.endCombat();
            this.specialEvent = 0;
            this.subEvent = "";
            if (currentState == "defeated") {
                currentState = "default";
                this.rmvTempBuffs();
                this.Eaten = 0;
                this.Drank = 0;
                this.Inflated = 0;
                this.InflatedMass = 0;
                this.Calories = 0;
                this.updateStats();
                this.doRest();
                this.HEA = 0;
                this.doHealth(this.maxHEA * 0.5);
                this.doGold(-10);
            }
            switch (this.defeatedBy) {
                case this.battle:
                    this.scene("\tYou eventually wake up some time later and slowly open your eyes.You sit up and rub your aching head and find yourself covered in bandages and sitting on a hospital bed. " + "You still have several aches and bruises, but otherwise look none the less for wear. " + "\n\t\"In my professional opinion, it looks like you got your butt whooped by " + this.enemyt.article + " " + this.enemyt.name + ". " + "You should be more careful next time.\" a doctor says as he hands you back your equipment. You take of the bandages and put your stuff back on before heading back out of the hospital. ", true);
                    break;
                case this.devoured:
                    this.scene("\tYou awake on an altar. Looking around you eventually realize you\'re laying in the city\'s church. You look over and see the preacher standing beside you. " + "\n\t\"Though the fates may save \'ye from a terrible fate, they exact a steep price! Hopefully in the future you won\'t stray so far into danger. " + "Now please move if you would. Adventurers keep popping into existence here for some reason.\" ", true);
                    break;
                case this.exploded:
                    this.scene("\tYou awake with a jolt and sit bolt upright. Remembering your previous encounter you grab your waist and thankfully find it apparently all in one peice. " + "Although you\'re aboslutely covered in bandages and looking around confirms that you\'re in the hospital. " + "\n\tA startled doctor standing by your bed turns to you and smiles, \"Oh excellent, you actually woke up! I almost lost five gold on you. " + "Well the good news is that we somehow managed to put you back together. At least we\'re pretty sure anyway. Although the bad news is you\'re now horrendously ugly.\" " + "You immediately tear off your bandages and thankfully find yourself just as good looking as you were before. You glare up at the doctor. He slaps you on the shoulder, " + "\"Ha ha, just messing with you kid. Keep up the good work.\" he adds sarcastically as he absentmindedly wanders off to check up on other patients. You gruffly pick up your stuff and head out. ", true);
                    break;
                case this.overeating:
                    if (this.optionsPopping) {
                        this.scene("\tYou blink the sleep from your eyes as you are awakened by a loud and low groaning and gurgling noise. " + "You quickly notice that the source of this noise is you painfully distended stomach protesting being stretched to the absolute bursting point. " + "You gently massage your exposed gut and moan in pain and can practically feel the stretch marks coursing across your bloated waist. " + "\n\tA fur standing next to you in doctors scrubs says, \"Oh good, you\'ve regained conciousness. I have some good news and some bad news. " + "The good news is that some kind citizen managed to drag you back here. The bad news is that you\'re about to explode like a pinata.\" " + "Your stomach picks that moment to let out a particularly loud groan. \"But don\'t worry, you\'re in very good hands and you\'ll be right as rain in no time!\" " + "he smiles reassuringly and gives you a hearty pat on the gut. " + "This proves to have been a very poor idea as your vastly overinflated stomach makes an awful loud gurgling noise and begins to jiggle alarmingly from the impact. " + "\"Oh, whoops.\" the doctor says as he ducks for cover just in time for your stomach to finally give out one final groan and explode like the pinata it was described as. " + "As you pass out from the pain you hear the doctor say to himself \"You know, you\'d think I\'d learn to stop tempting fate like that.\" " + "\n\tSome time later you awake with a start and sit bolt upright in your hospital bed. A different doctor is standing by your bed this time. " + "\"Oh good, you\'re awake again.\" he says as he notes something down on a clipboard. " + "\"Very sorry about that, we\'ve had to hire a lot of new interns lately what with the drastically increased need for doctors. " + "We had our best people on the case though and we were able to put you back together good as new. Feel free to leave whenever you\'re ready.\" " + "In the distance you can just barely hear someone say, <i>\"right as rain\"</i> shortly followed by a loud explosion. " + "\n\t\"Oh damn it!\" exclaims the doctor as he hurries off towards the sound of the noise. After watching him leave, you pick up your belongings and head out before anything else goes wrong. ", true);
                    }
                    else {
                        this.scene("\tYou blink the sleep from your eyes and wake up to find yourself lying on a hospital bed. " + "Another fur wearing doctors scrubs walks up to your bed. He looks down at a clipboard before addressing you. " + "\n\t\"Looks like a distinct case of overeating. We\'ve been getting that a lot lately.\" the doctor says half to himself, " + "\"All we can do is let \'em sleep it off. You should be fine to go, just make sure you don\'t overdo it again any time soon alright?\" " + "He gives you a wink and a good natured punch on the arm before walking off to deal with his other patients. ", true);
                    }
                    break;
                case this.floating:
                    if (this.optionsPopping) {
                        this.scene("\tAs you continue to fly away, you feel dizzy from the thinning air, as well as extremely unwell. " + "The pressure from inside you is acting upon the lesser air pressure from outside, stretching your skin even further. " + "To your horror, you’re bloating up even bigger than you were before, and it’s becoming worryingly clear that your body can’t take much more. " + "Your stomach is letting out all sorts of horrible groaning and creaking noises as your vision is starting to go black. " + "You can’t tell if it’s your failing consciousness or getting close to escaping the atmosphere. " + "You can tell that you’re close to breaking point because your discomfort is turning to pain. " + "You can’t even alleviate your pressure by burping because your mouth is pinned shut by your own bloated middle. " + "After your body lets out one huge, final groan, you register the start of an ear-shattering explosion before everything goes black and quiet. " + "Just as soon as that blackness swallowed you, you suddenly find yourself awakening in a hospital room, sitting bolt upright with a startled yell. " + "The doctors and a few other patients look at you. " + "\n\t\"Hello there, " + this.playerName + ". I see you’re finally awake from your little... flight of fancy. " + "Took a lot of bandages and healing potions to put you back together, but we think you’ll make a full recovery. " + "Just try and take it easy from now on, alright?\" The doctor says, looking you over. " + "You get out from the hospital later that day, looking at yourself in a mirror in the bathroom before you go. " + "The doctors were right – they did wonders on fixing you, without leaving so much as a hairline scar. " + "You leave the hospital, finally feeling ready to hit the road once more. ", true);
                    }
                    else {
                        this.scene("\tAs you continue to fly away, you feel dizzy from the thinning air, as well as somewhat unwell and lethargic. You wiggle helplessly as the wind continues to make you drift away. " + "You’re aware of some small specks of people far below looking at you before you pass out. As you come to, you feel a few leaves in your mouth and spit them out. " + "Looking around, you see a large amount of green foliage, and realise your little flight came to an end at some point while you were out. " + "Whether it was due to an unconscious reflex of expelling the air from your body, colliding with a bird in the air, or the lack of air pressure having its way with you, you’re uncertain of that fact. " + "What you are certain of however, is that however your flight ended you landed in a large tree in town. " + "You carefully let yourself down from the tree, and inspect yourself for any damage, and see that your body looks fine. " + "However, a quick search of your belongings finds you a little lighter in the gold department – some of it must have fallen out during your drifting. " + "You also feel very hungry, indicating that you were unconscious from the crash landing for a small while. " + "Brushing off both the leaves and the odd looks you’re getting, you walk away from the tree. ", true);
                    }
                    break;
                case this.transformed:
                    this.scene("\tYou awake with a start and sit upright. You grab yourself all over and are relieved to find your body is back in it\'s expected " + this.playerSpecies.name + "y state and not permanently transformed. " + "\"There are many perils to meddling in the way of dark magics. Be thankful that your form has been returned to you.\" The stern voice of the churches pries chides you. " + "You\'ve found yourself sitting upon the altar of the city\'s church. ", true);
                    break;
                default:
                    this.scene("\"I don\'t know what happened to you out there, but you shouldn\'t let it happen again.\" ", true);
            }
        }

        protected function doDMG():void {
            var _loc1_:int = 0;
            var _loc2_:Number = NaN;
            var _loc3_:Number = NaN;
            var _loc4_:DamageType = null;
            var _loc5_:DamageType = null;
            _loc1_ = this.STR;
            _loc2_ = 0.4;
            if (this.WEA.damageStat != null) {
                switch (this.WEA.damageStat) {
                    case "AGI":
                        _loc1_ = this.AGI;
                        break;
                    case "INT":
                        _loc1_ = this.INT;
                        break;
                    default:
                        _loc1_ = this.STR;
                }
            }
            if (this.WEA.damageScaling > 0) {
                _loc2_ = this.WEA.damageScaling;
                if (this.WEA.damageStat == this.ARM.damageStat) {
                    _loc2_ = _loc2_ + this.ARM.damageScaling;
                }
            }
            this.DMG = this.xdx(this.WEA.WEAd, this.WEA.WEAr) + _loc1_ * _loc2_ - this.enemyt.DEF;
            if (this.WEA.damageType != null) {
                _loc3_ = 1;
                if (this.enemyt.damageResistance.length > 0) {
                    this.i = 0;
                    while (this.i < this.enemyt.damageResistance.length) {
                        _loc4_ = this.enemyt.damageResistance[this.i];
                        if (_loc4_.name == this.WEA.damageType.name) {
                            _loc3_ = _loc3_ / 1.5;
                        }
                        this.i++;
                    }
                }
                if (this.enemyt.damageWeakness.length > 0) {
                    this.i = 0;
                    while (this.i < this.enemyt.damageWeakness.length) {
                        _loc5_ = this.enemyt.damageWeakness[this.i];
                        if (_loc5_.name == this.WEA.damageType.name) {
                            _loc3_ = _loc3_ * 1.5;
                        }
                        this.i++;
                    }
                }
                this.DMG = this.DMG * _loc3_;
            }
            if (this.DMG < 0) {
                this.DMG = 0;
            }
        }

        protected function playerAttack():void {
            if (this.inCombat()) {
                this.scene("<li><b>Attack</b></li>", false);
                this.doDMG();
                if (this.WEA.attackDescription != "Attack error") {
                    this.scene(this.WEA.attackDescription, false);
                }
                if (this.WEA.attackDescription == "Attack error") {
                    this.scene("You hit your enemy with your " + this.WEA.Name + ", ", false);
                }
                this.scene("dealing " + this.DMG + " damage. ", false);
                if (this.WEA.damageType != null) {
                    this.testEffectiveness(this.WEA.damageType);
                }
                if (this.DMG > 0) {
                    switch (this.WEA.attackProc) {
                        case "stun":
                            if (this.d100() < this.WEA.attackProcChance) {
                                this.scene("Your opponent has becomed stunned! ", false);
                                this.eStatusStunTime = this.WEA.attackProcPower;
                            }
                            break;
                        case "drain":
                            if (this.d100() < this.WEA.attackProcChance) {
                                this.scene("The " + this.WEA.Name + " draws life from them! ", false);
                                this.doHealth(this.DMG * (this.WEA.attackProcPower / 100));
                            }
                    }
                }
                this.doEnemyHealth(-this.DMG);
                this.doStamina(-3);
                if (this.eHEA <= 0) {
                    this.winBattle(this.enemyt.victory);
                }
            }
        }

        protected function testEffectiveness(param1:DamageType):void {
            var _loc2_:String = null;
            var _loc3_:DamageType = null;
            var _loc4_:DamageType = null;
            _loc2_ = "";
            if (this.enemyt.damageResistance.length > 0) {
                this.i = 0;
                while (this.i < this.enemyt.damageResistance.length) {
                    _loc3_ = this.enemyt.damageResistance[this.i];
                    if (_loc3_.name == param1.name) {
                        _loc2_ = "It\'s not very effective. ";
                    }
                    this.i++;
                }
            }
            if (this.enemyt.damageWeakness.length > 0) {
                this.i = 0;
                while (this.i < this.enemyt.damageWeakness.length) {
                    _loc4_ = this.enemyt.damageWeakness[this.i];
                    if (_loc4_.name == param1.name) {
                        _loc2_ = "It\'s super effective! ";
                    }
                    this.i++;
                }
            }
            this.scene(_loc2_, false);
        }

        protected function doSpellDMG(param1:Spells):void {
            var _loc2_:Number = NaN;
            var _loc3_:Number = NaN;
            var _loc4_:DamageType = null;
            var _loc5_:DamageType = null;
            _loc2_ = 0.4;
            if (this.WEA.damageStat == "INT" && this.WEA.damageScaling > _loc2_) {
                _loc2_ = this.WEA.damageScaling;
            }
            this.DMG = this.xdx(param1.damage, param1.damageRange) + this.INT * _loc2_;
            if (param1.damageType != null) {
                _loc3_ = 1;
                if (this.enemyt.damageResistance.length > 0) {
                    this.i = 0;
                    while (this.i < this.enemyt.damageResistance.length) {
                        _loc4_ = this.enemyt.damageResistance[this.i];
                        if (_loc4_.name == param1.damageType.name) {
                            _loc3_ = _loc3_ / 1.5;
                        }
                        this.i++;
                    }
                }
                if (this.enemyt.damageWeakness.length > 0) {
                    this.i = 0;
                    while (this.i < this.enemyt.damageWeakness.length) {
                        _loc5_ = this.enemyt.damageWeakness[this.i];
                        if (_loc5_.name == param1.damageType.name) {
                            _loc3_ = _loc3_ * 1.5;
                        }
                        this.i++;
                    }
                }
                this.DMG = this.DMG * _loc3_;
            }
            if (this.DMG < 0) {
                this.DMG = 0;
            }
        }

        protected function doSpellHeal(param1:Spells):void {
            this.DMG = this.xdx(param1.damage, param1.damageRange) + this.INT * 0.4;
            if (this.DMG < 0) {
                this.DMG = 0;
            }
        }

        protected function combatCast(param1:Spells):void {
            if (currentState == "combatSpells") {
                currentState = "combat";
            }
            switch (this.INT >= this.enemyt.INT || this.enemySlowEffect()) {
                case true:
                    if (this.playerStatusEffect() == false) {
                        this.playerCast(param1);
                    }
                    this.scene("\n", false);
                    if (this.eHEA > 0 && this.enemyStunEffect() == false) {
                        this.enemyAttack();
                    }
                    break;
                default:
                    if (this.enemyStunEffect() == false) {
                        this.enemyAttack();
                    }
                    this.scene("\n", false);
                    if (this.grapple <= 0 && this.inCombat()) {
                        if (this.playerStatusEffect() == false) {
                            this.playerCast(param1);
                        }
                    }
            }
            if (this.inCombat()) {
                this.combatButtons();
            }
        }

        protected function playerCast(param1:Spells):void {
            if (this.inCombat()) {
                this.combatDialogue();
                this.scene("<li><b>Spell: " + this.capFirst(param1.name) + "</b></li>", false);
            }
            if (!this.inCombat()) {
                this.scene("", true);
            }
            switch (param1.spellType) {
                case "attack":
                    if (param1.damage > 0) {
                        this.doSpellDMG(param1);
                        this.scene(param1.descriptionCast + "dealing " + this.DMG + " damage. ", false);
                        this.doEnemyHealth(-this.DMG);
                        this.testEffectiveness(param1.damageType);
                    }
                    if (param1.damage == 0) {
                        this.scene(param1.descriptionCast, false);
                    }
                    switch (param1.statusEffect) {
                        case "burn":
                            if (this.d100() < 25) {
                                this.scene("Your opponent has become burnt! ", false);
                                this.eStatusBurnPower = this.DMG * 0.2;
                                this.eStatusBurnTime = param1.statusTime;
                                if (this.eStatusSoakTime > 0) {
                                    this.scene("Which has unfortunately stopped them from being soaked. ", false);
                                    this.eStatusSoakTime = 0;
                                    this.enemyt.damageWeakness.splice(this.enemyt.damageWeakness.indexOf(this.LightningDamage), 1);
                                }
                            }
                            break;
                        case "stun":
                            if (this.d100() < 20) {
                                this.scene("Your opponent has becomed stunned! ", false);
                                this.eStatusStunTime = param1.statusTime;
                            }
                            break;
                        case "slow":
                            if (this.d100() < 30) {
                                this.scene("Your opponent has become slowed! ", false);
                                this.eStatusSlowTime = param1.statusTime;
                            }
                            break;
                        case "soak":
                            this.scene("Your opponent has become soaked with water! ", false);
                            this.eStatusSoakTime = param1.statusTime;
                            if (this.eStatusBurnPower > 0) {
                                this.scene("Which has unfortunately stopped them from burning. ", false);
                                this.eStatusBurnPower = 0;
                                this.eStatusBurnTime = 0;
                            }
                            this.enemyt.damageWeakness.push(this.LightningDamage);
                    }
                    break;
                case "heal":
                    this.doSpellDMG(param1);
                    this.scene(param1.descriptionCast + "restoring " + this.DMG + " health. ", false);
                    this.doHealth(this.DMG);
                    break;
                case "buff":
                    this.scene(param1.descriptionCast, false);
                    switch (param1.buffStat) {
                        case "STR":
                            if (this.tmagicSTRbuff < param1.buffAmount) {
                                this.scene("increasing your " + param1.buffStat + " by " + param1.buffAmount + ". ", false);
                                this.tmagicSTRbuff = param1.buffAmount;
                            }
                            else {
                                this.scene("but your " + param1.buffStat + " has already been raised by magical means. ", false);
                            }
                            break;
                        case "INT":
                            if (this.tmagicINTbuff < param1.buffAmount) {
                                this.scene("increasing your " + param1.buffStat + " by " + param1.buffAmount + ". ", false);
                                this.tmagicINTbuff = param1.buffAmount;
                            }
                            else {
                                this.scene("but your " + param1.buffStat + " has already been raised by magical means. ", false);
                            }
                            break;
                        case "END":
                            if (this.tmagicENDbuff < param1.buffAmount) {
                                this.scene("increasing your " + param1.buffStat + " by " + param1.buffAmount + ". ", false);
                                this.tmagicENDbuff = param1.buffAmount;
                            }
                            else {
                                this.scene("but your " + param1.buffStat + " has already been raised by magical means. ", false);
                            }
                            break;
                        case "AGI":
                            if (this.tmagicAGIbuff < param1.buffAmount) {
                                this.scene("increasing your " + param1.buffStat + " by " + param1.buffAmount + ". ", false);
                                this.tmagicAGIbuff = param1.buffAmount;
                            }
                            else {
                                this.scene("but your " + param1.buffStat + " has already been raised by magical means. ", false);
                            }
                            break;
                        case "STO":
                            if (this.tmagicSTObuff < param1.buffAmount) {
                                this.scene("increasing your " + param1.buffStat + " by " + param1.buffAmount + ". ", false);
                                this.tmagicSTObuff = param1.buffAmount;
                            }
                            else {
                                this.scene("but your " + param1.buffStat + " has already been raised by magical means. ", false);
                            }
                            break;
                        case "DEF":
                            if (this.tmagicDEFbuff < param1.buffAmount) {
                                this.scene("increasing your defense by " + param1.buffAmount + ". ", false);
                                this.tmagicDEFbuff = param1.buffAmount;
                            }
                            else {
                                this.scene("but your defense has already been raised by magical means. ", false);
                            }
                            break;
                        case "REGEN":
                            if (this.tmagicREGENbuff < param1.buffAmount) {
                                this.tmagicREGENbuff = param1.buffAmount;
                                this.tmagicREGENbuffDamage = param1.damage;
                                this.tmagicREGENbuffRange = param1.damageRange;
                                this.doSpellDMG(param1);
                                this.doHealth(this.DMG);
                            }
                            break;
                        case "DODGE":
                            if (this.tmagicDODGEbuff < param1.buffAmount) {
                                this.scene("increasing your chance of dodging by " + param1.buffAmount + "%. ", false);
                                this.tmagicDODGEbuff = param1.buffAmount;
                            }
                            else {
                                this.scene("but your evasion has already been raised by magical means. ", false);
                            }
                    }
                    break;
                case "other":
                    this.scene(param1.descriptionCast, false);
                    switch (param1.name) {
                        case this.Antidote1.name:
                            this.rmvTempStats();
                            this.rmvTempBuffs();
                            if (this.FUL > this.maxFUL) {
                                this.scene("Unfortunately, you feel your stomach returning to normal as well, and with as full as you are this proves to be very dangerous indeed. " + "As you feel your stomach stretch tighter and tighter around it\'s contents, you find it harder and harder to stay concious as you\'re overwhelmed by fullness. ", false);
                                this.defeatEvent(this.overeating);
                            }
                    }
            }
            this.MANA = this.MANA - param1.manaCost;
            this.updateStats();
            if (currentState == "combat" && this.eHEA <= 0) {
                this.winBattle(this.enemyt.victory);
            }
        }

        protected function enemySlowEffect():Boolean {
            var _loc1_:Boolean = false;
            _loc1_ = false;
            if (this.eStatusSlowTime > 0 && this.inCombat()) {
                _loc1_ = true;
                this.eStatusSlowTime--;
                if (this.eStatusSlowTime <= 0) {
                    this.eStatusSlowTime = 0;
                    this.scene("<i>Your opponent is no longer slowed.</i> ", false);
                }
            }
            return _loc1_;
        }

        protected function enemyBurnEffect():void {
            if (this.eStatusBurnPower > 0 && this.eStatusBurnTime > 0 && this.inCombat()) {
                this.scene("<li><i>Burn</i></li>" + "\tYour opponent burns for " + this.eStatusBurnPower + " damage. ", false);
                this.doEnemyHealth(-this.eStatusBurnPower);
                this.eStatusBurnTime--;
                if (this.eStatusBurnTime <= 0) {
                    this.eStatusBurnTime = 0;
                    this.eStatusBurnPower = 0;
                    this.scene("<i>Your opponent is no longer burning.</i> ", false);
                }
                if (this.eHEA <= 0) {
                    this.winBattle(this.enemyt.victory);
                }
            }
            if (this.eStatusSoakTime > 0 && this.inCombat()) {
                this.eStatusSoakTime--;
                if (this.eStatusSoakTime <= 0) {
                    this.eStatusSoakTime = 0;
                    this.enemyt.damageWeakness.splice(this.enemyt.damageWeakness.indexOf(this.LightningDamage), 1);
                    this.scene("<i>Your opponent has shaken off most of the water from your spell.</i> ", false);
                }
            }
        }

        protected function enemyStunEffect():Boolean {
            var _loc1_:Boolean = false;
            _loc1_ = false;
            if (this.eStatusStunTime > 0 && this.inCombat()) {
                if (this.d100() < 34) {
                    this.scene("<li><i>Stunned</i></li>" + "Your enemy is too stunned to attack! ", false);
                    this.eStatusStunTime--;
                    _loc1_ = true;
                    if (this.eStatusStunTime <= 0) {
                        this.eStatusStunTime = 0;
                        this.scene("<i>Your opponent seems to be shaking off the effects of the stun though.</i> ", false);
                    }
                }
            }
            return _loc1_;
        }

        protected function playerStatusEffect():Boolean {
            var _loc1_:Boolean = false;
            var _loc2_:int = 0;
            _loc1_ = false;
            if (this.inCombat()) {
                if (this.tmagicREGENbuff > 0) {
                    _loc2_ = this.xdx(this.tmagicREGENbuffDamage, this.tmagicREGENbuffRange) + this.INT * 0.4;
                    this.scene("<li><b><i>Regeneration</i></b></li>" + "Your regenerate " + _loc2_ + " health! ", false);
                    this.doHealth(_loc2_);
                    this.tmagicREGENbuff--;
                    if (this.tmagicREGENbuff <= 0) {
                        this.tmagicREGENbuff = 0;
                        this.tmagicREGENbuffDamage = 0;
                        this.tmagicREGENbuffRange = 0;
                        this.scene("<i>The healing effects surrounding you have begun to fade though.</i> ", false);
                    }
                }
                if (this.pStatusStunTime > 0) {
                    if (this.d100() < 51) {
                        this.scene("<li><b><i>Stunned</i></b></li>" + "You were too stunned to act! ", false);
                        this.pStatusStunTime--;
                        _loc1_ = true;
                        if (this.pStatusStunTime <= 0) {
                            this.pStatusStunTime = 0;
                            this.scene("<i>You finally shake off the effects of the stun though.</i> ", false);
                        }
                    }
                }
                if (this.statusPoisonPower > 0) {
                    this.scene("<li><b><i>Poison</i></b></li>" + "You take " + this.statusPoisonPower + " damage from poison. ", false);
                    this.doHealth(-this.statusPoisonPower);
                    this.statusPoisonPower--;
                    if (this.statusPoisonPower <= 0) {
                        this.statusPoison = 0;
                        this.statusPoisonPower = 0;
                        this.scene("<i>You no longer feel ill though.</i> ", false);
                    }
                    if (this.HEA <= 0) {
                        _loc1_ = true;
                    }
                }
                if (this.statusBurnPower > 0) {
                    this.scene("<li><b><i>Burn</i></b></li>" + "You take " + this.statusBurnPower + " damage from the flames. ", false);
                    this.doHealth(-this.statusBurnPower);
                    this.statusBurnPower--;
                    if (this.statusBurnPower <= 0) {
                        this.statusBurn = 0;
                        this.statusBurnPower = 0;
                        this.scene("<i>You finally stop burning though.</i> ", false);
                    }
                    if (this.HEA <= 0) {
                        _loc1_ = true;
                    }
                }
                if (this.statusBloatVenomPower > 0) {
                    this.scene("<li><b><i>Bloat Venom</i></b></li>" + "Your stomach gurgles as you feel pressure as if you had just eaten a meal. ", false);
                    this.doInflate(this.statusBloatVenomPower, 0);
                    this.statusBloatVenomPower--;
                    if (this.statusBloatVenomPower <= 0) {
                        this.statusBloatVenom = 0;
                        this.statusBloatVenomPower = 0;
                        this.scene("<i>Fortunately, your head no longer feels fuzzy and it seems you\'re finally over the effect\'s of the bloat venom.</i> ", false);
                    }
                    if (this.HEA <= 0) {
                        _loc1_ = true;
                    }
                }
            }
            return _loc1_;
        }

        protected function playerVore():void {
            var _loc1_:int = 0;
            switch (this.testSkillRange(this.AGI + this.STR + this.INT + 50, this.enemyt.AGI + this.enemyt.STR + this.enemyt.INT + this.eHEA * 0.5, 0, 90)) {
                case false:
                    this.voreing = false;
                    this.scene("You lunge at your enemy in an attempt to swallow " + this.enemyt.gender.him + ", but " + this.enemyt.gender.he + "\'s too ", false);
                    if (this.enemyt.AGI > this.AGI) {
                        this.scene("fast for you and manages to dodge out of the way. ", false);
                    }
                    else if (this.enemyt.STR > this.STR) {
                        this.scene("strong for you and manages to wrestle free from your grasp. ", false);
                    }
                    else if (this.enemyt.INT > this.INT) {
                        this.scene("smart for you and manages to out maneuver you. ", false);
                    }
                    else {
                        this.scene("lucky for you and you miss your grab. ", false);
                    }
                    this.scene("\n", false);
                    break;
                case true:
                    this.doConsumeQuiet(this.enemyt.weight, 0, 0);
                    this.voreing = true;
                    switch (this.enemy) {
                        case this.takeoutTerror:
                            this.scene("\tWith a sharp kick you manage to trip up the huge fatso, who SLAMS down onto his huge stomach and sprawls there on top of it, panting and winded. " + "With a loud POP his clothes finally burst, leaving a lot of bare fur on display. He looks extremely... appetising. " + "Greedily you grab the overblown " + this.enemyt.species.name + " under his fat armpits and haul him to his knees, his belly wobbling heavily against you. " + "Then you open your jaws WIDE and stuff him in, face-first! Even his head is something of a mouthful, with those bloated cheeks to squeeze in and that chubby neck to follow. " + "He lets out a muffled protest and tries to squirm free. Bracing yourself, you HEAVE upwards and stretch your maw to encompass his flabby chest, " + "then slide your hands down to grab under his bloated sides for more grip. ", false);
                            switch (this.alive()) {
                                case true:
                                    this.scene("Heaving and hauling, you stuff the struggling superchub down your throat like some massively-oversized marshmallow, " + "having some difficulty with those chubby arms but eventually getting them licked- quite literally. " + "By the time it comes to his stomach you’re seated heavily on the floor and are hefting his spherical bulk above your head with your arms. " + "You struggle to pass his equator, but after that it’s really just a matter of swallowing. " + "It takes the biggest GULP of your life, but down he slides, distorting your neck hugely as he descends, your entire body stretching to accommodate him in your middle. " + "You sprawl onto your back in the street, stomach ready to pop, and let out a deep moan, jostling your gut weakly with your " + this.playerSpecies.hands + " to settle it. " + "Finally a deep BURRRP wells up from within you, and you start to feel a little better. Sluggishly you heave yourself back onto your " + this.playerSpecies.feet + ", " + "belly weighing like an anchor, and slowly waddle off, arms stuck out to your sides. Now THAT’s what you call takeout... ", false);
                                    this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                    this.winBattle("");
                                    break;
                                case false:
                                    this.scene("Heaving and hauling, you try to stuff the struggling superchub down your throat like some massively-oversized marshmallow, " + "but by the time you reach his stomach you realise you’ve bitten off more than you can chew. " + "Seated heavily on the ground, you heave his weight above your head in an effort to swallow him. " + "All that blubber bears down on you and you feel your jaws stretch, and stretch, and stretch... he sinks down unstoppably, " + "and your eyes widen as you feel yourself expand far more than you ever should as he fills you to capacity, and then more, and more, and more, " + "until you’re so stretched out he’s wearing you like a second skin. You’re left helpless, imprisoned from within by the vast bulk of the huge fatso you’ve just golloped down. " + "The strain is making you dizzy, and your ears start to ring as if you’re underwater. ", false);
                                    switch (this.optionsPopping) {
                                        case true:
                                            this.scene("The world begins to fade, replaced by white light that grows brighter, and brighter, and brighter... ", false);
                                            this.defeatEvent(this.overeating);
                                            break;
                                        case false:
                                            this.scene("You let out a stifled moan, but this is drowned out by a deep, muffled BURRRP from your super-swollen stomach. " + "You feel yourself shift and rock around as your ‘meal’ squirms and tries to sit up inside of you, stretching your hide to near transclucent-tightness. " + "You feel a couple of loud, organic-sounding ‘pops’ inside you, and suddenly you’re stretching further again. This can’t be good. " + "The pressure inside you grows to unbearable levels, and you shut your eyes and whimper as you grow tighter, and tighter, and tighter... ", false);
                                            this.defeatEvent(this.exploded);
                                    }
                            }
                            break;
                        case this.FatJaguar:
                            this.scene("\tYou decide to make the jaguar your meal, and clamp down on its face with your " + this.playerSpecies.hand + ", keeping its dangerous maw shut. " + "It swipes a clawed paw at you, but you grasp it, pinning it to its side as you shove its face into your mouth. " + "Muffled growls emanate from your throat as you pull at the big cat, its hind legs flailing as you pin its front legs together. " + "Your jaw unhinging, you shove the jaguar roughly down your throat, ravenously forcing it down to inevitably fill your belly. ", false);
                            switch (this.alive()) {
                                case true:
                                    this.scene("Pulling and swallowing again and again, the cat\'s big belly soon squishes against your maw, the entirity of its front half squeezed into your throat. " + "Grasping its rump, you pull hard, your throat stretching wider around the bulbous stomach. " + "Pinning its legs, you lift it upwards, using gravity as an aid to slurp down its hind quarters, legs, and tail. " + "With a few more swallows, the predator has become your prey, and your belly has become " + this.waist() + " for it. You give it a pat and a rub, and move on. ", false);
                                    this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                    this.winBattle("");
                                    break;
                                default:
                                    this.scene("You swallow it down as best you can, your stomach already groaning even before you\'ve gotten to its oversized midsection. " + "Unwilling and unable to stop now, you pull the creature into your maw, forcing its bulbous stomach to slip down your throat. " + "Swallowing again and again, your stomach grows taut, the immense fullness quickly growing painful. " + "As the beast\'s hind quarters slip into your belly, you lower yourself to a seat, rubbing your " + this.waist() + " stomach gently and letting out a groan. " + "Knowing full well that it was too much, you lay back and slowly drift into unconsciousness. ", false);
                                    this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.ExpandedElephant:
                            this.scene("\tYour stomach letting out an intimidating roar, you launch yourself at the bemused elephant, colliding so hard that it bounces onto its back! " + "You grab one of the elephant’s hind legs and embark on one of the biggest meals of your life, cramming its foot into your mouth and working your way from there. " + "Getting the other hind foot into your mouth isn’t easy, but you manage it, aided by the elephant’s own elasticity. " + "By the time the stunned creature realises what you’re doing, you’ve managed to stuff both legs AND its collosal hiney into your mouth, " + "stretching your cheeks and stomach to ludicrous proportions. ", false);
                            if (this.alive()) {
                                this.scene("It squeals and quivers as it thrashes its legs and trunk, but you’ve now reached its equator, jaws stretching hugely around it, " + "suggesting that you’ve picked up some of the elephant’s own elasticity. It certainly helps you to shovel more and more of the pooltoy pachyderm down your gullet, inching slowly forward. " + "Then you’re over the hump so to speak, and with the greatest bulk of the elephant inside you, its more of a challenge to stop the rest of it being pulled in too quickly! " + "Like a balloon being squeezed most of the way through a narrow opening the elephant’s bulk now literally drags its front end into your mouth after it, " + "your body stretched to colossal proportions but somehow keeping it together. " + "The elephant’s front feet frantically scrabble at the packed earth for a moment, looking for purchase, " + "and then it’s pulled in further, only its trunk sticking out of your mouth like a periscope. " + "And then that too is gone, sliding down your throat like thick spaghetti. Your stomach lets out a huge GURGLE, whether of complaint or contentment you’re unsure. " + "Wow, you’ve just eaten a whole ELEPHANT! ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("But then you find that you’ve bitten off more than you can chew- quite literally! " + "You realise that your overstretched jaws are wedged around the elephant’s equator-like waist: it’s too large to swallow and you’re stuck, unable to let go! " + "The elephant recovers from its shock and lets out an outraged, trumpeting bellow. " + "Then you hear a noisy sucking sound, and feel the elephant’s middle growing bigger between your jaws! It’s blowing itself up like a balloon! " + "You feel your body creeak and begin to change shape as the elephant pumps itself bigger and bigger, that part of it you’ve swallowed blowing up larger and larger inside you. " + "Your hide starts to straaiiin to contain such an enormous volume and your eyes water, jaws getting stretched wider and wider and wider. " + "The world starts to spin around you as you become nothing more than a balloon yourself. ", false);
                                switch (this.optionsPopping) {
                                    case true:
                                        this.scene("You feel the elephant suck in another breath through its trunk, and it all becomes too much- " + "the world starts to turn white at the edges of your vision as you feel seams inside your body beginning to pop apart as the elephant fills you, then overfills you! " + "You begin to swell faster now, out of control, and as the world fades to a blinding, pure white you feel and hear what might be the start of a devastating explosi-", false);
                                        break;
                                    default:
                                        this.scene("Mercifully, the immense pressure inside you finally causes you to black out, sinking into unconsciousness with a deep longing for some bicarbonate of soda...", false);
                                }
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.BloatedLion:
                            this.scene("\tYou lunge at your enemy in an attempt to devour the " + this.enemyt.name + " and you succeed in tackling " + this.enemyt.gender.him + " to the ground. " + "Sitting down, you grasp the lion\'s hind paws in your hands. " + "You guide them to your mouth and open wide, shoving them down your throat.\t" + "With each swallow, the lion is pulled in a bit further. " + "Progress slows as you reach the stomach, as you have to constantly push the lion\'s corpulent belly over your teeth. " + "The hindpaws enter your stomach as you finally get the majority of his gut into your maw, and work your way to his mane. ", false);
                            if (this.alive()) {
                                this.scene("You pin it to his body so that it doesn\'t mess with your face as you swallow. You\'re able to finally close your mouth over his maw, and finish up by working his fore legs in. " + "With one final gulp, he is sent on a one way trip into your rounded stomach, which heavily hangs much closer to the ground, much as his did earlier. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("You feel a constriction in your gut as your reach it, however. " + "Try as you might, you are unable to swallow a single bit more; it seems you are at your limit! " + "To make things worse, the lion chooses this exact moment to awaken. " + "Thrashing wildly, he manages to lurch his way out, slowly deflating your gut. ", false);
                                this.scene("\n\tYour opponent senses his opportunity. He rears back and lunges toward you, his jaws stretched almost impossibly wide. " + "You try to dodge him, but you\'re too busy recovering from your failed attempt to devour him. " + "He tackles you to the ground and locks his mouth around your head. " + "He slowly and laboriously swallows you whole as you struggle against him. " + "You feel yourself slide into his large stomach as he swallows you down. " + "His stomach stretches massively to contain you. " + "From the outside, the lion\'s stomach stretches to the ground and then some. " + "The lion grunts and rolls onto his side as his humongous stomach towers several feet over him. " + "The lion lets out a pained but contented sigh as he sets about digesting his painfully large feast. " + "You can only pray that someone up there is looking out for you. ", false);
                                this.defeatEvent(this.devoured);
                            }
                            break;
                        case this.GorgedCheetah:
                            this.scene("\tYou lunge at your enemy in an attempt to devour the " + this.enemyt.name + " and you succeed in tackling " + this.enemyt.gender.him + " to the ground. " + "You circle around to the front of the cheetah. " + this.capFirst(this.enemyt.gender.he) + " struggles to back away, but after the battle " + this.enemyt.gender.his + " legs are too tired to do more than scrape the ground, much less pick " + this.enemyt.gender.himself + " back up. " + "Opening your mouth, you kneel forward, engulfing the cheetah\'s muzzle.\t" + "\n\tWith a loud snap, your jaw dislocates and begins to stretch around " + this.enemyt.gender.his + " head. " + "As you swallow the big cat down, you force its legs back, but begin to have a bit of trouble as you reach the stomach. " + "Packed as tight as it is, the round dome has no give whatsoever, and you\'ve no choice but to work the cheetah\'s stomach in bit by bit. " + "Moving your jaws like a snake would, you gradually work your way to the widest point of the stomach. " + "As you work past the widest point, your overstretched mouth begins to rapidly close, causing the cheetah to shoot down your gullet - you\'ve passed the point of no return. ", false);
                            if (this.alive()) {
                                this.scene("The cheetah surges into your stomach like a ton of bricks, and as you swallow more, " + this.enemyt.gender.he + " is curled into a tight ball, thrashing with desperation in a vain attempt for freedom. " + "You swallow down the hind paws, and suck down the twitching tail like a wet noodle. " + "As the struggles slow, you let out a quiet burp and slowly heave yourself to your feet. " + "Waddling forward, you rub your rounded gut as you lumber onward. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("The cheetah surges into your stomach like a ton of bricks, and as you swallow more, you feel a jolt of pain as you realize your stomach has gone way past its limits. " + "You gag and fall forward, passing out as your stomach surges outward. ", false);
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.FatWolf:
                            this.scene("\tYou lunge at your enemy in an attempt to devour the " + this.enemyt.name + " and you succeed in tackling " + this.enemyt.gender.him + " to the ground. " + "You pick the wolf up in your hands and stuff " + this.enemyt.gender.him + " into your cavernous mouth. " + "" + this.capFirst(this.enemyt.gender.he) + " begins to writhe in your grasp trying to get away, " + this.enemyt.gender.his + " body jiggling wildly with the motion. " + "You pull the wolf further in and pin " + this.enemyt.gender.his + " legs to " + this.enemyt.gender.his + " chest. " + "" + this.capFirst(this.enemyt.gender.his) + " tail is clenched between " + this.enemyt.gender.his + " hind legs in a position of fear as you reach " + this.enemyt.gender.his + " stomach. " + "Your gut juts forward as " + this.enemyt.gender.his + " muzzle emerges into your stomach. " + "You slurp " + this.enemyt.gender.him + " further in as you gulp, pulling " + this.enemyt.gender.his + " flabby stomach in for the last few swallows. " + this.capFirst(this.enemyt.gender.he) + " kicks a bit as you reach " + this.enemyt.gender.his + " hind legs. " + "Holding " + this.enemyt.gender.his + " feet like drumsticks, you push the wolf down your gullet without bothering to swallow, and only give one last massive gulp as you push the hind paws to the back of your throat. ", false);
                            if (this.alive()) {
                                this.scene(this.capFirst(this.enemyt.gender.he) + " finishes the descent into your belly, which heaves wildly as " + this.enemyt.gender.he + " struggles for freedom. " + "Your stomach finally settles after a few good pats and burps, letting you continue on your way.", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("You immediately feel a tightening in your belly as the wolf surges into it. " + "It escalates into discomfort and then pain as your stomach strains around a meal it was never meant to hold, and you pass out gripping your writhing gut.", false);
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.ObeseBear:
                            this.scene("\tYou lunge at your enemy in an attempt to devour the " + this.enemyt.name + " and you succeed in tackling " + this.enemyt.gender.him + " to the ground. " + "You approach the massive bear as it rests on its back, its belly moving up and down as " + this.enemyt.gender.he + " pants.\t" + "You grab " + this.enemyt.gender.his + " front paws and pull them so " + this.enemyt.gender.he + " sits up. " + "Holding them, you pull backwards, lifting them and stuffing them into your mouth. " + "Your mouth stretches wider and wider as you use your arms to pull the bear inward, slowly engulfing " + this.enemyt.gender.him + " bit by bit. " + "It is a massive undertaking, your feet digging groves into the ground as you fight the bear\'s inertia. " + "Your jaws strain as you engulf the bears flabby head and neck. " + "Your stomach grumbles in anticipation of the feast, causing you to drool copiously. " + "You slowly and agonizingly work your way across the chest and around the gut, your lips making a deep groove in " + this.enemyt.gender.his + " adipose. ", false);
                            if (this.alive()) {
                                this.scene("As the bear\'s arms enter your stomach, " + this.enemyt.gender.he + " begins to curl up. " + "Your gut begins to splay out as you swallow more, the size of the bear\'s gut making it almost impossible to swallow, but somehow, you manage. " + "As you get your jaws around the widest part, gravity takes over and causes the bear to surge into your mouth, knocking you onto your rump as you no longer need to pull the bear in. " + "As your jaws close around " + this.enemyt.gender.his + " feet, you lay back down to rest, " + "giving one final swallow to curl " + this.enemyt.gender.him + " in your gut, which heaves up and down as you breathe like the bear\'s did. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("As the bear\'s arms enter your stomach, you begin to struggle as the arms fill it completely. " + "Your feet slip at the sudden stop in motion, and as you fall on your back, the bear pulls itself out of your maw and stands, an angry, hungry look in " + this.enemyt.gender.his + " eyes. ", false);
                                this.scene("\tThe overfed bear senses a moment of weakness and grabs you. " + this.capFirst(this.enemyt.gender.he) + " clumsily picks you up in " + this.enemyt.gender.his + " paws and pulls you into " + this.enemyt.gender.his + " massive maw. " + "You struggle against " + this.enemyt.gender.him + ", but " + this.enemyt.gender.he + " proves too strong for you as your slowly pulled into " + this.enemyt.gender.his + " waiting mouth. " + this.capFirst(this.enemyt.gender.he) + " swallows you down whole in several large gulps as you slide into " + this.enemyt.gender.his + " stomach. ", false);
                                if (this.weight() < 200) {
                                    this.scene("You barely make a bulge in " + this.enemyt.gender.his + " tremendously fat frame. ", false);
                                }
                                if (this.weight() >= 200 && this.weight() < 500) {
                                    this.scene("You make a significant bulge in " + this.enemyt.gender.his + " gut, even through the several inches of fat. ", false);
                                }
                                if (this.weight() > 500) {
                                    this.scene("You make a tremendous bulge in the bears already well widened frame. " + this.capFirst(this.enemyt.gender.his) + " gut stretches out to the sides and rests solidly on the ground. ", false);
                                }
                                this.scene("There bear sleepily smacks " + this.enemyt.gender.his + " lips and rolls over to sleep off " + this.enemyt.gender.his + " most recent feast in preparation for the next one. " + "Your vision fades to black as you drift into unconsciousness. ", false);
                                this.defeatEvent(this.devoured);
                            }
                            break;
                        case this.SphericalShark:
                            this.scene("\tYou rear back then thrust at the shark, trying to catch it in your grasp. " + this.capFirst(this.enemyt.gender.he) + " tries to pull back but you barrel into the shark’s ample gut, catching " + this.enemyt.gender.him + " off guard. " + "Pinning " + this.enemyt.gender.his + " jaw shut, you push the shark’s snout into your mouth, " + "grasping at " + this.enemyt.gender.his + " sides and pulling them towards you, forcing its neck and fins into your mouth. \n\t", false);
                            if (this.alive()) {
                                this.scene("You crane your jaws wider to move over the shark, and once you’re past " + this.enemyt.gender.his + " widest part, " + "the rest of " + this.enemyt.gender.his + " wet body slips in, with only a tail hanging out of your mouth. " + "You push the rest of the tail into your mouth, close it and swallow, and you can hear several loud, gnashing snaps from inside your stomach. " + "Fortunately, sharks have mouths that are positioned in a bad way to get a grip on curved surfaces like the inside of your stomach, " + "because you can feel " + this.enemyt.gender.his + " snout pushing against your stomach walls and presumably getting in the way. " + "You float in the water and gently rub your squirming stomach until it slows till a stop, " + "waiting around for a little bit to give yourself time to digest before you swim off, to stop yourself getting a cramp. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("However, as your gut pushes outwards, a horrible feeling of dread kicks in as you start to suspect your meal is too big, but it’s too far in to spit out, so you press on. " + "The discomfort in your stomach grows, and before long it becomes unbearable. " + "Noticing your diminishing strength and resolve, your prey butts at the inside of your stomach and wiggles in your throat, making both a stomachache and your gag reflex kick in. " + "Your body chooses to completely defy you, and you bring the shark back up, feeling exhausted enough for you to drift off in the process. " + "In your flickering consciousness, you feel the shark nom its way over you, taking its time now that its predator turned prey has stopped fighting. ", false);
                                this.defeatEvent(this.devoured);
                            }
                            break;
                        case this.BubbleOrca:
                            this.scene("\tYou dash forward in the water and grab the orca around the middle. " + "It squeaks and tries to wiggle out of your grasp, but you turn it around and bring it face to face, opening your mouth wide. " + "The orca panics a little and exhales another bubble into your mouth, but you gulp it down and quickly follow it with " + this.enemyt.gender.his + " head. " + "Your jaws strain to force your mouth over the orca’s wide frame, but " + this.enemyt.gender.his + " rather slippery skin makes it a lot easier than something else of that size. ", false);
                            if (this.alive()) {
                                this.scene("You nom your way over the orca’s large and somewhat squeaky, rubbery middle, sucking in the tail and swallowing it, burping and licking your lips in quiet satisfaction of your catch... " + "\n\tJust as you’re feeling victorious, something worrying stirs in your stomach. " + "It appears the orca doesn’t want to go down without a fight. " + "You hear a very loud mix between a hiss and a belch as, in one last move of desperation, the orca unloads every last bit of air into you – " + "Evidently " + this.enemyt.gender.he + " had some sort of ability to compress air within " + this.enemyt.gender.him + "self, and is giving you all " + this.enemyt.gender.he + "’s got. " + "Your already distended gut begins to blimp further and further outwards, the various bulges in your middle smoothing out into one, single round dome. ", false);
                                this.doInflate(30, -48);
                                switch (this.HEA > 0) {
                                    case true:
                                        this.scene("You weren’t expecting to get more strain on your gut, but you refuse to let that stop you. " + "You let out a several belches and pass wind a few times to alleviate the pressure, necessity winning out over any shyness you might feel about this. " + "Your efforts aren’t enough to stop or reverse the orca’s last stand, but they do slow it enough to keep the pressure on your gut low enough for it to not be painful. " + "Eventually, " + this.enemyt.gender.he + " runs out of steam, and finally settles down. " + "You bob to the surface and rest for a few minutes, giving yourself a few minutes to enjoy your meal before dipping back into the water and swimming on your way. ", false);
                                        this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                        this.winBattle("");
                                        break;
                                    default:
                                        this.scene("Panic kicks in – you weren’t expecting to be put under more strain than you were already going through, and your stomach agrees. " + "The feeling of pressure gets worse and worse until it becomes painful, " + "and loud groans and creaks join the chorus of noises coming from within you as your stomach strains to hold its new contents. " + "Eventually, the pain becomes too much and you fall unconscious. " + "You wake up just in time to see that your prisoner managed to get out of you, and " + this.enemyt.gender.his + " tail is accelerating right at your face. " + this.capFirst(this.enemyt.gender.he) + " smacks you so hard you go spiralling through the water and break the surface, spiralling away through the sky. " + "The orca, back in the water, dusts " + this.enemyt.gender.him + "self off the best " + this.enemyt.gender.he + " can, swimming off in annoyance at being eaten, and disappointment of being forced to do that to a potential inflate-y playmate. ", false);
                                        this.inflateToFloating();
                                        this.defeatEvent(this.floating);
                                }
                            }
                            else {
                                this.scene("\n\tUnfortunately, your stomach isn’t finding it as easy to handle. " + "It groans loudly as you keep trying to push the orca further in, but you already know you’re fighting a losing battle here. " + "The orca, noticing that you’re beginning to struggle, takes in a breath and exhales as hard as it can, firing back out of your mouth like a rocket. " + "Both of you fly apart, with " + this.enemyt.gender.him + " flying out of the water and you smashing into the sand on the ocean floor below. " + "The horrible sensation and the impact has stunned you, and you come to your senses to find the orca face to face with you again, only this time it seems " + this.enemyt.gender.he + "’s the one in control. " + this.capFirst(this.enemyt.gender.he) + " locks lips with you, and puffs hard into your mouth. " + "Your gut swells forth, but it barely even registers due to the numbness of your stomach. Once you’ve been puffed up to about the appropriate size, the orca licks " + this.enemyt.gender.his + " lips and opens wide, stretching over your bloated body and works on a little bit of appropriate retribution. " + this.capFirst(this.enemyt.gender.his) + " large maw contains rows of slightly blunt teeth and a fleshy tongue, and you can see deep into her gullet. " + this.capFirst(this.enemyt.gender.he) + " closes her mouth around you, decreasing your vision to practically nothing. " + "As " + this.enemyt.gender.he + " forces you down, " + this.enemyt.gender.he + " coats your body with saliva, the thick substance mixing with the salty water your body is drenched by. " + "It’s a surprise how little time it is until you’re inside the astonishingly wide and roomy prison that is " + this.enemyt.gender.his + " stomach. " + this.capFirst(this.enemyt.gender.he) + " gulps down some more sea water, and it turns into slightly salt-scented air by the magic of the pills before it reaches her stomach. " + "Your continued dizziness and large size are making escape somewhat unlikely, " + "and the steady supply of oxygen you now have means that it looks like you’re going to be stuck in here for a while. " + "After an hour of intermittent struggling, you nod off on your own intent as opposed to the lack of oxygen, resigning yourself to your fate and hoping the digestion comes soon. ", false);
                                this.inflateToFloating();
                                this.defeatEvent(this.devoured);
                            }
                            break;
                        case this.SandSnake:
                            this.scene("\tYour stomach growls, and you decide the nearby coconuts aren’t something you’re interested in. " + "You whack the snake with your " + this.WEA.Name + ", dazing it somewhat. " + "You grab it by the neck and pull " + this.enemyt.gender.him + " over to you, holding your mouth wide and stuff its head into your mouth. " + "It suddenly snaps out of its daze and wiggles against you, but the fact that it doesn’t have arms or other methods of resisting directly makes swallowing it down rather easily. " + "Or rather, it would be if it wasn’t for the length. " + "You gulp again and again, more and more of the snake’s long body emerging from the sand", false);
                            if (this.alive()) {
                                this.scene(", before eventually the tip of " + this.enemyt.gender.his + " tail breaks the surface of the sand. " + "You suck that down as well, letting the flickering tailtip stay in your mouth for a few moments before swallowing, letting the snake coil up in your gut. " + "You gently slap your tightened stomach, letting loose a loud belch, before wandering off on your way. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene(". It’s becoming apparent that you’re running out of room rapidly. " + "The tightness in your belly is soon making your eyes water, and not long after you can’t keep yourself standing, and fall to your knees, hopelessly overstuffed and nauseous. " + "\n\tThe snake seizes " + this.enemyt.gender.his + " moment. " + this.capFirst(this.enemyt.gender.he) + " wraps " + this.enemyt.gender.his + " tail around you, and begins to yank itself backwards out of you. " + "Again and again it reels itself out of you, before the sensation triggers a gag reflex and you retch, bringing the rest of the snake up. " + "As it falls to the floor, " + this.enemyt.gender.he + " stays still for a few moments before coming to " + this.enemyt.gender.his + " senses, facing you and shaking off the saliva, before grinning and diving at you, chomping over your head. " + "You’re too delirious and shaky to resist, and it isn’t long before the vice-like grip of the snake’s innards are pressing against every inch of your body. " + "You hear the noise of sand grinding as the snake burrows back into the ground, and you feel too exhausted to fight back again, and slowly pass out. ", false);
                                this.defeatEvent(this.devoured);
                            }
                            break;
                        case this.Thief:
                            this.scene("\tYou lunge at your enemy in an attempt to devour the " + this.enemyt.name + " and you succeed in tackling " + this.enemyt.gender.him + " to the ground. " + "You roll the " + this.enemyt.species.name + " thief onto " + this.enemyt.gender.his + " back, " + this.enemyt.gender.his + " stomach swaying back and forth a bit from the momentum. " + "As you untie the rope holding " + this.enemyt.gender.his + " armor together, it bursts off from " + this.enemyt.gender.his + " strained form piece by piece, " + this.enemyt.gender.his + " pudgy features jiggling a bit after the relieved pressure. " + "Even so, " + this.enemyt.gender.his + " stomach is still barely contained by " + this.enemyt.gender.his + " jeans, let alone " + this.enemyt.gender.his + " torn tunic. " + "Grabbing his tunic, you haul " + this.enemyt.gender.him + " to " + this.enemyt.gender.his + " feet and start to devour " + this.enemyt.gender.him + " face first. " + "You shove " + this.enemyt.gender.his + " face into your throat, your swallowing pulling " + this.enemyt.gender.him + " in bit by bit. " + "Pinning " + this.enemyt.gender.his + " arms to the side, you pull " + this.enemyt.gender.him + " in up to " + this.enemyt.gender.his + " chest, then " + this.enemyt.gender.his + " stomach, your jaw sinking into " + this.enemyt.gender.his + " belly. " + "You begin to hear muffled shouts coming from your belly as " + this.enemyt.gender.his + " head and arms enter it. " + "He begins to kick " + this.enemyt.gender.his + " feet, ", false);
                            if (this.alive()) {
                                this.scene("forcing you to swallow rapidly to pin them together and stop " + this.enemyt.gender.him + " from escaping. " + "Your gut bulges as " + this.enemyt.gender.he + " presses on your belly in an attempt to push himself out. " + "As your mouth finally closes around " + this.enemyt.gender.his + " feet, you give a final massive gulp and curl " + this.enemyt.gender.him + " up in your belly. " + "Your gut lurches from side to side from " + this.enemyt.gender.his + " struggles as you " + this.walk() + " off, rubbing it as you listen to " + this.enemyt.gender.his + " muffled cursing. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("and as you try to swallow " + this.enemyt.gender.him + " further, you gag as you realize your stomach won\'t stretch any further. " + "Your stomach bulges as " + this.enemyt.gender.he + " begins to push himself out with " + this.enemyt.gender.his + " hands, aided by " + this.enemyt.gender.his + " leg thrashing. " + "You gag again as you disgorge " + this.enemyt.gender.him + ", the momentum causing you to tumble to the ground. " + "As you hack and cough from your painful failed attempt to devour the thief, " + this.enemyt.gender.he + " takes it upon " + this.enemyt.gender.himself + " to rifle through your pockets. ", false);
                                _loc1_ = 15;
                                if (this.GLD > 0) {
                                    this.scene(this.capFirst(this.enemyt.gender.he) + " managed to pilfer ", false);
                                    if (this.GLD <= _loc1_) {
                                        _loc1_ = this.GLD;
                                        this.scene("all your gold ", false);
                                    }
                                    if (this.GLD > _loc1_) {
                                        this.scene("some of your gold ", false);
                                    }
                                }
                                if (this.GLD <= 0) {
                                    _loc1_ = 0;
                                    this.scene("You hear " + this.enemyt.gender.him + " cursing you for being so poor ", false);
                                }
                                this.scene("before whacking you hard over the back of your head, knocking you unconcious. ", false);
                                this.doGold(-_loc1_);
                                this.defeatEvent(this.battle);
                            }
                            break;
                        case this.Drunk:
                            this.scene("\tYou lunge at your enemy in an attempt to devour the " + this.enemyt.name + " and you succeed in tackling " + this.enemyt.gender.him + " to the ground. " + "The drunk " + this.enemyt.species.name + " sloshes about on top of " + this.enemyt.gender.his + " gut as you begin to move " + this.enemyt.gender.him + ". " + "Turning " + this.enemyt.gender.him + " over, " + this.enemyt.gender.his + " stomach lists to one side and then the other from the momentum, making " + this.enemyt.gender.him + " groan. " + "Sitting down, you grab " + this.enemyt.gender.his + " feet and pull them into your mouth. " + "As you work " + this.enemyt.gender.him + " down your throat to " + this.enemyt.gender.his + " waist, " + this.enemyt.gender.his + " keg of a belly spills over " + this.enemyt.gender.his + " chest, triggering a drunken, wet belch. " + this.capFirst(this.enemyt.gender.he) + " groans anew as you work " + this.enemyt.gender.his + " paunch into your mouth, making it slosh with every inch you swallow. ", false);
                            if (this.alive()) {
                                this.scene("As you reach " + this.enemyt.gender.his + " armpits, you are forced to lift " + this.enemyt.gender.his + " arms above " + this.enemyt.gender.his + " head. " + "" + this.capFirst(this.enemyt.gender.he) + " begins to curl in a fetal position around " + this.enemyt.gender.his + " belly as you swallow past " + this.enemyt.gender.his + " head. " + "With a few more great gulps, " + this.enemyt.gender.he + " is forced the rest of the way in as you swallow " + this.enemyt.gender.his + " hands. " + "You stand and saunter off, your own gut giving a heave. " + "After you take a few steps, " + this.enemyt.gender.he + " gives one final great belch, the sensation tickling its way through your belly. " + "After about 15 minutes, you feel a great warmth surge through your belly. " + "Your thoughts slow as you begin to stumble, the warmth suffusing your entire being. " + "It seems that alcohol had to go somewhere. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("As you work " + this.enemyt.gender.him + " down to your stomach, it gives an audible groan. " + "With a sudden surge of pressure, you realize you\'ve bitten off more than you could chew. " + "As your mouth closes around his hands, your gut spills forth faster and faster, and you pass out from the strain with a few quiet hiccups. ", false);
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.lizardWizard:
                            this.scene("\tYou decide to solve this conflict in short order and lunge for the little lizard. Caught off guard, he lets out a squeak as you grasp his round body. " + "As you lift him up towards your hungering maw, he cries out, weakly beating you on the head with his wand. " + "It avails him not, your mouth closing about his head as you begin to force his flailing body down your throat. " + "With a bit of a shove, you work your jaws to slide him up to his chest, his muffled cries stifled inside you. " + "Putting a hand to his squishy belly, you upend him and tilt your head back, sending him sliding towards your stomach. " + "His writhing tickles your insides as your stomach muscles work to squeeze him into his new place as a rolled-up lump in your stretched gut. " + "You give your belly a pat and a rub as he struggles inside you... ", false);
                            this.doConsume(30, 0, 10);
                            if (this.alive()) {
                                this.scene("\n\tAs he suddenly goes still, you realize that you\'ve swallowed his wand along with him; his grasp on it never failed the whole time. " + "Before you can be impressed by his tenacity, you can feel the warm tingling of a spell going to work inside you. " + "Your " + this.waist() + " belly suddenly begins to swell, something dense and squishy stretching you from inside. " + "You let out a groan as the mass in your stomach redoubles, making you bulge and round out, your stomach sagging as it grows and over-fills. " + "You are " + this.hungry() + " when it stops, but it appears that that was all the little wizard had. " + "The farm fades away around you, and an empty cart led by a horse begins to roll away into the distance. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("\n\tAs the struggle in your belly stops, you have just enough time to realize that he never released his magic wand. " + "The tell-tale warm tingling of magic suddenly spreading through your stomach confirms your fears, and your " + this.waist() + " belly begins to stretch anew. " + "You fall to your knees as your stomach bloats and fills, a pained groan escaping your lips as you fill far beyond your capacity. " + "You grasp your swelling belly in both hands, rubbing it desperately as the pressure mounts. " + "Alas, your treatments are in vain and you soon fall to your back, your overfull belly rising into the air above you as you lose consciousness. ", false);
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.Manticore:
                            this.scene("\tYou duck under the manticore\'s chin and plow your head into it, giving it a vicious headbutt and sending it staggering. " + "As it attempts to find its footing, you duck behind it, grasping the end of its stinging tail and carefully shoving it into your mouth and down your throat. ", false);
                            if (this.alive()) {
                                this.scene("With the major problem hopefully handled, you work your way down its insectoid tail, feeling it curl up in your stomach. " + "The beast regains its senses about the time you are working your mouth around its rump. " + "It lets out a panicked growl, trying to crawl away from you, but as the tops of its rear legs enter your mouth, you aren\'t about to let it get away. " + "Slowly but surely, you take more and more of the giant cat-beast into your mouth and down your throat, your belly bulging with its furred mass. " + "You have to grab and pin its wings to get them into your maw, and when you reach its front legs, the beast\'s shoulders prove surprisingly broad, " + "but your tenacity has you swallowing them down as well. " + "The chimera gives a groan as you rapidly gulp down its neck, then head, and with a few more swallows, you have the whole thing inside your " + this.waist() + " belly. " + "Hopefully things won\'t be too bad once you start digesting the poison... ", false);
                                this.statusBloatVenomPower = this.statusBloatVenomPower + 10;
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("As you slowly work your way down its insectoid tail, you have to pause to give your belly a rest, and unfortunately, the manticore comes to its senses before you\'ve fully downed it. " + "You can feel a poke on the inside of your stomach, and you can feel it bulging further even as you begin to gulp down the beast\'s hind quarters. " + "You\'re already feeling painfully full as its thick limbs slide down your throat and make a home in your belly, " + "but you\'ve gone too far to stop, and are helpless to do anything but swallow again and again, more and more of the manticore becoming a huge bulge in your midsection. " + "You\'re lying on your back and rubbing at your groaning stomach even as you swallow down its shoulders, and when the rest of its body slides easily into your stuffed belly, " + "you can\'t do anything but moan in pain, the immense pressure a sure sign that this meal was too much for you. ", false);
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.FatWyvern:
                            this.scene("\tYou suddenly shove the wyvern\'s chest, the unexpected force sending it stumbling backwards a few steps, " + "its tail curling up under it and wings flapping unevenly before it crashes onto its back with a loud thud. " + "You immediately follow up by jumping on its tail and starting to slurp it down your throat. ", false);
                            if (this.alive()) {
                                this.scene("As it slides down your throat, you grasp at its legs, shoving one into your mouth, then the other, your jaws spreading wide and throat stretching around its meaty body. " + "It growls at you, but is helpless to right itself, and its massive stomach prevents its head from snaking down upon you. " + "Your stomach stretches and swells as you engorge yourself, forced to slow down to nearly a halt as you swallow at its massive gut. " + "Inch by inch, you slide it steadily further into your stretched form, finally gulping down its tremendous belly. " + "Pulling yourself forward as much as you drag it into your mouth, the creature raises its wings in a desperate attempt to resist, but you\'ve come too far to be stopped by this point. " + "You grasp its arms, shoving them into your mouth and swalling down, your hungry gullet overpowering even its mighty wings. " + "Your belly is massively stretched even before you suck down its long, thick neck, and you are tremendously stretched by the time it is forced into a ball inside your enormous gut. " + "You stand up and give your belly a quick rub as you hoist its now massive burden, and your breath crackles with a bit of electricity as you let out a bit of a belch. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("Gulping at it again and again, you already start to have doubts that you can consume it entirely even as you\'re grabbing at its legs and shoving them into your mouth. " + "Your stomach begins to protest as you reach its waist, and just looking at the mountainous gut that awaits you makes you feel overly full. " + "Determined, you slowly work it into your stretched throat, painfully aware of its twitching tail poking around in your belly. " + "You manage to fit it into your throat, but as the wyvern is sliding inextricably into your gullet, you already know that you\'ve made a mistake. " + "You can\'t stop yourself from swallowing the beast down even as your stomach grows and grows from its bulk. " + "It lets out an angry roar, seemingly aware that it\'s too much for you. " + "As its long, thick neck slips into your throat, you can feel the beast growling as a painful vibrating through your body. " + "As you lie on your massively overfilled stomach, you groan, unable to work up the strength to keep going. ", false);
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.MuscleFur:
                            this.scene("\tYou suddenly strike the great " + this.enemyt.species.name + " in " + this.enemyt.gender.his + " stomach, knocking the wind out of " + this.enemyt.gender.him + " and making " + this.enemyt.gender.him + " double over. Seizing the opportunity, you grab " + this.enemyt.gender.his + " shoulders, open your mouth wide, and lunge forward on " + this.enemyt.gender.him + ". " + this.capFirst(this.enemyt.gender.he) + " lets out a surprised grunt, then " + this.enemyt.gender.his + " head is engulfed by your mouth. Though " + this.enemyt.gender.he + " pushes back at you with tremendous strength, you aren\'t about to let a good meal get away. ", false);
                            if (this.alive()) {
                                this.scene("Your jaw unhinges as you force your way down to " + this.enemyt.gender.his + " thick neck, lowering your grip to " + this.enemyt.gender.his + " hips to get a better angle as you pull " + this.enemyt.gender.him + " down your throat. You can hear muffled grunts and wordless yells as " + this.enemyt.gender.his + " shoulders enter your stretched mouth. Pinning " + this.enemyt.gender.his + " arms to the side, you force yourself down on " + this.enemyt.gender.his + " massive torso, your stomach already stretching out with the giant " + this.enemyt.species.name + ". As you lift " + this.enemyt.gender.him + " up to swallow " + this.enemyt.gender.him + " down past " + this.enemyt.gender.his + " hips, your stretched belly jostles violently, the " + this.enemyt.species.name + " struggling inside you to no avail. You lift your head up to slurp down the last of " + this.enemyt.gender.his + " legs, and with a few more swallows, the giant " + this.enemyt.species.name + " is a giant bulge in your " + this.waist() + " midsection. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                if (this.statusSTOBuffPower < 10 && this.statusSTRBuffPower >= 10) {
                                    this.scene("As " + this.enemyt.gender.his + " struggling dies down, you can feel an odd magical tingling start to spread through you. " + "It seems that whatever spell was on " + this.enemyt.gender.him + " has started to bleed through into you. " + "The urge to eat even more starts to fill your mind. No wonder " + this.enemyt.gender.he + " was so eager... ", false);
                                }
                                if (this.statusSTOBuffPower < 10 && this.statusSTRBuffPower < 10) {
                                    this.scene("As " + this.enemyt.gender.his + " struggling dies down, you can feel an odd magical tingling start to spread through you. " + "It seems that whatever spell was on " + this.enemyt.gender.him + " has started to bleed through into you. " + "The urge to eat even more starts to fill your mind, and you feel the magic bolstering your strength. No wonder " + this.enemyt.gender.he + " was so eager... ", false);
                                }
                                if (this.statusSTRBuffPower < 10 && this.statusSTOBuffPower >= 10) {
                                    this.scene("As " + this.enemyt.gender.his + " struggling dies down, you can feel an odd magical tingling start to spread through you. " + "It seems that whatever spell was on " + this.enemyt.gender.him + " has started to bleed through into you. " + "You feel the magic bolstering your strength. No wonder " + this.enemyt.gender.he + " was so eager... ", false);
                                }
                                if (this.statusSTOBuff < 60) {
                                    this.statusSTOBuff = 60;
                                }
                                if (this.statusSTOBuffPower < 10) {
                                    this.statusSTOBuffPower = 10;
                                }
                                if (this.statusSTRBuff < 60) {
                                    this.statusSTRBuff = 60;
                                }
                                if (this.statusSTRBuffPower < 10) {
                                    this.statusSTRBuffPower = 10;
                                }
                                this.winBattle("");
                            }
                            else {
                                this.scene("Your jaw unhinges as you force your way down to " + this.enemyt.gender.his + " thick neck, lowering your grip to " + this.enemyt.gender.his + " hips to get a better angle as you pull " + this.enemyt.gender.him + " down your throat. You can hear muffled grunts and wordless yells as " + this.enemyt.gender.his + " shoulders enter your stretched mouth. Pinning " + this.enemyt.gender.his + " arms to the side, you force yourself down on " + this.enemyt.gender.his + " massive torso, your stomach already stretching out with the giant " + this.enemyt.species.name + ". You\'re already starting to regret this decision, and you\'re able to tell this will be too much even before " + this.enemyt.gender.he + " starts making things worse by violently thrashing about in your soon-to-be overstuffed belly. Already past the point of no return, " + this.enemyt.gender.his + " legs begin to slide down your throat, and you fall onto your bottom, nursing your swelling stomach as it fills incessantly with entirely too much " + this.enemyt.species.name + ". When the last of " + this.enemyt.gender.him + " falls into your gut, you hiccup and groan, lowering yourself to your back. The painful shaking of the great " + this.enemyt.species.name + " inside you doesn\'t die down nearly fast enough, and the pressure is enough to send you off to unconsciousness. ", false);
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.ThinFur:
                            this.scene("\tTaking advantage of the " + this.enemyt.species.name + "\'s frail condition, you shove " + this.enemyt.gender.him + " to the ground. " + this.capFirst(this.enemyt.gender.he) + " grunts with efforts as " + this.enemyt.gender.he + " feebly tries to force you off " + this.enemyt.gender.him + ", but in short order, you have forced " + this.enemyt.gender.his + " weapons away and trapped " + this.enemyt.gender.him + " under your " + this.fatness() + " body. You lick your teeth, grabbing " + this.enemyt.gender.him + " under the arms as you open your mouth wide. " + this.capFirst(this.enemyt.gender.he) + " lets out a whimper as you pull " + this.enemyt.gender.his + " head into your gaping maw, getting a taste of " + this.enemyt.gender.his + " fear as well as " + this.enemyt.gender.his + " " + this.enemyt.species.fur + ". Your throat bulges as you start to swallow " + this.enemyt.gender.him + " down, " + this.enemyt.gender.his + " cries become muffled and " + this.enemyt.gender.his + " fists beating at you weakly, but rapidly. You grab " + this.enemyt.gender.his + " wrists and force them down against " + this.enemyt.gender.his + " hips, squeezing " + this.enemyt.gender.his + " arms against " + this.enemyt.gender.him + " as you force " + this.enemyt.gender.his + " shoulders into your mouth, spreading it wide open in the process. ", false);
                            if (this.alive()) {
                                this.scene("As you swallow " + this.enemyt.gender.him + " up to " + this.enemyt.gender.his + " chest, you lift " + this.enemyt.gender.him + " up, " + this.enemyt.gender.his + " legs kicking frantically and fingers twitching as you hold " + this.enemyt.gender.his + " light body parallel to the ground. Hungrily, you pull " + this.enemyt.gender.him + " into your mouth, your grip adjusting to be lower and lower on " + this.enemyt.gender.his + " body as " + this.enemyt.gender.he + " begins to pile up in your stomach. " + this.capFirst(this.enemyt.gender.his) + " struggles become a futile pushing on your insides as your throat fully engulfs " + this.enemyt.gender.him + ", and with a few more swallows, " + this.enemyt.gender.his + " entire body is in your " + this.waist() + " belly. You give it a satisfied rub, and after a few moments, the struggling dies down to nothing. ", false);
                                if (this.statusAGIBuff < 60) {
                                    this.statusAGIBuff = 60;
                                }
                                if (this.statusAGIBuffPower < 10) {
                                    this.scene("As time passes, an odd magical energy flows outward from your stomach and through your body and you feel a good bit faster", false);
                                    this.statusAGIBuffPower = 10;
                                }
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("You swallow " + this.enemyt.gender.him + " up to " + this.enemyt.gender.his + " chest, your rapid feast slowing as you start to feel too full. " + "Refusing to let this little meal go to waste, you redouble your efforts, swallowing down more and more of " + this.enemyt.gender.him + ", but when " + this.enemyt.gender.he + " begins to fold up in your stomach, the violent thrashing " + this.enemyt.gender.he + "\'s doing inside of you not helping to assuage matters. Sucking down the last of " + this.enemyt.gender.his + " flailing feet and tail cements your mistake, the relentless pounding your insides receive only adding to the mounting pressure as " + this.enemyt.gender.he + " makes the journey down your throat and to your over-stuffed belly. You fall to a seat, gingerly rubbing your " + this.waist() + " gut, but the struggling inside doesn\'t die down anywhere near fast enough, and the pressure and pain eventually cause you to lose consciousness. ", false);
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.ToughFur:
                            this.scene("\tYou violently shove " + this.enemyt.gender.his + " chest, sending " + this.enemyt.gender.him + " sprawling backwards. " + this.capFirst(this.enemyt.gender.he) + " lands on " + this.enemyt.gender.his + " back with a tremendous thump, and as " + this.enemyt.gender.he + " looks up, you are already pinning " + this.enemyt.gender.his + " thick legs together and opening your mouth wide. " + "With a wordless cry, " + this.enemyt.gender.he + " rolls over and as you shove " + this.enemyt.gender.his + " feet into your mouth and begin to swallow " + this.enemyt.gender.him + " down, " + this.enemyt.gender.he + " claws at the ground, desperately trying to slow your feast. ", false);
                            if (this.alive()) {
                                this.scene(this.capFirst(this.enemyt.gender.his) + " broad hips slide into your mouth easily, your hungry swallowing bringing " + this.enemyt.gender.his + " bulk ever closer to your belly. When you reach " + this.enemyt.gender.his + " tremendous, flabby midsection, you snake your way forward, your jaw stretching wider and wider around the crest of " + this.enemyt.gender.his + " jiggling belly. As you crest the mountain of flab, " + this.enemyt.gender.he + " begins to slickly slide down your throat, the force of your gluttonous swallows easily outmatching " + this.enemyt.gender.his + " desperate tugs at whatever handhold " + this.enemyt.gender.he + " can get. " + this.enemyt.gender.he + " lets out a frustrated growl as you suck down " + this.enemyt.gender.his + " chest, your belly stretching with " + this.enemyt.gender.his + " lower body. You respond with a growl of your own, but from your hungering stomach. " + this.capFirst(this.enemyt.gender.he) + " pushes at your face in a bid to free " + this.enemyt.gender.him + "self, but only manages to get " + this.enemyt.gender.his + " arms stuck outside your mouth as you gulp " + this.enemyt.gender.him + " down past the shoulders. " + this.capFirst(this.enemyt.gender.he) + " lets out a defeated groan as " + this.enemyt.gender.his + " blubbery neck starts to pass down yours, and " + this.enemyt.gender.his + " arms slip down to follow " + this.enemyt.gender.him + " into your " + this.waist() + " belly. " + "You give your stomach a pat and a rub, feeling " + this.hungry() + " as you prepare to set off again. ", false);
                                if (this.statusENDBuff < 60) {
                                    this.statusENDBuff = 60;
                                }
                                if (this.statusENDBuffPower < 10) {
                                    this.scene("As you begin to digest " + this.enemyt.gender.him + ", you can feel whatever magic " + this.enemyt.gender.he + " was changed by flow out through your stomach. " + "After a few moments, you feel quite tough, and the cold of the mountains bothers you a good bit less. ", false);
                                    this.statusENDBuffPower = 10;
                                }
                                this.scene("Not a bad meal, all in all. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                this.winBattle("");
                            }
                            else {
                                this.scene("You slowly suck down " + this.enemyt.gender.his + " broad hips, scarcely able to believe just how bulky this " + this.enemyt.species.name + " is. " + this.capFirst(this.enemyt.gender.his) + " tremendously blubbery midsection hurts your stomach to even look at, but giving up never got anyone anywhere, so you make a valiant effort to get " + this.enemyt.gender.him + " all down. " + this.capFirst(this.enemyt.gender.he) + " sneers at you as you take your time, and taunts, \"What\'s wrong? Does it hurt if I do THIS?\" before beginning to move " + this.enemyt.gender.his + " legs about inside you. It does indeed, but it also makes you swallow faster, and " + this.enemyt.gender.he + " is in up to " + this.enemyt.gender.his + " chest even before you\'re done wincing. \"C\'mon, " + this.playerSpecies.name + "!\" " + this.enemyt.gender.he + " continues mocking as you work your way around " + this.enemyt.gender.his + " shoulders, grabbing your painfully stretched belly, \"don\'t tell me little old me is gonna be too much for you!\" You put your hands on " + this.enemyt.gender.his + " head and violently shove " + this.enemyt.gender.him + " down, " + this.enemyt.gender.his + " taunts becoming muffled shouts. " + this.capFirst(this.enemyt.gender.his) + " arms are the last thing down your throat, and as you swallow down the last of " + this.enemyt.gender.him + ", you lean forward, your " + this.waist() + " stomach is the only thing holding you upright, splayed out and spread across the ground. " + "You give it a slow rubbing, but can\'t even buy yourself much time before the immense fullness is too much for you and sends you drifting out of consciousness. ", false);
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.MagicalFur:
                            this.scene("\tYou rush up and give " + this.enemyt.gender.him + " a shoulder check, which easily knocks the frail " + this.enemyt.species.name + " to the ground. Before " + this.enemyt.gender.he + " can get up, you are on " + this.enemyt.gender.him + ", pinning " + this.enemyt.gender.him + " under you and holding " + this.enemyt.gender.his + " arms against " + this.enemyt.gender.his + " sides. You\'re not sure what eating " + this.enemyt.species.article + " " + this.enemyt.species.name + " with this much magic might do to you, but you\'re more than willing to find out. " + this.capFirst(this.enemyt.gender.he) + " barely seems to pay attention to anything besides the headache already plaguing " + this.enemyt.gender.him + " as you open your mouth wide and pull " + this.enemyt.gender.him + " into it head-first. ", false);
                            if (this.alive()) {
                                this.scene(this.capFirst(this.enemyt.gender.he) + " doesn\'t even put up a struggle as your throat closes around " + this.enemyt.gender.his + " head, and you relentlessly pull " + this.enemyt.gender.him + " into your hungering gullot. By the time you\'ve swallowed " + this.enemyt.gender.him + " up to " + this.enemyt.gender.his + " chest, you can feel the wild magics starting to tingle and spark inside you. You quickly gulp " + this.enemyt.gender.him + " down further, forcing the " + this.enemyt.species.name + " into a ball in your stomach as you slurp down " + this.enemyt.gender.his + " legs, and your " + this.waist() + " belly begins to thrum, buzz and vibrate violently. " + "You hold it in your hands, giving it a pat and a rub as you wait for it to settle down. Fortunately, it isn\'t too much longer before it finally dies out and your belly grows still. ", false);
                                this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                if (this.statusINTBuffPower < 10 || this.statusMANABuffPower < 15) {
                                    this.scene("The magical energy courses through you, spreading out from your somewhat-abused stomach, and you feel oddly over-filled on it. If this was what the " + this.enemyt.species.name + " had going on just in " + this.enemyt.gender.his + " head, it\'s no wonder " + this.enemyt.gender.he + " had such a headache. ", false);
                                }
                                if (this.statusINTBuff < 60) {
                                    this.statusINTBuff = 60;
                                }
                                if (this.statusINTBuffPower < 10) {
                                    this.statusINTBuffPower = 10;
                                }
                                if (this.statusMANABuff < 60) {
                                    this.statusMANABuff = 60;
                                }
                                if (this.statusMANABuffPower < 15) {
                                    this.statusMANABuffPower = 15;
                                }
                                this.winBattle("");
                            }
                            else {
                                this.scene(this.capFirst(this.enemyt.gender.he) + " doesn\'t even put up a struggle as your throat closes around " + this.enemyt.gender.his + " head, and you slowly pull " + this.enemyt.gender.him + " into your gullot. By the time you\'ve swallowed " + this.enemyt.gender.him + " up to " + this.enemyt.gender.his + " chest, you can feel the wild magics starting to tingle and spark inside you. You try to redouble your efforts in devouring " + this.enemyt.gender.him + ", but your protesting, groaning stomach is already full enough without the addition of " + this.enemyt.species.article + " " + this.enemyt.species.name + ". You stubbornly continue to gulp " + this.enemyt.gender.him + " down, but the wild magic is already starting to sting, not to mention your " + this.waist() + " belly beginning to feel overfull. Sucking down the last of " + this.enemyt.gender.his + " legs, you can feel " + this.enemyt.gender.him + " curl up into a lump in your stomach, causing painful pressure just by virtue of being there. " + "On top of that, the violent release of magical energy is sending your belly violently vibrating and bouncing. " + "You let out a groan, grabbing your stomach and lowering yourself to the ground. The pain, pressure, and magical sparking and thrumming send you drifting to unconsciousness. ", false);
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.cheeseMonster:
                            this.scene("As the cheese lunges at you, you grab hold. As it struggles and bucks in your arms, you open wide and take a BIG bite out of it, " + "your mouth sinking through the tough rind and into the hard cheese beneath. " + "The cheese lets out a squeaky keen of anguish. It tastes strong, sharp and slightly fruity- a bit like ", false);
                            switch (this.dXY(1, 5)) {
                                case 1:
                                    this.scene("caerphilly", false);
                                    break;
                                case 2:
                                    this.scene("wensleydale", false);
                                    break;
                                case 3:
                                    this.scene("gouda", false);
                                    break;
                                case 4:
                                    this.scene("pecorino", false);
                                    break;
                                case 5:
                                    this.scene("manchego", false);
                            }
                            this.scene(", perhaps?- but you don\'t really have much time to concentrate on the flavour as the cheese lets out a furious growl and wrenches itself out of your grip. " + "You swallow your mouthful hurriedly, feeling the highly-calorific contents slide down to fill your stomach, just in time to carry on the fight. ", false);
                            this.doConsume(0, 0, this.enemyt.weight * 0.6);
                            this.doEnemyHealth(-12);
                            this.enemyt.maxHEA = this.enemyt.maxHEA - 12;
                            if (this.HEA > 0 && this.eHEA <= 0) {
                                this.winBattle("\t" + this.enemyt.victory);
                            }
                            if (!this.alive()) {
                                this.scene("\n\tLetting out a stuffed, painful BELCH, you fall back onto your butt and sprawl on the milking shed floor, weakly rubbing at your massively overstuffed belly. " + "The cheese bounces to and fro, growling at you, but you\'re too full to pay it any more attention, and it seems to realise the fact. " + "As the world begins to spin around you, your last coherent thought is that you\'re going to have some pretty spectacular nightmares tonight. " + "The cheese suddenly launches itself into the air, and bounces on your aching, over-pressurised belly with a heavy BWOOMPH! " + "You let out a weak cry and mercifully black out... ", false);
                                this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.mountainousTiger:
                            this.scene("\tYou decide it\'s time the tiger saw what it felt like to be stuffed away. " + "Slipping in close, you wait for him to slap his paws together, before swiftly dodging the magic and getting your maw around his orange hands, " + "holding his wrists in your teeth as you pull back, making him lose his footong, before you suck him up to his elbows. " + "He begins to roar and writhe, and you can feel his magic seeping into you, eating away at your fatness, but imbuing you with a rush of strength, easily enough to keep pulling the cat in. " + "He starts to yell, \"NO! I won\'t be just another meal! I refuse to be nothing but a layer of fat on a nobody like y-rfnrnf!\" " + "His voice is cut off as your maw swallows past his head, silencing him as your maw gapes to its limits to get past the beast\'s shoulders. " + "Once beyond that, his body seems to force itself into you as his torso slims, only to be stopped again by his enormous rump and tree-trunk legs. ", false);
                            switch (this.alive()) {
                                case true:
                                    this.scene("\n\tGetting your second wind, you open wide once again, steadily and hungrily working over his backside, focusing intently on his legs, " + "working them in inch by inch, stripe after striple before finally you manage to get those big, black-skinned feet into your maw, forcibly shoving them down with your paw. " + "Proud of yourself, you flop back onto your rump, ready for digestion, before your gut starts to grumble, there is a surge of power, " + "before you feel your entire stomach give a lurch, and the form inside starts to reshape. You feel yourself filling up even more. " + "Confused, you let forth a belch, and realize that the flavor you\'re tasting isn\'t tiger at all! It tastes like two or three other anthros. " + "The tiger must have teleported out of your belly, only to replace himself with some of what he\'d caught, and then some! ", false);
                                    this.doConsume(360, 0, 360 * 0.6);
                                    switch (this.alive()) {
                                        case false:
                                            this.scene("Just the tiger alone was difficult enough, but this is outright impossible. " + "You think maybe you can keep control, only to feel the rushing sensation of yet -another- fatty appearing in your belly, followed by another, and another! " + "You desperately wriggle as you are pinned to the ground by your growing meal, and with one more lurch, you feel yourself be completely overwhelmed. ", false);
                                            this.defeatEvent(this.overeating);
                                            break;
                                        default:
                                            this.scene("You start to feverishly rub at your gut, before you feel yet another anthro appear in your stomach, and then another, and another! " + "Your gut becomes so full and heavy that it pins you to the ground, to the point that you can\'t even see over it. " + "The only thing keeping you going is all the struggling. You sigh with contentment as you reailze you can actually hold this meal. " + "It\'s a long time before all that movement dies down, but it does. You give you swollen midsection a loving pat, before heaving yourself up. " + "It finally dawns on you that both the tiger and his bag have long since disappeared, but at least you got quite the meal out of this! ", false);
                                            this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                            this.winBattle("");
                                    }
                                    break;
                                default:
                                    this.scene("\n\tUnfortunately, by this point you\'re already as full as you can get, and there\'s no way you can polish off the second half of this meal. " + "Sensing your pause, you can feel the magic surge again within you, only this time the tiger seems to mean business. " + "The world seems to shift, and before you even know what happened, you\'ve traded places. " + "You can feel the hot, powerful confines of the tiger\'s gut around you, and your rump being hoisted high into the air, framed by the tiger\'s teeth. " + "Unlike you, though, he has no problem working your waistline down, and less than no trouble keeping your legs together as he forces you completely into him. " + "He gives your feet one final, taunting lick before gulping them down. You curl up into a ball, completely disoriented, before you can feel the tiger giving his gut a few powerful pats. " + "He makes a show of licking his chops, growling assertively. Before losing consciousness, the last thing you hear is: \"You\'re gonna make some great muscle...\" ", false);
                                    this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.Anaconda:
                            this.scene("\tYou grasp the anaconda\'s head, clamping its mouth shut as you open yours wide. Shoving it straight into your throat, you begin to gulp down the massive, wriggling snake. " + "Like a tremendous noodle, you suck it into your mouth, swallowing again and again, your throat bulging around its thick body. " + "Wherever you look, you see its torso being pulled towards you, but what you don\'t see is where it ends. ", false);
                            switch (this.alive()) {
                                case true:
                                    this.scene("You refuse to be deterred, and gulp at it again and again, " + "the tremendous tube of snake meat piling up in your belly, stretching it fuller and fuller as it seems to incessantly stretch on. " + "All the while you can feel the snake wriggling in your throat and tickling at your insides, helpless to stop you from devouring it. " + "After minutes of this, the end of its tail comes into view, and with a few more hungry swallows, you have devoured it entirely, your " + this.waist() + " belly squirming with the snake for a few more minutes as you gently rub it. When it stops, you carry on into the jungle, looking for your next meal. ", false);
                                    this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                    this.winBattle("");
                                    break;
                                default:
                                    this.scene("You refuse to be deterred, and gulp at it again and again, " + "the tremendous tube of snake meat making your belly groan as it stretches fuller and fuller with its seemingly endless body. " + "As your belly grows painfully tight, you can feel every inch of the snake as it wriggles inside you, teasing your already strained insides. " + "It\'s much too late to stop, though, and you are stuck swallowing again and again in an agonizing eternity of devouring the long snake. " + "Its tail finally comes into view, but you know it\'s already too late, and when it disappears down your throat, " + "all you can do is lie on the ground, rubbing your overstuffed belly and groaning until you lose consciousness. ", false);
                                    this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.GluttonSeparatistBoss:
                        case this.GluttonSeparatist:
                            this.doConsume(this.enemyt.species.statChange[5] * 5, 0, 0);
                            this.scene("\tYou tackle the " + this.enemyt.species.name + " to the ground, a flick of your " + this.playerSpecies.hand + " knocking " + this.enemyt.gender.his + " spear away to roll off into the jungle. " + "You lick your chops hungrily as " + this.enemyt.gender.he + " starts yelling complaints in a language you don\'t understand below your " + this.fatness() + " body. " + "The complaints soon become muffled cries as you shove " + this.enemyt.gender.his + " head into your gaping maw. " + "Pulling at the leather straps on the sides of " + this.enemyt.gender.his + " armor, you peel it off, revealing " + this.enemyt.gender.his + " rotund midsection. " + "Clearly the separatists take their beliefs quite seriously, as " + this.enemyt.gender.he + " has obviously been quite the glutton. " + "Pinning " + this.enemyt.gender.his + " arms to the side, you pull hard, swallowing as you do to force " + this.enemyt.gender.him + " on a one-way trip to your belly. ", false);
                            switch (this.alive()) {
                                case true:
                                    this.scene("Slurping and gulping, you feel your throat stretch around the struggling " + this.enemyt.species.name + ", " + this.enemyt.gender.his + " body writhing inside you as your mouth stretches wide, " + "jaw unhinged to accomodate " + this.enemyt.gender.his + " thick, fatty torso. It gently squishes around your mouth before sliding into your throat, " + "and with a few more swallows, your belly begins to stretch and shudder, filling with the pudgy " + this.enemyt.species.name + ". " + "With a few more gulps, " + this.enemyt.gender.his + " hips have passed into your gullet and you are slurping up " + this.enemyt.gender.his + " legs and tail. " + "You pick yourself up and dust yourself off as the " + this.enemyt.species.name + " is forced into a gently-struggling wad in your " + this.waist() + " belly, giving it a good pat and a hum. " + "When your belly grows still, you set off, " + this.hungry() + " and ready to move on. ", false);
                                    this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                    this.winBattle("");
                                    break;
                                default:
                                    this.scene("Slowly, you gulp down the " + this.enemyt.species.name + ", feeling your throat stretch around " + this.enemyt.gender.his + " writhing body. " + "As you approach " + this.enemyt.gender.his + " fatty midsection, you already know that you\'ve overstepped your limits, but it\'s too late to stop now. " + "Unable to do anything but keep swallowing and rub at your achingly-full belly, " + this.enemyt.gender.his + " hips soon pass into your gullet and " + this.enemyt.gender.his + " legs and tail dangle from your mouth. Swallowing hard, you slurp down the last of " + this.enemyt.gender.him + ", " + "resting on your " + this.waist() + " belly and rubbing it as it shakes and buckles, the " + this.enemyt.species.name + " still struggling inside you. " + "Letting out a groan, you find yourself unable to do anything but pant for breath and rub your overstuffed belly, and soon, the painful pressure causes you to lose consciousness. ", false);
                                    this.defeatEvent(this.overeating);
                            }
                            break;
                        case this.DinosaurRider:
                            switch (this.eHEA / this.enemyt.maxHEA > 0.7) {
                                case true:
                                    this.doConsumeQuiet(this.enemyt.species.statChange[5] * 5, 0, 0);
                                    this.scene("\tYou manage to cause the tyrannosaurus to lose its balance for a moment with a sudden attack to its leg, " + "sending the " + this.enemyt.species.name + " plummetting off its back and to the ground, where you are more than ready to meet " + this.enemyt.gender.him + ". " + "As " + this.enemyt.gender.he + " tries to collect " + this.enemyt.gender.his + " senses, you dive on top of " + this.enemyt.gender.him + ", " + "eliciting a surprised grunt from " + this.enemyt.gender.him + " as you pull " + this.enemyt.gender.his + " head into your maw and rapidly devour " + this.enemyt.gender.him + ". " + "Quickly shoving the " + this.enemyt.species.name + " down your throat, you flip " + this.enemyt.gender.him + " into the air, " + "sending " + this.enemyt.gender.him + " on a gravity-assisted trip to your " + this.waist() + " belly. ", false);
                                    switch (this.alive()) {
                                        case true:
                                            this.scene("Gulping feverishly, you force " + this.enemyt.gender.him + " into a ball in your stomach as " + this.enemyt.gender.his + " fat body gives you a fair filling. " + "You barely have time to enjoy it, however, as the massive tyrannosaurus is still right on top of you! ", false);
                                            this.eHEA = this.enemyt.maxHEA * 0.7;
                                            this.enemyt.description = "The tyrannosaurus rider has been knocked unconcious by your attacks, " + "but that\'s not stopping the tyrannosaurus from continuing its last orders to stomp you into the ground!";
                                            this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                            this.enemyt.weight = 6000;
                                            break;
                                        default:
                                            this.scene("Your rapid eating proves to be foolhardy, though, as the " + this.enemyt.species.name + " squirms about inside your pained, " + "overfilled belly, proving to be just a bit too much for you. " + "Unable to stop " + this.enemyt.gender.him + " from sliding down into your stomach, you are quickly confronted with immense pain and forced to a seat. " + "The " + this.enemyt.species.name + " looks on confused for a few moments, then turns to stomp away, leaving you alone to rub at your belly in a futile attempt to stop it from hurting. " + "Soon, the pressure and pain in your belly cause you to lose consciousness. ", false);
                                            this.defeatEvent(this.overeating);
                                    }
                                    break;
                                default:
                                    this.scene("\tYou look at the enormous tyrannosaurus and find yourself thinking of very little aside from what an excellent meal it would make. " + "Giving in to what can only be called complete madness, you give the creature a strike to the leg, causing it to let out a roar as it topples over. " + "Before it can right itself, you are already at its thick tail and shoving it in your hungering maw. " + "Somewhere inside your mind, the tiny voice of sanity reminds you that this is completely crazy, " + "but you\'re too hungry to care, and your powerful throat is already sucking down dinosaur tail. " + "Letting out a confused grunt, the tyrannosaurus turns on the ground to face you, its face clearly displaying its complete shock. " + "Down your throat it goes, and you refuse to stop until you physically can\'t go on. ", false);
                                    switch (this.alive()) {
                                        case true:
                                            this.scene("\n\tTail gives way to massive rump, and massive rump gives way to enormous torso flanked by enormous legs. " + "Your hunger is endless and your belly is bottomless, and you know it full well when you swallow up this massive beast. " + "Its upper half writhes, unable to free itself from your inescapable vacuum of a gullet. " + "By the time you\'ve reached its chest, it is letting out terrified roars, and when you swallow down its throat and head, it has given up and gone silent. " + "With a few more swallows, the creature is nothing but a massive bulge in your " + this.waist() + " belly. " + "Leaning forward onto it, you give it a loving stroke, feeling immensely satisfied with yourself. ", false);
                                            this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                            this.winBattle("");
                                            break;
                                        default:
                                            this.scene("\n\tIt takes approximately seven seconds for your sanity to kick back in, but that\'s just long enough for the massive beast\'s tail to reach your stomach. " + "It wriggles around a bit, stretches you far fuller than any " + this.playerSpecies.name + " was meant to be, " + "and your body simply shuts off, going limp as you loosely slide back off of the tyrannosaurus. " + "Completely confused by what just happened, the tyrannosaurus slowly gets back to its feet and wanders off, seemingly trying to forget this ever happened. " + "You, meanwhile, lie on the ground for a little while. It hurt an unbelievable amount, and your body didn\'t have any of it, but for a brief moment, you were in bliss. " + "The same part of you that made you want to eat that thing in the first place urges you to try again some day. " + "The rest of you tells you that it\'s time to take a nap. You concur. ", false);
                                            this.defeatEvent(this.battle);
                                    }
                            }
                            break;
                        case this.shamanBossNormal:
                            this.scene("You give the " + this.enemyt.species.name + " a shoulder check and pin " + this.enemyt.gender.him + " against the stone altar, " + "pressing your body against " + this.enemyt.gender.him + " to keep " + this.enemyt.gender.him + " held. " + this.capFirst(this.enemyt.gender.he) + " starts to chant a spell in a loud, panicked tone, " + "but you open your maw wide, clamping down on " + this.enemyt.gender.his + " head as you voraciously begin to devour " + this.enemyt.gender.him + ". " + "You gulp " + this.enemyt.gender.him + " down, going from head to neck and down to shoulders hungrily, your jaw unhinging as your throat muffles " + this.enemyt.gender.his + " cries. " + "Grabbing " + this.enemyt.gender.him + " by the waist, you hoist " + this.enemyt.gender.him + " up onto the altar and force yourself down upon " + this.enemyt.gender.him + ", " + "starting the " + this.enemyt.species.name + " on an inescapable path to your stomach. ", false);
                            this.doConsumeQuiet(this.enemyt.species.statChange[5] * 5, 0, 0);
                            switch (this.alive()) {
                                case true:
                                    this.scene("More and more of the fat " + this.enemyt.species.name + "\'s body is forced into your hungering maw and down your throat as you lower yourself down steadily further upon " + this.enemyt.gender.him + ", " + this.enemyt.gender.his + " arms and legs flailing below you. Ravenously, you pull " + this.enemyt.gender.him + " into you again, " + "violently shoving " + this.enemyt.gender.his + " rotund midsection into your mouth as " + this.enemyt.gender.his + " muffled cries begin to emanate from your " + this.waist() + " stomach. " + "Swallowing with ferocious greed, you suck down " + this.enemyt.gender.his + " massive belly before flipping " + this.enemyt.gender.him + " up into the air, " + "gravity assisting you with pulling " + this.enemyt.gender.his + " legs and tail into your throat. " + "With a few more gulps, the shaman is a large, struggling ball in your belly, and as you let out a contented hum and give your stretched belly a rub, it grows still. ", false);
                                    this.doConsumeQuiet(0, 0, this.enemyt.weight * 0.6);
                                    this.winBattle("");
                                    break;
                                default:
                                    this.scene("You slowly swallow " + this.enemyt.gender.him + " down, gravity forcing his heavy body down your throat much faster than you\'d wanted, but you doubt it would\'ve helped anyways. " + "Forcing down its legs and tail, you fall to your knees, rubbing your " + this.waist() + " belly and groaning in pain, unable to do much else. " + "As you lose consciousness, you can see a raptor looming over you, seeming to prepare for some kind of ritual. ", false);
                                    this.defeatEvent(this.transformed);
                            }
                            break;
                        case this.shamanBoss:
                            this.createNPC(1, this.randomDinosaur(), this.randomGender());
                            if (this.enemyt.attackCounterB == 10) {
                                this.scene("\tYou lunge for the raptor, grabbing him in your arms and holding him in place as you open your mouth wide. " + "Lifting him up, you force him into your maw, jaw unhinging and throat stretching as you gulp him down. ", false);
                            }
                            if (this.enemyt.attackCounterB < 10 && this.enemyt.attackCounterB > 1) {
                                this.scene("\tAgain you manage to get a hold of the raptor and cram him into your maw, not satisfied until he\'s in your belly. " + "Swallowing furiously, you raise him up and pull him into you, trying to eat him faster than last time to keep him from escaping. ", false);
                            }
                            if (this.enemyt.attackCounterB == 1) {
                                this.scene("Once more, you get your hands on the raptor and force him into your maw, absolutely determined to devour him once and for all. " + "Keeping a firm grip on him, you pull at him, forcing him down your stretched throat and towards your now very crowded stomach as you swallow with fervent conviction. ", false);
                            }
                            switch (this.alive()) {
                                case true:
                                    if (this.enemyt.attackCounterB == 10) {
                                        this.scene("About midway down his muscular torso, something curious happens and you find that " + this.NPC1.species.article + " " + this.NPC1.species.name + " is in your mouth instead. " + "As you gulp down its fat waist and slurp its legs down, you see that the raptor is growling and wiping some of your saliva off his face, still wielding his totem. " + "A brief looking around shows that there seems to be one less person watching the battle. Looks like this is still a fight. ", false);
                                        this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                    }
                                    if (this.enemyt.attackCounterB < 10 && this.enemyt.attackCounterB > 1) {
                                        this.scene("Again you only make it halfway down his body before he is replaced by someone else. " + "Swallowing down your unintended victim hastily, you quickly find him again, the look on his face one of even greater aggravation than before. " + "You give your " + this.hungry() + " " + this.waist() + " belly a quick rub and get back to the fight again. ", false);
                                        this.doConsume(0, 0, this.enemyt.weight * 0.6);
                                    }
                                    if (this.enemyt.attackCounterB == 1) {
                                        this.scene("As you watch carefully, you notice that the flailing legs and tail that stick out of your mouth do not change. " + "Slurping them down hastily, you take a look around. The stronghold is now completely empty, it seems, as everyone else that was here is now in your " + this.waist() + " belly. " + "Well, that\'s certainly one way to do it. ", false);
                                        this.doConsume(150, 0, this.enemyt.weight * 0.6);
                                        this.winBattle("");
                                        this.getItem(this.fallenStar);
                                    }
                                    break;
                                case false:
                                    if (this.enemyt.attackCounterB == 10) {
                                        this.scene("You slowly swallow him down, gravity forcing his heavy body down your throat much faster than you\'d wanted, but you doubt it would\'ve helped anyways. " + "The pain of your stretched stomach is so great that you only barely notice that the creature you\'re eating doesn\'t seem to be the raptor anymore. " + "Forcing down its legs and tail, you fall to your knees, rubbing your " + this.waist() + " belly and groaning in pain, unable to do much else. " + "As you lose consciousness, you can see the raptor looming over you, seeming to prepare for some kind of ritual. ", false);
                                    }
                                    if (this.enemyt.attackCounterB < 10 && this.enemyt.attackCounterB > 1) {
                                        this.scene("Unfortunately, it seems that this time, you don\'t have it in you to eat another whole person, and when you spot that he\'s been replaced, you let out a muffled groan. " + "You were certain this time would do it, but now all you have for your trouble is the lower half of " + this.NPC1.species.article + " " + this.NPC1.species.name + " to suck down to an overfull belly. " + "Having no choice but to swallow it down, you fall to your knees, " + this.waist() + " belly just too full for you to keep going. " + "Groaning in pain and rubbing your aching stomach, " + "you are fortunate enough to lose consciousness before the raptor can perform whatever spell he started to use as you pass out. ", false);
                                    }
                                    if (this.enemyt.attackCounterB == 1) {
                                        this.scene("As you slowly gulp him down towards your already full stomach, you notice that the flailing legs and tail that stick out of your mouth don\'t change. " + "Agonizingly, you swallow again and again, vigor renewed by the thought that, finally, you have eaten the shaman. " + "As you sink to the ground rubbing your painfully overstretched belly, " + "you are comforted by that thought, and as you slip into unconsciousness, you still consider it a victory. ", false);
                                    }
                                    this.defeatEvent(this.transformed);
                            }
                            this.enemyt.attackCounterB--;
                            break;
                        case this.anacondaBoss:
                            this.scene("\tSomething snaps inside your mind, and you decide that this seemingly endlessly long, tremendously thick-bodied beast would be just perfect for a snack. " + "You give its head a solid bashing, dazing it for a moment while you set about the task of finding a part small enough to start eating it. " + "Fortune smiles on your insane endeavor, and you chance upon the very tail end of the creature. " + "Without a moment\'s hesitation, you shove it into your mouth, bite down, and begin to suck it down your throat. ", false);
                            switch (this.alive()) {
                                case true:
                                    this.scene("\n\tOnce you\'ve started, you simply can\'t bring yourself to stop. Even as the tail thickens out to the creature\'s full girth, " + "you keep gulping it down, swallow after swallow of a creature large enough to eat an entire house in one gulp slides down your massively stretched throat " + "and into your rapidly ballooning belly. It curls up in a ball inside you, writhing and slithering over itself in a futile attempt to escape your hunger, but it simply cannot. " + "Your belly grows tremendous with the body of the centuries-old predator, and it just doesn\'t seem to stop. But you don\'t even mind. " + "The immense filling is just what you wanted, and when it finally ends, the hissing serpent\'s head passing down your throat, " + "the intense fullness has long since become nothing but pleasant, your massive belly serving as a gigantic monument to your bottomless gluttony. " + "You can\'t even reach around it, but you rub what you can of it, relishing this moment. " + "After a few minutes, you remember that there was a reason you came out here, and go into the beast\'s layer, recovering a chunk of White Gold. ", false);
                                    this.winBattle("");
                                    this.getItem(this.whiteGoldChunk);
                                    break;
                                case false:
                                    this.scene("\n\tYou manage to suck down a few hundred feet of it before a part of you starts to wonder if this was a bad idea. " + "A few dozen more, and reality suddenly crashes down upon you, the immense stretching of your belly suddenly agonizing and disabling. " + "You stop dead in your tracks, slack-jawed around the body of the biggest creature you have ever encountered and unable to do anything at all as it slithers back out of you. " + "It brings its head around to look at you, and you think you see respect in its eyes before it turns away, slithering off to leave you there on the ground. " + "You attempted something that, in hindsight, you should have known was impossible, but what the heck? It was worth a try. " + "You tell yourself this as you lose consciousness, and it doesn\'t seem so bad. ", false);
                                    this.defeatEvent(this.battle);
                            }
                    }
            }
        }

        protected function spellDescription(param1:Spells):void {
            var _loc2_:Number = NaN;
            this.scene("<b>" + this.capFirst(param1.name) + ":</b> " + "\n\t" + param1.description + "\n\t<i>" + param1.manaCost + " mana. ", false);
            if (param1.castableCombat && param1.castableOOC == false) {
                this.scene("Castable in combat. ", false);
            }
            if (param1.castableOOC && param1.castableCombat == false) {
                this.scene("Castable out of combat. ", false);
            }
            if (param1.castableCombat && param1.castableOOC) {
                this.scene("Castable in or out of combat. ", false);
            }
            _loc2_ = 0.4;
            if (this.WEA.damageStat == "INT" && this.WEA.damageScaling > _loc2_) {
                _loc2_ = this.WEA.damageScaling;
            }
            switch (param1.spellType) {
                case "attack":
                    this.scene("\n\t", false);
                    if (param1.damage > 0) {
                        this.scene("Deals " + param1.damage + "d" + param1.damageRange + " +" + _loc2_ * 100 + "% INT damage. ", false);
                    }
                    switch (param1.statusEffect) {
                        case "burn":
                            this.scene("Has a chance to burn your enemy, causing damage over time for " + param1.statusTime + " turn(s). Cancels out the soak effect. ", false);
                            break;
                        case "stun":
                            this.scene("Has a chance to stun your enemy, causing it to sometimes be unable to attack " + param1.statusTime + " turn(s). ", false);
                            break;
                        case "slow":
                            this.scene("Has a chance to slow your enemy, causing it to act last in combat for " + param1.statusTime + " turn(s). ", false);
                            break;
                        case "soak":
                            this.scene("Soaks your enemy in water, causing them to be weak to lightning attacks for " + param1.statusTime + " turn(s). Cancels out the burn effect. ", false);
                    }
                    break;
                case "heal":
                    this.scene("\n\tHeals " + param1.damage + "d" + param1.damageRange + " +" + _loc2_ + "% INT damage. ", false);
                    break;
                case "buff":
                    switch (param1.buffStat) {
                        case "REGEN":
                            this.scene("\n\tRegenerates " + param1.damage + "d" + param1.damageRange + " +" + _loc2_ + "% INT health for " + param1.buffAmount + " rounds/" + param1.buffAmount + "0 minutes. ", false);
                            break;
                        case "DODGE":
                            this.scene("\n\tIncreases your chance of you dodging attacks by " + param1.buffAmount + "%. ", false);
                            break;
                        default:
                            this.scene("\n\tIncreases " + param1.buffStat + " by " + param1.buffAmount + ". ", false);
                    }
            }
            this.scene("</i>", false);
        }

        protected function doSpells():void {
            var tempSpell:Spells = null;
            this.updateStats();
            this.clearView();
            this.appView(0);
            this.spellArray.sortOn("name", Array.CASEINSENSITIVE);
            if (currentState == "combat") {
                currentState = "combatSpells";
            }
            if (currentState != "combat" && currentState != "combatSpells") {
                currentState = "spells";
            }
            this.invView(1);
            this.listen = function ():void {
                if (btnchc > 0 && btnchc < 10 && spellArray[btnchc - 1 + (spellPage - 1) * 9] != null) {
                    tempSpell = spellArray[btnchc - 1 + (spellPage - 1) * 9];
                    if (currentState == "combatSpells") {
                        combatDialogue();
                        if (tempSpell.castableCombat) {
                            btntxt(11, "Cast");
                        }
                        else {
                            clearDecisionView();
                        }
                    }
                    if (currentState == "spells") {
                        scene("", true);
                        if (tempSpell.castableOOC) {
                            btntxt(11, "Cast");
                        }
                        else {
                            clearDecisionView();
                        }
                    }
                    spellDescription(tempSpell);
                }
                if (btnchc == 11 && tempSpell != null) {
                    clrchc();
                    if (tempSpell.manaCost <= MANA) {
                        if (currentState != "combatSpells") {
                            playerCast(tempSpell);
                        }
                        else {
                            combatCast(tempSpell);
                        }
                    }
                    else if (eventText.htmlText.match("Not enough mana") == null) {
                        scene("\nNot enough mana! ", false);
                    }
                }
            };
            this.spellButtons();
        }

        protected function spellButtons():void {
            var _loc1_:Spells = null;
            this.i = (this.spellPage - 1) * 9 + 1;
            while (this.i <= this.spellPage * 9) {
                _loc1_ = this.spellArray[this.i - 1];
                if (_loc1_ != null) {
                    switch (_loc1_.iconType) {
                        case "white":
                            this.buttonIcons(this.i, this.iconWhiteMagic);
                            break;
                        case "black":
                            this.buttonIcons(this.i, this.iconBlackMagic);
                            break;
                        case "grey":
                            this.buttonIcons(this.i, this.iconGreyMagic);
                            break;
                        default:
                            switch (_loc1_.spellType) {
                                case "heal":
                                    this.buttonIcons(this.i, this.iconWhiteMagic);
                                    break;
                                case "damage":
                                    this.buttonIcons(this.i, this.iconBlackMagic);
                                    break;
                                default:
                                    this.buttonIcons(this.i, this.iconGreyMagic);
                            }
                    }
                    this.writeSpells(this.i, _loc1_);
                }
                this.i++;
            }
        }

        protected function writeSpells(param1:int, param2:Spells):void {
            if (param1 > 9) {
                param1 = param1 % 9;
            }
            if (param1 == 0) {
                param1 = 9;
            }
            this.btntxt(param1, this.capFirst(param2.name));
        }

        protected function spellLearn(param1:Spells):void {
            var _loc2_:Spells = null;
            if (this.spellFind(param1) == -1) {
                _loc2_ = ObjectUtil.copy(param1) as Spells;
                this.spellArray.push(_loc2_);
            }
        }

        protected function spellKnown(param1:Spells):Boolean {
            if (this.spellFind(param1) > -1) {
                return true;
            }
            return false;
        }

        protected function spellFind(param1:Spells):Number {
            var _loc2_:int = 0;
            var _loc3_:Spells = null;
            _loc2_ = -1;
            this.i = 0;
            while (this.i < this.spellArray.length) {
                _loc3_ = this.spellArray[this.i];
                if (_loc3_.name == param1.name) {
                    _loc2_ = this.i;
                }
                this.i++;
            }
            return _loc2_;
        }

        protected function doTeaching(param1:Vendors):void {
            var j:int = 0;
            var tempRemoveSpell:Spells = null;
            var tempVendSpell:Spells = null;
            var ID:Vendors = param1;
            this.Vendor = ObjectUtil.copy(ID) as Vendors;
            this.Vendor.StoreExit = ID.StoreExit;
            this.scene(this.Vendor.Buying + "\n", true);
            this.clearView();
            this.leaveButton(12);
            j = this.Vendor.vendArray.length;
            while (j > 0) {
                tempRemoveSpell = this.Vendor.vendArray[j - 1];
                if (this.spellFind(tempRemoveSpell) != -1) {
                    this.Vendor.vendArray.splice(j - 1, 1);
                }
                j--;
            }
            this.Vendor.vendArray.sortOn("requirementINT", Array);
            this.i = 1;
            while (this.i <= 9 && this.i <= this.Vendor.vendArray.length) {
                tempVendSpell = this.Vendor.vendArray[this.i - 1];
                if (tempVendSpell.requirementINT <= this.bINT) {
                    this.btntxt(this.i, this.capFirst(tempVendSpell.name));
                }
                this.scene("\n", false);
                this.spellDescription(tempVendSpell);
                this.scene("\n\t" + tempVendSpell.Value + " gold, " + tempVendSpell.requirementINT + " INT", false);
                this.i++;
            }
            if (this.buttonVisible1 == false) {
                this.scene("\n\n", false);
                if (this.Vendor.vendArray.length == 0) {
                    this.scene(this.Vendor.allKnown, false);
                }
                else {
                    this.scene(this.Vendor.lowINT, false);
                }
            }
            this.listen = function ():void {
                var _loc1_:Spells = null;
                if (btnchc > 0 && btnchc < 10) {
                    _loc1_ = Vendor.vendArray[btnchc - 1];
                    if (GLD > _loc1_.Value) {
                        spellLearn(_loc1_);
                        doTeaching(Vendor);
                        scene("\n" + Vendor.Bought, false);
                        doGold(-_loc1_.Value);
                        doTime(30);
                    }
                    else {
                        doTeaching(Vendor);
                        scene("\n" + Vendor.NoMoney, false);
                    }
                }
                if (btnchc == 12) {
                    doEvent(Vendor.StoreExit);
                    scene(Vendor.Leaving, true);
                }
            };
        }

        protected function doeDMG():void {
            var _loc1_:int = 0;
            _loc1_ = 0;
            switch (this.enemyt.attackStat) {
                case "AGI":
                    _loc1_ = this.enemyt.AGI;
                    break;
                case "INT":
                    _loc1_ = this.enemyt.INT;
                    break;
                default:
                    _loc1_ = this.enemyt.STR;
            }
            this.eDMG = this.dXY(_loc1_ * 0.8, _loc1_ * 1.2) - this.ARM.Defense - this.tmagicDEFbuff;
            if (this.eDMG < 0) {
                this.eDMG = 0;
            }
        }

        protected function doeSpellDMG(param1:Spells):void {
            this.eDMG = this.xdx(param1.damage, param1.damageRange) + this.enemyt.INT * 0.4;
            if (this.eDMG < 0) {
                this.eDMG = 0;
            }
        }

        protected function enemyCast(param1:Spells):void {
            switch (param1.spellType) {
                case "attack":
                    this.doSpellDMG(param1);
                    this.doHealth(-this.eDMG);
                    break;
                case "heal":
                    this.doSpellDMG(param1);
                    this.doEnemyHealth(this.eDMG);
            }
            this.eMANA = this.eMANA - param1.manaCost;
            this.updateStats();
        }

        protected function dodge():Boolean {
            return this.testSkillRange(this.AGI + this.INT + this.modDodge(), this.enemyt.AGI + this.enemyt.INT, 5, 75);
        }

        protected function dodgeInstaDeath():Boolean {
            return this.testSkillRange(this.AGI + this.INT + this.modDodge(), this.enemyt.AGI + this.enemyt.INT, 5, 95);
        }

        protected function modDodge():Number {
            var _loc1_:Number = NaN;
            _loc1_ = 0;
            _loc1_ = _loc1_ + this.tmagicDODGEbuff;
            return _loc1_;
        }

        protected function enemyAttack():void {
            var startingHEA:int = 0;
            var enemyAttacked:Boolean = false;
            var beesLeft:int = 0;
            var missed:int = 0;
            var slimed:int = 0;
            var tempDebuffAmount:int = 0;
            var stuff:int = 0;
            var drainedFat:int = 0;
            var enemyItem:Items = null;
            var antsLeft:int = 0;
            var poisonStacks:int = 0;
            var takeoutTerrorFood:Items = null;
            var takeoutTerrorTestFood:Items = null;
            var tempInt:int = 0;
            var surrenderFood:Items = null;
            var testFood:Items = null;
            var surrenderFoodA:Items = null;
            var surrenderFoodB:Items = null;
            var surrenderFoodC:Items = null;
            var testFoods:Items = null;
            var tempItem:Items = null;
            if (this.inCombat()) {
                startingHEA = this.HEA;
                this.doeDMG();
                enemyAttacked = false;
                switch (this.enemy) {
                    case this.Anaconda:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou stop resisting, unwilling to fight any further. The snake squeezes down on you, causing you to black out in pain. " + "As you are devoured, you quickly lose consciousness, thankfully before you become anything worse than a large bulge in the anaconda\'s belly. ", false);
                                this.defeatEvent(this.devoured);
                                break;
                            default:
                                if (this.grapple <= 0) {
                                    if (this.enemyt.grappleEscapeSucceed != this.enemy.grappleEscapeSucceed) {
                                        this.enemyt.grappleEscapeSucceed = ObjectUtil.copy(this.enemy.grappleEscapeSucceed) as String;
                                        this.enemyt.grappleEscapeFail = ObjectUtil.copy(this.enemy.grappleEscapeFail) as String;
                                    }
                                    this.scene("<li>Coil</li>", false);
                                    switch (this.dodge()) {
                                        case true:
                                            this.scene("The huge snake constricts its thick and muscular torso, but you leap well clear of it before it can grab you. ", false);
                                            break;
                                        default:
                                            this.scene("The huge snake constricts its thick and muscular torso, clamping down tight around you as it tries to crush you into submission! ", false);
                                            this.grapple = this.enemyt.STR * 3;
                                    }
                                }
                                if (this.grapple > 0) {
                                    this.scene("<li>Squeeze</li>", false);
                                    switch (this.enemyt.grappleEscapeSucceed == this.enemy.grappleEscapeSucceed) {
                                        case true:
                                            this.scene("The snake squeezes at you with incredible strength. You can feel your bones creaking in protest! ", false);
                                            this.doHealth(-this.eDMG);
                                            if (this.HEA <= this.maxHEA * 0.6 && this.HEA > 0) {
                                                this.scene("\n\tDeciding that you\'ve weakened enough, the snake opens its jaws and engulfs you from the head down. " + "Everything goes dark as you find yourself in the long belly of the beast! ", false);
                                                this.grapple = this.enemyt.STR * 3;
                                                this.enemyt.grappleEscapeSucceed = "You wriggle and writhe, forcing yourself against the slippery snake\'s insides and are ejected out of the snake\'s mouth! ";
                                                this.enemyt.grappleEscapeFail = "You struggle and strain, but can\'t manage to free yourself from the snake\'s squeezing stomach! ";
                                            }
                                            break;
                                        default:
                                            this.scene("The walls of the snake\'s long stomach squeezes down around you! ", false);
                                            this.doHealth(-this.eDMG);
                                    }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tYou can feel the edges of your vision begin to blur as you\'re squeezed into submission. The pain causes you to lose consciousness thankfully quickly. ", false);
                                    this.defeatEvent(this.devoured);
                                }
                        }
                        break;
                    case this.BloatBees:
                        beesLeft = Math.ceil(this.eHEA / 25);
                        if (this.surrender) {
                            this.scene("\tYou decide not to fight against your insectoid foe. ", false);
                            if (beesLeft > 1) {
                                this.scene("The bees turn to each other and appear to communicate with each other through a series of buzzes. " + "After a moment, they continue with the general bee plan and sting you several times over. ", false);
                            }
                            else {
                                this.scene("The lone remaining bee hovers warily for a second, before continuing with the general bee strategy of stinging the crap out of everything. ", false);
                            }
                            this.scene("You feel your stomach start to expand faster and faster as you\'re stung over and over again. ", false);
                            this.stuffToBursting();
                            this.scene("Eventually, you\'re far too bloated to stand and you fall to the ground as your stomach continues to inflate above you. " + "Eventually you pass out from the pain of your overinflated stomach. ", false);
                            this.defeatEvent(this.overeating);
                        }
                        else {
                            this.scene("<li>Sting</li>", false);
                            this.i = 1;
                            while (this.i <= beesLeft) {
                                this.scene("A bee dives toward you, it\'s stinger flaired. ", false);
                                this.doeDMG();
                                switch (this.dodge()) {
                                    case false:
                                        if (this.eDMG > 0) {
                                            this.scene("The stinger pierces your skin, and you feel a slight burning as you take " + this.eDMG + " damage. ", false);
                                            this.doHealth(-this.eDMG);
                                            this.statusBloatVenomPower++;
                                        }
                                        else {
                                            this.scene("The stinger doesn\'t manage to pierce your defenses, leaving you completely unharmed. ", false);
                                        }
                                        break;
                                    default:
                                        this.scene("You manage to avoid it\'s needle like stinger. ", false);
                                }
                                this.i++;
                            }
                            if (!this.alive()) {
                                if (this.FUL >= this.maxFUL) {
                                    this.scene("\n\tYou collapse to the ground clutching you bulging stomach. " + "You can feel it stretched taut like an overinflated balloon. " + "As you lay on your back nursing your overinflated gut, a new swarm of several bees slowly hover towards you. " + "As you\'re about to pass out from the pain of your overpressurized stomach, several bees sting you in the stomach at once. ", false);
                                }
                                else {
                                    this.scene("\n\tYou collapse to the ground, overwhelmed by the painful stings of you enemies. " + "You collapse to the ground as you hear the sound of several more bees buzzing their way into the area. " + "As you\'re too weakened to fight them off, they all surround you and sting you at once. " + "For a brief moment you feel the several stingers pierce your skin, " + "but that\'s quickly overpowered as you feel your stomach rapidly blow up as being inflated like a balloon. " + "As your stomach stretches and grows, eventually the pain becomes too much and you pass out even as you feel your stomach slowly inflating larger and larger. ", false);
                                    this.doInflate(this.remainingCapacity() + 1, 0);
                                }
                                this.defeatEvent(this.overeating);
                            }
                        }
                        break;
                    case this.BloatedLion:
                        if (this.surrender) {
                            this.scene("\tYour opponent senses his opportunity. He rears back and lunges toward you, his jaws stretched almost impossibly wide. " + "He tackles you to the ground and locks his mouth around your head. He slowly and laboriously swallows you whole. " + "You feel yourself slide into his large stomach as he swallows you down. His stomach stretches massively to contain you. " + "From the outside, the lion\'s stomach stretches to the ground and then some. The lion grunts and rolls onto his side as his humongous stomach towers several feet over him. " + "The lion lets out a pained but contented sigh as he sets about digesting his painfully large feast. You can only pray that someone up there is looking out for you. ", true);
                            this.defeatEvent(this.devoured);
                        }
                        else {
                            this.chance = this.dXY(1, 4);
                            if (this.chance == 1 && this.HEA < 20) {
                                this.scene("<li>Devour</li>", false);
                                switch (this.dodgeInstaDeath()) {
                                    case true:
                                        this.scene("Your opponent believes you are weakened. He rears back and attempts to tackle you, his jaws opened wide, but you are able to fight him off and throw him to the ground. ", false);
                                        break;
                                    default:
                                        this.scene("\tYour opponent senses his opportunity. He rears back and lunges toward you, his jaws stretched almost impossibly wide. " + "You try to dodge him, but he\'s too strong and fast for you. " + "He tackles you to the ground and locks his mouth around your head. He slowly and laboriously swallows you whole as you struggle against him. " + "You feel yourself slide into his large stomach as he swallows you down. His stomach stretches massively to contain you. " + "From the outside, the lion\'s stomach stretches to the ground and then some. The lion grunts and rolls onto his side as his humongous stomach towers several feet over him. " + "The lion lets out a pained but contented sigh as he sets about digesting his painfully large feast. You can only pray that someone up there is looking out for you. ", false);
                                        this.defeatEvent(this.devoured);
                                }
                            }
                            else if (this.chance == 2 && this.AGI > 5) {
                                this.scene("<li>Roar</li>", false);
                                this.scene("The bloated lion lets out a deafening roar leaving you feeling weak in the knees and slowed. ", false);
                                this.chgTempStats("AGI", 5);
                            }
                            else {
                                this.scene("<li>Attack</li>", false);
                                if (this.dXY(1, 2) == 1) {
                                    this.scene("The bloated lion waddles up and swipes at you with his paw, dealing " + this.eDMG + " damage. ", false);
                                }
                                else {
                                    this.scene("The bloated lion licks his chops before jumping forward and biting you, dealing " + this.eDMG + " damage. ", false);
                                }
                                this.doHealth(-this.eDMG);
                            }
                            if (!this.alive()) {
                                this.scene("\n\t" + this.enemyt.defeat, false);
                                this.defeatEvent(this.battle);
                            }
                        }
                        break;
                    case this.BubbleOrca:
                        if (this.surrender) {
                            if (this.grapple > 0) {
                                this.scene("\tBe it through losing the will to fight, or through you enjoying the ordeal, you stop fighting against the orca and loosen up somewhat, and " + this.enemyt.gender.he + " notices your submission. " + this.capFirst(this.enemyt.gender.he) + " breaks off the kiss, seeing if this is some sort of trick, but soon catches on and tugs you close and rears " + this.enemyt.gender.his + " head back, " + "drinking down several mouthfuls of water, it hissing and turning into air within " + this.enemyt.gender.his + " body. " + this.capFirst(this.enemyt.gender.he) + " grins mischievously at you before locking lips with you once more and puffing hard. " + "Your belly swells out further and further, and you can feel the buoyancy within you making your entire body want to float to the surface. " + "The orca senses this, and swims as best it can to the surface. " + this.capFirst(this.enemyt.gender.he) + " puffs into you a few more times, before letting go and watching you glide away through the air. " + this.capFirst(this.enemyt.gender.he) + " rolls onto " + this.enemyt.gender.his + " belly and waves with her tail as you drift away. ", false);
                                this.inflateToFloating();
                                this.defeatEvent(this.floating);
                            }
                            else if (this.dXY(1, 2) == 1) {
                                this.scene("\tYou lower your " + this.WEA.Name + ", conveying you no longer want to fight. " + "You would expect " + this.enemyt.gender.him + " to pounce on you and start making you more spherical, but a loud rumble from " + this.enemyt.gender.him + " indicates that " + this.enemyt.gender.his + " hunger is winning out over " + this.enemyt.gender.his + " inflation lust. " + this.capFirst(this.enemyt.gender.he) + " still pounces, but outstretched jaws instead of outstretched arms. " + "You have second thoughts and try to swim off, but as you do you feel " + this.enemyt.gender.his + " jaws fix themselves around your ankles. " + "You violently flail with your arms to try and escape, but you feel the orca let go before " + this.enemyt.gender.he + " thrusts forward, biting further up your gut, before doing it again, and again. " + "You can already feel your legs in " + this.enemyt.gender.his + " stomach, and realise that escape is impossible, and give up once more. " + "The orca works " + this.enemyt.gender.his + " way over your chest, licking at your head before sucking it in and swallowing. " + "You flop into " + this.enemyt.gender.his + " rather spacious gut, which is surprisingly dry and somewhat comfortable. " + "The orca lets out a burp and swims away back into the depths, and it’s a long while before your consciousness wanes. ", false);
                                this.defeatEvent(this.devoured);
                            }
                            else {
                                this.scene("\tYou lower your " + this.WEA.Name + ", conveying you no longer want to fight. ", false);
                                if (this.grapple <= 0) {
                                    this.scene("The orca descends on you, blowing more bubbles into your mouth before " + this.enemyt.gender.he + " even realises you’ve given up the fight. ", false);
                                }
                                this.scene(this.capFirst(this.enemyt.gender.he) + " smiles, and gently bites your leg, pulling you down to the ocean floor before lying down on you, pinning you to the sandy floor. " + this.capFirst(this.enemyt.gender.he) + " pins your arms down with " + this.enemyt.gender.his + " fins, before rearing back and taking a huge intake of water. " + "The lasting effects of the pills turn it into air as soon as it enters " + this.enemyt.gender.his + " body, and you can see and hear " + this.enemyt.gender.his + " middle swell up with air before " + this.enemyt.gender.he + " locks lips with you, " + "puffing air into your mouth like the most overenthusiastic act of CPR ever practiced, and your middle springs out with light gas. " + "As your midriff becomes wider and wider, " + this.enemyt.gender.he + " eventually doesn’t need to hold you down, due to the air pushing its way into your arms, making them unbendable and useless. " + "You can see " + this.enemyt.gender.him + " being lifted up by your rising stomach, eventually becoming vertical. " + this.capFirst(this.enemyt.gender.he) + "’s so lost in " + this.enemyt.gender.his + " enjoyment of the situation that " + this.enemyt.gender.he + "’s rather startled when you become too big and " + this.enemyt.gender.he + " rolls off of you. " + "Unfortunately, " + this.enemyt.gender.he + " was the only thing that was holding you down, and you begin to float up. " + this.capFirst(this.enemyt.gender.he) + " quickly recovers and grabs you but your momentum towards the surface makes " + this.enemyt.gender.his + " attempts to stop you futile. " + "You break the surface, and the warm air within you catapults you into the air and makes you begin to drift back towards the shore. " + "The orca surfaces, looking up at you drifting away, and you can see " + this.enemyt.gender.him + " waving at you happily. " + "There’s no malice or mocking in it – " + this.enemyt.gender.he + " evidently thinks you enjoyed this as much as " + this.enemyt.gender.he + " did. " + "You feel pretty helpless as you’re carried away by the tidal breeze. ", false);
                                this.inflateToFloating();
                                this.defeatEvent(this.floating);
                            }
                        }
                        else {
                            if (this.grapple > 0) {
                                this.scene("<li>Inflate</li>", false);
                                this.scene(this.capFirst(this.enemyt.gender.he) + " takes in another breath and puffs again, continuing the assault on your stomach’s capacity. ", false);
                                this.doInflate(5, -8);
                            }
                            if (this.grapple <= 0) {
                                if (this.dXY(1, 3) == 1) {
                                    this.scene("<li>Grab</li>", false);
                                    this.scene("The orca suddenly surges forward, grasping you with " + this.enemyt.gender.his + " fins. ", false);
                                    switch (this.dodge()) {
                                        case true:
                                            this.scene("Fortunately you manage to wriggle free before " + this.enemyt.gender.he + " can get a good grip on you. ", false);
                                            break;
                                        default:
                                            this.scene(this.capFirst(this.enemyt.gender.he) + " abruptly plants " + this.enemyt.gender.his + " lips on yours and begins to exhale air directly into your stomach, making it bulge further. ", false);
                                            this.doInflate(5, -8);
                                            this.grapple = this.enemyt.STR * 3;
                                    }
                                }
                                else {
                                    this.scene("<li>Inflate</li>", false);
                                    this.scene("The orca rears back, takes in a gulp of water, and lets out the converted air as a stream of missile-like bubbles directed straight at your face. " + "You fail to dodge out of the way, and several of the bubbles force their way into your mouth, streaming down your throat and making your belly swell outwards. ", false);
                                    this.doInflate(5, -8);
                                }
                            }
                            if (!this.alive()) {
                                this.scene("\n\tThe constant pressure on your stomach is getting far too much to bear, becoming quite painful, but that’s the least of your concerns right now – " + "You’re floating to the surface of the water and try as you might, you can’t swim back down. " + "The Orca giggles and swims over to you, either uncaring or unaware that you’re quite panicked by this lack of mobility, " + "and locks lips with you, puffing a bit more air into your already overstretched body. " + this.capFirst(this.enemyt.gender.his) + " contact with you only breaks when you’re lifted off the surface of the water completely and begin to drift off. " + "The Orca smiles, before diving back off into the water, treating this like the end of a game you two were playing and not an actual victory against you. ", false);
                                this.inflateToFloating();
                                this.defeatEvent(this.floating);
                            }
                        }
                        break;
                    case this.BlueberrySlime:
                        if (this.surrender) {
                            this.scene("\tYou open your mouth wide and beckon the slime monster in. " + "You don\'t even have to swallow as the slime forcefully pumps itself into you. " + "You rub your " + this.waist() + " stomach as it stretches outward with sentient blueberry sweetness. ", true);
                            this.doConsume(0, this.eHEA, this.eHEA * 0.6);
                            this.doEnemyHealth(-this.eHEA);
                            switch (this.alive()) {
                                case true:
                                    this.winBattle("You slurp up the last of the slime monster down. With nothing left to fight, I guess you can call this a victory? ");
                                    break;
                                case false:
                                    this.scene("\n\tYour stomach keeps growing larger and larger, but there\'s still more blueberry slime to go. " + "You hold onto your aching gut as blueberry goo pumps almost endlessly down your gullet. " + "You slowly lower yourself down and sit on the ground as you feel your stomach stretch painfully bloated. " + "You\'re not sure how much more you can take, but you\'re determined to win this gastronomical battle. If you can just hold out a little longer. " + "You begin losing the test of will though as you become too painfully full to stay awake. " + "You collapse on your back on the ground and pass out even as the rest of the slime monster slides down your throat. ", false);
                                    this.defeatEvent(this.overeating);
                            }
                        }
                        else {
                            if (this.grapple > 0) {
                                this.scene("<li>Feed</li>", false);
                                this.scene("The slime monster begins pushing itself down your throat, occasionaly making room for you to breath. " + "You can\'t help but gulp it down between breaths as it squeezes itself into your stomach. ", false);
                                this.cram = this.dXY(4, 9);
                                this.doEnemyHealth(-this.cram);
                                this.doConsume(0, this.cram, this.cram * 0.5);
                            }
                            else {
                                switch (this.dXY(1, 3)) {
                                    case 1:
                                        this.scene("<li>Feed</li>", false);
                                        this.scene("The slime monster draws back in on itself before spraying a huge blast of slime directly towards your mouth. " + "You can\'t help but swallow several mouthfuls and feel it slide into your gut. " + "Almost as much slime gets on you as in you. " + "It tastes delightfully like blueberries! ", false);
                                        this.cram = this.dXY(5, 9);
                                        this.doEnemyHealth(-this.cram);
                                        missed = this.dXY(2, this.cram - 3);
                                        this.cram = this.cram - missed;
                                        this.chgTempStats("AGI", missed);
                                        this.doConsume(0, this.cram, this.cram * 0.5);
                                        break;
                                    case 2:
                                        this.scene("<li>Feed</li>", false);
                                        this.scene("The slime monster draws back in on itself before firing a blast of slime towards you. " + "If it was aiming at your mouth though, it appears to have missed. ", false);
                                        slimed = this.dXY(2, 6);
                                        this.doEnemyHealth(-slimed);
                                        slimed = slimed - this.dXY(3, slimed);
                                        if (slimed > 0) {
                                            this.chgTempStats("AGI", slimed);
                                            this.scene("The blast still manages to hit your legs, causes them to become sticky and hard to move. ", false);
                                        }
                                        break;
                                    default:
                                        this.scene("<li>Grab</li>", false);
                                        this.scene("The slime monster lunges towards you, ", false);
                                        switch (this.testSkill(30 + this.AGI + this.INT, this.enemyt.AGI + this.enemyt.INT)) {
                                            case true:
                                                this.scene("but you manage to dodge out of its way in time. ", false);
                                                break;
                                            default:
                                                this.scene("engulfing your head and upper body in blue goo. " + "\n", false);
                                                this.grapple = this.eHEA * 0.75;
                                                this.enemyAttack();
                                        }
                                }
                            }
                            if (this.eHEA <= 0) {
                                this.scene("\n\tThe last of the slime monster slides down your throat. ", false);
                                if (this.HEA <= 0) {
                                    this.scene("For a moment you feel a sense of triumph, but you swiftly realize you\'re practically too full to stand. " + "You collapse to the ground and roll over onto your back, your stomach sloshing back and forth, before passing out in an overstuffed coma. ", false);
                                    this.defeatEvent(this.overeating);
                                }
                                if (this.HEA > 0) {
                                    this.winBattle("With nothing left to fight, I guess you can call this a victory? ");
                                }
                            }
                            if (this.eHEA > 0 && !this.alive()) {
                                this.scene("\n\tYou fall to the ground, too painfully full to stand. " + "You wince in pain and grab your achingly bloated gut. " + "When you open your eyes, you look up to see the slime monster rising over you like a tidal wave. " + "You look on in horror as the monster crashes down upon you, cramming it\'s entire mass down your throat. " + "Your stomach starts groaning and gurgling as it stretches massively. ", false);
                                this.doConsume(0, this.eHEA * 0.5, this.eHEA * 0.25);
                                this.defeatEvent(this.overeating);
                            }
                            if (this.AGI <= 0 && this.alive()) {
                                this.scene("\n\tYour " + this.playerSpecies.fur + " is so soaked through with with sticky blue gunk that you have trouble even moving. " + "You eventually find you can\'t move your arms or legs and fall to the ground in a pile of blueberry slime. " + "You look up to see the slime monster rising over you like a tidal wave. " + "You look on in horror as the monster crashes down upon you, cramming it\'s entire mass down your throat. " + "Your stomach starts groaning and gurgling as it stretches massively. ", false);
                                this.doConsume(0, this.eHEA, this.eHEA * 0.5);
                                if (this.HEA <= 0) {
                                    this.defeatEvent(this.overeating);
                                }
                                else {
                                    this.winBattle("However you manage to swallow it all down. " + "Having swallowed the majority of the slime down, the remaining goo you\'re covered in starts sliding off of you and soaking into the ground. Apparently you\'ve won. ");
                                }
                            }
                        }
                        break;
                    case this.DinosaurRider:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou lower yourself to the ground in submission, not wanting to fight anymore. " + "The " + this.enemyt.species.name + " calls out a command, and the tyrannosaurus gives you one last stomping for good measure. " + "You are driven hard into the ground and every part of you hurts as the world spins around you. " + "You can feel a shuffling, and can just make out that the " + this.enemyt.species.name + " has attached some kind of harness to you, and soon you are dragged off, " + "pulled by the enormous tyrannosaurus to destinations unknown. Eventually, you are placed before a robed shaman. \n\t", false);
                                if (this.weight() <= 300) {
                                    this.scene("Two reptillian bystanders haul you onto an altar. ", false);
                                }
                                if (this.weight() <= 600 && this.weight() > 300) {
                                    this.scene("Four reptillian bystanders haul you onto an altar. ", false);
                                }
                                if (this.weight() <= 1000 && this.weight() > 600) {
                                    this.scene("Half a dozen reptillian bystanders haul you haphazardly onto an altar. ", false);
                                }
                                if (this.weight() > 1000) {
                                    this.scene("What feels like an entire village of reptillian bystanders struggle to haul your massive body onto an altar. ", false);
                                }
                                this.scene("From there, the shaman begins to chant, the unfamiliar island language interspersed with unnatural sounding words that you can barely even comprehend, let alone identify. " + "As magic flows around you, the world goes dark, the altar and village seeming to fade away, leaving you with the distinct feeling of falling. " + "\n\tWhen the sensation stops, you find yourself somewhere cold and dark. " + "All you can see is five glowing lights, like sets of eyes staring at you." + " A whispy, deep voice echoes around you in an unnatural tongue, and your pulse quickens, a cold feeling spreading through you. " + "Before you can fully comprehend what is happening, your body dissipates, absorbed by something in the darkness, and you are no more. ", false);
                                this.defeatEvent(this.transformed);
                                break;
                            default:
                                switch (this.dXY(1, 3) == 3 && this.eHEA / this.enemyt.maxHEA > 0.7) {
                                    case false:
                                        switch (this.dXY(1, 2)) {
                                            case 1:
                                                this.scene("<li>Tail Whack</li>", false);
                                                switch (this.dodge()) {
                                                    case true:
                                                        this.scene("The tyrannosaurus lets out a grunt and whips around, but you dodge with it, and its tail harmlessly swipes through the air where you once were. ", false);
                                                        break;
                                                    default:
                                                        this.scene("The tyrannosaurus lets out a grunt, its body whipping around, sending its massive tail crashing into you! ", false);
                                                        this.doHealth(-this.eDMG * 1.3);
                                                }
                                                break;
                                            case 2:
                                                this.scene("<li>Stomp</li>", false);
                                                switch (this.dodge()) {
                                                    case true:
                                                        this.scene("With a growl, the tyrannosaurus lifts up a foot, but you manage to narrowly avoid getting stomped as the ground shudders from the impact. ", false);
                                                        break;
                                                    default:
                                                        this.scene("With a growl, the tyrannosaurus lifts up a foot and brings it down on top of you with earth-shaking force! ", false);
                                                        this.doHealth(-this.eDMG * 1.3);
                                                }
                                        }
                                        break;
                                    default:
                                        this.scene("<li>Javelin Toss</li>", false);
                                        switch (this.dodge() && this.dodge()) {
                                            case true:
                                                this.scene("The tyrannosaurus postures at you, but you manage to keep sight of the rider and evade the javelin " + this.enemyt.gender.he + " throws at you. ", false);
                                                break;
                                            default:
                                                this.scene("The tyrannosaurus postures at you, distracting you just long enough for the rider to nail you with a javelin! ", false);
                                                this.doHealth(-this.eDMG);
                                        }
                                }
                                if (this.eHEA / this.enemyt.maxHEA <= 0.7) {
                                    this.enemyt.description = "The tyrannosaurus rider has been knocked unconcious by your attacks, " + "but that\'s not stopping the tyrannosaurus from continuing its last orders to stomp you into the ground!";
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tThe last attack causes you to stagger and drop to the ground, barely capable of holding yourself upright anymore. " + "As you look up, you see the tyrannosaurus\'s foot coming down on top of you again, and you are smashed into the ground. " + "The earth shakes around you as the tyrannosaurus stomps away, leaving every part of you in immense pain. " + "You figure that this is as good a time for a nap as any, and slip into unconsciousness. ", false);
                                    this.defeatEvent(this.battle);
                                }
                        }
                        break;
                    case this.Drunk:
                        if (this.surrender) {
                            if (this.GLD > 3) {
                                this.scene("\tYou grab a few coins out of your pocket and toss them at the drunk. " + this.capFirst(this.enemyt.gender.he) + " tries to punch the coins out of the air but misses and stumbles. " + this.capFirst(this.enemyt.gender.he) + " staggers for a bit before noticing those were coins you threw at " + this.enemyt.gender.him + " and " + this.enemyt.gender.he + " bends over to pick the coins up. " + this.capFirst(this.enemyt.gender.he) + "\'s almost pulled off " + this.enemyt.gender.his + " feet by " + this.enemyt.gender.his + " sloshing stomach, but " + this.enemyt.gender.he + " manages to regain his balance and stand up. " + "\n\t\"Ah, thanksh you kind " + this.enemyt.gender.sir + ". Believe me thish won\'t go to washte!\" " + this.enemyt.gender.he + " says before drunkenly sloshing off into the night towards the nearest bar, singing a jaunty tune. ", true);
                                this.doGold(-3);
                                currentState = "default";
                                this.endCombat();
                                this.nextButton();
                            }
                            else if (this.GLD > 3) {
                                this.scene("\tYou grab the last of your gold out of your pocket and toss it at the drunk. " + this.capFirst(this.enemyt.gender.he) + " tries to punch the coins out of the air but misses and stumbles. " + this.capFirst(this.enemyt.gender.he) + " staggers for a bit before noticing those were coins you threw at " + this.enemyt.gender.him + " and " + this.enemyt.gender.he + " bends over to pick the coins up. " + this.capFirst(this.enemyt.gender.he) + "\'s almost pulled off " + this.enemyt.gender.his + " feet by " + this.enemyt.gender.his + " sloshing stomach, " + "but " + this.enemyt.gender.he + " manages to regain " + this.enemyt.gender.his + " balance and stand up. " + "\n\t\"What? Thatsh it!\" " + this.enemyt.gender.he + " tosses and beer bottle at your head before " + this.enemyt.gender.he + " wobbles off into the night, " + "complaining about people\'s lack of charity these days. ", true);
                                this.doGold(-this.GLD);
                                currentState = "default";
                                this.endCombat();
                                this.nextButton();
                            }
                            else {
                                this.scene("\tYou search your person for any gold you could toss at the " + this.enemyt.gender.guy + ", but you can only shrug your shoulders when you find none. " + "\"You thinks I\'m fallin\' for that? I know you\'re holdin\' out on me! " + "\n", true);
                                this.surrender = false;
                                this.enemyAttack();
                            }
                        }
                        else {
                            switch (this.dXY(1, 3)) {
                                case 1:
                                    this.scene("<li>Attack</li>", false);
                                    this.scene("The bloated drunk rears " + this.enemyt.gender.his + " fist back and hits you with a haymaker. ", false);
                                    this.doHealth(-this.eDMG);
                                    break;
                                case 2:
                                    this.scene("<li>Attack</li>", false);
                                    this.scene("The swollen drunk appears to be nodding off. You pause for a moment, " + "wondering if " + this.enemyt.gender.he + "\'s passed out when " + this.enemyt.gender.he + " suddenly slumps forward and headbutts you right in the nose. ", false);
                                    this.doHealth(-this.eDMG);
                                    this.doEnemyHealth(-1);
                                    break;
                                default:
                                    this.scene("<li>Attack?</li>", false);
                                    this.scene("The sloshing drunk tries to rear back " + this.enemyt.gender.his + " fist but somehow manages to get " + this.enemyt.gender.his + " hand caught in " + this.enemyt.gender.his + " own shirt sleeve. ", false);
                            }
                            if (!this.alive()) {
                                this.scene("\n\t" + this.enemyt.defeat, false);
                                this.defeatEvent(this.battle);
                            }
                        }
                        break;
                    case this.ExpandedElephant:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tWith an exhausted sigh you lower your arms from their defensive stance ", false);
                                if (this.WEA.Name != this.Weaponless.Name) {
                                    this.scene(", your " + this.WEA.Name + " falling to the ground", false);
                                }
                                this.scene(". The elephant flaps its ears and trumpets in triumph, while you lower your head, an acknowledgement that you are beaten. " + "You lift your " + this.fatness() + " arms out from your sides as if to embrace your fate, and the elephant tramples towards you. " + "As " + this.enemyt.gender.his + " shadow falls across you you close your eyes and are knocked to the ground with a tremendous swipe from its trunk. ", false);
                                this.scene("\n\tExhausted from the fight, a final, contemptuous swipe from the elephant’s trunk sends you sprawling to the ground, too weak to even get up. " + "Something wraps around your ankle and you’re suddenly hoisted upwards, and find yourself dangling upside-down in front of the elephant’s jaws. " + "You swear those lips curve into a smile before " + this.enemyt.gender.he + " stuffs you in greedily, like the biggest peanut in history! " + "It takes some cramming ", false);
                                if (this.waistDiameter() > 15) {
                                    this.scene("- in particular your " + this.waist() + " belly is quite a mouthful - ", false);
                                }
                                this.scene("but the elephant’s mouth and throat both seem to stretch around you to let " + this.enemyt.gender.him + " force you down. " + "You feel the elephant’s trunk shoving on your " + this.fatness() + " butt as " + this.enemyt.gender.he + " attempts to squeeze you in. " + "Finally though, despite your struggles you feel yourself slip all the way into the pachyderm’s highly-elastic gullet, " + "and you slowly surf down " + this.enemyt.gender.his + " throat like a grapefruit that’s been swallowed by a worm until you hit the cramped surroundings of " + this.enemyt.gender.his + " stomach. " + "You feel the sides of the elephant around you quiver, and you realise the creature that’s eaten you must have just let out a huge burp of satisfaction. " + "If it’s any consolation, from the feel of it " + this.enemyt.gender.he + "\'s now beached on " + this.enemyt.gender.his + " stomach, " + "so with a bit of luck you’ll weigh them down for a good long time to come. With a sigh you close your eyes, and try not to think about what’s going to happen to you now... ", false);
                                this.defeatEvent(this.devoured);
                                break;
                            default:
                                switch (this.grapple) {
                                    case 0:
                                        switch (this.dXY(1, 4)) {
                                            case 1:
                                                this.scene("<li>Charge</li>", false);
                                                switch (this.dodge()) {
                                                    case true:
                                                        this.scene("As the elephant’s tusks scythe at you, you dodge away from them, rolling neatly in the dust, safely out of range, for now. " + "The elephant squeals in outrage at being cheated in this way. ", false);
                                                        break;
                                                    default:
                                                        this.scene("Eyes crazed with the feral need to stuff itself, the elephant lowers " + this.enemyt.gender.his + " mighty head and charges you, " + "the impact almost knocking you off your feet! " + "However, the elephant seems a little surprised when " + this.enemyt.gender.he + " rebounds slightly with a rubbery \'BWOING!\', their charge stopped dead. " + "Not half as surprised as you are. " + this.capFirst(this.enemyt.gender.he) + " rears up to try to trample you underfoot, but you manage to dodge back to a safe distance. ", false);
                                                        this.doHealth(-this.eDMG * 0.75);
                                                }
                                                break;
                                            case 2:
                                                this.scene("<li>Gore</li>", false);
                                                switch (this.dodge()) {
                                                    case true:
                                                        this.scene("As the elephant’s tusks scythe at you, you dodge away from them, rolling neatly in the dust, safely out of range, for now. " + "The elephant squeals in outrage at being cheated in this way. ", false);
                                                        break;
                                                    default:
                                                        this.scene("Enraged, the elephant brings " + this.enemyt.gender.his + " head down and tries to spear you on their gleamingly-white tusks. " + "Those at least don’t seem to have become rubbery yet! You manage to dodge enough to avoid being impaled, but one tusk hits your side. ", false);
                                                        this.doHealth(-this.eDMG);
                                                }
                                                break;
                                            case 3:
                                                this.scene("<li>Trumpet</li>", false);
                                                this.scene("Eyes narrowing, the elephant suddenly extends " + this.enemyt.gender.his + " trunk and lets out a deafening trumpeting. " + "You reel back, clutching your ears to try to blot out some of the awful noise. ", false);
                                                if (this.AGI > 3) {
                                                    this.chgTempStats("AGI", this.dXY(1, 3));
                                                }
                                                if (this.d100() < 20) {
                                                    this.chgTempStats("stun", 1);
                                                }
                                                break;
                                            case 4:
                                                this.scene("<li>Grab</li>", false);
                                                switch (this.dodge()) {
                                                    case true:
                                                        this.scene("As the elephant’s tusks scythe at you, you dodge away from them, rolling neatly in the dust, safely out of range, for now. " + "The elephant squeals in outrage at being cheated in this way. ", false);
                                                        break;
                                                    default:
                                                        this.scene("The elephant suddenly lunges forwards. You step back, anticipating another attack, but- too slow! " + this.capFirst(this.enemyt.gender.his) + " bloated trunk lunges out and wraps around your shoulders and stomach, pinning you in place! " + "The trunk tightens its grip on you, and you wheeze- it’s like being in the coils of a grey anaconda! " + "You find yourself face-to-nostrils with the business end of the elephant’s trunk, panting for breath as you struggle. " + "Then with what sounds suspiciously like an evil chuckle, the tip of the trunk jams itself in your gasping mouth! " + "A sudden, shocking blast of air fills your cheeks until they’re straining, and you groan as you feel your chest and middle beginning to bloat out too", false);
                                                        if (this.ARM.Name != this.Armorless.Name) {
                                                            this.scene(", your armour beginning to feel increasingly tight around your stomach and under your armpits", false);
                                                        }
                                                        this.scene(". This stretch-crazy elephant is trying to blow you up like a party balloon! ", false);
                                                        this.doInflate(this.dXY(2, 5), 0);
                                                        this.grapple = this.enemyt.STR * 3;
                                                }
                                        }
                                        break;
                                    default:
                                        this.scene("<li>Blow</li>", false);
                                        this.scene("Behind you you can hear the elephant drawing in a deep breath through " + this.enemyt.gender.his + " mouth. " + "Then you’re given ANOTHER long, hard puff through the trunk, your body slowly being forced to stretch larger and larger, " + "your " + this.waist() + " belly blowing up even larger! ", false);
                                        this.doInflate(this.dXY(2, 5), 0);
                                }
                                if (!this.alive()) {
                                    switch (this.FUL > this.maxFUL) {
                                        case true:
                                            this.scene("\n\tThe pneumatic pachyderm delivers puff after puff into you, swelling you up into the land’s one-and-only " + this.playerSpecies.name + "-balloon! " + "You squirm helplessly, but nothing seems to stop your expansion, " + "and quite soon your arms and legs become helplessly bloated and taut, sticking out from your body at right angles. " + "The elephant blows you up bigger and bigger until you’re a parade-float parody of a " + this.playerSpecies.name + ", vast, round body floating off the ground, " + "\'tethered\' by the elephant’s trunk as " + this.enemyt.gender.he + " empties even more hot air into you! " + "Finally you feel your hide begin to creak and strain, unwilling to stretch any further. ", false);
                                            switch (this.optionsPopping) {
                                                case true:
                                                    this.scene("\n\tBut the elephant seems too far gone to realise this- to your horror you see " + this.enemyt.gender.him + " drawing in yet another deep breath to puff into you! " + "You desperately try to shake your head, but you’re so swollen you can’t budge an inch! " + "You whimper and shut your eyes as the elephant’s trunk trembles with pent up force, and another gout of stretchy-fruit scented air blasts into you! " + "You feel your body trembling with tension as you grudgingly stretch even further, swelling out of shape, " + "no longer even recognisable as " + this.playerSpecies.article + " " + this.playerSpecies.name + " but just a huge round " + this.playerSpecies.furBack + " balloon in the sky. " + "The elephant’s breath seems to go on and on, and as you feel yourself stretch too far you open your eyes, only to see everything white-out... ", false);
                                                    this.defeatEvent(this.overeating);
                                                    break;
                                                default:
                                                    this.scene("\n\tWith a drunken gleam in their eye the elephant puffs one last lungful of air into you that sets you creaking, " + "before your lips finally POP free of their trunk, bobbing above their head like some huge novelty balloon. " + "The elephant reaches up with " + this.enemyt.gender.his + " trunk and BONGs it against your side, setting you tumbling up, up and away, " + "completely unable to stop yourself and terrified that if you let all that air out at once you’ll blow yourself to Bermuda! ", false);
                                                    this.defeatEvent(this.floating);
                                            }
                                            break;
                                        default:
                                            this.scene("\n\tExhausted from the fight, a final, contemptuous swipe from the elephant’s trunk sends you sprawling to the ground, too weak to even get up. " + "Something wraps around your ankle and you’re suddenly hoisted upwards, and find yourself dangling upside-down in front of the elephant’s jaws. " + "You swear those lips curve into a smile before " + this.enemyt.gender.he + " stuffs you in greedily, like the biggest peanut in history! " + "It takes some cramming ", false);
                                            if (this.waistDiameter() > 15) {
                                                this.scene("- in particular your " + this.waist() + " belly is quite a mouthful - ", false);
                                            }
                                            this.scene("but the elephant’s mouth and throat both seem to stretch around you to let " + this.enemyt.gender.him + " force you down. " + "You feel the elephant’s trunk shoving on your " + this.fatness() + " butt as " + this.enemyt.gender.he + " attempts to squeeze you in. " + "Finally though, despite your struggles you feel yourself slip all the way into the pachyderm’s highly-elastic gullet, " + "and you slowly surf down " + this.enemyt.gender.his + " throat like a grapefruit that’s been swallowed by a worm until you hit the cramped surroundings of " + this.enemyt.gender.his + " stomach. " + "You feel the sides of the elephant around you quiver, and you realise the creature that’s eaten you must have just let out a huge burp of satisfaction. " + "If it’s any consolation, from the feel of it " + this.enemyt.gender.he + "\'s now beached on " + this.enemyt.gender.his + " stomach, " + "so with a bit of luck you’ll weigh them down for a good long time to come. " + "With a sigh you close your eyes, and try not to think about what’s going to happen to you now... ", false);
                                            this.defeatEvent(this.devoured);
                                    }
                                }
                        }
                        break;
                    case this.FatJaguar:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou decide to stop fighting and lower yourself to the ground in submission. " + "The jaguar seizes the opportunity, and opens its mouth surprisingly wide, engulfing your head in its maw. " + "Biting down on you, it pulls at you, forcing you deeper into its surprisingly flexible throat and down towards its stomach. " + "Scooping you up in its jaws, it swallows you down bit by bit, eventually making you an oversized lump in its gigantic stomach. " + "You can hear it rumble as it lays down, overburdened by the meal it\'s made of you and taking a rest. " + "Between your injuries and its stomach squeezing at you, you slip into unconsciousness. ", false);
                                this.defeatEvent(this.devoured);
                                break;
                            default:
                                if (this.grapple > 0) {
                                    switch (this.attemptsLeft) {
                                        case 2:
                                            this.scene("The jaguar opens its mouth surprisingly wide, engulfing your head in its maw. ", false);
                                            this.attemptsLeft--;
                                            break;
                                        case 1:
                                            this.scene("Biting down on you, it pulls at you, forcing you deeper into its surprisingly flexible throat and down towards its stomach. ", false);
                                            this.attemptsLeft--;
                                            break;
                                        case 0:
                                            this.scene("Scooping you up in its jaws, it swallows you down bit by bit, eventually making you an oversized lump in its gigantic stomach. " + "You can hear it rumble as it lays down, overburdened by the meal it\'s made of you and taking a rest. " + "Between your injuries and its stomach squeezing at you, you slip into unconsciousness. ", false);
                                            this.defeatEvent(this.devoured);
                                    }
                                }
                                if (this.grapple <= 0) {
                                    switch (this.dXY(1, 3) == 3 && this.HEA / this.maxHEA <= 0.25) {
                                        case true:
                                            this.scene("<li>Pounce</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("The jaguar jumps at you, but you narrowly avoid it. ", false);
                                                    break;
                                                default:
                                                    this.scene("The jaguar jumps on you, knocking you to the ground under it. It\'s going to eat you! ", false);
                                                    this.grapple = this.enemyt.AGI * 3;
                                                    this.attemptsLeft = 2;
                                            }
                                            break;
                                        default:
                                            switch (this.dXY(1, 2)) {
                                                case 1:
                                                    this.scene("<li>Maul</li>", false);
                                                    switch (this.dodge()) {
                                                        case true:
                                                            this.scene("The large cat swipes at you with its claws, but you jump back to avoid it. ", false);
                                                            break;
                                                        default:
                                                            this.scene("The large cat swipes you with its claws, giving you a lovely matching set of scratches! ", false);
                                                            this.doHealth(-this.eDMG);
                                                    }
                                                    break;
                                                case 2:
                                                    this.scene("<li>Bite</li>", false);
                                                    switch (this.dodge()) {
                                                        case true:
                                                            this.scene("The jaguar lunges at you, its jaws snapping, but you keep it from biting you with some deft maneuvering. ", false);
                                                            break;
                                                        default:
                                                            this.scene("The jaguar lunges at you and crunches into you with its powerful jaws! ", false);
                                                            this.doHealth(-this.eDMG * 1.2);
                                                    }
                                            }
                                    }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tThe jaguar\'s last attack proves too much for you, and you collapse in a heap. " + "Unable to fight back, you can only watch as the jaguar opens its mouth surprisingly wide, engulfing your head in its maw. " + "Biting down on you, it pulls at you, forcing you deeper into its surprisingly flexible throat and down towards its stomach. " + "Scooping you up in its jaws, it swallows you down bit by bit, eventually making you an oversized lump in its gigantic stomach. " + "You can hear it rumble as it lays down, overburdened by the meal it\'s made of you and taking a rest. " + "Between your injuries and its stomach squeezing at you, you slip into unconsciousness. ", false);
                                    this.defeatEvent(this.devoured);
                                }
                        }
                        break;
                    case this.FatWolf:
                        if (this.surrender) {
                            this.scene("\tYou surrender to your opponent and " + this.enemyt.gender.he + "\'s quick to rear back and lunge toward you, " + this.enemyt.gender.his + " jaws stretched almost impossibly wide. " + this.capFirst(this.enemyt.gender.he) + " tackles you to the ground and locks " + this.enemyt.gender.his + " mouth around your head. " + this.capFirst(this.enemyt.gender.he) + " slowly and laboriously swallows you whole as you struggle against " + this.enemyt.gender.him + ". " + "You feel yourself slide into " + this.enemyt.gender.his + " large stomach as " + this.enemyt.gender.he + " swallows you down. " + this.capFirst(this.enemyt.gender.his) + " stomach stretches massively to contain you. " + "From the outside, the wolf\'s stomach stretches to the ground and then some. " + "The wolf grunts and rolls onto " + this.enemyt.gender.his + " side as " + this.enemyt.gender.his + " humongous stomach towers several feet over " + this.enemyt.gender.him + ". " + "The wolf lets out a pained but contented sigh as " + this.enemyt.gender.he + " sets about digesting " + this.enemyt.gender.his + " painfully large feast. " + "You can only pray that someone up there is looking out for you. ", true);
                            this.defeatEvent(this.devoured);
                        }
                        else {
                            this.chance = this.dXY(1, 6);
                            if (this.chance == 1 && this.HEA / this.maxHEA < 0.25) {
                                this.scene("<li>Devour</li>", false);
                                switch (this.dodgeInstaDeath()) {
                                    case true:
                                        this.scene("The wolf senses an opportunity and " + this.capFirst(this.enemyt.gender.he) + " rears back and attempts to tackle you, " + this.enemyt.gender.his + " jaws opened wide, but you are able to fight " + this.enemyt.gender.him + " off and throw " + this.enemyt.gender.him + " to the ground. ", false);
                                        break;
                                    default:
                                        this.scene("\tYour opponent sees that you are weakened. " + this.capFirst(this.enemyt.gender.he) + " rears back and lunges toward you, " + this.enemyt.gender.his + " jaws stretched almost impossibly wide. " + "You try to dodge " + this.enemyt.gender.him + ", but " + this.enemyt.gender.he + "\'s too strong and fast for you. " + this.capFirst(this.enemyt.gender.he) + " tackles you to the ground and locks " + this.enemyt.gender.his + " mouth around your head. " + this.capFirst(this.enemyt.gender.he) + " slowly and laboriously swallows you whole as you struggle against " + this.enemyt.gender.him + ". " + "You feel yourself slide into " + this.enemyt.gender.his + " large stomach as " + this.enemyt.gender.he + " swallows you down. " + this.capFirst(this.enemyt.gender.his) + " stomach stretches massively to contain you. " + "From the outside, the wolf\'s stomach stretches to the ground and then some. " + "The wolf grunts and rolls onto " + this.enemyt.gender.his + " side as " + this.enemyt.gender.his + " humongous stomach towers several feet over " + this.enemyt.gender.him + ". " + "The wolf lets out a pained but contented sigh as " + this.enemyt.gender.he + " sets about digesting " + this.enemyt.gender.his + " painfully large feast. " + "You can only pray that someone up there is looking out for you. ", false);
                                        this.defeatEvent(this.devoured);
                                }
                            }
                            else if (this.chance == 2) {
                                this.scene("<li>Wait</li>", false);
                                this.scene("The fat wolf pants to catch " + this.enemyt.gender.his + " breath. ", false);
                            }
                            else if (this.chance == 3 && this.eHEA < this.enemyt.maxHEA) {
                                this.scene("<li>Heal</li>", false);
                                this.scene("The fat wolf pauses to lick " + this.enemyt.gender.his + " wounds. ", false);
                                this.doEnemyHealth(10);
                            }
                            else {
                                this.scene("<li>Attack</li>", false);
                                if (this.dXY(1, 2) == 1) {
                                    this.scene("The fat wolf waddles up and swipes at you with " + this.enemyt.gender.his + " paw, dealing " + this.eDMG + " damage. ", false);
                                }
                                else {
                                    this.scene("The fat wolf licks " + this.enemyt.gender.his + " chops before jumping forward and biting you, dealing " + this.eDMG + " damage. ", false);
                                }
                                this.doHealth(-this.eDMG);
                            }
                            if (!this.alive()) {
                                this.scene("\n\t" + this.enemyt.defeat, false);
                                this.defeatEvent(this.battle);
                            }
                        }
                        break;
                    case this.FatWyvern:
                        switch (this.surrender) {
                            case true:
                                if (this.grapple > 0) {
                                    this.scene("\tYou cease your struggles and submit to your inevitable fate. ", false);
                                }
                                if (this.grapple <= 0) {
                                    this.scene("\tYou fall to your hands and knees, unwilling to continue fighting. " + "The wyvern pauses, marching up to you cautiously. It growls softly for a moment while it comes to understand your surrender, " + "then cranes its neck down, taking your head into its mouth. " + "The wyvern forces itself downward on you, its throat opening as it begins to swallow you head-first. " + "You\'re in up to your chest, your arms pinned to your sides by its stretched mouth before it flips you upwards, " + "its head and neck straightening to allow gravity to assist in pulling you straight for its belly. \n\t", false);
                                }
                                this.scene("It swallows you again and again, pulling you towards its stomach several inches at a time. " + "Your struggles prove fruitless as you simply can\'t get the leverage you need to escape, and as your hips enter its stretched throat, " + "you begin to slide down its wet insides to its dark and cramped stomach. " + "You can hear and feel the beast let out a satisfied rumble as its stomach begins to churn about you. " + "The pressure and lack of air soon cause you to lose consciousness. ", false);
                                this.defeatEvent(this.devoured);
                                break;
                            default:
                                if (this.grapple > 0) {
                                    this.scene("<li>Devour</li>", false);
                                    switch (this.attemptsLeft) {
                                        case 2:
                                            this.scene("You try to break the monster\'s hold on you, but it\'s simply too strong for you to get free. ", false);
                                            this.attemptsLeft--;
                                            break;
                                        case 1:
                                            this.scene("As its mouth comes down on you, you don\'t have the space to get out of the way. ", false);
                                            this.attemptsLeft--;
                                            break;
                                        case 0:
                                            this.scene("You push against it as your head goes into its maw, but are unable to deter it. " + "It forces itself downward on you, its throat opening as it begins to swallow you head-first. " + "You\'re in up to your chest, your arms pinned to your sides by its stretched mouth before it flips you upwards, " + "its head and neck straightening to allow gravity to assist in pulling you straight for its belly. " + "\n\tIt swallows you again and again, pulling you towards its stomach several inches at a time. " + "Your struggles prove fruitless as you simply can\'t get the leverage you need to escape, " + "and as your hips enter its stretched throat, you begin to slide down its wet insides to its dark and cramped stomach. " + "You can hear and feel the beast let out a satisfied rumble as its stomach begins to churn about you. " + "The pressure and lack of air soon cause you to lose consciousness. ", false);
                                            this.defeatEvent(this.devoured);
                                    }
                                }
                                if (this.grapple <= 0) {
                                    switch (this.dXY(1, 5)) {
                                        case 1:
                                            this.scene("<li>Bite</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("The wyvern strikes its head out at you, but you manage to evade it. Its maw makes a crack as its fangs meet in what would\'ve been a painful bite. ", false);
                                                    break;
                                                default:
                                                    this.scene("The wyvern strikes its head out at you, sinking its nasty, pointed fangs into you. " + "As if that wasn\'t bad enough, its bite courses with lightning on top of it! ", false);
                                                    this.doHealth(-this.eDMG);
                                            }
                                            break;
                                        case 2:
                                            this.scene("<li>Breath</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("The wyvern rears its head back, and you take that as a sign to get well out of the way. " + "It begins to spew lightning at you, but it can\'t turn to direct it at you faster than you evade it. ", false);
                                                    break;
                                                default:
                                                    this.scene("The wyvern rears its head back and lets loose a crackling wave of electricity, catching you right in the middle of it. " + "Your body shakes and your teeth grit as it surges painfully through you! ", false);
                                                    this.doHealth(-this.eDMG * 0.8);
                                                    if (this.d100() < 50) {
                                                        this.chgTempStats("stun", 1);
                                                    }
                                            }
                                            break;
                                        case 3:
                                            this.scene("<li>Dive</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    if (this.dXY(1, 2) == 1) {
                                                        this.scene("With an angry growl, the wyvern launches itself into the air, its wings whipping up wind. " + "You have just enough time to react and move before it dives for you, taloned feet first where you were previously. ", false);
                                                    }
                                                    else {
                                                        this.scene("With an angry growl, the wyvern beats its wings and jumps upwards. " + "It makes it about five feet before it slowly sinks back to the ground, panting for breath after failing to carry its own weight.", false);
                                                    }
                                                    break;
                                                default:
                                                    this.scene("With an angry growl, the wyvern launches itself into the air, beating its wings furiously for a few moments, then forces itself forward with surprising speed. " + "Its taloned feet plow into you, knocking you over and both crushing and cutting into you! ", false);
                                                    this.doHealth(-this.eDMG * 1.2);
                                            }
                                            break;
                                        case 4:
                                            this.scene("<li>Tail whip</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("The wyvern takes a half step towards you and swings its body around, but you dodge opposite of its turn and avoid getting lashed by its electrified tail. ", false);
                                                    break;
                                                default:
                                                    this.scene("With a half-step towards you, the wyvern swings its body to the side, and its crackling tail whips around to crash into you. " + "The speed lends it vicious force, and the lightning makes you violently shudder! ", false);
                                                    this.doHealth(-this.eDMG * 0.9);
                                                    if (this.d100() < 34) {
                                                        this.chgTempStats("stun", 1);
                                                    }
                                            }
                                            break;
                                        case 5:
                                            this.scene("<li>Grab</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("The wyvern suddenly charges at you, and you immediately hurl yourself to the side, " + "hitting the ground and rolling to a stand as its wings close around where you once stood, the violent motion making a loud whoosh. ", false);
                                                    break;
                                                default:
                                                    this.scene("The wyvern suddenly charges forth, clasping its winged arms down around you. " + "Its intentions become clear as it opens its mouth wide, rearing its head back in preparation to lunge down upon you and swallow you whole! ", false);
                                                    this.grapple = this.enemyt.STR * 3;
                                                    this.attemptsLeft = 2;
                                            }
                                    }
                                }
                                if (!this.alive() && this.grapple <= 0) {
                                    this.scene("\n\tYou fall to the ground, the beast\'s last attack bowling you over and knocking you on your back. " + "You groan and lift your head to see that it is wasting no time; the wyvern has scooped your legs into its mouth with its tongue, and is quickly swallowing you into its throat. " + "Pulling its head back with you in it, it lunges forward onto you, securing your body in its teeth as it forces you down its throat. " + "After a few more of these, it marches forward slowly, its momentum causing you to slide into its maw and towards its stomach. " + "When you are entirely in its mouth, it lifts its head upward, gravity and squeezing muscles sending you into its belly. " + "You lose consciousness from your painful injuries and the beast\'s crushing stomach. ", false);
                                    this.defeatEvent(this.devoured);
                                }
                        }
                        break;
                    case this.FeederAnt:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou decide to stop resisting and embrace the feeding that the ant wants to give you, lowering your arms and opening your mouth wide. " + "The feeder ant responds by putting the tip of its thorax into your mouth, " + "and you are almost immediately overwhelmed by the immense amount of honey that flows from it and down your throat. " + "Your stomach balloons out, gurgling and groaning as it fills to enormous size. ", false);
                                this.doConsume(0, 500, 300);
                                this.statusSTRBuff = 300;
                                this.statusSTRBuffPower = this.statusSTRBuffPower + 30;
                                this.updateStats();
                                switch (this.HEA >= 1) {
                                    case true:
                                        this.scene("The creature\'s thorax thins as your belly swells, and you can feel the magic in its honey making you stronger. " + "Both your stomach and your muscles are significantly bigger when it pulls away from you. " + "You give your " + this.waist() + " belly a gentle rubbing to attempt to alleviate some of its pressure, " + "then notice that all the insects have frozen up around you, stopping their activities and just watching in confusion. " + "It appears that they didn\'t expect you to still be mobile and have no idea what to do. " + "You take the opportunity brought on by the confusion and haul your massive new bulk back out of the cave and to the mountains. ", false);
                                        this.locationUpdate(this.MountainHub);
                                        this.winBattle("");
                                        break;
                                    default:
                                        this.scene("\n\tAs gallon follows gallon, you feel more and more painfully full. " + "Even the increased strength you feel coursing through you isn\'t enough to keep you on your feet as you are stuffed well beyond what should be making you burst. " + "You fall forward onto your massive belly, groaning in pain as the ant unloads the last of its contents into you. " + "In spite of your great new strength, you can\'t work up the energy to get away. " + "Which is unfortunate for you, because as the feeder ant walks away, another moves up to take its place. " + "You are helpless as your belly is made to swell to tremendous size by another... ", false);
                                        this.doConsume(0, 500, 300);
                                        this.chgTempStats("STR", -30);
                                        this.scene("And another... ", false);
                                        this.doConsume(0, 500, 300);
                                        this.chgTempStats("STR", -30);
                                        this.scene("And another... ", false);
                                        this.doConsume(0, 500, 300);
                                        this.chgTempStats("STR", -30);
                                        this.scene("And another. By the time they\'re done, your massive gut is the size of the passageway you came down, and in spite of how enormous your muscles have become, " + "you can do little but flail your limbs about, unable to move the tremendous load of honey housed inside you. " + "You have little time to contemplate this before a pack of worker insects start to roll you towards what appears to be an offshoot of the chamber. " + "When you\'re inside it, however, it becomes apparent that you have been shoved into a hollowed out comb, as you feel the waxy walls all around you. " + "As the insects finish jamming you into the chamber, a few of the bees begin to disgorge wax on you. " + "Where it makes contact with your " + this.playerSpecies.fur + ", there\'s an odd itching and stiffening that slowly spreads through you. " + "When it coats your limbs, you can only watch as you lose the ability to move, your body coming to match the wax\'s consistency. " + "The realization dawns on you that you are becoming a storage chamber for all the honey that was forced into you, but before you have time to ponder the implications, " + "the change is complete, and you lose all sense of being. ", false);
                                        this.defeatEvent(this.transformed);
                                }
                                break;
                            default:
                                if (this.grapple > 0) {
                                    this.scene("<li>Feed</li>", false);
                                    this.scene("A stream of thick honey gushes into your mouth, and you automatically find yourself swallowing it. It is incredibly sweet, and you feel a bit stronger... ", false);
                                    this.chgTempStats("STR", -1);
                                    this.cram = this.dXY(6, 9);
                                    this.doConsume(0, this.cram, this.cram * 0.66);
                                    if (this.HEA <= 0) {
                                        this.scene("As the last bit of honey is forced down your throat, the pressure and sweetness become too much, " + "and even the magical boon to your strength can\'t keep you fighting. ", false);
                                    }
                                }
                                if (this.grapple <= 0) {
                                    switch (this.dXY(1, 3)) {
                                        case 1:
                                            this.scene("<li>Bash</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("The creature swings its wobbly thorax at you from overhead. You dodge to the side, and it makes a squishy sound as it pounds down where you once stood. ", false);
                                                    break;
                                                default:
                                                    this.scene("The creature swings its massively swollen thorax right on top of you. It\'s soft, but the floor that you are smashed into is decidedly not. ", false);
                                                    this.doHealth(-this.eDMG);
                                            }
                                            break;
                                        case 2:
                                            this.scene("<li>Pin</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("The ant-like monster suddenly thrusts its thorax at you, but you slip out from the side of it before it can press you against the floor. ", false);
                                                    break;
                                                default:
                                                    this.scene("The ant-like beast suddenly pushes its thorax against you and forces you down to the ground. " + "The squishy bulk of it squeezes around you like a very big water balloon being held against you very insistently. " + "With a bit of wriggling, the tip of its thorax is forced into your mouth. ", false);
                                                    this.grapple = this.enemyt.STR * 3;
                                                    this.enemyAttack();
                                            }
                                            break;
                                        case 3:
                                            this.scene("<li>Goop</li>", false);
                                            this.scene("The feeder ant suddenly exudes some of its honey, making a sticky mess of you. It hardens slightly, making movement more difficult! ", false);
                                            this.chgTempStats("AGI", this.dXY(6, 9));
                                    }
                                }
                                if (!this.alive() || this.AGI <= 0) {
                                    this.scene("\n\tThe fight is thoroughly taken out of you by the ant-like creature\'s last attack, and you are left groaning face-first on the ground. " + "It slides the tip of its thorax under you and uses it to lift and press you against a wall before working it into your mouth. " + "You can barely lift your hands to hold onto its squishy bulk as it begins to pump its honey into your mouth and down your throat. " + "You are leaned up against the wall in a bruised heap as the beast\'s thorax thins, its contents finding a home in your massively swelling stomach. " + "You can feel yourself getting stronger, but it doesn\'t ease the pain of trying to move, " + "and it certainly doesn\'t help the tight fullness of your belly as it bulges well beyond what you thought it was normally capable of holding. ", false);
                                    this.doConsume(0, 500, 300);
                                    this.chgTempStats("STR", -30);
                                    this.scene("As you lose consciousness, you sink down to the ground, held up only by your massive gut as the ant-like creature trots off, its thorax slim. " + "The last thing you see is another four lining up in front of you, all of them filled to almost completely spherical shape with honey. ", false);
                                    this.doConsume(0, 2000, 1200);
                                    this.scene("When you regain consciousness, you find your stomach significantly bigger than even the stuffing you received had left you, " + "and if you weren\'t being rolled along the waxy floor, you might even be able to lift it with how incredibly strong you feel. " + "Unfortunately, before you can figure out how to use your new strength to escape, you\'re shoved into a small chamber. " + "After packing you in tightly, some of the bee-like creatures begin covering you with a waxy substance. " + "Where it makes contact with your " + this.playerSpecies.fur + ", there\'s an odd itching and stiffening that slowly spreads through you. " + "When it coats your limbs, you can only watch as you lose the ability to move, your body coming to match the wax\'s consistency. " + "The realization dawns on you that you are becoming a storage chamber for all the honey that was forced into you, " + "but before you have time to ponder the implications, the change is complete, and you lose all sense of being. ", false);
                                    this.chgTempStats("STR", -150);
                                    this.defeatEvent(this.transformed);
                                }
                        }
                        break;
                    case this.fruitDryad:
                        if (this.surrender) {
                            if (this.HEA > 0) {
                                this.scene("\tYou relax and take in the music, ignoring the sensation throughout your body as you swell and change color. " + "Slowly and steadily you swell outward as the dryad serenades you with the haunting and beautiful melody. " + "Your legs fill out first, becoming thick and heavy as your stomach grows outward. " + "The effect works it’s way up your body, all the while your " + this.playerSpecies.fur + " changing to a vivid blue. " + "Soon it reaches your arms and face, which fill out and sag, becoming heavy and sloshy. From here it intensifies, and your body begins rapidly expanding. " + "Your legs are forced apart as they become as thick as tree trunks while your belly surges out like a tide. " + "Pretty soon, even the slightest motion causes you to wobble, and you finally lose balance, toppling backward. " + "Your body wobbles back and forth like a great tide as it becomes completely blue. ", false);
                                this.stuffToBursting();
                                this.scene("You begin to think that maybe, just maybe, you\'re in trouble, as you watch your body grow. " + "When your stomach is " + this.waist() + ", the pressure becomes too much for you and you pass out. ", false);
                            }
                            this.randomNPC(1);
                            this.doConsume(0, this.STO + 4000, 0);
                            this.scene("\n\tAs you begin to regain consciousness, you become aware of an extremely bloated sensation all over. " + "As you try to shift, you can only feel the sensation of muscle working, but you get no sense of motion out of any part of your body. " + "You are almost afraid to open your eyes, but realize that there is no escaping it. " + "As color floods back into the world, you notice an overwhelming amount of blue. You are confused for a moment before you realize that what you are looking at is yourself. " + "You don’t recognize yourself, as you resemble little more then an enormous blimp. Every feature about you is bloated beyond anything you thought capable. " + "Your cheeks resemble beach balls for all their size. " + "Your hands and fingers are thick little balls incapable of movement, and your arms and legs are little more than tires half swallowed up by your enormously round body. " + "Your stomach and chest have blown outward, until they are spherical in nature, encasing your limbs in a vice-like grip which makes any attempt at motion an impossibility. " + "Honestly with your vibrant blue hue, you resemble a giant piece of fruit more then anything else. " + "You attempt a shout, but only get a muffled mumble, your head too bloated to talk, let alone make such a yell. " + "\n\tYour eyes dart about, for the first time taking in your surroundings after the shock of finding yourself in this state. " + "Wherever you are, it seems very green. There are trees plants and vines everywhere, though the configuration seem a little more structured then one would expect from wild undergrowth. " + "The vines above form a natural cathedral ceiling, trees acting as pillars, while their roots carpet the ground, forming tiers around the central feature of the area. " + "The middle of the cathedral is a pit that all the roots and vines seem to gravitate towards. " + "How deep it is you can’t tell, as it is filled with some sort of multi-colored liquid that swirls about in different shades of the rainbow. " + "\n\tYou\'re also not the only one here. Littered about, you see a number of giant fruit-like spheres of different colors. " + "You suddenly realize you’re not the only one who has ended up in this predicament. Everyone seems to be at different stages of bloat. " + "You see a " + this.NPC1.species.name + " that seems halfway full, gut spreading outward over the ground like a water balloon with short limbs wobbling helplessly, " + "while others, like you are little more then rounded balls. " + "Then there are the Dryads, many of them wandering about and inspecting their \'harvest\' of helpless fruit people. " + "Occasionally, you see them singing to a fur, and watch them slowly fill out. " + "Then you see the dryad that you had faced, inspecting you. \"You look about ripe,\" she says, before she begins chanting once more. " + "\n\tAs the chanting begins again, you feel the pressure in you intensify, as if it could get any worse, " + "and your features swell even more, swallowing up your limbs and almost swallowing your face in the folds of your cheeks. " + "That is not the only thing happening, as the vines in the ceiling come alive, " + "snaking their way through the air towards you, encircling you and lifting you even as you bloat outward, your insides sloshing violently. ", false);
                            if (this.optionsPopping) {
                                this.scene("It carries you toward the center pit, holding you there as the pressure in you builds tremendously. " + "You feel a gurgle in the pit of your stomach, and a strange stretching sound like an overfilled balloon. " + "Your cheeks start enveloping your head as you feel liquid rising from your throat. " + "You taste juice as it begins dribbling from your mouth and nose, even as you begin tearing up, you see the same color flowing from your tear ducks. " + "\n\tThe pressure surges even more, and the flow of juice from your orifices, intensifies, as your body swells outwards one last time, and the vines drop you. " + "You fall, your body suddenly springing leaks, juice spraying violently before you hit the surface of the juice filled pit, exploding in a tsunami of juice like a water balloon. ", false);
                                this.defeatEvent(this.battle);
                            }
                            else {
                                this.scene("It carries you toward the center pit, wrapping around you again and again before tilting you towards the pit, where you can see the colored liquid swirling. " + "You pick up a sweet fruity smell, and recognize it as juice. " + "You view suddenly becomes blocked as your swelling body envelops your head, and just as you think you are about to burst, the vines start squeezing. " + "\n\tThe vines around your middle start tightening, both ends of you bulging as your inside are force both ways. " + "You feel the pressure building even more, before the vine at you bottom end start tightening as well, forcing everything one way towards your top end. " + "You feel a surge of liquid flowing outwards, and finally, it erupts from your mouth like a geyser, shooting into the pit like a fire hose of blue water. " + "You taste a huge amount of fruit juice as it if forced out of your body, the vines constricting gradually as you feel the unbearable internal pressure lesson slowly. " + "Like a deflating balloon, your body sags and shrinks, slowly starting to regain some of its features. " + "And the vines squeeze more and more out of you, juicing you until the flow starts to recede, first to a slow stream, then a trickle. " + "Finally, only a few drops fall from your mouth, even as the vines shake you downward. Seemingly satisfied, it deposits you onto the ground, disorientated and shaking on the ground nearby. " + "Exhausted, you fall over and pass out. ", false);
                                this.defeatEvent(this.battle);
                            }
                        }
                        else {
                            loop51:
                                    switch (this.dXY(1, 3)) {
                                        case 1:
                                            this.scene("<li>Charm</li>", false);
                                            this.scene("The Dryad turns its gaze on you batting her eyelashes as she looks you in the eyes as she continues her song, which becomes exceedingly sweet. ", false);
                                            switch (this.testSkillRange(this.INT + 50, this.enemyt.INT, 25, 90)) {
                                                case true:
                                                    this.scene("Unphased by the haunting innocence, you continue your assault. " + "Though you feel the gurgle in your stomach as the melody continues working it’s magic on you, and you continue changing blue as your body swells. ", false);
                                                    break;
                                                default:
                                                    this.scene("As you bare your " + this.WEA.Name + " at her, you feel the sudden compulsion to stop, and find yourself reluctant to harm this innocent creature, " + "even as your body continues to swell and change blue, growing bigger and heavier by the moment. ", false);
                                                    this.chgTempStats("stun", 1);
                                            }
                                            this.doConsume(0, this.dXY(2, 4), 1);
                                            switch (this.dXY(1, 3)) {
                                                case 1:
                                                    this.chgTempStats("END", 1);
                                                    this.chgTempStats("STR", 1);
                                                    break loop51;
                                                case 2:
                                                    this.chgTempStats("STR", 1);
                                                    this.chgTempStats("AGI", 1);
                                                    break loop51;
                                                case 3:
                                                    this.chgTempStats("AGI", 1);
                                                    this.chgTempStats("END", 1);
                                                    break loop51;
                                                default:
                                                    break loop51;
                                            }
                                        default:
                                            this.scene("<li>Charm</li>", false);
                                            this.scene("The Dryad turns its gaze on you batting her eyelashes as she looks you in the eyes as she continues her song, which becomes exceedingly sweet. ", false);
                                            switch (this.testSkillRange(this.INT + 50, this.enemyt.INT, 25, 90)) {
                                                case true:
                                                    this.scene("Unphased by the haunting innocence, you continue your assault. " + "Though you feel the gurgle in your stomach as the melody continues working it’s magic on you, and you continue changing blue as your body swells. ", false);
                                                    break;
                                                default:
                                                    this.scene("As you bare your " + this.WEA.Name + " at her, you feel the sudden compulsion to stop, and find yourself reluctant to harm this innocent creature, " + "even as your body continues to swell and change blue, growing bigger and heavier by the moment. ", false);
                                                    this.chgTempStats("stun", 1);
                                            }
                                            this.doConsume(0, this.dXY(2, 4), 1);
                                            switch (this.dXY(1, 3)) {
                                                case 1:
                                                    this.chgTempStats("END", 1);
                                                    this.chgTempStats("STR", 1);
                                                    break loop51;
                                                case 2:
                                                    this.chgTempStats("STR", 1);
                                                    this.chgTempStats("AGI", 1);
                                                    break loop51;
                                                case 3:
                                                    this.chgTempStats("AGI", 1);
                                                    this.chgTempStats("END", 1);
                                                    break loop51;
                                                default:
                                                    break loop51;
                                            }
                                    }
                            this.scene("<li>Chant</li>", false);
                            this.scene("The Dryad continues its beautiful melody, which echoes about like a heavenly choir. " + "You feel the sensation in your stomach growing at a steady pace, as you continue turning blue. " + "You body swells with a gurgling slosh, your features filling out as whatever strange power continues its work on you. " + "You feel heavier and slower from the unaccustomed weight and pressure this strange effect is having on your body. ", false);
                            this.doConsume(0, this.dXY(2, 4), 1);
                            switch (this.dXY(1, 3)) {
                                case 1:
                                    this.chgTempStats("STR", 1);
                                    this.chgTempStats("AGI", 2);
                                    break;
                                case 2:
                                    this.chgTempStats("AGI", 1);
                                    this.chgTempStats("END", 2);
                                    break;
                                case 3:
                                    this.chgTempStats("END", 1);
                                    this.chgTempStats("STR", 2);
                            }
                            if (!this.alive() || this.AGI <= 0 || this.STR <= 0 || this.END <= 0) {
                                this.scene("\n\tAs the Dryads song continues to echo around you, ", false);
                                if (this.HEA <= 0) {
                                    this.scene("the pressure in your swelling gut starts to overpower you, sending you to your knees as you clutch at it, as if you could stop it from getting any fuller by doing so. " + "Even so the Dryad doesn’t let up, her features looking triumphant, reflecting in her chant as it picks up tempo. " + "The pressure builds and you fall to the ground, losing consciousness as you continue swelling. " + "Your " + this.playerSpecies.fur + " becomes completely blue before blacking out completely. ", false);
                                }
                                else if (this.AGI <= 0) {
                                    this.scene("you feel yourself swelling even more, the sensation of heavy thickness weighing on you. " + "As you try to move, you find resistance daunting every attempt to bend your extremities as they swell and grow beyond your now limited dexterity. " + "Even your face feels like its bloated and tight as your " + this.playerSpecies.fur + " turns a complete shade of blue. " + "You frantically try to cause some motion in your body, but only manage to roll onto your back, the pressure in your body building as you swell and swell. " + "You are helpless to listen to the Dryad chant and watch as your waist becomes " + this.waist() + ", before finally the pressure overwhelms you and you lose consciousness. ", false);
                                }
                                else if (this.STR <= 0) {
                                    this.scene("you feel yourself swelling even more becoming heavier and heavier as you do. " + "As you try to muster your next move, your movements become sluggish, slowing to a crawl before you find your limbs weighing down on you. " + "Panicking, you pour all your energy into budging yourself, only to find yourself losing ground, your movements managing only to send waves of rolling flab through your *fur, etc*. " + "You find yourself rolling onto your back, pinned underneath the weight. " + "Your frantic motions generate less and less of an effect, until even all of your might doesn’t cause even a ripple through your bloated frame. " + "You are helpless to listen to the Dryad chant and watch as you grow larger and larger with each passing moment, your " + this.playerSpecies.fur + " becoming completely blue. " + "When your waist is " + this.waist() + ", you finally pass out from the pressure. ", false);
                                }
                                else if (this.END <= 0) {
                                    this.scene("you feel yourself swelling even more, weighing you down and making every move difficult. " + "You find yourself soft of breath, your sagging arms and legs sweating as their load only grow greater with every moment. " + "Even as you try to make your next move, your limb rebel, and you sag onto your back like a bloated water balloon, panting as your frame continues to spread. " + "Even as you try to muster the energy to try and move, any attempt just leaves you lightheaded and panting. " + "You are helpless to listen to the Dryad chant watch as your body continues to bloat outward, your " + this.playerSpecies.fur + " becoming completely blue. " + "When you become " + this.waist() + ", the pressure is finally to much for you, and you pass out. ", false);
                                }
                                this.randomNPC(1);
                                this.doConsume(0, this.STO + 4000, 0);
                                this.scene("\n\tAs you begin to regain consciousness, you become aware of an extremely bloated sensation all over. " + "As you try to shift, you can only feel the sensation of muscle working, but you get no sense of motion out of any part of your body. " + "You are almost afraid to open your eyes, but realize that there is no escaping it. " + "As color floods back into the world, you notice an overwhelming amount of blue. You are confused for a moment before you realize that what you are looking at is yourself. " + "You don’t recognize yourself, as you resemble little more then an enormous blimp. Every feature about you is bloated beyond anything you thought capable. " + "Your cheeks resemble beach balls for all their size. " + "Your hands and fingers are thick little balls incapable of movement, and your arms and legs are little more than tires half swallowed up by your enormously round body. " + "Your stomach and chest have blown outward, until they are spherical in nature, encasing your limbs in a vice-like grip which makes any attempt at motion an impossibility. " + "Honestly with your vibrant blue hue, you resemble a giant piece of fruit more then anything else. " + "You attempt a shout, but only get a muffled mumble, your head too bloated to talk, let alone make such a yell. " + "\n\tYour eyes dart about, for the first time taking in your surroundings after the shock of finding yourself in this state. " + "Wherever you are, it seems very green. There are trees plants and vines everywhere, though the configuration seem a little more structured then one would expect from wild undergrowth. " + "The vines above form a natural cathedral ceiling, trees acting as pillars, while their roots carpet the ground, forming tiers around the central feature of the area. " + "The middle of the cathedral is a pit that all the roots and vines seem to gravitate towards. " + "How deep it is you can’t tell, as it is filled with some sort of multi-colored liquid that swirls about in different shades of the rainbow. " + "\n\tYou\'re also not the only one here. Littered about, you see a number of giant fruit-like spheres of different colors. " + "You suddenly realize you’re not the only one who has ended up in this predicament. Everyone seems to be at different stages of bloat. " + "You see a " + this.NPC1.species.name + " that seems halfway full, gut spreading outward over the ground like a water balloon with short limbs wobbling helplessly, " + "while others, like you are little more then rounded balls. " + "Then there are the Dryads, many of them wandering about and inspecting their \'harvest\' of helpless fruit people. " + "Occasionally, you see them singing to a fur, and watch them slowly fill out. " + "Then you see the dryad that you had faced, inspecting you. \"You look about ripe,\" she says, before she begins chanting once more. " + "\n\tAs the chanting begins again, you feel the pressure in you intensify, as if it could get any worse, " + "and your features swell even more, swallowing up your limbs and almost swallowing your face in the folds of your cheeks. " + "That is not the only thing happening, as the vines in the ceiling come alive, " + "snaking their way through the air towards you, encircling you and lifting you even as you bloat outward, your insides sloshing violently. ", false);
                                if (this.optionsPopping) {
                                    this.scene("It carries you toward the center pit, holding you there as the pressure in you builds tremendously. " + "You feel a gurgle in the pit of your stomach, and a strange stretching sound like an overfilled balloon. " + "Your cheeks start enveloping your head as you feel liquid rising from your throat. " + "You taste juice as it begins dribbling from your mouth and nose, even as you begin tearing up, you see the same color flowing from your tear ducks. " + "\n\tThe pressure surges even more, and the flow of juice from your orifices, intensifies, as your body swells outwards one last time, and the vines drop you. " + "You fall, your body suddenly springing leaks, juice spraying violently before you hit the surface of the juice filled pit, exploding in a tsunami of juice like a water balloon. ", false);
                                    this.defeatEvent(this.battle);
                                }
                                else {
                                    this.scene("It carries you toward the center pit, wrapping around you again and again before tilting you towards the pit, where you can see the colored liquid swirling. " + "You pick up a sweet fruity smell, and recognize it as juice. " + "You view suddenly becomes blocked as your swelling body envelops your head, and just as you think you are about to burst, the vines start squeezing. " + "\n\tThe vines around your middle start tightening, both ends of you bulging as your inside are force both ways. " + "You feel the pressure building even more, before the vine at you bottom end start tightening as well, forcing everything one way towards your top end. " + "You feel a surge of liquid flowing outwards, and finally, it erupts from your mouth like a geyser, shooting into the pit like a fire hose of blue water. " + "You taste a huge amount of fruit juice as it if forced out of your body, the vines constricting gradually as you feel the unbearable internal pressure lesson slowly. " + "Like a deflating balloon, your body sags and shrinks, slowly starting to regain some of its features. " + "And the vines squeeze more and more out of you, juicing you until the flow starts to recede, first to a slow stream, then a trickle. " + "Finally, only a few drops fall from your mouth, even as the vines shake you downward. " + "Seemingly satisfied, it deposits you onto the ground, disorientated and shaking on the ground nearby. " + "Exhausted, you fall over and pass out. ", false);
                                    this.defeatEvent(this.battle);
                                }
                            }
                        }
                        break;
                    case this.GluttonSeparatist:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou lower yourself to the ground, submitting before your opponent. " + this.capFirst(this.enemyt.gender.he) + " grumbles angrily and bashes the back of your head with the butt of " + this.enemyt.gender.his + " spear, sending you sprawling to the ground and the world spinning. ", false);
                                this.doHealth(-this.maxHEA * 0.25);
                                if (this.HEA < 1) {
                                    this.HEA = 1;
                                }
                                switch (this.weight() < 600) {
                                    case true:
                                        this.scene("\n\tYou are dragged off, eventually placed before a robed shaman. ", false);
                                        if (this.weight() <= 300) {
                                            this.scene("Two reptillian bystanders haul you onto an altar. ", false);
                                        }
                                        if (this.weight() > 300) {
                                            this.scene("Four reptillian bystanders haul you onto an altar. ", false);
                                        }
                                        this.scene("From there, the shaman begins to chant, the unfamiliar island language interspersed with unnatural sounding words that you can barely even comprehend, let alone identify. " + "As magic flows around you, the world goes dark, the altar and village seeming to fade away, leaving you with the distinct feeling of falling. " + "\n\tWhen the sensation stops, you find yourself somewhere cold and dark. All you can see is five glowing lights, like sets of eyes staring at you. " + "A whispy, deep voice echoes around you in an unnatural tongue, and your pulse quickens, a cold feeling spreading through you. " + "Before you can fully comprehend what is happening, your body dissipates, absorbed by something in the darkness, and you are no more. ", false);
                                        this.defeatEvent(this.transformed);
                                        break;
                                    default:
                                        this.scene("\n\tYou can hear the " + this.enemyt.species.name + " let out a strained grunt as " + this.enemyt.gender.he + " pulls at your body, clearly attempting to drag you somewhere, " + "but after a few minutes, " + this.enemyt.gender.he + " has only managed to move your heavy body a couple of inches. " + "With a disgusted growl, the " + this.enemyt.species.name + " throws " + this.enemyt.gender.his + " hands up in annoyance and marches away. " + "You wait a little while before slowly getting back to your feet, worse for the wear, but at least still in once piece. ", false);
                                        this.endCombat();
                                        currentState = "default";
                                        this.nextButton();
                                }
                                break;
                            default:
                                switch (this.dXY(1, 3)) {
                                    case 1:
                                        this.scene("<li>Jab</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " jabs at you with " + this.enemyt.gender.his + " spear, but you deftly evade.", false);
                                                break;
                                            default:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " jabs at you with " + this.enemyt.gender.his + " spear, catching you with the pointed tip! ", false);
                                                this.doHealth(-this.eDMG * 1.2);
                                        }
                                        break;
                                    case 2:
                                        this.scene("<li>Stick Beat</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " suddenly swipes " + this.enemyt.gender.his + " spear at you, intending to bash you with the shaft, but you carefully duck out of the way. ", false);
                                                break;
                                            default:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " suddenly swipes " + this.enemyt.gender.his + " spear at you, the shaft of it making a solid thwack as it slaps hard into you! ", false);
                                                this.doHealth(-this.eDMG);
                                        }
                                        break;
                                    case 3:
                                        this.scene("<li>Body Slam</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene("Suddenly the fat " + this.enemyt.species.name + " rushes at you and jumps into the air, but you keep well clear as " + this.enemyt.gender.he + " crashes down onto the ground! " + this.capFirst(this.enemyt.gender.he) + " slowly gets back up to face you again, clearly worse for wear after that. ", false);
                                                if (this.d100() < 33) {
                                                    this.scene("Looks like " + this.enemyt.gender.he + " is a bit dizzy, to boot. ", false);
                                                    this.eStatusStunTime = 1;
                                                }
                                                break;
                                            default:
                                                this.scene("Suddenly the fat " + this.enemyt.species.name + " rushes at you and jumps into the air, " + this.enemyt.gender.his + " weight crashing down on you as you are both sent sprawling! ", false);
                                                this.doHealth(-this.eDMG);
                                                if (this.d100() < 33) {
                                                    this.scene("The impact makes your head spin! ", false);
                                                    this.chgTempStats("stun", 1);
                                                }
                                        }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tThe " + this.enemyt.species.name + "\'s last attack sends you to the ground hard, and try as you might, you can\'t pick yourself back up. ", false);
                                    switch (this.weight() < 600) {
                                        case true:
                                            this.scene("The painful beating causes you to lose consciousness, with the last thing you feel being a sense of being dragged somewhere. " + "\n\tWhen you awaken later, you are somewhere cold and dark. All you can see is five glowing lights, like sets of eyes staring at you. " + "A whispy, deep voice echoes around you in an unnatural tongue, and your pulse quickens, a cold feeling spreading through you. " + "Before you can fully comprehend what is happening, your body dissipates, absorbed by something in the darkness, and you are no more. ", false);
                                            this.defeatEvent(this.transformed);
                                            break;
                                        default:
                                            this.scene("The painful beating causes you to lose consciousness, " + "and the last thing you can sense is the " + this.enemyt.species.name + " grunting as it attempts to drag you along the ground. ", false);
                                            this.defeatEvent(this.battle);
                                    }
                                }
                        }
                        break;
                    case this.GorgedCheetah:
                        if (this.surrender) {
                            this.scene("\tYour opponent senses " + this.enemyt.gender.his + " opportunity. " + this.capFirst(this.enemyt.gender.he) + " rears back and lunges toward you, " + this.enemyt.gender.his + " jaws stretched almost impossibly wide. " + this.capFirst(this.enemyt.gender.he) + " tackles you to the ground and locks " + this.enemyt.gender.his + " mouth around your head. " + this.capFirst(this.enemyt.gender.he) + " slowly and laboriously swallows you whole. " + "You feel yourself slide into " + this.enemyt.gender.his + " large stomach as " + this.enemyt.gender.he + " swallows you down. " + this.capFirst(this.enemyt.gender.his) + " stomach stretches massively to contain you. " + "From the outside, the cheetah\'s stomach stretches to the ground and then some. " + "The cheetah grunts and rolls onto " + this.enemyt.gender.his + " side as " + this.enemyt.gender.his + " humongous stomach towers several feet over " + this.enemyt.gender.him + ". " + "The cheetah lets out a pained but contented sigh as " + this.enemyt.gender.he + " sets about digesting " + this.enemyt.gender.his + " painfully large feast. " + "You can only pray that someone up there is looking out for you. ", true);
                            this.defeatEvent(this.devoured);
                        }
                        else {
                            this.chance = this.dXY(1, 4);
                            if (this.chance == 1 && this.HEA < 20) {
                                this.scene("<li>Devour</li>", false);
                                switch (this.dodgeInstaDeath()) {
                                    case true:
                                        this.scene("Your opponent believes you are weakened. " + this.capFirst(this.enemyt.gender.he) + " rears back and attempts to tackle you, " + this.enemyt.gender.he + " jaws opened wide, but you are able to fight " + this.enemyt.gender.him + " off and throw " + this.enemyt.gender.him + " to the ground. ", false);
                                        break;
                                    default:
                                        this.scene("\tYour opponent senses " + this.enemyt.gender.his + " opportunity. " + this.capFirst(this.enemyt.gender.he) + " rears back and lunges toward you, " + this.enemyt.gender.his + " jaws stretched almost impossibly wide. You try to dodge " + this.enemyt.gender.him + ", but " + this.enemyt.gender.he + "\'s too strong and fast for you. " + this.capFirst(this.enemyt.gender.he) + " tackles you to the ground and locks " + this.enemyt.gender.his + " mouth around your head. " + this.capFirst(this.enemyt.gender.he) + " slowly and laboriously swallows you whole as you struggle against " + this.enemyt.gender.him + ". " + "You feel yourself slide into " + this.enemyt.gender.his + " large stomach as " + this.enemyt.gender.he + " swallows you down. " + this.capFirst(this.enemyt.gender.his) + " stomach stretches massively to contain you. " + "From the outside, the cheetah\'s stomach stretches to the ground and then some. " + "The cheetah grunts and rolls onto " + this.enemyt.gender.his + " side as " + this.enemyt.gender.his + " humongous stomach towers several feet over " + this.enemyt.gender.him + ". " + "The cheetah lets out a pained but contented sigh as " + this.enemyt.gender.he + " sets about digesting " + this.enemyt.gender.his + " painfully large feast. " + "You can only pray that someone up there is looking out for you. ", false);
                                        this.defeatEvent(this.devoured);
                                }
                            }
                            else {
                                this.scene("<li>Attack</li>", false);
                                this.chance = this.dXY(1, 2);
                                if (this.chance <= 50) {
                                    this.scene("The bloated cheetah waddles up and swipes at you with " + this.enemyt.gender.his + " claws, dealing " + this.eDMG + " damage. ", false);
                                    this.doHealth(-this.eDMG);
                                }
                                else if (this.chance > 50) {
                                    this.scene("The bloated cheetah licks " + this.enemyt.gender.his + " chops before jumping forward and biting you, dealing " + this.eDMG + " damage. ", false);
                                    this.doHealth(-this.eDMG);
                                }
                            }
                            if (!this.alive()) {
                                this.scene("\n\t" + this.enemyt.defeat, false);
                                this.defeatEvent(this.battle);
                            }
                        }
                        break;
                    case this.HoneySlime:
                        if (this.grapple <= 0) {
                            switch (this.dXY(1, 3)) {
                                case 1:
                                    this.scene("<li>Honey blast</li>", false);
                                    switch (this.dodge()) {
                                        case true:
                                            this.scene("Shrinking for a mere instant, the slime several lumps of sweet honey towards you. " + "As the slime\'s marksmanship is nothing to rival your maneuvers, several lumps of honey splash on the ground. ", false);
                                            this.doEnemyHealth(-this.dXY(4, 6));
                                            break;
                                        case false:
                                            this.scene("Shrinking for a mere instant, the slime several lumps of sweet honey towards you. In superb precision, the lumps seem to land right into your mouth. " + "You are but to savor the ", false);
                                            if (this.dXY(1, 2) == 1) {
                                                this.scene("delicious", false);
                                            }
                                            else {
                                                this.scene("cloying", false);
                                            }
                                            this.scene(" honey as orange, glistening lumps of deliciousness slowly fill your belly. ", false);
                                            this.doConsume(0, this.dXY(4, 6), this.dXY(3, 5));
                                            this.chgTempStats("STR", this.dXY(0, 2));
                                            this.chgTempStats("AGI", this.dXY(0, 2));
                                            this.chgTempStats("END", this.dXY(0, 2));
                                            this.doEnemyHealth(-this.dXY(4, 6));
                                    }
                                    break;
                                case 2:
                                    this.scene("<li>Honey blast</li>", false);
                                    switch (this.dodge()) {
                                        case true:
                                            this.scene("The slime seems to melt into the ground, only to launch several chunks of honey! " + "As you duck beneath the airborne honey, all chunks splatter across the ground in a warm, orange glisten. " + "Still, a driblet or two of honey splatters onto you do nothing more than whetting your appetite. Some drops to spice, or sweeten, things up! ", false);
                                            this.doEnemyHealth(-1);
                                            break;
                                        case false:
                                            this.scene("The slime seems to melt into the ground, only to launch several chunks of honey! " + "While some of the fragrant and tacky projectiles fall into ground in a dull glisten, a few finds their way onto you. " + "Your motion seems restricted by the orange sweet on your " + this.fatness() + " body. " + "However much you attempt, you cannot seem to liberate your " + this.playerSpecies.hands + " from the sweet. " + "Moreover, the honey dripping on your tummy seems to elicit some growls from your midriff. ", false);
                                            this.chgTempStats("STR", this.dXY(3, 5));
                                            this.chgTempStats("AGI", this.dXY(3, 5));
                                            this.doEnemyHealth(-1);
                                    }
                                    break;
                                case 3:
                                    this.scene("<li>Grab</li>", false);
                                    switch (this.dodge()) {
                                        case true:
                                            this.scene("The slime jolts towards you as a cavity opens inside the slime. As you sidestep your fragrant foe, the blob collapses flat onto the ground. " + "Instead of an ample gourmand like you, brushings seem to taste the delicious honey. What a waste! ", false);
                                            break;
                                        case false:
                                            this.scene("The slime jolts towards you as a cavity opens inside the slime. The slime rapidly engulfs you into the cavity as a floating sensation takes the hold of you. " + "Eventually, your head gets engulfed, just then you begin wriggling inside the amorphous blob. " + "Trying to keep your eyes open, you behold the world in an amber tint as light slowly nullifies. Soon, your perception is overwhelmed by sweet deliciousness. ", false);
                                            this.chgTempStats("AGI", this.dXY(1, 2));
                                            this.grapple = this.enemyt.STR * 3;
                                    }
                            }
                        }
                        if (this.grapple > 0) {
                            this.scene("<li>Feed</li>", false);
                            this.scene("The delicious honey, all less viscous, seems to surge into your mouth as you gasp for air - and find more honey indeed! " + "The treat is to be relished as you literally breathe the onslaught of rich and sweet honey. You feel " + this.hungry() + ". ", false);
                            this.doConsume(0, this.dXY(4, 6), this.dXY(3, 5));
                            this.doEnemyHealth(-this.dXY(4, 6));
                        }
                        if (!this.alive() || this.eHEA <= 0 || this.AGI <= 0 || this.STR <= 0 || this.END <= 0) {
                            switch (this.eHEA > 0) {
                                case true:
                                    this.scene("\n\tAs the sticky honey slime wrestles you down onto the ground, it begins spraying honey relentlessly into your mouth. " + "You gasp, for a breath or two, while inhaling  the seemingly endless stream of honey. Eventually, a drowsy sugar rush takes you before a stuffed slumber. ", false);
                                    this.doConsume(0, this.eHEA, this.eHEA * 0.8);
                                    switch (this.alive()) {
                                        case true:
                                            this.scene("\n\tAs you begin swallowing the large chunk of honey, a restful warmth begins spreading through your stomach. " + "As your belly begins surging out, you soon become oblivious to the cloying sweetness of honey, absorbed into its soothing comfort and deliciousness. " + "A minute? An hour? A day? You just seem to lose the track of time as your feast endures. " + "Soon awaken from your feeding lethargy as you lick bland air instead of honey! " + "" + this.capFirst(this.hungry()) + " and a bit sticky, you rise to continue your journey, with the honey still warm in your belly. ", false);
                                            this.winBattle("");
                                            break;
                                        case false:
                                            this.defeatEvent(this.overeating);
                                    }
                                    break;
                                case false:
                                    this.scene("\n\tAfter lodging it\'s last attack, you look down to find the last of the honey slime dissipate into a pool of regular honey. ", false);
                                    switch (this.alive()) {
                                        case true:
                                            this.winBattle("Apparently you won! ");
                                            break;
                                        case false:
                                            this.scene("Before you can feel too triumphant however, you stumble to the ground under the painful weight of your overdistended stomach and pass out facedown in the pool of honey. ", false);
                                            this.defeatEvent(this.overeating);
                                    }
                            }
                        }
                        break;
                    case this.Hydra:
                        if (this.surrender) {
                            if (this.grapple > 0) {
                                this.scene("\tFor whatever reason, be it fatigue or the acceptance of fate, you flop down against the walls of your prison, the dizzying heat making you drift off. Your digestion is painless. ", false);
                            }
                            else {
                                this.scene("\tYou throw yourself on the hydra’s mercy. They stop their assault and look at you inquisitively. " + "You get on your knees and ask the hydra to return the others it ate in return for yourself. " + "One head stares blankly at you, another hisses in annoyance and the last one seems to consider the offer. " + "They quickly exchange words in a strange, hiss and snarl-based language. The left and right heads come to an agreement, as the middle one rolls its eyes. " + "All three of them move to the ground and spit out the three they had eaten. " + "As soon as their previous victims are released, the middle one darts forward and catches you in " + this.enemyt.gender.his + " jaws before you have any chance to back out. " + this.capFirst(this.enemyt.gender.he) + " flings her head back and swallows, sending you into a long trip down into the cavernous pit below. " + "You give up midway through the journey down, drifting into a sleep before you reach your journey’s end. ", false);
                            }
                            this.defeatEvent(this.devoured);
                        }
                        else if (this.grapple > 0) {
                            this.scene("<li>Devour</li>", false);
                            switch (this.attemptsLeft) {
                                case 2:
                                    this.scene("You attempt to crawl back out from the hydras stifling throat, but can\'t quite manage to get out. " + "A second gulp pulls you farther down the hydras muscular throat. ", false);
                                    this.attemptsLeft--;
                                    break;
                                case 1:
                                    this.scene("Your attempts to escape are in vain, as a third gulp sets you sliding into the Hydra’s stomach below. " + "You fall into a surprisingly roomy cavern, where the others that were eaten earlier are unconscious. " + "The oppressive heat of your surroundings causes your senses to dull, but you could still escape, if you move quickly. ", false);
                                    this.attemptsLeft--;
                                    break;
                                case 0:
                                    this.scene("Trying to ignore the heat, you look up at the hole you entered from, and run up the slope to try and escape. You snatch for the edge, but slip and fall, sliding back down. " + "The heat of the area causes your head to swim and your body to continue to weaken. ", false);
                                    this.doHealth(-this.maxHEA * 0.15);
                            }
                            if (!this.alive()) {
                                this.scene("\n\tAfter sliding down the wall again, you feel what little energy you have left get sapped away by the encroaching heat. " + "Knowing you won’t have the energy for another run-up, you try crawling up to freedom, but your consciousness flickers and fails before you get even halfway up. ", false);
                                this.defeatEvent(this.devoured);
                            }
                        }
                        else {
                            switch (this.dXY(1, 5)) {
                                case 1:
                                    this.scene("<li>Devour</li>", false);
                                    switch (this.dodgeInstaDeath()) {
                                        case true:
                                            this.scene("The middle head lunges at you, maw agape. You jump to dodge but the heads work together as a second head waits for your next move. " + "With its maw agape, you unintentionally fall into the waiting jaws of the left head. You brace for pain, but nothing happens. " + "As you scramble out of its mouth, it closes quickly as it realised it missed its cue. " + "The right head stares disdainfully as the middle one screeches in fury at it. ", false);
                                            break;
                                        default:
                                            this.scene("The middle head lunges at you, maw agape. You jump to dodge, but the heads work together as a second head waits for your next move. " + "With its maw agape, you unintentionally fall into the waiting jaws of the right head. The jaws slam shut behind you and a loud gulp sends you down. ", false);
                                            this.attemptsLeft = 2;
                                            this.grapple = this.enemyt.STR * 3;
                                    }
                                    break;
                                default:
                                    switch (this.dXY(1, 3)) {
                                        case 1:
                                            this.scene("<li>Attack</li>", false);
                                            this.doHealth(-this.eDMG);
                                            this.scene("One of the heads lunges at you, maw agape. You manage to dodge and avoid being eaten whole, but you are injured for " + this.eDMG + " damage by " + this.enemyt.gender.his + " teeth. ", false);
                                            break;
                                        case 2:
                                            this.scene("<li>Sweep</li>", false);
                                            this.doHealth(-this.eDMG);
                                            this.scene("The beast crouches somewhat, bringing its tail around and sweeping it at you – it catches you off guard and slams into you, dealing " + this.eDMG + " damage and winding you. ", false);
                                            if (this.END > 13) {
                                                this.chgTempStats("END", this.dXY(8, 12));
                                            }
                                            break;
                                        case 3:
                                            this.scene("<li>Sand Attack</li>", false);
                                            this.scene("The hydra rears back, smashing the ground with " + this.enemyt.gender.his + " forepaws and knocking sand into the air, blowing it at you with a gust of wind. " + "The sand gets in your eyes and irritates your wounds, making it hard to focus. ", false);
                                            this.doHealth(-this.eDMG * 0.2);
                                            if (this.END > 7) {
                                                this.chgTempStats("END", this.dXY(4, 6));
                                            }
                                            if (this.AGI > 7) {
                                                this.chgTempStats("AGI", this.dXY(4, 6));
                                            }
                                    }
                                    if (!this.alive()) {
                                        this.scene("\n\tYou drop to the ground as you pant from over exertion. Your vision blurs as you watch in vain as one of the heads lunges towards you. " + "You fall into darkness as you feel the walls of the hydra\'s throat work your way down into its stomach before you drop into an open space, " + "the heat feeling like a sauna as you land in a deep pool. " + "Your body begins to tingle almost immediately, before you succumb to your exhaustion and fall unconscious. ", false);
                                        this.defeatEvent(this.devoured);
                                    }
                            }
                        }
                        break;
                    case this.LemonSlime:
                        if (this.surrender) {
                            this.scene("\tYou open your mouth wide and beckon the slime monster in." + "It seems to cheerily oblige as a large tendril flys out and slides down your throat. " + "You don\'t even have to swallow as the slime forcefully pumps itself into you. " + "You rub your " + this.waist() + " stomach as it stretches outward with sentient lemony sweetness. ", true);
                            this.doConsume(0, this.eHEA, this.eHEA * 0.6);
                            this.doEnemyHealth(-this.eHEA);
                            if (this.HEA > 0) {
                                this.scene("You slurp up the last of the slime monster down. With nothing left to fight, I guess you can call this a victory? ", false);
                                this.winBattle("");
                            }
                            if (this.HEA <= 0) {
                                this.scene("\n\tYour stomach keeps growing larger and larger, but there\'s still more lemon slime to go. " + "You hold onto your aching gut as lemon goo pumps almost endlessly down your gullet. " + "You slowly lower yourself down and sit on the ground as you feel your stomach stretch painfully bloated. " + "You\'re not sure how much more you can take, but you\'re determined to win this gastronomical battle. If you can just hold out a little longer. " + "You begin losing the test of will though as you become too painfully full to stay awake. " + "You collapse on your back on the ground and pass out even as the rest of the slime monster slides down your throat. ", false);
                                this.defeatEvent(this.overeating);
                            }
                        }
                        else {
                            this.scene("<li>Feed</li>", false);
                            this.scene("The slime monster draws back in on itself before spraying a blast of slime directly into your mouth. " + "You can\'t help but swallow several mouthfuls and feel it slide into your gut. It tastes delightfully fruity! ", false);
                            this.cram = this.dXY(1, 3);
                            this.doConsume(0, this.cram, this.cram * 0.5);
                            this.doEnemyHealth(-this.cram);
                            if (this.eHEA <= 0 && this.alive()) {
                                this.winBattle("What\'s remaining of the slime monster slides down your throat. With nothing left to fight, I guess you can call this a victory? ");
                            }
                            if (this.eHEA > 0 && !this.alive()) {
                                this.scene("\n\tYou fall to the ground, too painfully full to stand. You wince in pain and grab your achingly bloated gut. " + "When you open your eyes, you look up to see the slime monster rising over you like a tidal wave. " + "You look on in horror as the monster crashes down upon you, cramming it\'s entire mass down your throat. Your stomach starts groaning and gurgling as it stretches massively. ", false);
                                this.doConsume(0, this.eHEA * 0.5, this.eHEA * 0.25);
                                this.defeatEvent(this.overeating);
                            }
                            if (this.eHEA <= 0 && !this.alive()) {
                                this.scene("\n\tThe last of the slime monster slides down your throat. For a moment you feel a sense of triumph, but you swiftly realize you\'re practically too full to stand. " + "You collapse to the ground and roll over onto your back before passing out in an overstuffed coma. ", false);
                                this.defeatEvent(this.overeating);
                            }
                        }
                        break;
                    case this.lizardWizard:
                        if (this.surrender) {
                            this.scene("\tSurrounded and overwhelmed by magic and plants, you lower yourself to the ground, bowing your head in submission. " + "The lizard just cocks his head in confusion and frowns. \"You give up?\" he asks, a slightly annoyed tone in his voice. " + "\"Shame,\" he sighs, \"I was going to play with you more.\" " + "The smile comes back across his face as he continues, \"But I suppose we can skip straight to the part where I punish you for theft.\" " + "He taps your head with his wand, then pokes it into your belly as his plants wrap around you to hold you in place. " + "Your belly seems to loosen just in time for the plants to begin forcing their fruit into your mouth, and you find yourself without the will to resist. ", false);
                            this.stuffToBursting();
                            this.scene("\n\tYou can only watch as your belly stretches bigger and bigger, an endless stream of delicious flavors parading into your mouth. " + "Against your desire and better judgement, you find yourself slowly chewing and swallowing down enormous fruit after enormous fruit. " + "Oranges, pears, grapes, apples, watermelon, all of it is swallowed down as you are stuffed to the brim, and pushed beyond it again and again. " + "It seems to last for days, all the while the little lizard is laughing softly and playing with your oversized belly like it was his own personal plaything. ", false);
                            this.doConsume(200, 0, 0);
                            this.scene("\n\tAt length, your jaw stops moving, your body seeming to be unable to take anymore and simply halting entirely. " + "You should have burst what seems like a few hundred gigantic feedings ago, but your tremendous gut rests on the ground now. " + "Giving it a scrutinizing look and letting out an appraising hum, the lizard pats it, and declares, " + "\"That\'ll do, I think.\" Gently, he places his wand on your head. " + "\"Now I\'m going to be nice and let you sleep. Take a good rest, for your bulk will be serving me well...\" " + "Your consciousness slowly fades, and your body begins to feel stiff. " + "Where you touch the ground, you seem to sink into it, and as your vision goes dark, the last thing you see is your skin turning to bark and a leafy growth sprouting from it. ", false);
                            this.defeatEvent(this.transformed);
                        }
                        else {
                            if (this.grapple <= 0) {
                                if (this.dXY(1, 3) != 3) {
                                    tempDebuffAmount = this.dXY(3, 6);
                                    if (this.dXY(1, 2) == 1) {
                                        this.scene("<li>Leaden</li>", false);
                                        this.scene("The lizard flicks his wand at an odd angle, then points it at you. Your flesh seems to stiffen and your body slows; his magic is adversely affecting your mobility! ", false);
                                        this.chgTempStats("AGI", tempDebuffAmount);
                                    }
                                    else {
                                        this.scene("<li>Soften</li>", false);
                                        this.scene("The wizard slowly curves his wand to point at you, and your gear grows heavy. His magic is causing your strength to fade, formerly hard muscles becoming soft! ", false);
                                        this.chgTempStats("STR", tempDebuffAmount);
                                    }
                                }
                                else {
                                    this.scene("<li>Grasp</li>", false);
                                    switch (this.testSkillRange(this.INT + this.AGI + 50, this.enemyt.INT * 2, 10, 90)) {
                                        case true:
                                            this.scene("The wizard twirls his wand, but you circle about him as he points towards you. " + "The plants reach out for you, but only manage to scrape lightly against you as you deftly evade them. He growls in frustration, his grin becoming an angry scowl at this. ", false);
                                            break;
                                        default:
                                            this.scene("The wizard twirls his wand as he raises it above his head, his free hand pointing at you. " + "Before you can react, the mass of limbs and vines ensnares you, and his grin spreads wider as the plants begin to force their enormous fruit into your mouth! ", false);
                                            this.grapple = this.enemyt.INT * 3;
                                    }
                                }
                            }
                            if (this.grapple > 0) {
                                this.scene("<li>Feed</li>", false);
                                this.scene("The lizard taunts you as several fruits are rammed into your mouth and face. You have no choice but to take a bite and gulp it down to clear your view and get some air. ", false);
                                this.cram = this.dXY(3, 6);
                                this.doConsume(this.cram, 0, this.cram * 0.3);
                            }
                            if (!this.alive() || this.AGI <= 0 || this.STR <= 0) {
                                this.scene("\n\tWith your will to fight sapped to nothing, you are left at the mercy of a wizard that you have wronged. " + "While there are concievably worse situations to be in, this is certainly near the top of the list, and the wide grin on the lizard\'s face shows that he means to prove it. " + "\"You wanted to eat my fruit?\" He taunts, his plants wrapping around you and lowering you to your knees. " + "\"Well, you\'re going to have to eat a whole lot of it if you\'re going to be of use around here,\" he continues, tapping your head with his wand, then poking it into your belly. " + "Though the pressure inside it seems to lessen, your helplessness does not fade, and the plants begin to feed you their fruit. ", false);
                                this.stuffToBursting();
                                this.scene("\n\tYou can only watch as your belly stretches bigger and bigger, an endless stream of delicious flavors parading into your mouth. " + "Against your desire and better judgement, you find yourself slowly chewing and swallowing down enormous fruit after enormous fruit. " + "Oranges, pears, grapes, apples, watermelon, all of it is swallowed down as you are stuffed to the brim, and pushed beyond it again and again. " + "It seems to last for days, all the while the little lizard is laughing softly and playing with your oversized belly like it was his own personal plaything. ", false);
                                this.doConsume(200, 0, 0);
                                this.scene("\n\tAt length, your jaw stops moving, your body seeming to be unable to take anymore and simply halting entirely. " + "You should have burst what seems like a few hundred gigantic feedings ago, but your tremendous gut rests on the ground now. " + "Giving it a scrutinizing look and letting out an appraising hum, the lizard pats it, and declares, " + "\"That\'ll do, I think.\" Gently, he places his wand on your head. \"Now I\'m going to be nice and let you sleep. Take a good rest, for your bulk will be serving me well...\" " + "Your consciousness slowly fades, and your body begins to feel stiff. " + "Where you touch the ground, you seem to sink into it, and as your vision goes dark, the last thing you see is your skin turning to bark and a leafy growth sprouting from it. ", false);
                                this.defeatEvent(this.transformed);
                            }
                        }
                        break;
                    case this.MagicalFur:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou raise your hands in a gesture of surrender, and reach into your pack, intending to find something to appease " + this.enemyt.gender.him + ". " + "Before you can even check, however, the " + this.enemyt.species.name + " suddenly doubles over, clutching " + this.enemyt.gender.his + " head and letting out a pained scream. " + "A bright red glow begins to emanate from " + this.enemyt.gender.him + ", and it is soon followed by a tremendous magical explosion. " + "You are caught in the deafening blast and swept off your feet by its force! ", false);
                                this.doHealth(-this.eDMG * 100);
                                switch (this.HEA > 0) {
                                    case true:
                                        this.scene("Fortunately, as you stagger back to your feet, you see the " + this.enemyt.species.name + " slowly lower " + this.enemyt.gender.him + "self to the ground, lying on " + this.enemyt.gender.his + " back and letting out a relieved sigh. Looks like whatever was bothering " + this.enemyt.gender.him + " has been worked out. " + "You go along your way, nursing your injuries. ", false);
                                        this.winBattle("");
                                        break;
                                    default:
                                        this.scene("You lie on the ground, battered and sore, unwilling to keep going, but from the sounds of things, it appears that your assailant is in a similar state. " + "You hear " + this.enemyt.gender.him + " let out a relieved sigh, apparently free of whatever was causing " + this.enemyt.gender.him + " such a headache, " + "and use that as an excuse as good as any to drift into unconsciousness. ", false);
                                        this.defeatEvent(this.battle);
                                }
                                break;
                            default:
                                switch (this.dXY(1, 5)) {
                                    case 1:
                                        this.scene("<li>Wand Zap</li>", false);
                                        this.doEnemyHealth(-this.enemyt.maxHEA * 0.02);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " lets out a gutteral, wordless growl, levelling " + this.enemyt.gender.his + " wand at you. " + "The growl becomes a pained scream as an unstable bolt of raw magic flies out. " + "Its trail washes over the " + this.enemyt.species.name + ", but the missile goes wide, flying off into the air before exploding harmlessly. ", false);
                                                break;
                                            default:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " lets out a gutteral, wordless growl, gripping " + this.enemyt.gender.his + " head with one hand and levelling " + this.enemyt.gender.his + " wand at you with the other. The growl becomes a scream as an unstable bolt of raw magic flies out, its trail washing over " + this.enemyt.gender.him + " and its missile erupting into an explosion as it hits you! ", false);
                                                this.doHealth(-this.eDMG * 1.2);
                                        }
                                        break;
                                    case 2:
                                        this.scene("<li>Splitting Fire</li>", false);
                                        this.doEnemyHealth(-this.enemyt.maxHEA * 0.03);
                                        switch (this.dodge() && this.dodge()) {
                                            case true:
                                                this.scene("Growling through gritted teeth, the " + this.enemyt.species.name + " draws a triangle in the air with " + this.enemyt.gender.his + " wand, then points it at you. " + "A burst of flame spits out, emitting tremendous heat even from a distance, then splits apart into three smaller bursts that you barely manage to avoid unscathed. ", false);
                                                break;
                                            default:
                                                this.scene("Growling through gritted teeth, the " + this.enemyt.species.name + " draws a triangle in the air with " + this.enemyt.gender.his + " wand, then points it at you. " + "A burst of flame spits out, emitting tremendous heat even from a distance, " + "then splits apart into three smaller bursts which scatter towards you in a way that you fail to avoid! ", false);
                                                this.doHealth(-this.eDMG * 0.8);
                                        }
                                        break;
                                    case 3:
                                        this.scene("<li>Unpredictable Ice</li>", false);
                                        this.doEnemyHealth(-this.enemyt.maxHEA * 0.03);
                                        switch (this.dodge() || this.dodge()) {
                                            case true:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " lets out an angry groan and violently slashes the air with " + this.enemyt.gender.his + " wand before slapping it to the ground. " + "A ball of ice appears, rolling towards you in odd spiralling, but you jump away at the last moment, " + "sending it careening into a large rock, where it bursts in a frigid cloud. ", false);
                                                break;
                                            default:
                                                this.scene("Letting out an angry groan, the " + this.enemyt.species.name + " makes three violent slashing motions with " + this.enemyt.gender.his + " wand, then slaps it onto the ground. " + "A ball of ice appears and rolls in odd spiralling curves at you, catching you off guard and bursting in a cold blast on your side! ", false);
                                                this.doHealth(-this.eDMG * 1.2);
                                                if (this.d100() < 33) {
                                                    this.scene("The immense chill causes you to stiffen! ", false);
                                                    this.chgTempStats("stun", 1);
                                                }
                                        }
                                        break;
                                    case 4:
                                        this.scene("<li>Trapping Lightning</li>", false);
                                        this.doEnemyHealth(-this.enemyt.maxHEA * 0.05);
                                        switch (this.dodge() && this.dodge()) {
                                            case true:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " raises " + this.enemyt.gender.his + " wand in the air, making spiralling motions above " + this.enemyt.gender.his + " head, then slashes the wand down violently in your direction. " + "Countless bolts of lightning strike down around you in an unpredictable pattern that closes in on you, " + "but you leap headlong into an opening and avoid being struck. ", false);
                                                break;
                                            default:
                                                this.scene("Raising " + this.enemyt.gender.his + " wand in the air, the " + this.enemyt.species.name + " makes spiralling motions above " + this.enemyt.gender.his + " head before slashing the wand down violently in your direction. " + "Blistering bolts of lightning rain down all about you in a wildly unpredictable pattern which closes around you, and several bolts strike you, " + "singing your " + this.playerSpecies.fur + " and shaking you! ", false);
                                                this.doHealth(-this.eDMG);
                                        }
                                        break;
                                    case 5:
                                        switch (this.dXY(1, 2)) {
                                            case 1:
                                                this.scene("<li>Arcane Explosion</li>", false);
                                                this.doEnemyHealth(-this.enemyt.maxHEA * 0.25);
                                                switch (this.dodge() && this.dodge()) {
                                                    case true:
                                                        this.scene("The " + this.enemyt.species.name + " suddenly stops, doubling over in pain and grasping " + this.enemyt.gender.his + " head in both hands. " + this.capFirst(this.enemyt.gender.he) + " gasps in pain, and an odd glow starts to emanate from " + this.enemyt.gender.him + ". " + "You know impending doom when you see it and make a break for the far side of the nearest large rock, and none too soon, for " + this.enemyt.gender.his + " " + "scream of pain is followed up by a loud burst and a bright red flash that scorches the dirt and shatters small rocks near " + this.enemyt.gender.him + "! ", false);
                                                        break;
                                                    default:
                                                        this.scene("The " + this.enemyt.species.name + " suddenly stops, doubling over in pain and grasping " + this.enemyt.gender.his + " head in both hands. " + this.capFirst(this.enemyt.gender.he) + " gasps in pain, and an odd glow starts to emanate from " + this.enemyt.gender.him + ". " + "With a scream, the glow erupts in a loud burst and bright red flash strong enough to take you off your feet and send you flying! ", false);
                                                        this.doHealth(-this.eDMG * 4);
                                                }
                                                break;
                                            default:
                                                this.scene("<li>Headache</li>", false);
                                                this.doEnemyHealth(-this.enemyt.maxHEA * 0.02);
                                                this.scene("The " + this.enemyt.species.name + " suddenly stops, doubling over in pain and grasping " + this.enemyt.gender.his + " head in both hands. " + this.capFirst(this.enemyt.gender.he) + " pants breathlessly for a moment, then lets out a pained scream. " + "Slowly, " + this.enemyt.gender.he + " regains what little composure " + this.enemyt.gender.he + " has, looking back up to you and levelling " + this.enemyt.gender.his + " wand at you again. ", false);
                                        }
                                }
                        }
                        if (this.eHEA <= 0 && this.alive()) {
                            this.scene("\n\tWith the last spell\'s effect washing over " + this.enemyt.gender.him + ", the " + this.enemyt.species.name + " lets out a pained moan, and slowly lowers " + this.enemyt.gender.him + "self to the ground. " + this.capFirst(this.enemyt.gender.he) + " lies down, letting out a long, relaxed sigh, and seems content to fall asleep right then and there. " + "Looks like whatever was bothering " + this.enemyt.gender.him + " got worked out of " + this.enemyt.gender.his + " system with that fight. You decide you can call that a victory. ", false);
                            this.winBattle("");
                        }
                        if (!this.alive()) {
                            this.scene("\n\tThe last spell overwhelms your defense, sending you crashing to the rocky ground. You think you can hear some of your flesh sizzling as you lose consciousness. ", false);
                            this.defeatEvent(this.battle);
                        }
                        break;
                    case this.MilkMachine:
                        if (this.surrender) {
                            if (this.grapple > 0) {
                                this.scene("\tYou forego struggling against your enemy and relax in its metallic embrace. ", true);
                            }
                            else {
                                this.scene("\tYou forego fighting your enemy and allow it to snatch you up in its metallic grasp. " + "A particularly large hose crams itself into your jaws as it starts gushing warm milk down your throat quarts at a time. ", true);
                            }
                            this.scene("Your stomach rapidly swells as it\'s pumped full of warm creamy milk, filling you up like a water balloon. ", false);
                            this.stuffToBursting();
                            this.scene("\n\tYou quickly begin to feel drowsy as the warmth of the milk spreads through your body, making you feel incredibly tired. " + "You drift off to sleep as you watch a dial on the side of the large storage tank slowly drift from \"F\" to \"E\" as your stomach grows larger and heavier. ", false);
                            this.defeatEvent(this.overeating);
                        }
                        else if (this.grapple > 0) {
                            this.scene("<li>Pump</li>", false);
                            this.scene("The mechanical hose crammed in your mouth starts forcefully pumping large quantities of warm milk down your throat. " + "You can\'t help but swallow as the rubber suction cup completely fills your mouth. " + "All this warm milk bloating your stomach is starting to make you feel very very drowsy. ", false);
                            this.chgTempStats("STR", 2);
                            this.chgTempStats("AGI", 2);
                            this.chgTempStats("END", 2);
                            this.chgTempStats("INT", 2);
                            stuff = this.dXY(3, 7);
                            this.doConsume(0, stuff, stuff * 0.5);
                            if (!this.alive()) {
                                this.scene("\n\tYour stomach groans and gurgles as it swells to its limit with warm creamy milk. " + "You find it harder and harder to remain concious as your stomach painfully swells before your eyes like an overinflated balloon. " + "Eventually you drift into unconsciousness as your waist slowly pulses larger and larger with each jet of milk sprayed down your throat. ", false);
                                this.defeatEvent(this.overeating);
                            }
                            else if (this.STR <= 0 || this.AGI <= 0 || this.INT <= 0 || this.END <= 0) {
                                this.scene("\n\tYou find it harder and harder to stay awake as the warm relaxing milk fills up your stomach. " + "You attempt to yawn between the repeated jets of milk spraying down the back of your throat. " + "Eventually your eyes drift close as your stomach continues to inflate with milk. ", false);
                                this.defeatEvent(this.overeating);
                            }
                        }
                        else {
                            this.scene("<li>Grab</li>", false);
                            this.scene("One of the mechanical arms attempts to sweep you off of your feet. ", false);
                            switch (this.dodge()) {
                                case true:
                                    this.scene("Luckily, you\'re ", false);
                                    if (this.INT > this.AGI) {
                                        this.scene("smart", false);
                                    }
                                    else {
                                        this.scene("fast", false);
                                    }
                                    this.scene(" enough that you manage to keep your footing. ", false);
                                    break;
                                default:
                                    this.scene("Unfortunately, you\'re not ", false);
                                    if (this.INT > this.AGI) {
                                        this.scene("smart", false);
                                    }
                                    else {
                                        this.scene("fast", false);
                                    }
                                    this.scene(" enough to keep your footing and your knocked to the ground and left dazed. " + "The mechanical monstrosity pinches your head in one of it\'s claws as one of it\'s hoses coils around your chest before cramming it\'s rubber suction cup into your mouth. " + "\n", false);
                                    this.grapple = this.enemyt.STR * 2.5;
                                    this.enemyAttack();
                            }
                        }
                        break;
                    case this.MeatMonster:
                        if (this.surrender) {
                            if (this.grapple > 0) {
                                this.scene("\tYou relax in his greasy meaty embrace and eagerly chomp down on whatever he crams into you. ", true);
                            }
                            if (this.grapple <= 0) {
                                this.scene("\tYou leap into his meaty grasp and look up at him, mouth agape. ", true);
                            }
                            this.scene("You see a look of what might be perplexity, or possibly happiness cross his face. " + "It\'s pretty hard to tell though. " + "In either case, he begins tearing off hunks of steak/sausage/ham/bacon from himself. " + "He hardly waits for you to swallow the previous mouthful before he crams the next one in, practically shoving meat into your stomach. " + "As you consume more and more of him, his body shifts and reconstructs into a smaller and smaller meat golem. " + "Eventually, as he senses you don\'t plan on struggling and he becomes too weak to hold you, he lowers you to the ground as he continues cramming himself into you. ", false);
                            this.doConsume(this.eHEA, 0, this.eHEA * 0.6);
                            switch (this.alive()) {
                                case true:
                                    this.scene("\n\tYou\'ve managed to devour most of him, leaving you with a " + this.waist() + " stomach. " + "The meat monster has shrunken to only a foot tall stickman made out of a few sausages. " + "You look over when you notice you aren\'t being fed anymore and find that what was once a meat monster is now just a pile of inanimate sausage. " + "Whatever force animated him apparently can no longer function in such a small vessel. " + "It looks like you\'ve \"Won\". ", false);
                                    this.winBattle("");
                                    break;
                                case false:
                                    this.scene("\n\tYour stomach steadily bulges larger and larger as he stuffs you with unwavering dedication. " + "You rub your taut stomach as you force yourself to swallow another mouthful and you can feel your belly grow slightly. " + "You start to wonder how much more you can take, but you don\'t want to stop him, and he probably doesn\'t even know how to stop. " + "You start to drift off into a glutted stupor, but every few seconds you\'re jolted awake as another handful is crammed into your mouth and your gut slowly stretches. " + "Eventually you\'re just too stuffed to stay awake and you fall asleep to the rhytmic sensation of your stomach continuing to bulge out larger and larger. ", false);
                                    this.defeatEvent(this.overeating);
                            }
                        }
                        else {
                            this.chance = this.dXY(1, 3);
                            if (this.grapple > 0) {
                                this.scene("<li>Feed</li>", false);
                                this.scene("The meat monster man takes advantage of your restrained state and grabs a hunk of himself and forcefully crams it down your throat. ", false);
                                this.cram = this.dXY(1, 4);
                                this.doConsume(this.cram, 0, this.cram * 0.6);
                                this.doEnemyHealth(-this.cram);
                            }
                            else if (this.chance == 1 && this.eHEA / this.enemyt.maxHEA > 0.5) {
                                this.scene("<li>Grab</li>", false);
                                if (this.testSkill(this.AGI + this.INT, 50 + this.enemyt.AGI + this.enemyt.STR) == false) {
                                    this.grapple = this.enemyt.STR * 3;
                                    this.scene("The meat monster man launches forward and wraps his meaty sausage arms around you. ", false);
                                    this.enemyAttack();
                                }
                                else {
                                    this.scene("The meat monster lunges at you, but you dodge out of the way before he can grab you. ", false);
                                }
                            }
                            else {
                                this.scene("<li>Attack</li>", false);
                                this.scene("The meat monster rears back and decks you in the face with his sausagey fist. ", false);
                                this.doHealth(-this.eDMG);
                            }
                            if (this.eHEA <= 0 && this.alive()) {
                                this.winBattle("And with that, there\'s nothing left of the meat man. He\'s managed to entirely feed his entire self into you. " + "You stand up and brush yourself off and find yourself with nothing left to fight...? " + "You shake your gut suspiciously, but there\'s seemingly no reaction from the monster inside. It appears you\'ve won? ");
                            }
                            if (!this.alive()) {
                                if (this.grapple > 0 && this.FUL > 99) {
                                    this.scene("\n\tYou\'re so stuffed you find it almost impossible to struggle against your captor. " + "Your vision fades to black as you see the meat monster cram a particularly large hunk of meat down your throat. ", false);
                                }
                                else {
                                    this.scene("\n\t" + this.enemyt.defeat, false);
                                }
                                this.defeatEvent(this.overeating);
                            }
                        }
                        break;
                    case this.mountainousTiger:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tWith no interest to be pummelled further, you drop to your knees and throw up your paws. \"Smart move.\" The tiger says, smiling proudly. He puts his enormous orange paw on your face. " + "\"Though. I\'m full up, and I can\'t have you following me.\" The world around you seems to be consumed in blue flame, and you feel as if you\'re falling endlessly through darkness. " + "With a soft thud, you collapse onto a bed, the world around you coming back into focus, all of it feeling as if you\'d had a very strange dream. ", false);
                                this.defeatEvent(this.battle);
                                break;
                            default:
                                if (this.grapple > 0) {
                                    this.scene("<li>Punch</li>", false);
                                    this.scene("With you pinned, the tiger contents himself to punching your stomach as many times as he can. ", false);
                                    this.doHealth(-this.eDMG);
                                }
                                if (this.grapple <= 0) {
                                    switch (this.dXY(1, 4)) {
                                        case 1:
                                            this.scene("<li>Quake</li>", false);
                                            this.scene("The tiger lifts one of his overswollen legs into the air, before slamming it down with magical force. ", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("You quickly adjust your center of gravity, deftly avoiding slabs of earth that had erupted from the ground. ", false);
                                                    break;
                                                default:
                                                    this.scene("You completely lose your footing just in time for a slab of rock to blast out of the ground, slamming into your stomach and knocking the wind out of you. ", false);
                                                    this.doHealth(-this.eDMG);
                                            }
                                            break;
                                        case 2:
                                            this.scene("<li>Backhand</li>", false);
                                            this.scene("The tiger lets his paw fly, his magic reshaping around it into a much larger paw. ", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("You manage to just barely sidestep the exaggerated swipe, angling away just as the claws sweep past you. ", false);
                                                    break;
                                                default:
                                                    switch (this.FAT + this.tenemyFATdebuff > 30) {
                                                        case true:
                                                            this.scene("The force of the impact sends you tumbling, and you feel lighter, as if the tiger just slapped the fat out of you. ", false);
                                                            this.chgTempStats("AGI", this.dXY(2, 4));
                                                            this.chgTempStats("fat", -30);
                                                            break;
                                                        default:
                                                            this.scene("The force of the impact sends you tumbling. ", false);
                                                    }
                                                    this.doHealth(-this.eDMG);
                                            }
                                            break;
                                        case 3:
                                            this.scene("<li>Arcane Blast</li>", false);
                                            this.scene("The tiger slaps his paws together, firing a ball of arcane fire squarely at your gut. ", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("You duck and tumble, the ball of fire grazing your fur before it flies into the distance. ", false);
                                                    break;
                                                default:
                                                    this.scene("Too slow to dodge, the magic slams into you with excessive force, sweeping you off your feet and onto your back. ", false);
                                                    if (this.FAT + this.tenemyFATdebuff > 30) {
                                                        this.scene("Aside from the pain, you feel different, as if he somehow blasted your fat out of you. ", false);
                                                        this.chgTempStats("STR", this.dXY(2, 4));
                                                        this.chgTempStats("fat", -30);
                                                    }
                                                    this.doHealth(-this.eDMG);
                                            }
                                            break;
                                        case 4:
                                            this.scene("<li>Body Slam</li>", false);
                                            this.scene("The tiger squats down, before launching himself in the air, his body clearly not just for show. ", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("You dive away just in time, the tiger crashing to the ground with enough force to make a deep indent. He\'s back up to his feet in only a second. ", false);
                                                    break;
                                                default:
                                                    this.scene("You are caught off guard as several tons of tiger muscle slam into you from above. ", false);
                                                    this.grapple = this.enemyt.STR * 3;
                                                    this.enemyAttack();
                                            }
                                    }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tWith a groan, you feel your knees give way. You slump to the ground, and can hear the tiger step up to your defeated body. \"Pathetic.\" " + "He grunts, before stepping away, letting you slip out of consciousness. ", false);
                                    this.defeatEvent(this.battle);
                                }
                        }
                        break;
                    case this.MuscleFur:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou lower yourself to all fours, unwilling to fight any further. " + "The massive " + this.enemyt.species.name + " lets out a pleased sounding groan as " + this.enemyt.gender.he + " grabs you by your waist to pick you up. " + "You are forced headfirst into " + this.enemyt.gender.his + " slobbering maw, the " + this.enemyt.species.name + " rumbling happily the whole time. " + this.capFirst(this.enemyt.gender.his) + " jaw unhinges as you are thrust into the squeezing, wet prison of " + this.enemyt.gender.his + " throat, your pushing against " + this.enemyt.gender.him + " proving fruitless. " + "Effortlessly, " + this.enemyt.gender.he + " flips you upwards and pulls at you, your descent down " + this.enemyt.gender.his + " gullet suddenly becoming extremely quick. " + "In a matter of moments, you are in " + this.enemyt.gender.his + " belly. " + "For as voluminous as " + this.enemyt.gender.his + " gut looked on the outside, it\'s a very tight fit that doesn\'t even leave room to struggle as " + this.enemyt.gender.his + " stomach walls begin to squeeze down around you. " + "The crushing process of digestion and lack of air soon robs you of consciousness. ", false);
                                this.defeatEvent(this.devoured);
                                break;
                            default:
                                if (this.grapple > 0) {
                                    this.scene("<li>Devour</li>", false);
                                    switch (this.attemptsLeft) {
                                        case 2:
                                            this.scene("You push with all your might, but just can\'t manage to budge the monstrous " + this.enemyt.species.name + "\'s powerful arms. ", false);
                                            this.attemptsLeft--;
                                            break;
                                        case 1:
                                            this.scene("Things go from bad to worse as " + this.enemyt.gender.his + " open mouth comes rushing down at you... ", false);
                                            this.attemptsLeft--;
                                            break;
                                        default:
                                            this.scene("\tUnable to escape, you are helpless as the massive " + this.enemyt.species.name + " takes you into " + this.enemyt.gender.his + " mouth, your entire head fitting neatly in " + this.enemyt.gender.his + " slobbering maw. " + this.capFirst(this.enemyt.gender.he) + " adjusts " + this.enemyt.gender.his + " grip on you, grabbing your waist to pick you up and force you further into " + this.enemyt.gender.his + " mouth, which stretches to accomodate you. " + this.enemyt.gender.his + " jaw unhinges as you are thrust into the squeezing, wet prison of " + this.enemyt.gender.his + " throat, your pushing against " + this.enemyt.gender.him + " proving fruitless. Effortlessly, " + this.enemyt.gender.he + " flips you upwards and pulls at you, your descent down " + this.enemyt.gender.his + " gullet suddenly becoming extremely quick. In a matter of moments, you are in " + this.enemyt.gender.his + " belly. For as voluminous as " + this.enemyt.gender.his + " gut looked on the outside, it\'s a very tight fit that doesn\'t even leave room to struggle as " + this.enemyt.gender.his + " stomach walls begin to squeeze down around you. The crushing process of digestion and lack of air soon robs you of consciousness. ", false);
                                            this.defeatEvent(this.devoured);
                                    }
                                }
                                if (this.grapple <= 0) {
                                    if (this.HEA / this.maxHEA < 0.25 || this.eHEA / this.enemyt.maxHEA < 0.15 && this.dXY(1, 3) == 1) {
                                        this.scene("<li>Grab</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene("You notice just in time that " + this.enemyt.gender.he + " has gotten quite a bit closer to you than before, and back off just as " + this.enemyt.gender.he + " lunges forth and swings both arms in to grab at you. ", false);
                                                break;
                                            default:
                                                this.scene("Before you notice that " + this.enemyt.gender.he + " has gotten much closer than is comfortable, " + this.enemyt.gender.he + " suddenly lunges at you, wrapping " + this.enemyt.gender.his + " gigantic arms around you. Your bones creak under " + this.enemyt.gender.his + " immensely strong grip as " + this.enemyt.gender.he + " prepares to pull you into " + this.enemyt.gender.his + " gaping mouth! ", false);
                                                this.grapple = this.enemyt.STR * 3;
                                                this.attemptsLeft = 2;
                                        }
                                    }
                                    else {
                                        switch (this.dXY(1, 2)) {
                                            case 1:
                                                this.scene("<li>Smash</li>", false);
                                                switch (this.dodge()) {
                                                    case true:
                                                        this.scene(this.capFirst(this.enemyt.gender.he) + " starts to swing " + this.enemyt.gender.his + " club, but " + this.enemyt.gender.his + " wide swing telegraphs the attack, and you swiftly evade. ", false);
                                                        break;
                                                    default:
                                                        this.scene("With a violent motion, " + this.enemyt.gender.he + " twists " + this.enemyt.gender.his + " whole body around in a massive swing. " + this.capFirst(this.enemyt.gender.his) + " club catches you in the side, and the impact sends you tumbling! ", false);
                                                        this.doHealth(-this.eDMG);
                                                }
                                                break;
                                            case 2:
                                                this.scene("<li>Bite</li>", false);
                                                switch (this.dodge()) {
                                                    case true:
                                                        this.scene(this.capFirst(this.enemyt.gender.he) + " lunges at you greedily, jaws wide to take a bite out of you, but " + this.enemyt.gender.he + " overextends and you are able to avoid " + this.enemyt.gender.him + ". ", false);
                                                        break;
                                                    default:
                                                        this.scene(this.capFirst(this.enemyt.gender.he) + " suddenly lunges for you, jaws wide open. It\'s not enough to devour you whole, but " + this.enemyt.gender.he + " does take a nasty bite out of you! ", false);
                                                        this.doHealth(-this.eDMG);
                                                }
                                        }
                                    }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tWith " + this.enemyt.gender.his + " last attack, you stumble, stagger, and collapse to the ground. The " + this.enemyt.species.name + " lets out a pleased, wordless groan before descending upon your fallen form. " + this.capFirst(this.enemyt.gender.he) + " grabs you under the arms, " + this.enemyt.gender.his + " grip steely and inescapable, and shoves you into " + this.enemyt.gender.his + " slobbering maw. " + this.capFirst(this.enemyt.gender.his) + " mouth stretches to accomodate you, jaw unhinging as you are thrust into the squeezing, wet prison of " + this.enemyt.gender.his + " throat. Effortlessly, " + this.enemyt.gender.he + " flips you upwards and pulls at you, your descent down " + this.enemyt.gender.his + " gullet suddenly becoming extremely quick. In a matter of moments, you are in " + this.enemyt.gender.his + " belly. For as voluminous as " + this.enemyt.gender.his + " gut looked on the outside, it\'s a very tight fit that doesn\'t even leave room to struggle as " + this.enemyt.gender.his + " stomach walls begin to squeeze down around you. Between the pounding you took and the digestion processes, you soon lose consciousness. ", false);
                                    this.defeatEvent(this.devoured);
                                }
                        }
                        break;
                    case this.ObeseBear:
                        if (this.surrender) {
                            this.scene("\tThe overfed bear senses a moment of weakness and grabs you. " + this.capFirst(this.enemyt.gender.he) + " clumsily picks you up in " + this.enemyt.gender.his + " paws and pulls you into " + this.enemyt.gender.his + " massive maw. " + "You struggle against " + this.enemyt.gender.him + ", but " + this.enemyt.gender.he + " proves too strong for you as your slowly pulled into " + this.enemyt.gender.his + " waiting mouth. " + this.capFirst(this.enemyt.gender.he) + " swallows you down whole in several large gulps as you slide into " + this.enemyt.gender.his + " stomach. ", true);
                            if (this.weight() < 200) {
                                this.scene("You barely make a bulge in " + this.enemyt.gender.his + " tremendously fat frame. ", false);
                            }
                            if (this.weight() >= 200 && this.weight() < 500) {
                                this.scene("You make a significant bulge in " + this.enemyt.gender.his + " gut, even through the several inches of fat. ", false);
                            }
                            if (this.weight() > 500) {
                                this.scene("You make a tremendous bulge in the bears already well widened frame. " + this.capFirst(this.enemyt.gender.his) + " gut stretches out to the sides and rests solidly on the ground. ", false);
                            }
                            this.scene("The bear sleepily smacks " + this.enemyt.gender.his + " lips and rolls over to sleep off " + this.enemyt.gender.his + " most recent feast in preparation for the next one. " + "Your vision fades to black as you drift into unconsciousness. ", false);
                            this.defeatEvent(this.devoured);
                        }
                        else {
                            this.chance = this.dXY(1, 4);
                            if (this.chance == 1 && this.HEA < 25) {
                                this.scene("<li>Devour</li>", false);
                                switch (this.dodgeInstaDeath()) {
                                    case true:
                                        this.scene("The overfed bear senses a moment of weakness and lunges at you, but you deftly manage to dodge out of the way. ", false);
                                        break;
                                    default:
                                        this.scene("\tThe overfed bear senses a moment of weakness and grabs you. " + this.capFirst(this.enemyt.gender.he) + " clumsily picks you up in " + this.enemyt.gender.his + " paws and pulls you into " + this.enemyt.gender.his + " massive maw. " + "You struggle against " + this.enemyt.gender.him + ", but " + this.enemyt.gender.he + " proves too strong for you as your slowly pulled into " + this.enemyt.gender.his + " waiting mouth. " + this.capFirst(this.enemyt.gender.he) + " swallows you down whole in several large gulps as you slide into " + this.enemyt.gender.his + " stomach. ", false);
                                        if (this.weight() < 200) {
                                            this.scene("You barely make a bulge in " + this.enemyt.gender.his + " tremendously fat frame. ", false);
                                        }
                                        if (this.weight() >= 200 && this.weight() < 500) {
                                            this.scene("You make a significant bulge in " + this.enemyt.gender.his + " gut, even through the several inches of fat. ", false);
                                        }
                                        if (this.weight() > 500) {
                                            this.scene("You make a tremendous bulge in the bears already well widened frame. " + this.capFirst(this.enemyt.gender.his) + " gut stretches out to the sides and rests solidly on the ground. ", false);
                                        }
                                        this.scene("There bear sleepily smacks " + this.enemyt.gender.his + " lips and rolls over to sleep off " + this.enemyt.gender.his + " most recent feast in preparation for the next one. " + "Your vision fades to black as you drift into unconsciousness. ", false);
                                        this.defeatEvent(this.devoured);
                                }
                            }
                            else if (this.chance == 2) {
                                this.scene("<li>Roar</li>", false);
                                this.scene("The massive bear lets out a similarly massive roar, causing you to shake in fear, temporarily lowering your strength and speed. ", false);
                                this.chgTempStats("AGI", this.dXY(1, 3));
                                this.chgTempStats("STR", this.dXY(1, 3));
                            }
                            else {
                                this.scene("<li>Attack</li>", false);
                                this.scene("The fat bear lets out a roar and swipes at you with " + this.enemyt.gender.his + " massive paw. ", false);
                                this.doHealth(-this.eDMG);
                            }
                            if (!this.alive()) {
                                this.scene("\n\t" + this.enemyt.defeat, false);
                                this.defeatEvent(this.battle);
                            }
                        }
                        break;
                    case this.cabalDragon:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou bring yourself to your hands and knees, lowering your head in surrender. " + "Cautiously, the dragon approaches you, and rumbles out bemused, \"You would submit yourself to me?\" " + "before placing one of his massive hands under your chin, lifting it so your eyes meet his. \"Then you will serve me before I consume you,\" he rumbles. " + "Your thoughts and fears fall away as new strength fills you, and you are left in rapture at the notion of serving your new master. What happens next is a blur of confused senses. ", false);
                                currentState = "defeated";
                                this.nextView();
                                this.listen = function ():void {
                                    doTime(4320);
                                    stuffToBursting();
                                    doConsume(2000, 1000, 2500);
                                    chgTempStats("STR", -40);
                                    chgTempStats("AGI", -10);
                                    chgTempStats("END", -10);
                                    chgTempStats("INT", -10);
                                    scene("\tThere are hazy memories of roaming the mountain and eating, being fed sweet honey by massive insects, and devouring unwary travellers and all their food whole. " + "You lose track of time, and the world is only clear again when you stand before your captor once more, massively overfed and awaiting his command. " + "He beckons, and you slowly haul yourself to his feet before embracing his huge belly. The dragon lets out a deep growl, and you feel yourself slowly sink in to his huge, soft stomach. " + "It engulfs you, a soft, gelatinous grey pillow that sucks you into its squishy warmth, wrapping around you gently but firmly, pulling you in. " + "He wraps his arms around you, pulling you into him as the majority of your body below your neck is engulfed by his now-ooze-like belly. " + "You are over-joyed to finally be being consumed... And at that moment, he touches your head, releasing his control of your thoughts. " + "You have just enough time for the realization of what\'s happened to sink in before he shoves your head inside of him, and you are soon turned into more of his massive stomach. ", true);
                                    defeatEvent(devoured);
                                };
                                break;
                            case false:
                                if (this.grapple > 0) {
                                    switch (this.enemyt.attackCounterA) {
                                        case 2:
                                            this.scene("<li>Unrelenting Bite</li>", false);
                                            this.scene("The dragon\'s jaws squeeze around you, his vice-like bite not relenting as he lets out an stifled, beast-like growl! Yikes! ", false);
                                            this.doHealth(-this.eDMG * 1.2);
                                            if (!this.alive()) {
                                                this.scene("The pain overwhelms you, causing you to go slack in the dragon\'s grasp.... " + "But surprisingly, rather than gulp you down as you might have expected, he instead tosses you harshly to the ground. Evidently he\'s not done with you yet. ", false);
                                            }
                                            break;
                                        case 3:
                                            this.scene("<li>Drain Life</li>", false);
                                            this.scene("The glyph pulses in time with a distinctive pain that wracks your body. " + "You feel yourself getting weaker, and the dragon growls, growing visibly stronger as his wounds close! ", false);
                                            this.chgTempStats("INT", this.dXY(4, 7));
                                            this.chgTempStats("AGI", this.dXY(4, 7));
                                            this.chgTempStats("END", this.dXY(4, 7));
                                            this.chgTempStats("STR", this.dXY(4, 7));
                                            this.doHealth(-this.eDMG * 1.3);
                                            this.doEnemyHealth(this.eDMG * 0.65);
                                            if (!this.alive() || this.AGI < 1 || this.END < 1 || this.STR < 1 || this.INT < 1) {
                                                this.scene("Your struggling grows weaker and weaker, and finally you go slack in the dragon\'s grasp, unable to raise a hand to resist any longer... ", false);
                                            }
                                    }
                                }
                                if (this.grapple <= 0) {
                                    if (this.enemyt.attackCounterA == 1) {
                                        this.scene("<li>Consume</li>", false);
                                        this.scene("The enormous dragon raises his hands, and the floor of the chamber is set alight with a magical circle. ", false);
                                        if (this.FAT <= 0) {
                                            this.scene("You look about in confusion, and the dragon\'s wicked smile turns into a scowl. " + "The room darkens again, and he lets out a furious roar, apparently not getting any results from the spell! ", false);
                                        }
                                        if (this.FAT > 0 && this.FAT <= 50) {
                                            this.scene("You are suspended in the air, unable to move, as a whispy red tendril emanates from your body. " + "You grow slightly thinner as it leaves you and slides into the body of the huge dragon. " + "Slowly, you return to the ground, control returning to your body as you find yourself completely fatless. " + "The dragon seems to be a bit more bulky than he was before... ", false);
                                        }
                                        if (this.FAT > 50 && this.FAT <= 100) {
                                            this.scene("You are suspended in the air, unable to move, as whispy red tendrils emanate from your body. " + "You grow significantly thinner as they leave you and slide into the body of the huge dragon, who lets out a quiet growl as his bulky form expands slightly and huge belly swells. " + "The tendril ceases to emanate from you, leaving you fatless, before you are slowly lowered back to the ground and control returns to your body. " + "The dragon seems to have grown stronger from that... ", false);
                                        }
                                        if (this.FAT > 100 && this.FAT <= 200) {
                                            this.scene("You are suspended in the air, unable to move, as glowing red tendrils emanate from your body. " + "Fat melts off of your form as the tendrils drift out of you and into the body of the huge dragon, " + "who lets out a snarl as his thick bulk expands, muscles swelling and belly ballooning even larger. " + "The tendril ceases to emanate from you, leaving you fatless, before you are slowly lowered back to the ground and control returns to your body. " + "The dragon growls, flexing significantly stronger muscles and looming a bit larger than before... ", false);
                                        }
                                        if (this.FAT > 200 && this.FAT <= 500) {
                                            this.scene("You are suspended in the air, unable to move, as bright red tendrils emanate from your body. " + "Your body seems to melt away, rapidly shrinking to fatlessness as the tendrils drift out of you and into the body of the huge dragon. " + "He flinches, his body shaking as it grows, muscles bulging thicker and his belly swelling and redoubling in size. " + "When the tendrils finally cease to flow from you, you are lowered to the floor and control returns to your body. " + "The dragon throws his head back and lets out a roar, stretching his massively thickened limbs before returning his attention to you... ", false);
                                        }
                                        if (this.FAT > 500) {
                                            this.scene("You are suspended in the air, unable to move, as brilliant red tendrils emanate from your body. " + "Your " + this.fatness() + " body rapidly melts away, reducing quickly to a fatless state as the tendrils drift out of you and into the body of the huge dragon. " + "He shudders, his body shaking as he lets out a growl, the tendrils making him grow rapidly. " + "His muscles thicken to massive proportions, and his tremendous gut blimps outward, swelling and filling on your stolen fat. " + "When the tendrils finally stop flowing from you, you are lowered slowly to the floor and control returns to your body. " + "For a brief moment, the dragon looks immensely please with his now monstrous bulk, " + "but his smile suddenly becomes a shocked grimace, and he lowers himself to a seat, moaning loudly and placing his huge hands on his over-stuffed belly... ", false);
                                        }
                                        drainedFat = this.FAT;
                                        if (drainedFat > 1500) {
                                            drainedFat = 1500;
                                        }
                                        this.chgTempStats("fat", -drainedFat);
                                        this.enemyt.STR = this.enemyt.STR + drainedFat / 15;
                                        this.enemyt.maxHEA = this.enemyt.maxHEA + drainedFat / 3;
                                        this.eHEA = this.enemyt.maxHEA;
                                        this.enemyt.attackCounterA--;
                                        if (drainedFat > 500) {
                                            this.enemyt.attackCounterB = this.enemyt.attackCounterB + (drainedFat - 250) / 250;
                                        }
                                        enemyAttacked = true;
                                    }
                                    if (!enemyAttacked) {
                                        if (this.enemyt.attackCounterB <= 0) {
                                            if (this.eHEA < this.enemyt.maxHEA * 0.75 && this.dXY(1, 8) == 1 && !enemyAttacked) {
                                                if (this.eHEA <= this.enemyt.maxHEA * 0.5 && !enemyAttacked) {
                                                    this.scene("<li>Magic Breath</li>", false);
                                                    switch (this.dodge()) {
                                                        case true:
                                                            this.scene("The dragon takes a deep breath, and you take that as a good sign to start evading. " + "He lets out a roar as a flood of magical energy erupts from his maw, but he fails to do anything more than leaving huge gouges on the floor and walls! ", false);
                                                            break;
                                                        case false:
                                                            this.scene("The dragon takes a deep breath, and with a roar, a flood of magical energy erupts from his maw, " + "smashing into you and pelting you with a stream of arcane bolts! ", false);
                                                            this.doHealth(-this.eDMG * 1.5);
                                                    }
                                                    enemyAttacked = true;
                                                }
                                                if (this.eHEA > this.enemyt.maxHEA * 0.5 && !enemyAttacked) {
                                                    this.scene("<li>Furious Claw</li>", false);
                                                    switch (this.dodge()) {
                                                        case true:
                                                            this.scene("The dragon growls fiercely, slashing at you with his clawed hands, but is too enraged to catch you with them! ", false);
                                                            break;
                                                        case false:
                                                            this.scene("The dragon growls fiercely, slashing you with his clawed hands like an enraged beast! ", false);
                                                            this.doHealth(-this.eDMG * 1.2);
                                                    }
                                                    enemyAttacked = true;
                                                }
                                            }
                                            if (this.eHEA < this.enemyt.maxHEA * 0.5 && this.dXY(1, 9) == 1 && !enemyAttacked) {
                                                this.scene("<li>Recover</li>", false);
                                                this.scene("The dragon growls angrily, reaching a hand back towards the magical container to beckon forth a glowing red tendril of arcane energy. " + "As it seeps into him, his wounds close, and his massive belly grows heavier. ", false);
                                                this.doEnemyHealth(this.dXY(this.enemyt.maxHEA * 0.2, this.enemyt.maxHEA * 0.3));
                                                this.enemyt.STR = this.enemyt.STR * 0.95;
                                                enemyAttacked = true;
                                            }
                                            if (this.eHEA < this.enemyt.maxHEA * 0.5 && this.dXY(1, 8) == 1 && !enemyAttacked) {
                                                if (this.eHEA <= this.enemyt.maxHEA * 0.25 && !enemyAttacked) {
                                                    this.scene("<li>Desperate Grasp</li>", false);
                                                    switch (this.dodge()) {
                                                        case true:
                                                            this.scene("The dragon leaps at you ferally, attempting to get a hold of you, but you manage to keep out of his grasp. ", false);
                                                            break;
                                                        case false:
                                                            this.scene("The dragon suddenly leaps on you, wrapping his limbs and tail around you to ensnare you. \"Give me your strength!\" he roars, reaching a hand over you. " + "A glowing glyph appears in the air in front of it, and you can feel its magic beginning to pull at you... ", false);
                                                            this.enemyt.attackCounterA = 3;
                                                            this.grapple = this.enemyt.STR * 3;
                                                            this.enemyt.grappleEscapeFail = ObjectUtil.copy(this.enemy.grappleEscapeFail) as String;
                                                            this.enemyt.grappleEscapeSucceed = ObjectUtil.copy(this.enemy.grappleEscapeSucceed) as String;
                                                    }
                                                    enemyAttacked = true;
                                                }
                                                if (this.eHEA > this.enemyt.maxHEA * 0.25 && !enemyAttacked) {
                                                    this.scene("<li>Furious Bite</li>", false);
                                                    switch (this.dodge()) {
                                                        case true:
                                                            this.scene("The dragon roars in fury, lunging at you head first as he attempts to snap you up in his massive jaws. " + "His fangs clack shut on nothing though as you deftly manage to avoid his bite. ", false);
                                                            break;
                                                        case false:
                                                            this.scene("The dragon roars in fury, lunging at you head first and sinking his massive fangs into you! You are caught in his jaws! It hurts and stings! ", false);
                                                            this.enemyt.attackCounterA = 2;
                                                            this.grapple = this.enemyt.STR * 3;
                                                            this.doHealth(-this.eDMG * 1.2);
                                                            this.enemyt.grappleEscapeFail = "You attempt to pry open the dragon\'s massive jaws, but he simply won\'t let go! ";
                                                            this.enemyt.grappleEscapeSucceed = "You manage to pry the dragon\'s massive jaws apart and pull yourself away! ";
                                                    }
                                                    enemyAttacked = true;
                                                }
                                            }
                                            if (!enemyAttacked) {
                                                switch (this.dXY(1, 5)) {
                                                    case 1:
                                                        this.scene("<li>Sting</li>", false);
                                                        switch (this.dodge()) {
                                                            case true:
                                                                this.scene("The dragon\'s tail suddenly comes flying through the air at you, seeming to stretch and elongate as it lashes at you, " + "but you avoid it before it punches into you. As it retracts, you can see a pointed tip dripping with venom change back to a normal draconic tail. ", false);
                                                                break;
                                                            case false:
                                                                this.scene("The dragon\'s tail suddenly comes lashing around his side, seeming to stretch and elongate as it flies towards you. " + "Just as it strikes into you, the tip develops a vicious point and seeps with venom, and you are left both punctured and poisoned! ", false);
                                                                this.doHealth(-this.eDMG);
                                                                this.chgTempStats("poison", this.dXY(4, 7));
                                                        }
                                                        break;
                                                    case 2:
                                                        this.scene("<li>Confuse</li>", false);
                                                        switch (this.dodge()) {
                                                            case true:
                                                                this.scene("The dragon suddenly holds a hand out, palm up, towards you. " + "You catch a glimpse of a prismatic, glowing orb and fight the inexplicable desire to stare into it, covering your eyes for a moment. " + "As you do, you can see a bright flash of various color at the peripherals of your vision, but are fortunately unaffected. ", false);
                                                                break;
                                                            case false:
                                                                this.scene("The dragon suddenly holds a hand out, palm up, towards you. Your eyes are drawn to a prismatic, glowing orb that levitates above his grasp, " + "and you are dazzled when it suddenly bursts into an array of lights and shapes. " + "When the colors fade, the world seems to make less sense, and your brain feels like it\'s on fire! ", false);
                                                                this.doHealth(-this.eDMG);
                                                                this.chgTempStats("INT", this.dXY(4, 7));
                                                        }
                                                        break;
                                                    case 3:
                                                        this.scene("<li>Drain</li>", false);
                                                        switch (this.dodge()) {
                                                            case true:
                                                                this.scene("The dragon waves his hands, summoning several dull red orbs. " + "With a gesture, they streak through the air and begin to converge on you, but you are too fast and elude them until they fizzle out of existence. ", false);
                                                                break;
                                                            case false:
                                                                this.scene("The dragon waves his hands, summoning several dull red orbs. With a gesture, they streak through the air and converge on you. " + "Where they touch you, you can feel an intense burning, and the orbs glow brilliant red as they return to the dragon. " + "As they fly off, you feel weaker, and when they meld into the dragon\'s body, he seems stronger! ", false);
                                                                this.chgTempStats("STR", this.dXY(4, 7));
                                                                this.enemyt.STR = this.enemyt.STR + this.dXY(4, 7);
                                                                this.doHealth(-this.eDMG);
                                                                this.doEnemyHealth(this.eDMG * 0.3);
                                                        }
                                                        break;
                                                    case 4:
                                                        this.scene("<li>Withering Scratch</li>", false);
                                                        switch (this.dodge() && this.dodge()) {
                                                            case true:
                                                                this.scene("The dragon lightly swipes his clawed hands at you, but doesn\'t manage to touch you even once as you stay well clear of them. " + "He growls in frustration. ", false);
                                                                break;
                                                            case false:
                                                                this.scene("The dragon lightly swipes his clawed hands at you, managing to just nick you. While it doesn\'t seem to do much at first, " + "it hurts steadily more, and you start to shudder, your mobility suffering! ", false);
                                                                this.doHealth(-this.eDMG * 0.8);
                                                                this.chgTempStats("AGI", this.dXY(4, 7));
                                                        }
                                                        break;
                                                    case 5:
                                                        this.scene("<li>Toxic Breath</li>", false);
                                                        this.scene("The dragon takes a deep breath, then blows out an unnatural violet-black fog, which envelopes you. " + "Even without breathing it in, you can feel yourself getting weaker, your constitution suffering! ", false);
                                                        this.chgTempStats("END", this.dXY(4, 7));
                                                        this.chgTempStats("poison", this.dXY(4, 7));
                                                }
                                            }
                                        }
                                        if (this.enemyt.attackCounterB > 0) {
                                            this.scene("<li>Immobilized</li>", false);
                                            if (this.enemyt.attackCounterB > 1) {
                                                this.scene("The dragon groans, rubbing his gigantic belly with a pained look on his face. It seems to shrink a bit, but he\'s still in no state to be resisting your attacks. ", false);
                                            }
                                            if (this.enemyt.attackCounterB == 1) {
                                                this.scene("The dragon rubs his gigantic belly for just a moment more, then slowly brings himself to his feet, " + "letting out an angry growl as he prepares to get back into the fight. ", false);
                                            }
                                            this.enemyt.attackCounterB--;
                                        }
                                    }
                                }
                                if (!this.alive() || this.AGI < 1 || this.END < 1 || this.STR < 1 || this.INT < 1) {
                                    this.scene("<li>Control</li>", false);
                                    this.scene("Suddenly, the dragon reaches forth and grabs your head, turning you to face him. \"This has gone on long enough,\" he rumbles, then gazes deep into your eyes. " + "\"Stop fighting,\" he commands, and the words ring and echo in your mind. For a moment, you resist, but soon find yourself unable to disobey. " + "You go limp under his grasp, and everything seems to go hazy... " + "\n\tThoroughly beaten and drained of the ability to fight further, you slump to the ground in a heap, only to find yourself picked up by the massive beast of a dragon. " + "\"You will be a meal to me, weak little creature, but first, you will do my bidding,\" he rumbles, putting a hand to your head. " + "Your thoughts and fears fade away, and you can feel your strength return to you. " + "After a few more moments, you are filled with rapture at the notion of serving this titanic beast, and then the world becomes a bit of a blur. ", false);
                                    currentState = "defeated";
                                    this.nextView();
                                    this.listen = function ():void {
                                        doTime(4320);
                                        stuffToBursting();
                                        doConsume(2000, 1000, 2500);
                                        chgTempStats("STR", -40);
                                        chgTempStats("AGI", -10);
                                        chgTempStats("END", -10);
                                        chgTempStats("INT", -10);
                                        scene("\tThere are hazy memories of roaming the mountain and eating, being fed sweet honey by massive insects, and devouring unwary travellers and all their food whole. " + "You lose track of time, and the world is only clear again when you stand before your captor once more, massively overfed and awaiting his command. " + "He beckons, and you slowly haul yourself to his feet before embracing his huge belly. " + "The dragon lets out a deep growl, and you feel yourself slowly sink in to his huge, soft stomach. " + "It engulfs you, a soft, gelatinous grey pillow that sucks you into its squishy warmth, wrapping around you gently but firmly, pulling you in. " + "He wraps his arms around you, pulling you into him as the majority of your body below your neck is engulfed by his now-ooze-like belly. " + "You are over-joyed to finally be being consumed... And at that moment, he touches your head, releasing his control of your thoughts. " + "You have just enough time for the realization of what\'s happened to sink in before he shoves your head inside of him, and you are soon turned into more of his massive stomach. ", true);
                                        defeatEvent(devoured);
                                    };
                                }
                        }
                        break;
                    case this.SandSnake:
                        if (this.surrender) {
                            if (this.grapple > 0) {
                                this.scene("\tYou shrug and decide not to fight any more, going limp against the coils. The snake smirks, and proceeds to pump more and more venom into you, and the warmth and continues to build. " + "Eventually, it’s becoming a bit too much to bear, and you feel yourself almost ready to fall asleep. " + "As your awareness flickers, the snake looks at you, before uncoiling itself from you and moving back to see how big you’ve become. " + "The snake opens " + this.enemyt.gender.his + " mouth, measuring you against it, " + "and it realises that it bloated you a little TOO big, to the point where " + this.enemyt.gender.he + " doesn’t think you’re edible. " + "It sighs with self-disdain as it burrows back into the sand, leaving you alone. " + "The venom is still working on your system, however, and the feeling of bloating continues to grow, which eventually makes you pass out in something rather akin to a food coma. ", false);
                                this.stuffToBursting();
                                this.defeatEvent(this.overeating);
                            }
                            else {
                                this.scene("\tYou sigh from exhaustion, putting any weapons you have away. The snake latches onto your arm, biting you, before it realises you aren’t retaliating. " + "It rears back a little, flashing its fangs at you, before opening its mouth wide and chomping down over your head. " + "You hear movement outside before you feel the impact of " + this.enemyt.gender.his + " tail sweeping your legs from under you and knocking you to the floor. " + "Helpless, you feel the snake work its way over you, with long, deep gulps, and feel the wet, muscular grip of its throat working you down further into " + this.enemyt.gender.his + " body. " + "Eventually, you feel your journey slow as you reach " + this.enemyt.gender.his + " stomach. You don’t bother struggling, but your head knocks against something fuzzy and hard in your fleshy prison. " + "You prod at it, and realise it’s a whole coconut. " + "Sighing, you poke at the one other thing in here with you, knowing that you won’t be able to open it. " + "Evidently, the snake senses your intentions, and after a bit of movement, you hear another gulp and something hard hits your foot. " + "You curl up and reach down, grabbing at it, and from touch alone, you discover it’s a somewhat pointed rock, and hear the snake let out something between a hiss and a chuckle. " + "For a vorish captor, the snake’s at least a tiny bit generous. " + "You break the coconut open with a few hits from the rock, gnawing at it as best you can. " + "Sated and slightly calmed from your fate, you lie down and eventually fall unconscious. ", false);
                                this.defeatEvent(this.devoured);
                            }
                        }
                        else {
                            if (this.grapple > 0) {
                                this.scene("<li>Poison</li>", false);
                                this.scene("As you move around in the vice-like wrap of the snake, you feel a spreading warmth from the bitemark. " + "Your confines are getting tighter, but the snake isn’t gripping harder – you’re getting bigger! ", false);
                                this.cram = this.dXY(5, 8);
                                this.doConsume(0, this.cram, this.cram * 0.6);
                                this.chgTempStats("INT", this.cram * 0.5);
                            }
                            else {
                                switch (this.dXY(1, 3)) {
                                    case 1:
                                        this.scene("<li>Attack</li>", false);
                                        this.scene("The snake lunges at you and bites you, dealing " + this.eDMG + " damage. You quickly pry " + this.enemyt.gender.him + " off before he can inject you with any venom. ", false);
                                        this.doHealth(-this.eDMG);
                                        break;
                                    case 2:
                                        this.scene("<li>Hypnotize</li>", false);
                                        switch (this.testSkill(this.INT, this.enemyt.INT + 35)) {
                                            case true:
                                                this.scene("The snake falls oddly still as it locks eyes with you. It grins as it tries to put you under a hypnotic stare, but it doesn’t manage to get proper eye contact. " + "Looking at it blankly, you reach over and gently poke it as a general message for the snake to cut it out. " + "It blinks as the hypnotic glimmer in its eyes disappears, scowling at you. ", false);
                                                break;
                                            default:
                                                this.scene("The snake falls oddly still as it locks eyes with you. " + "You go to attack once more, but can’t bring yourself to strike. " + "You stare back into the snake’s eyes, and you find something utterly entrancing about them. " + "Time seems to slow as " + this.enemyt.gender.his + " tongue flickers slower than it did before. ", false);
                                                this.chgTempStats("INT", this.dXY(4, 6));
                                                if (this.INT > 0) {
                                                    this.scene("You find yourself slowly pacing towards the snake, arm outstretched towards it, but something in your mind makes you snap out of it and break your gaze. " + "You didn’t fall entirely under " + this.enemyt.gender.his + " spell, but your head hurts and your mind feels unhinged from it. ", false);
                                                }
                                        }
                                        break;
                                    case 3:
                                        this.scene("<li>Grab</li>", false);
                                        this.scene("The snake rushes forward and coils around you, trapping you within its thick, orange grasp. ", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene("You pull the snake’s grasp off you and slap it away, the disorientation making its grip loosen, and you jump out of its coils! ", false);
                                                break;
                                            default:
                                                this.scene("It opens its mouth wide and bites deep into your belly. " + "\n", false);
                                                this.grapple = this.enemyt.STR * 3;
                                                this.enemyAttack();
                                        }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tYou stagger and fall to the ground, to weak to carry on fighting. As you look up at your victorious enemy, you can\'t help but fall into it\'s gaze. " + "You stare back into the snake’s eyes, and you find something utterly entrancing about them. Time seems to slow as " + this.enemyt.gender.his + " tongue flickers slower than it did before. ", false);
                                    this.INT = 0;
                                }
                            }
                            if (!this.alive() || this.INT <= 0) {
                                if (this.grapple > 0) {
                                    this.scene("\n\tThe warmth continues to spread through you, and you’re feeling extremely bloated and tired. " + "The fight finally goes out of you and you can’t struggle any more. " + "You wiggle like the overstuffed meal that you now are, and the snake proceeds to treat you as such. " + this.capFirst(this.enemyt.gender.he) + " opens wide, easing " + this.enemyt.gender.his + " jaws over you, wriggling " + this.enemyt.gender.his + " way down you. " + "It isn’t long before you’re in " + this.enemyt.gender.his + " tight, wet insides, and " + this.enemyt.gender.he + " lets out a satisfied burp. " + "There’s a large pause after that though, when it dawns on the snake – by moving down over you while still in a coil, it’s effectively tied itself in a knot. " + "It lets out more aggravated hisses, and you smirk a little as your consciousness fades, glad to see you’re not the only one suffering. ", false);
                                    this.defeatEvent(this.devoured);
                                }
                                else {
                                    this.scene("\n\tYou find yourself slowly pacing towards the snake, arm outstretched towards it, totally and utterly enraptured by " + this.enemyt.gender.him + ", " + "and even though a tiny voice in your mind knows that it’s completely and utterly stupid to feel like this, you feel totally enamoured with the snake. " + "It smiles at you, staring deep into your eyes before moving down to your belly and gently, almost tenderly, planting " + this.enemyt.gender.his + " fangs into you. " + "You wince a little, but you can’t bring yourself to object to it. " + "\n\tWith the snake deeply biting you, you feel a spreading warmth flowing through you. " + "The snake brings " + this.enemyt.gender.his + " tail up to you, caressing your gut, which you realise is growing wider and wider. " + "Evidently the venom of the snake is doing this, but you don’t care. " + "The warmth coupled with the love of the snake is enthralling. " + "You lean your cheek into the snake’s, nuzzling it in total, dopey bliss, and the feelings overwhelm you and you drift off to sleep. " + "\n\tYou awake from your long rest, and stretch a little, blinking the sleep out of your eyes... before you realise you can’t see anything – it’s totally dark. " + "A small inspection of your surroundings confirms your suspicions – the snake fattened you up and ate you. " + "At first, you feel kind of pleased about it, feeling glad " + this.enemyt.gender.he + "’s happy, " + "but this soon devolves into feelings of regret and sadness at " + this.enemyt.gender.him + " betraying you like this. " + "You begin to cry... before you feel something snap in your mind, and your senses come back. " + "Your feelings of love for the snake and the memories of the last few minutes instantly vanish. " + "You look around, and realise what happened again without the filter of the hypnosis clouding your judgement. " + "You swear loudly at how easily you were duped, and try to wriggle free, " + "but the long tube shape of the snake’s insides leave you unsure if you’re going towards or away from " + this.enemyt.gender.his + " mouth. " + "Eventually, you give up and stop fighting. " + "Unconsciousness takes you soon after. ", false);
                                    this.stuffToBursting();
                                    this.defeatEvent(this.devoured);
                                }
                            }
                        }
                        break;
                    case this.shamanBossNormal:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou lower yourself to the ground, unwilling to fight any further. Seeing this, the shaman raises " + this.enemyt.gender.his + " hands palm up, slowly. " + "Below you, vines erupt forth, and you are soon bound by them, unable to move. With a gesture and a call, others begin to gather around", false);
                                if (this.weight() <= 300) {
                                    this.scene("Two reptillian bystanders haul you onto an altar. ", false);
                                }
                                if (this.weight() <= 600 && this.weight() > 300) {
                                    this.scene("Four reptillian bystanders haul you onto an altar. ", false);
                                }
                                if (this.weight() <= 1000 && this.weight() > 600) {
                                    this.scene("Half a dozen reptillian bystanders haul you haphazardly onto an altar. ", false);
                                }
                                if (this.weight() > 1000) {
                                    this.scene("What feels like an entire village of reptillian bystanders struggle to haul your massive body onto an altar. ", false);
                                }
                                this.scene("From there, the shaman begins to chant, the unfamiliar island language interspersed with unnatural sounding words that you can barely even comprehend, let alone identify. " + "As magic flows around you, the world goes dark, the altar and village seeming to fade away, leaving you with the distinct feeling of falling. " + "\n\tWhen the sensation stops, you find yourself somewhere cold and dark. All you can see is five glowing lights, like sets of eyes staring at you. " + "A whispy, deep voice echoes around you in an unnatural tongue, and your pulse quickens, a cold feeling spreading through you. " + "Before you can fully comprehend what is happening, your body dissipates, absorbed by something in the darkness, and you are no more. ", false);
                                this.defeatEvent(this.transformed);
                                break;
                            case false:
                                if (this.attemptsLeft <= 0 && !enemyAttacked) {
                                    this.scene("<li>Thorn wrap</li>", false);
                                    this.scene("The shaman chants a few words, and the ground ruptures below your feet, thorned vines erupting forth and biting into your flesh as they wrap tightly around you! ", false);
                                    this.attemptsLeft = 7;
                                    enemyAttacked = true;
                                }
                                if (this.attemptsLeft > 0) {
                                    this.attemptsLeft--;
                                    if (this.attemptsLeft > 3) {
                                        this.scene("<li>Thorns</li>", false);
                                        this.scene("The thorny vines dig into you. ", false);
                                        this.doHealth(-this.dXY(6, 10));
                                        if (this.d100() < 15) {
                                            this.chgTempStats("stun", 1);
                                        }
                                    }
                                    if (this.attemptsLeft <= 0) {
                                        this.attemptsLeft = 0;
                                        this.scene("The vines around you retract back into the ground, expended of their magic! ", false);
                                    }
                                }
                                if (!enemyAttacked) {
                                    switch (this.dXY(1, 2)) {
                                        case 1:
                                            if (this.dXY(1, 3) == 3 || this.AGI < 8 || this.STR < 8) {
                                                this.scene("<li>Geyser</li>", false);
                                                this.scene("The shaman bends low to the ground, hands facing upwards before " + this.enemyt.gender.he + " suddenly rises, throwing " + this.enemyt.gender.his + " hands up in the air. " + "Below you, the earth rumbles, then cracks open as a geyser of water pounds into you, sending you flying into the air before you land hard on the ground. ", false);
                                                this.doHealth(-this.eDMG);
                                            }
                                            else {
                                                this.scene("<li>Fatten</li>", false);
                                                this.scene("The shaman waves " + this.enemyt.gender.his + " hands, chanting curses at you in a language you don\'t understand. " + "The world suddenly seems heavier, your strength leaving you as your muscles turn into thick, heavy fat on your body! ", false);
                                                this.chgTempStats("STR", this.dXY(3, 7));
                                                this.chgTempStats("AGI", this.dXY(3, 7));
                                                this.chgTempStats("fat", this.dXY(6, 14));
                                            }
                                            break;
                                        case 2:
                                            switch (this.eHEA > this.enemyt.maxHEA * 0.5) {
                                                case true:
                                                    this.scene("<li>Rock pelt</li>", false);
                                                    switch (this.dodge()) {
                                                        case true:
                                                            this.scene("The shaman swipes " + this.enemyt.gender.his + " hand at you, sending small hunks of the ground flying at you, but you neatly dodge away.", false);
                                                            break;
                                                        case false:
                                                            this.scene("The shaman swipes " + this.enemyt.gender.his + " hand at you, causing small hunks of the ground to fly at you, pelting you for " + this.eDMG + " damage!", false);
                                                            this.doHealth(-this.eDMG);
                                                    }
                                                    break;
                                                default:
                                                    this.scene("<li>Boulder smash</li>", false);
                                                    switch (this.dodge() && this.dodge()) {
                                                        case true:
                                                            this.scene("The shaman raises " + this.enemyt.gender.his + " hand and clenches it into a fist, causing the ground around you to hurl itself at you in dozens of large chunks. " + "Fortunately, you are able to get yourself away from its epicenter without getting crushed thanks to a quick leap to the side. ", false);
                                                            break;
                                                        case false:
                                                            this.scene("The shaman raises " + this.enemyt.gender.his + " hand and clenches it into a fist, " + "causing the ground around you to hurl itself at you in dozens of large chunks, smashing into you! ", false);
                                                            this.doHealth(-this.eDMG * 1.2);
                                                    }
                                            }
                                    }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tThe shaman\'s last attack proves too much for you, and you stumble to the ground, too injured to fight on. " + "Seeing this, the shaman raises " + this.enemyt.gender.his + " hands palm up, slowly. " + "Below you, vines erupt forth, and you are soon bound by them, unable to move. With a gesture and a call, others begin to gather around. ", false);
                                    if (this.weight() <= 300) {
                                        this.scene("Two reptillian bystanders haul you onto an altar. ", false);
                                    }
                                    if (this.weight() <= 600 && this.weight() > 300) {
                                        this.scene("Four reptillian bystanders haul you onto an altar. ", false);
                                    }
                                    if (this.weight() <= 1000 && this.weight() > 600) {
                                        this.scene("Half a dozen reptillian bystanders haul you haphazardly onto an altar. ", false);
                                    }
                                    if (this.weight() > 1000) {
                                        this.scene("What feels like an entire village of reptillian bystanders struggle to haul your massive body onto an altar. ", false);
                                    }
                                    this.scene("From there, the shaman begins to chant, the unfamiliar island language interspersed with unnatural sounding words that you can barely even comprehend, let alone identify. " + "As magic flows around you, the world goes dark, the altar and village seeming to fade away, leaving you with the distinct feeling of falling. " + "\n\tWhen the sensation stops, you find yourself somewhere cold and dark. All you can see is five glowing lights, like sets of eyes staring at you. " + "A whispy, deep voice echoes around you in an unnatural tongue, and your pulse quickens, a cold feeling spreading through you. " + "Before you can fully comprehend what is happening, your body dissipates, absorbed by something in the darkness, and you are no more. ", false);
                                    this.defeatEvent(this.transformed);
                                }
                        }
                        break;
                    case this.SoldierAnt:
                        if (this.enemyt.item == null) {
                            enemyItem = this.Apple;
                            switch (this.dXY(1, 3)) {
                                case 1:
                                    enemyItem = this.Sausage;
                                    break;
                                case 2:
                                    enemyItem = this.Apple;
                                    break;
                                case 3:
                                    enemyItem = this.Grapes;
                            }
                            this.enemyt.item = ObjectUtil.copy(enemyItem) as Items;
                            this.enemyt.item.Charges = this.dXY(3, 5);
                        }
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou decide to stop resisting, and lower yourself to your hands and knees. " + "Being creatures of raw instinct, the ants climb on you and give you a few more bites and stings for your trouble. " + "Their poison causes you to slump the rest of the way to the ground, the world becoming a painful haze. " + "\n\tYou awaken somewhere dark, the sound of insects all around you. " + "At first it feels like you\'re hovering over the ground, but the lumps underneath you make it clear, " + "after a few moments to gather your senses, that you\'re being carried by some of the ants you fought. " + "It hurts too much to move, and you can only watch as they carry you past a giant abomination of a wasp and into a large, waxy chamber. " + "In the low light, you can just make out the massive, bloated form of some kind of queen insect, its relatively tiny legs wriggling uselessly under its bulk. " + "\n\tA buzzing above you heralds what look to be a few large bees hovering down to grab you. " + "They lift you up to the queen\'s head, and it opens its mandibles greedily. With exceptional accuracy, you are dropped into the queen\'s mouth, and swallowed down without a fuss. " + "The buzzing and chittering of insects is muffled as the queen\'s stomach begins to churn upon you. " + "The pressure on your injuries and poisoned insides is enough to send you back to unconsciousness in short order. ", false);
                                this.defeatEvent(this.devoured);
                                break;
                            default:
                                antsLeft = Math.ceil(this.eHEA / 50);
                                poisonStacks = 0;
                                this.scene("<li>Swarm</li>", false);
                                this.i = 1;
                                while (this.i <= antsLeft) {
                                    switch (this.dXY(1, 2)) {
                                        case 1:
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("An ant crawls on you, but you shake it off before it can hurt you. ", false);
                                                    break;
                                                default:
                                                    this.scene("An ant crawls up you, finding a weakness in your defenses, and bites you! ", false);
                                                    this.doHealth(-this.eDMG);
                                                    if (this.d100() < 20) {
                                                        poisonStacks = poisonStacks + this.dXY(1, 2);
                                                    }
                                            }
                                            break;
                                        default:
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("You catch an ant getting ready to sting you and swat it aside. ", false);
                                                    break;
                                                default:
                                                    this.scene("You feel a stabbing pain and look just in time to see an ant stinging your body! ", false);
                                                    this.doHealth(-this.eDMG * 0.7);
                                                    if (this.d100() < 70) {
                                                        poisonStacks = poisonStacks + this.dXY(1, 3);
                                                    }
                                            }
                                    }
                                    this.i++;
                                }
                                if (poisonStacks > 0) {
                                    this.scene("A burning pain spreads outward from your wounds. ", false);
                                    this.chgTempStats("poison", poisonStacks);
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tGrunting and swearing, you desperately try to get the ants off of you, but the combination of bleeding bites and envenomed limbs sends you crashing to the ground. " + "It only gets worse, more and more nasty pain piling up before you finally lose consciousness. " + "You awaken somewhere dark, the sound of insects all around you. " + "At first it feels like you\'re hovering over the ground, but the lumps underneath you make it clear, after a few moments to gather your senses, " + "that you\'re being carried by some of the ants you fought. " + "It hurts too much to move, and you can only watch as they carry you past a giant abomination of a wasp and into a large, waxy chamber. " + "In the low light, you can just make out the massive, bloated form of some kind of queen insect, its relatively tiny legs wriggling uselessly under its bulk. " + "\n\tA buzzing above you heralds what look to be a few large bees hovering down to grab you. " + "They lift you up to the queen\'s head, and it opens its mandibles greedily. With exceptional accuracy, you are dropped into the queen\'s mouth, and swallowed down without a fuss. " + "The buzzing and chittering of insects is muffled as the queen\'s stomach begins to churn upon you. " + "The pressure on your injuries and poisoned insides is enough to send you back to unconsciousness in short order. ", false);
                                    this.defeatEvent(this.devoured);
                                }
                        }
                        break;
                    case this.SphericalShark:
                        if (this.surrender) {
                            this.scene("\tYou don’t like the idea of continuing the fight and giving the shark more reason to bite and otherwise harm you, " + "so you hold out your hand in a halting hand-sign, trying to stop the shark, wordlessly conveying that you no longer want to fight. " + "The shark practically screeches to a halt, but bumps into you from " + this.enemyt.gender.his + " inertia. " + this.capFirst(this.enemyt.gender.he) + " pauses and looks at you, seeing if this is some sort of ploy, but soon opens its mouth wide, swims above you and darts down at you, " + "getting to your waist before it stops, spins in the water so it’s facing up, and swallowing you as best it can. " + "The teeth are thankfully not painful, due to them being backward-facing – They’d only hurt if you tried to tug yourself out. " + "You enter the shark’s stomach, and soon the gentle sway of the shark swimming off on its way is enough to rock you to sleep. ", false);
                            this.defeatEvent(this.devoured);
                        }
                        else {
                            if (this.dXY(1, 5) == 1 && this.HEA / this.maxHEA < 0.25) {
                                this.scene("<li>Devour</li>", false);
                                switch (this.dodgeInstaDeath()) {
                                    case true:
                                        this.scene("The shark attacks, spinning in the water and trying to smack you with " + this.enemyt.gender.his + " tail. You quickly duck down and it sails past your head harmlessly. ", false);
                                        break;
                                    default:
                                        this.scene("The shark attacks, spinning in the water and trying to smack you with " + this.enemyt.gender.his + " tail. " + "Although you move back in the water, you feel a small sting of pain and realise you were still hit by just the tip of " + this.enemyt.gender.his + " tail, leaving you with a small cut. " + "You and the shark ready yourselves to clash again, but notice the tiny cloud of blood in the water. Both of you share a quick glance of dread, but for different reasons; " + "you, for the fact it’ll attract more wildlife, and " + this.enemyt.gender.him + " for the fact " + this.enemyt.gender.he + " might lose the meal " + this.enemyt.gender.he + "’s been fighting for. " + "Sure enough, a few moments later, another shark suddenly barges into the one you were fighting - " + "The blood in the water acted like a shark magnet, and the two of them are squabbling with each other over you. Two sharks becomes four, then six, all ramming, " + "fin-slapping and generally fighting over you in a manner that could only be more comical if there was a dust cloud building in the fight. " + "You decide to take the chance to slink off, but as soon as you turn, you\'re greeted by the sight of a colossal, many-fanged mouth before everything goes black. " + "Evidently, yet another shark noticed your predicament and went in for an easy meal. " + "You would ordinarily struggle, but the rows of backwards-facing teeth put you off that idea, because they would slice you to ribbons if you tried to back out. " + "The shark chomps its way over you, sucking in your legs and swallowing, burping in satisfaction as it quickly swims off before the others notice. ", false);
                                        this.defeatEvent(this.devoured);
                                }
                            }
                            else {
                                this.scene("<li>Attack</li>", false);
                                this.doHealth(-this.eDMG);
                                if (this.dXY(1, 2) == 1) {
                                    this.scene("The shark surges forwards, biting at you and dealing " + this.eDMG + " damage. " + "You manage to punch " + this.enemyt.gender.him + " in the gills and " + this.enemyt.gender.he + " lets go before " + this.enemyt.gender.he + " draws blood. ", false);
                                }
                                else {
                                    this.scene("The shark pulls back then charges, crashing into your gut and dealing " + this.eDMG + " damage. ", false);
                                    if (this.HEA > 0) {
                                        this.scene("It winds you, and you expend time and effort getting a breath of air from the surface, and you’re left sore and rattled by the experience. ", false);
                                        if (this.END > 3) {
                                            this.chgTempStats("END", 3);
                                        }
                                        this.doStamina(-10);
                                    }
                                }
                            }
                            if (!this.alive()) {
                                this.scene("\n\tThe last hit from the shark takes the last of your strength from you, and you float to the surface of the water and pass out, with your head mercifully above water. ", false);
                                this.defeatEvent(this.battle);
                            }
                        }
                        break;
                    case this.SyrupVine:
                        if (this.surrender) {
                            this.scene("\tYou lower your defences and fall into the tangle of vines. They quickly wrap around your arms and legs as one large vine crams itself into your mouth. " + "You bite down on the vine and start sucking down sweet thick syrup. " + "Just like maple syrup and yet somehow intoxicating, like this could be all you eat for the rest of your days and you\'d be fine. ", true);
                            this.doConsume(0, this.enemyt.eaten, this.enemyt.eaten * 0.6);
                            switch (this.alive()) {
                                case true:
                                    this.scene("\n\tYou gladly suck down more and more syrup. Your stomach is now " + this.waist() + ". " + "The vines seem to weaken and you\'re slowly lowered to the ground. " + "You continue sucking on the vine in your mouth, but the flow of syrup slows down to a trickle before finally stopping. " + "Disappointedly, you pull the vine out of your mouth and it flops to the ground. " + "Apparently you were able to drain the creature dry and it now appears to just be a tangle of ordinary vines. " + "And you were only " + this.hungry() + ". ", false);
                                    this.winBattle("");
                                    break;
                                case false:
                                    this.scene("\n\tYou keep sucking down more and more syrup, yet there seems to be almost no end in sight. " + "Your stomach starts feeling dangerously full yet more and more syrup continues to pour from this creature. " + "You can no longer force yourself to swallow due to the intense fullness stretching your wobbly gut. " + "A vine wraps around your waist and periodically squeezes your " + this.waist() + " stomach as it\'s slowly pumped fuller and fuller. " + "You try to open your jaws to spit out the vines, but your mouth is practically welded to the vine with sticky syrup. " + "The vines sense you\'re no longer sucking down any syrup and begins actively pumping it down your throat. " + "You can\'t help but swallow despite your aching groaning stomach. " + "In little time you\'re just too full to stay awake and you eventually drift off to sleep as you are slowly inflated with globs sticky syrup. ", false);
                                    this.defeatEvent(this.overeating);
                            }
                        }
                        else {
                            if (this.grapple > 0) {
                                this.scene("<li>Feed</li>", false);
                                this.scene("The vines that are crammed in your mouth start oozing huge globs of sickeningly sweet syrup down your throat. ", false);
                                this.cram = this.dXY(2, 5);
                                this.enemyt.eaten = this.enemyt.eaten - this.cram;
                                this.doConsume(0, this.cram, this.cram * 0.5);
                            }
                            if (this.grapple <= 0) {
                                switch (this.dXY(1, 2) == 1 && this.AGI > 6) {
                                    case true:
                                        this.scene("<li>Syruped</li>", false);
                                        this.scene("Sweet amber syrup leaks from the ends of several vines, covering whatever parts of you they touch in sticky syrup and slowing you down. ", false);
                                        this.chgTempStats("AGI", this.dXY(2, 6));
                                        break;
                                    case false:
                                        this.scene("<li>Grab</li>", false);
                                        this.scene("The vines coil in upon themselves before leaping out at you", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene(", but you manage to dodge out of their way.", false);
                                                break;
                                            default:
                                                this.scene(" and wrap themselves around your arms and legs. In your constricted state, several tentacles cram themselves between your jaws. ", false);
                                                this.grapple = this.enemyt.AGI + this.enemyt.STR;
                                                this.enemyAttack();
                                        }
                                }
                            }
                            if (this.enemyt.eaten <= 0 && this.alive()) {
                                this.winBattle("You notice the rate of syrup flow is slowly dwindling before coming to a stop. The vines seem to loose their strength as they start limply falling to the ground. " + "Cautiously picking up a vine, you notice that it appears you\'ve actually sucked the entire mass of vines dry. Apparently you\'ve won! ");
                            }
                            if (!this.alive()) {
                                this.scene("\n\tYou\'re so full you no longer have the strength to fight the vines. " + "The syrup is so sweet you find yourself only craving more even as your stomach slowly inflates larger and larger. " + "You slowly close your eyes and finally enjoy the flavor as you drift into unconsciousness. ", false);
                                this.defeatEvent(this.overeating);
                            }
                        }
                        break;
                    case this.takeoutTerror:
                        switch (this.surrender) {
                            case true:
                                switch (this.GLD >= 8) {
                                    case true:
                                        this.scene("\tA look of gluttonous glee spreads over the super-fattened " + this.enemyt.species.name + "’s face as you hand over 8 gold. " + "\"Oof, thanks, I- BURRP!-just got time to make it for DESSERT!\" Without another word he squeezes past you, practically smooshing you into the wall. " + "You’re left a little bruised, but otherwise unharmed. ", false);
                                        this.doGold(-8);
                                        currentState = "default";
                                        this.nextButton();
                                        break;
                                    case false:
                                        if (this.GLD > 1) {
                                            this.scene("\tYou take out you last " + this.GLD + " gold and toss them at him. The coins bounce of his gut with several pings and he looks back at you, apparently still not satisfied. ", false);
                                        }
                                        if (this.GLD == 1) {
                                            this.scene("\tYou take out the last gold coin you have and toss it at him. It bounces off his gut with a soft ping and falls to the ground. " + "He looks back up at you, clearly still not satisfied. ", false);
                                        }
                                        if (this.GLD <= 0) {
                                            this.scene("\tWith a sigh you rummage in your inventory, but find yourself embarrassingly short of cash. ", false);
                                        }
                                        this.scene("A look of desperation and annoyance begins to crease the fatso’s face, ", false);
                                        this.i = 0;
                                        while (this.i < this.invArray.length) {
                                            takeoutTerrorTestFood = this.invArray[this.i];
                                            if (takeoutTerrorTestFood.Food == true) {
                                                takeoutTerrorFood = takeoutTerrorTestFood;
                                                break;
                                            }
                                            this.i++;
                                        }
                                        switch (takeoutTerrorFood) {
                                            case null:
                                                this.scene("and you frantically look for some food as a substitute, but there’s nothing that’ll satisfy an appetite like THIS. " + "Suddenly losing patience, the butterball " + this.enemyt.species.name + " grabs hold of you with his fat, surprisingly strong hands, " + "belly rolling up against you like a soft wrecking-ball. \"More food... MORE... FOOOOOD...!\" " + "Still compressed against that mountain of chub, you feel yourself being bodily lifted off your " + this.playerSpecies.feet + ", " + "scraping against the rolls and folds of his overfed frame as you go. You’re brought face-to-face with him, both of you sweating with exertion, " + "though his face is the fatter by far. His eyes have a distant, hungry quality. He\'s not seeing \'you\', just one of the biggest portions of takeout he’s ever seen. " + "His gut emits another deep gurrrrrgling sound and he opens wiiiiiiiide, stuffing you head-first down his gullet. " + "It takes him some time, but he manages to stuff all of you in in one bite, aided by the grease from all the fried foods he\'s inhaled previously. ", false);
                                                if (this.weight() > 600) {
                                                    this.scene("Your " + this.fatness() + " belly gives him some difficulty, but he stolidly pushes more and more of you in with his hands, " + "mouth stretching wider and wider to accommodate all of it. ", false);
                                                }
                                                this.scene("By the time your nose is tickling at his stomach, you can feel his jaws pressing on your backside while your legs kick helplessly. " + "A muffled rrrrrip! sound tells you that your devourer has just burst out of his clothes, " + "followed by a shuddering THUMP that suggests he’s just fallen onto his enormous butt, too stuffed to move. " + "You’re pressed into his capacious stomach, stretching it ", false);
                                                if (this.weight() < 300) {
                                                    this.scene("slightly", false);
                                                }
                                                if (this.weight() < 450 && this.weight() >= 300) {
                                                    this.scene("moderately", false);
                                                }
                                                if (this.weight() < 600 && this.weight() >= 450) {
                                                    this.scene("significantly", false);
                                                }
                                                if (this.weight() >= 600) {
                                                    this.scene("hugely", false);
                                                }
                                                this.scene(". You can feel your devourer’s fat hands rubbing weakly at his stretched sides, pressing against you through the deep layers of blubber. " + "\n\tIt’s very hot and stuffy in there, and mercifully you quickly lose consciousness. You can only imagine how fat this guy’s going to be after digesting YOU... ", false);
                                                this.doGold(-this.GLD);
                                                this.defeatEvent(this.devoured);
                                                break;
                                            default:
                                                this.scene("but at the last minute you manage to rustle up " + takeoutTerrorFood.article + " " + takeoutTerrorFood.Name + ", and his face lights up. " + "Without another word he snatches it from you and crams it into his mouth with greedy grunts. " + "While he’s distracted, you make a hasty getaway, appalled equally by the fact that that you were so easily bullied and by the table-manners you’ve just witnessed. ", false);
                                                this.doGold(-this.GLD);
                                                this.expendItem(this.invArray[this.itemFind(takeoutTerrorFood)]);
                                                currentState = "default";
                                                this.nextButton();
                                        }
                                }
                                break;
                            case false:
                                if (this.grapple > 0) {
                                    this.scene("<li>Devour</li>", false);
                                    switch (this.attemptsLeft) {
                                        case 3:
                                            this.scene("As you squirm helplessly against in your vast opponent’s obese embrace, you feel his gigantic blubbersome belly rumble ominously against you. ", false);
                                            this.attemptsLeft--;
                                            break;
                                        case 2:
                                            this.scene("All this fighting has worked up an appetite. ", false);
                                            this.attemptsLeft--;
                                            break;
                                        case 1:
                                            this.scene("He moans, and then " + this.enemyt.species.angry + " ravenously. \"More food... MORE... FOOOOOD...!\" " + "Still compressed against that mountain of chub, you feel yourself being bodily lifted off your " + this.playerSpecies.feet + ", " + "scraping against the rolls and folds of his overfed frame as you go. You’re brought face-to-face with him, both of you sweating with exertion, " + "though his face is the fatter by far. His eyes have a distant, hungry quality. He\'s not seeing \'you\', just one of the biggest portions of takeout he’s ever seen. " + "His gut emits another deep gurrrrrgling sound and he opens wiiiiiiiide, stuffing you head-first down his gullet. " + "It takes him some time, but he manages to stuff all of you in in one bite, aided by the grease from all the fried foods he\'s inhaled previously. ", false);
                                            if (this.weight() > 600) {
                                                this.scene("Your " + this.fatness() + " belly gives him some difficulty, but he stolidly pushes more and more of you in with his hands, " + "mouth stretching wider and wider to accommodate all of it. ", false);
                                            }
                                            this.scene("By the time your nose is tickling at his stomach, you can feel his jaws pressing on your backside while your legs kick helplessly. " + "A muffled rrrrrip! sound tells you that your devourer has just burst out of his clothes, " + "followed by a shuddering THUMP that suggests he’s just fallen onto his enormous butt, too stuffed to move. " + "You’re pressed into his capacious stomach, stretching it ", false);
                                            if (this.weight() < 300) {
                                                this.scene("slightly", false);
                                            }
                                            if (this.weight() < 450 && this.weight() >= 300) {
                                                this.scene("moderately", false);
                                            }
                                            if (this.weight() < 600 && this.weight() >= 450) {
                                                this.scene("significantly", false);
                                            }
                                            if (this.weight() >= 600) {
                                                this.scene("hugely", false);
                                            }
                                            this.scene(". You can feel your devourer’s fat hands rubbing weakly at his stretched sides, pressing against you through the deep layers of blubber. " + "\n\tIt’s very hot and stuffy in there, and mercifully you quickly lose consciousness. You can only imagine how fat this guy’s going to be after digesting YOU... ", false);
                                            this.defeatEvent(this.devoured);
                                    }
                                }
                                if (this.grapple <= 0) {
                                    switch (this.dXY(1, 6)) {
                                        case 1:
                                            this.scene("<li>Squash</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("With a growl the vastly-overfed " + this.enemyt.species.name + " tries to pin you against the nearest wall with his stomach, " + "but fortunately for you you’re able to dodge free just in time. There’s a loud SMACK as his bare belly hits the stonework. Ouch, that’s got to SMART... ", false);
                                                    break;
                                                case false:
                                                    this.scene("With a growl the vastly-overfed " + this.enemyt.species.name + " steps forward and literally bulldozes you against the nearest wall with his blubber-blown belly- " + "it’s a wonder the collision doesn’t knock the wall down. Squashed against the stonework like an insect, you wheeze as all the breath is pressed out of you. ", false);
                                                    this.doHealth(-this.eDMG);
                                            }
                                            break;
                                        case 2:
                                            this.scene("<li>Punch</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("Your jumbo-sized adversary swings a podgy fist at you, but luckily he’s so lumbering that you see it coming in time and duck. " + "His fist sails through empty air and he has to windmill violently to retain balance, giving you time to move clear. ", false);
                                                    break;
                                                case false:
                                                    this.scene("Your jumbo-sized adversary swings a podgy fist at you in a roundhouse punch. It connects with your chin and you practically spin around. " + "He may be slow, but that swing’s got a LOT of weight behind it. ", false);
                                                    this.doHealth(-this.eDMG);
                                            }
                                            break;
                                        case 3:
                                            this.scene("<li>Snack</li>", false);
                                            this.scene("Squaring up to you, your opponent’s nose starts to twitch. He spots a discard food wrapper on the floor, and forgetting all about you for the moment bends down and grabs it. " + "You expect the seam of his pants to burst at any second. There’s obviously some of the snack remaining, because he upends the wrapper over his snout and devours the contents. " + "Wiping his greasy lips with a fat " + this.enemyt.species.hand + ", the massively obese " + this.enemyt.species.name + " returns his attention to you... ", false);
                                            this.doEnemyHealth(10);
                                            break;
                                        case 4:
                                            this.scene("<li>Button-burst</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("Your fat opponent swings a punch at you violently, clothes creeeaking in protest at the sudden movements. " + "With a loud POP a button SNAPS free of his shirt and ricochets harmlessly off the wall behind you. " + "A bit more of his vast paunch hangs free of his clothing and he grunts in irritation. ", false);
                                                    break;
                                                case false:
                                                    this.scene("Your jumbo-sized adversary swings a podgy fist at you, but luckily he’s so lumbering that you see it coming in time and duck. " + "His fist sails through empty air and he has to windmill violently to retain balance, giving you time to move clear. ", false);
                                                    this.doHealth(-this.eDMG * 0.8);
                                                    if (this.d100() < 30) {
                                                        this.chgTempStats("stun", 1);
                                                    }
                                            }
                                            break;
                                        case 5:
                                            this.scene("<li>Belch</li>", false);
                                            this.scene("As you prepare to attack an ominous GLORP arises from you massive opponent’s belly. He puts both hands to the sides of his stomach and lets out a colossal BURRRRRAP! " + "It’s worse than standing underneath a church bell when it’s struck. The noise echoes down the darkened streets and sends you reeling, clutching your ears defensively. ", false);
                                            this.chgTempStats("stun", 1);
                                            break;
                                        case 6:
                                            this.scene("<li>Grab</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("Your hugely obese opponent makes a sudden lunge at you, trying to catch you off-guard. " + "Fortunately he’s so colossally lumbering that you manage to dodge, and he stampedes right past you, unable to change course in time. ", false);
                                                    break;
                                                case false:
                                                    this.scene("Your hugely obese opponent makes a sudden lunge at you, taking you by surprise. " + "His blubbery bulk SER-MACKS against you and he manages to get one fat arm wrapped around you in a headlock. " + "You can feel the rolls of flab on his bloated arm wobble and smoosh against your face as you struggle to breathe, " + "while that mammoth belly rolls up and rests on your back like some gargantuan boulder, pinning you down. Talk about... throwing your weight around... ", false);
                                                    this.grapple = this.enemyt.STR * 3;
                                                    this.attemptsLeft = 3;
                                            }
                                    }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tYou slump weakly against this monster’s massive stomach, defeated by his sheer BULK. " + "You sink to your knees, face resting against that huge stomach, which lets out a cavernous rumble. " + "You feel your opponent’s fat arms grab you, smooshing and pinning you against all that flab, but you’re too weak to fight back. " + "Your face winds up pressed into his gargantuan chest. He lets out a ravenous " + this.enemyt.species.angry + ". \"More food... MORE... FOOOOOD...!\" " + "\n\tStill compressed against that mountain of chub, you feel yourself being bodily lifted off your " + this.playerSpecies.feet + ", " + "scraping against the rolls and folds of his overfed frame as you go. You’re brought face-to-face with him, both of you sweating with exertion, " + "though his face is the fatter by far. His eyes have a distant, hungry quality. He’s not seeing ‘you’, just one of the biggest portions of takeout he’s ever seen. " + "His gut emits another deep gurrrrrgling sound and he opens wiiiiiiiide, stuffing you head-first down his gullet. " + "It takes him some time, but he manages to stuff all of you in in one bite, aided by the grease from all the fried foods he’s inhaled previously. ", false);
                                    if (this.weight() > 600) {
                                        this.scene("Your " + this.fatness() + " belly gives him some difficulty, but he stolidly pushes more and more of you in with his hands, " + "mouth stretching wider and wider to accommodate all of it. ", false);
                                    }
                                    this.scene("By the time your nose is tickling at his stomach, you can feel his jaws pressing on your backside while your legs kick helplessly. " + "A muffled rrrrrip! sound tells you that your devourer has just burst out of his clothes, " + "followed by a shuddering THUMP that suggests he’s just fallen onto his enormous butt, too stuffed to move. " + "You’re pressed into his capacious stomach, stretching it ", false);
                                    if (this.weight() < 300) {
                                        this.scene("slightly", false);
                                    }
                                    if (this.weight() < 450 && this.weight() >= 300) {
                                        this.scene("moderately", false);
                                    }
                                    if (this.weight() < 600 && this.weight() >= 450) {
                                        this.scene("significantly", false);
                                    }
                                    if (this.weight() >= 600) {
                                        this.scene("hugely", false);
                                    }
                                    this.scene(". You can feel your devourer’s fat hands rubbing weakly at his stretched sides, pressing against you through the deep layers of blubber. " + "\n\tIt’s very hot and stuffy in there, and mercifully you quickly lose consciousness. You can only imagine how fat this guy’s going to be after digesting YOU... ", false);
                                    this.defeatEvent(this.devoured);
                                }
                        }
                        break;
                    case this.Thief:
                        if (this.surrender) {
                            if (this.GLD > 8) {
                                this.scene("\tYou quickly toss a handful of gold at the " + this.enemyt.species.name + " in the hopes that it\'ll make " + this.enemyt.gender.him + " go away. " + this.capFirst(this.enemyt.gender.he) + " deftly snatches the gold out of the air. \"Good choice, sucker.\" " + "and with that " + this.enemyt.gender.he + " dashes off into the night. ", true);
                                this.doGold(-8);
                                currentState = "default";
                                this.nextButton();
                            }
                            else if (this.GLD > 0) {
                                this.scene("\tYou quickly toss what gold you have left at the " + this.enemyt.species.name + " in the hopes that it\'ll make " + this.enemyt.gender.him + " go away. " + this.capFirst(this.enemyt.gender.he) + " deftly snatches the gold out of the air. \"Good choice, sucker.\" " + "and with that " + this.enemyt.gender.he + " dashes off into the night. ", true);
                                this.doGold(-this.GLD);
                                currentState = "default";
                                this.nextButton();
                            }
                            else {
                                this.scene("\tYou search your person for any gold you might have, but you can only shrug your shoulders at " + this.enemyt.gender.him + " when you come up with nothing. " + "The " + this.enemyt.species.name + " sighs angrily. \"What a waste.\" and with that " + this.enemyt.gender.he + " angrily skulks off into the night. ", true);
                                currentState = "default";
                                this.nextButton();
                            }
                        }
                        else {
                            this.chance = this.dXY(1, 5);
                            if (this.chance == 1 && this.enemyt.GLD >= 15) {
                                this.scene("<li>Run</li>", false);
                                this.scene("The thief, satisfied with " + this.enemyt.gender.his + " \"earnings\" turns to run away", false);
                                if (this.enemyt.AGI > this.AGI) {
                                    this.scene(" and leaves you behind in the dust. ", false);
                                    currentState = "default";
                                    this.nextButton();
                                }
                                else {
                                    this.scene(", but you catch up to " + this.enemyt.gender.him + " before " + this.enemyt.gender.he + " can get away. ", false);
                                }
                            }
                            else if (this.chance == 2 && this.AGI > this.enemyt.AGI) {
                                this.scene("<li>Pocket Sand!</li>", false);
                                this.scene("The thief reaches into " + this.enemyt.gender.his + " pocket and shouts, \"Pocket sand!\" before throwing a handful of sand in your face. " + "You stumble back in surprise as you cough and cover your eyes. Your speed is lowered from the irritation. ", false);
                                this.chgTempStats("AGI", this.dXY(2, 4));
                            }
                            else if (this.chance == 3 || this.chance == 4 && this.enemyt.GLD < 15) {
                                this.scene("<li>Steal</li>", false);
                                tempInt = this.dXY(0, this.GLD * 0.1);
                                this.scene("The fat thief feints right. As you\'re distracted " + this.enemyt.gender.his + " hand darts into one of your pockets, ", false);
                                if (this.GLD <= 0 || tempInt <= 0) {
                                    this.scene("but " + this.enemyt.gender.he + " comes up dissapointed as " + this.enemyt.gender.he + " finds no gold in that pocket. ", false);
                                }
                                else {
                                    this.scene("stealing " + tempInt + " gold. " + this.enemyt.gender.his + " weight clearly not hindering " + this.enemyt.gender.his + " thieving abilities. ", false);
                                    this.doGold(-tempInt);
                                    this.enemyt.GLD = this.enemyt.GLD + tempInt;
                                }
                            }
                            else {
                                this.scene("<li>Attack</li>", false);
                                this.scene("The thief deftly slashes at you with " + this.enemyt.gender.his + " dagger. ", false);
                                this.doHealth(-this.eDMG);
                            }
                            if (!this.alive()) {
                                this.scene("\n\t" + this.enemyt.defeat, false);
                                this.defeatEvent(this.battle);
                            }
                        }
                        break;
                    case this.ThinFur:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou hold up your hands signalling surrender, then reach into your pack to try to find something to satisfy " + this.enemyt.gender.him + ". ", false);
                                this.i = 0;
                                while (this.i < this.invArray.length) {
                                    testFood = this.invArray[this.i];
                                    if (testFood.Food == true) {
                                        surrenderFood = testFood;
                                        break;
                                    }
                                    this.i++;
                                }
                                switch (surrenderFood) {
                                    case null:
                                        this.scene("Unfortunately, you have nothing in your pack to satisfy " + this.enemyt.gender.him + ", and she shouts angrily, suddenly pouncing on you and furiously bashing the hilts of " + this.enemyt.gender.his + " daggers against you. You eventually collapse under the barrage of blows and fall unconscious. ", false);
                                        this.defeatEvent(this.battle);
                                        break;
                                    default:
                                        this.scene("Fortunately, you do find " + surrenderFood.article + " " + surrenderFood.Name + ", which the " + this.enemyt.species.name + " snatches out of your hands almost immediately. " + this.capFirst(this.enemyt.gender.he) + " is already hungrily devouring it as " + this.enemyt.gender.he + " begins to walk away. " + "You take the opportunity to put a great distance between the two of you. ", false);
                                        this.expendItem(this.invArray[this.itemFind(surrenderFood)]);
                                        currentState = "default";
                                        this.nextButton();
                                }
                                break;
                            default:
                                switch (this.dXY(1, 2)) {
                                    case 1:
                                        this.scene("<li>Slash</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " swings " + this.enemyt.gender.his + " arms wildly, but " + this.enemyt.gender.his + " daggers don\'t hit home thanks to your quick evasion.", false);
                                                break;
                                            default:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " swings " + this.enemyt.gender.his + " arms wildly, " + this.enemyt.gender.his + " daggers cutting into you! ", false);
                                                this.doHealth(-this.eDMG * 0.8);
                                        }
                                        break;
                                    case 2:
                                        this.scene("<li>Stab</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " suddenly rushes at you, daggers forward, but you narrowly dodge the attack. ", false);
                                                break;
                                            default:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " suddenly rushes at you, plowing forward with both daggers out and catching you in the midsection! ", false);
                                                this.doHealth(-this.eDMG);
                                        }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tThe rain of blows is too much for you, and the last attack sends you slowly slumping to the ground, your consciousness fading away as " + this.enemyt.gender.he + " already starts to pat you down for food. ", false);
                                    this.defeatEvent(this.battle);
                                }
                        }
                        break;
                    case this.ToughFur:
                        switch (this.surrender) {
                            case true:
                                this.i = 0;
                                while (this.i < this.invArray.length) {
                                    testFoods = this.invArray[this.i];
                                    if (testFoods.type == "food" && surrenderFoodB != null) {
                                        surrenderFoodC = testFoods;
                                    }
                                    if (testFoods.type == "food" && surrenderFoodA != null) {
                                        surrenderFoodB = testFoods;
                                    }
                                    if (testFoods.type == "food" && surrenderFoodA == null) {
                                        surrenderFoodA = testFoods;
                                    }
                                    this.i++;
                                }
                                this.scene("\tYou hold up your hands in a sign of surrender, and the " + this.enemyt.species.name + " halts in " + this.enemyt.gender.his + " tracks while you reach into your pack. ", false);
                                switch (surrenderFoodC) {
                                    case null:
                                        switch (surrenderFoodA) {
                                            case null:
                                                this.scene("Unfortunately, you can\'t find anything, and can only offer an empty-handed shrug. " + this.capFirst(this.enemyt.gender.he) + " obviously doesn\'t appreciate this, " + this.enemyt.gender.his + " face becoming an angry scowl. \"Then I guess I\'m just gonna have to eat YOU!\" " + this.enemyt.gender.he + " bellows, tromping up to you and wrapping " + this.enemyt.gender.his + " arms around you, pinning your arms to your sides in a firm grasp. You can\'t even struggle properly as " + this.enemyt.gender.his + " mouth opens wide, the world becoming dark and wet as your head is forced into " + this.enemyt.gender.his + " throat. " + this.capFirst(this.enemyt.gender.he) + " eagerly forces you into " + this.enemyt.gender.his + " elastic gullot, your bulk barely even slowing " + this.enemyt.gender.him + " as " + this.enemyt.gender.he + " greedily pulls you in. It is tight and slick before you are pulled into " + this.enemyt.gender.his + " expansive stomach, which loosely and easily stretches to contain you. " + "You curl up into a ball as the last of you is sucked down, and you hear a loud thumping as " + this.enemyt.gender.he + " pats " + this.enemyt.gender.his + " stomach. As the stomach walls clench down upon you, you are squeezed steadily tighter. " + "The pressing and lack of air soon cause you to lose consciousness. ", false);
                                                this.defeatEvent(this.devoured);
                                                break;
                                            default:
                                                this.scene("You pull out what food you have, and " + this.enemyt.gender.he + " beckons impatiently. You try to find more, but simply don\'t have enough to appease " + this.enemyt.gender.him + ". \"Well then, I guess I\'ll just take that from you and rough you up a bit!\" " + this.enemyt.gender.he + " declares. You start to run, but " + this.enemyt.gender.he + " has already slipped " + this.enemyt.gender.his + " spear in front of your legs, and you trip, falling face down onto the ground. " + "Before you can stand, there is a tremendous thud as " + this.enemyt.gender.he + " jumps onto your back, knocking the wind out of you. \"That oughta do it,\" " + this.enemyt.gender.he + " says triumphantly, then gets up off you and slowly walks off, already eating your food. You stand up, brush yourself off, and go back to exploring. ", false);
                                                this.doHealth(-this.maxHEA * 0.5);
                                                if (this.HEA <= 0) {
                                                    this.HEA = 1;
                                                }
                                                this.expendItem(this.invArray[this.itemFind(surrenderFoodA)]);
                                                if (surrenderFoodB != null) {
                                                    this.expendItem(this.invArray[this.itemFind(surrenderFoodB)]);
                                                }
                                                currentState = "default";
                                                this.nextButton();
                                        }
                                        break;
                                    default:
                                        this.scene("You pull out a little food, to which " + this.enemyt.gender.he + " responds by beckoning for more. When you present a second, " + this.enemyt.gender.he + " does so a bit more impatiently. Upon presenting the third, " + this.enemyt.gender.he + " nods acceptingly, taking them from you and starting to slowly devour them, heavy footsteps thumping down the road as " + this.enemyt.gender.he + " walks steadily away. You decide to call this one a draw. ", false);
                                        this.expendItem(this.invArray[this.itemFind(surrenderFoodA)]);
                                        this.expendItem(this.invArray[this.itemFind(surrenderFoodB)]);
                                        this.expendItem(this.invArray[this.itemFind(surrenderFoodC)]);
                                        currentState = "default";
                                        this.nextButton();
                                }
                                break;
                            default:
                                switch (this.dXY(1, 2)) {
                                    case 1:
                                        this.scene("<li>Spear Thrust</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " tries to line you up to jab you with " + this.enemyt.gender.his + " spear, but you\'re too slippery and the shot only causes a swoosh in the air. ", false);
                                                break;
                                            default:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " lines you up and thrusts " + this.enemyt.gender.his + " spear at you, catching you with the surprisingly sharp tip! ", false);
                                                this.doHealth(-this.eDMG);
                                        }
                                        break;
                                    case 2:
                                        this.scene("<li>Body Splash</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " rushes and leaps at you, but you skillfully evade. " + this.capFirst(this.enemyt.gender.he) + " hits the ground with an earth-shaking thud, but rolls up to face you again without hesitation. ", false);
                                                break;
                                            default:
                                                this.scene("Suddenly, " + this.enemyt.gender.he + " rushes and leaps at you. The weight of " + this.enemyt.gender.his + " body smashes into you and knocks you to the ground, and " + this.enemyt.gender.his + " bulk crushes you painfully before you get out from under " + this.enemyt.gender.him + "! ", false);
                                                this.doHealth(-this.eDMG * 1.3);
                                        }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\t" + this.capFirst(this.enemyt.gender.his) + " last attack is enough to take the fight out of you, and you crash to the ground, slowly losing consciousness. " + "The last thing you remember is feeling the ground shake in time to " + this.enemyt.gender.his + " steps as " + this.enemyt.gender.he + " strides over and pats you down for food. ", false);
                                    this.defeatEvent(this.battle);
                                }
                        }
                        break;
                    case this.WaterElemental:
                        if (this.surrender) {
                            this.scene("\tYou kneel on the ground and open your mouth wide for the bubbling water elemental. " + "It wastes no time as it draws in upon itself and fires a watery whirlwind down your waiting throat. " + "You stomach rapidly fills and expands with water. ", false);
                            this.doConsume(0, this.eHEA, 0);
                            if (this.HEA > 0) {
                                this.scene("You rapidly gulp down the remaining elemental and " + "over time the deluge of water coursing down your throat slows to a trickle and eventually stops as you consume your opponent entirely. ", false);
                                this.winBattle("You\'ve won! ");
                            }
                            else {
                                this.scene("Your stomach gurgles and groans as it swiftly approaches and passes it\'s maximum capacity. " + "You flop over onto your back, causing your stomach to painfully slosh back and forth as it continues to swell outwards. ", false);
                                this.defeatEvent(this.overeating);
                            }
                        }
                        else {
                            switch (this.dXY(1, 3)) {
                                case 1:
                                    this.scene("<li>Punch</li>", false);
                                    this.scene("The elemental pummels you with its fist, knocking you for a loop! ", false);
                                    this.doHealth(-this.eDMG);
                                    break;
                                default:
                                    this.scene("<li>Water Blast</li>", false);
                                    this.cram = this.dXY(4, 8);
                                    this.doEnemyHealth(-this.cram);
                                    this.doConsume(0, this.cram, 0);
                                    this.scene("The water elemental points it\'s dribbling arm towards you face. " + "With a sudden rush of bubbles it fires a blast of water towards your mouth, much of it forcing it\'s way down your throat as the rest of it soaks into your " + this.playerSpecies.fur + ". " + "You feel your stomach rapidly expand with, thankfully, the cleanest water you\'ve ever tasted. ", false);
                            }
                            if (!this.alive() || this.eHEA <= 0) {
                                switch (this.alive()) {
                                    case true:
                                        this.winBattle("The final blast fires what little remains of the water elemental down your throat. " + "You\'re left standing there soaking wet but with no enemy left to fight. " + "It appears you\'ve won...? ");
                                        break;
                                    case false:
                                        this.doConsume(0, this.eHEA, 0);
                                        this.scene("\n\tAs you collapse to your knees in pain, the water elemental grabs you and forces its arm into your mouth, beginning to fill your stomach with itself. " + "You can hear your belly bubbling and creaking as gallon after gallon of water is forced into it...", false);
                                        if (this.FUL > this.maxFUL) {
                                            this.defeatEvent(this.overeating);
                                        }
                                        else {
                                            this.defeatEvent(this.battle);
                                        }
                                }
                            }
                        }
                        break;
                    case this.Wildling:
                        if (this.surrender) {
                            this.clearView();
                            currentState = "default";
                            this.endCombat();
                            this.scene("\tYou lower your defences and surrender to your opponent. " + this.capFirst(this.enemyt.gender.he) + " grins widely before saying something you can almost understand and whacking you hard over the head with the butt of " + this.enemyt.gender.his + " spear. " + "Your vision fades to black and you fall to the ground unconscious. ", true);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    specialEvent = 1;
                                    locationTravel(CapturedByWildlings);
                                }
                            };
                        }
                        else {
                            this.chance = this.dXY(1, 3);
                            if (this.chance == 1) {
                                this.scene("<li>Attack</li>", false);
                                this.scene("The wildling jabs at you with " + this.enemyt.gender.his + " spear. ", false);
                                this.doHealth(-this.eDMG);
                            }
                            else if (this.chance == 3 && this.enemyt.item == this.SmallHealthPotion && this.eHEA <= this.enemyt.maxHEA - this.SmallHealthPotion.Heal) {
                                this.scene("<li>Potion</li>", false);
                                this.scene("The wildling pulls out a glass bottle full of red liquid, " + this.enemyt.gender.he + " chugs it down and " + this.enemyt.gender.his + " wounds start healing. ", false);
                                this.doEnemyHealth(this.SmallHealthPotion.Heal);
                                this.enemyt.item = null;
                            }
                            else {
                                this.scene("<li>Attack</li>", false);
                                this.scene("The wildling swings the spear around and catches you off guard, whacking you in the head. ", false);
                                this.doHealth(-this.eDMG);
                            }
                            if (!this.alive()) {
                                this.scene("\n\t" + this.enemyt.defeat, false);
                                currentState = "defeated";
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        currentState = "default";
                                        endCombat();
                                        specialEvent = 1;
                                        locationTravel(CapturedByWildlings);
                                    }
                                };
                            }
                        }
                        break;
                    case this.WildlingRitualist:
                        if (this.surrender) {
                            this.clearView();
                            currentState = "default";
                            this.scene("\tYou lower your defences and surrender to your opponent. " + this.capFirst(this.enemyt.gender.he) + " grins widely before saying something you can almost understand and smashing a watermelon over your head. " + "Your vision fades to black and you fall to the ground unconscious. ", true);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    endCombat();
                                    specialEvent = 1;
                                    locationTravel(CapturedByWildlings);
                                }
                            };
                        }
                        else {
                            tempItem = this.Cupcake;
                            this.chance = this.dXY(1, 4);
                            if (this.eHEA * 2 <= this.enemyt.maxHEA && this.chance == 1 && this.eMANA < this.Heal2.manaCost) {
                                this.scene("<li>Heal</li>", false);
                                this.enemyCast(this.Heal2);
                                this.scene("The wildling kneels down and quietly chants to " + this.enemyt.gender.himself + " as he\'s enveloped in a soft green light. " + this.capFirst(this.enemyt.gender.his) + " injuries visibly heal as " + this.enemyt.gender.he + " restores " + this.eDMG + " health. ", false);
                            }
                            else {
                                this.scene("<li>Feed</li>", false);
                                switch (this.dXY(1, 3)) {
                                    case 1:
                                        tempItem = this.Cupcake;
                                        break;
                                    case 2:
                                        tempItem = this.Cake;
                                        break;
                                    case 3:
                                        tempItem = this.Sausage;
                                }
                                this.scene("The wildling grab " + tempItem.article + " " + tempItem.Name + " from " + this.enemyt.gender.his + " bag and runs at a frightening speed towards you. " + "Before you know it, the entire " + tempItem.Name + " has been shoved down your gullet, the wildling already heading back for more of the contents of " + this.enemyt.gender.his + " bag. ", false);
                                this.doConsume(tempItem.eat * 2, tempItem.drink * 2, tempItem.Calories);
                            }
                            if (!this.alive()) {
                                this.scene("\n\tAs " + tempItem.article + " " + tempItem.Name + " is pushed down your throat, your gut seems to groan with the pain of being pushed over the limit. " + "You struggle to keep your stomach at ease while fending off the force-feeding wildling. " + "You try to constantly avoid the ready " + tempItem.Name + " in the wildling\'s hand. " + "Fed up with having to struggle with you, the wildling grabs a watermelon and smacks it against your head. " + "You notice the wild glee on the wildling\'s face as your vision fades to unconsciousness. ", false);
                                currentState = "defeated";
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        currentState = "default";
                                        endCombat();
                                        specialEvent = 1;
                                        locationTravel(CapturedByWildlings);
                                    }
                                };
                            }
                        }
                        break;
                    case this.wildlingShaman:
                        switch (this.surrender) {
                            case true:
                                currentState = "default";
                                this.scene("\tYour ears and shoulders droop, and you spread your arms in a gesture of resignation. " + "The shaman cocks " + this.enemyt.gender.his + " head and regards you with an inscrutable stare for a few moments, " + "then slowly reaches into " + this.enemyt.gender.his + " medicine bag and produces an old wooden flute. " + this.capFirst(this.enemyt.gender.he) + " brings it to " + this.enemyt.gender.his + " lips and begins to play. " + "You don’t hear anything but almost immediately you start to feel fuller. Looking down, you see your " + this.waist() + " belly begin to soften and swell larger. " + "You heft it in your " + this.playerSpecies.hands + " and just stand there as you steadily balloon fatter, and fatter, and fatter. ", false);
                                this.chgTempStats("fat", 500);
                                this.fixFull();
                                this.scene("Within minutes you’ve grown enormously fat, your chubby features jiggling as you look down at your obese frame ", false);
                                if (this.TOP.Name != this.Shirtless.Name || this.BTM.Name != this.Pantsless.Name) {
                                    if (this.TOP.Popped || this.BTM.Popped) {
                                        this.scene("bulging out of the ripped and torn remains of your burst clothing", false);
                                    }
                                }
                                this.scene(", arms struggling to support the increasing weight of your belly while your backside is rapidly approaching barn-sized. " + "With a soft groan you feel your belly-blubber beginning to slip through your fingers, and it finally touches ground, bouncing and then spreading. " + "Your chubby legs widen and begin to ache from the effort of holding so much of you up, so you slowly topple onto your oh-so-generous rump, " + "causing the ground to shake and raising a crater of dust around you. As the shaman continues to play your eyelids begin to droop irresistibly. You feel so, sooo sleepy... ", false);
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        doRest();
                                        scene("\tYou jerk awake with a start. From the position of the ", true);
                                        if (dayTime()) {
                                            scene("sun, ", false);
                                        }
                                        if (!dayTime()) {
                                            scene("moon, ", false);
                                        }
                                        scene("you must have been fast asleep for hours! Feeling something pressing softly under your chin, you try to look down, but find that you can’t. " + "When you eventually do manage to crane your neck forwards, it slowly dawns on you that you must have been putting on weight all the time that you were dozing. " + "You’re a " + playerSpecies.furBelly + " BALL! Your truly colossal chest fills the base of your vision like a pair of rounded foothills, " + "perched atop the absolutely mountainous blob that your belly has become. It sticks far out in front of you, the sides rolling on top of your widespread, hamlike legs. " + "Vast, doughy lovehandles bulge atop your massive backside, which you can feel covering an embarrassingly large half-circle of ground behind you. " + "Your obese arms stick out uselessly at your sides, too soft and bloated now to even bend, and unable to reach past the curve of your spreading sides and belly even if they could. " + "Rocking your head from side to side you can feel the thick collar of blubber bloating out your neck- it’s an effort to just lean your head back. Even your FACE feels big and fat. " + "\n\tThe shaman is sitting to one side, still playing " + enemyt.gender.his + " pipe. A small shudder runs through your jumbo-sized bulk and you feel yourself swell even fatter. " + "Your hide creeeaks in protest, and you manage to let out a little whimper. " + capFirst(enemyt.gender.he) + " lower the flute from " + enemyt.gender.his + " lips, much to your super-rounded relief. " + "Then you hear a rustling in the long grass around you, and a group of wilding braves emerges in a loose circle. You gulp. " + "You feel paws, shoulders and backs press against your mind-blowingly blubberous bulk, " + "and with a muffled " + playerSpecies.angry + " of protest you tip sideways, and find yourself being literally ROLLED out of there! " + "It’s slow, and squashy, but boy do you pick up momentum! " + "They roll you along like some gargantuan rubber ball, leaving a trail of flattened grass wide enough to drive a horse and cart along. " + "You have the nasty certainty that you’ve just become the biggest, fattest sacrificial animal that their tribe have ever had. " + "The constant rolling makes you dizzy, and your final thought before you pass out is that at least you won’t have to go on a diet plan... ", false);
                                        defeatEvent(devoured);
                                    }
                                };
                                break;
                            default:
                                switch (this.grapple <= 0 && this.dXY(1, 3) == 3) {
                                    case true:
                                        this.scene("<li>Grab</li>", false);
                                        this.scene("The shaman fixes " + this.enemyt.gender.his + " piercing gaze on you and their lips begin to move soundlessly. " + "You feel a breeze pick up and swirl fitfully around you, sweeping across your " + this.playerSpecies.furBelly + " " + this.playerSpecies.fur + ". " + "At the same time " + this.enemyt.gender.he + " brings " + this.enemyt.gender.his + " paws up as if holding a ball, and then slowly moves them closer together. " + "The air around you seems to set like stone- you feel as though you’re clamped in the fingers of an invisible giant! You can’t move! ", false);
                                        this.grapple = this.enemyt.INT * 3;
                                        this.enemyAttack();
                                        break;
                                    default:
                                        switch (this.tenemyFATdebuff <= 0) {
                                            case true:
                                                this.scene("<li>Chant</li>", false);
                                                this.scene("The shaman slowly raises one scrawny paw towards you, as if in greeting. " + this.enemyt.gender.he + " smiles as your stomach lets out a deep gurgle, " + "and you feel your " + this.waist() + " belly bulge even bigger! You stumble slightly, unbalanced by the extra weight, and a deep BURP forces its way up grudgingly from inside you. " + "Hefting your growing gut, you realise that you’re not getting much fuller, but you ARE getting a lot fatter! " + "This shamanistic stuffing leaves you feeling " + this.hungry() + ". ", false);
                                                this.doConsume(this.dXY(3, 6), 0, this.dXY(2, 4));
                                                this.chgTempStats("fat", this.dXY(6, 12));
                                                break;
                                            default:
                                                this.scene("<li>Chant</li>", false);
                                                switch (this.dXY(1, 2)) {
                                                    case 1:
                                                        this.scene("The shaman raises " + this.enemyt.gender.his + " paw once again, chanting soundlessly in an unknown language. " + "Another loud BELCH escapes your muzzle, and your " + this.playerSpecies.hands + " go to your belly as you bulge with yet more added bulk, " + "your stomach and sides spreading wider while your caboose balloons behind you. ", false);
                                                        break;
                                                    default:
                                                        this.scene("The shaman raises " + this.enemyt.gender.his + " paw once again, chanting soundlessly in an unknown language. " + "You struggle to bite down a deep, rolling BURRRP as another jolt of forced-fullness hits you, more blubber \'softening\' your now downright " + this.fatness() + " girth to even greater curvaceousness. " + "You feel your thickening arms push up slightly from your sides, while your stance widens to accommodate your increasingly chubby thighs. ", false);
                                                }
                                                this.doConsume(this.dXY(3, 6), 0, this.dXY(2, 4));
                                                this.chgTempStats("fat", this.dXY(6, 12));
                                                this.scene("As your expansion subsides, you are left feeling " + this.hungry() + ". ", false);
                                        }
                                        if (this.FUL > this.maxFUL && !this.alive()) {
                                            currentState = "default";
                                            this.scene("\n\tYou pant and groan as you struggle to keep standing on your own two increasingly porky " + this.playerSpecies.feet + ". " + "Another tonsil-rattling BURRRRP forces itself out from between your jaws, " + "and you feel the underside of your ever-increasing belly bounce against the hard-packed ground, then spread.  ", false);
                                            this.doConsume(this.dXY(75, 125), 0, 0);
                                            this.chgTempStats("fat", this.dXY(150, 250));
                                            this.scene("You desperately try to haul yourself backwards, belly dragging, but the weight of your still-swelling butt presses down through your tired legs, " + "and you finally sink to the floor, exhausted, landing with an earth-shaking plop onto your expansive backside. " + "Seeing that you’re not going anywhere, the shaman produces an old wooden flute from their medicine bag, and begins to play. " + "Absolutely no sound hits your ears, but almost at once your eyelids begin to droop irresistibly. You feel so, sooo sleepy... ", false);
                                            this.nextView();
                                            this.listen = function ():void {
                                                if (btnchc == 12) {
                                                    doRest();
                                                    scene("\tYou jerk awake with a start. From the position of the ", true);
                                                    if (dayTime()) {
                                                        scene("sun, ", false);
                                                    }
                                                    if (!dayTime()) {
                                                        scene("moon, ", false);
                                                    }
                                                    scene("you must have been fast asleep for hours! Feeling something pressing softly under your chin, you try to look down, but find that you can’t. " + "When you eventually do manage to crane your neck forwards, it slowly dawns on you that you must have been putting on weight all the time that you were dozing. " + "You’re a " + playerSpecies.furBelly + " BALL! Your truly colossal chest fills the base of your vision like a pair of rounded foothills, " + "perched atop the absolutely mountainous blob that your belly has become. It sticks far out in front of you, the sides rolling on top of your widespread, hamlike legs. " + "Vast, doughy lovehandles bulge atop your massive backside, which you can feel covering an embarrassingly large half-circle of ground behind you. " + "Your obese arms stick out uselessly at your sides, too soft and bloated now to even bend, " + "and unable to reach past the curve of your spreading sides and belly even if they could. " + "Rocking your head from side to side you can feel the thick collar of blubber bloating out your neck- it’s an effort to just lean your head back. " + "Even your FACE feels big and fat. " + "\n\tThe shaman is sitting to one side, still playing " + enemyt.gender.his + " pipe. " + "A small shudder runs through your jumbo-sized bulk and you feel yourself swell even fatter. Your hide creeeaks in protest, and you manage to let out a little whimper. " + capFirst(enemyt.gender.he) + " lower the flute from " + enemyt.gender.his + " lips, much to your super-rounded relief. " + "Then you hear a rustling in the long grass around you, and a group of wilding braves emerges in a loose circle. You gulp. " + "You feel paws, shoulders and backs press against your mind-blowingly blubberous bulk, " + "and with a muffled " + playerSpecies.angry + " of protest you tip sideways, and find yourself being literally ROLLED out of there! " + "It’s slow, and squashy, but boy do you pick up momentum! " + "They roll you along like some gargantuan rubber ball, leaving a trail of flattened grass wide enough to drive a horse and cart along. " + "You have the nasty certainty that you’ve just become the biggest, fattest sacrificial animal that their tribe have ever had. " + "The constant rolling makes you dizzy, and your final thought before you pass out is that at least you won’t have to go on a diet plan... ", false);
                                                    defeatEvent(devoured);
                                                }
                                            };
                                        }
                                }
                        }
                        break;
                    case this.wildlingShamanBoss:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYour shoulders droop, and you spread your arms in a gesture of resignation. " + "The shaman cocks " + this.enemyt.gender.his + " head and regards you with an inscrutable stare for a few moments, " + "then slowly brings the flute " + this.enemyt.gender.he + "\'s carrying to " + this.enemyt.gender.his + " lips, and begins to play. " + "You don\'t hear anything but almost immediately you start to feel fuller. " + "Looking down, you see your " + this.fatness() + " gut begin to soften and swell larger. " + "You heft it in your " + this.playerSpecies.hands + " and just stand there as you steadily balloon fatter, and fatter, and fatter. ", false);
                                this.stuffToBursting();
                                this.scene("Within minutes you\'ve grown enormously fat, your chubby features jiggling as you look down at your obese frame, " + "arms struggling to support the increasing weight of your belly while your backside is rapidly approaching barn-sized. " + "With a soft groan you feel your belly-blubber beginning to slip through your fingers, and it finally touches ground, bouncing and then spreading. " + "Your chubby legs widen and begin to ache from the effort of holding so much of you up, so you slowly topple onto your oh-so-generous rump, " + "causing the ground to shake and raising a crater of dust around you. As the shaman continues to play your eyelids begin to droop irresistibly. You feel so, sooo sleepy... ", false);
                                currentState = "defeated";
                                this.nextView();
                                this.listen = function ():void {
                                    scene("\tYou finally surface to wakefulness again, blinking and smacking your lips sleepily, feeling very warm and comfortable, although for the moment you can\'t quite remember where yo- " + "\n\tYou jolt fully awake, and at the same time realise what\'s keeping you so warm and comfortable is YOU! " + "With an effort you manage to lean your chin forward, meeting resistance from your apparently-sizable chest, and are confronted by the huge, curving vista of your stomach. " + "You\'re HEW-MUNG-GOUS- you can feel the underside of your " + playerSpecies.furBelly + " belly pressing on the ground, spreading your legs wide apart, " + "while your backside is taking up an awful lot of room by the feel of it. Worse than that, you\'re surrounded by a circle of wooden stakes. " + "With an audible GULP you slowly twist your head, and to one side catch sight of the " + NPC1.species.name + " who asked for your help, likewise penned, but even bigger than he was before! " + "Mobility obviously well beyond him, his now-stubby arms have lifted above horizontal by the sheer amount of blubber surrounding them and pressing up from underneath, " + "while his backside is in danger of pushing the enclosure down all by itself. His gargantuan girth makes you look merely a bit chunky. " + "His superfattened features cast you a wordless look of disgust, and with visible effort turns his gaze away from you. " + "Just then the pair of you stifle slightly out-of-synch belches, and you immediately feel yourself expand, gut and butt both inching outwards across the ground. " + "Panicking, you try to run, to stand, to move ANYTHING, but straining your muscles only produces a few wobbles on your weighed-down frame, your backside not even leaving the floor. " + "Even that leaves you panting and in a sweat. You\'re BOTH captives now. " + "\n\tYou both remain in silence throughout the following day, gradually getting fatter, and fatter, and fatter. " + "By sundown you\'ve grown considerably more massive, while your fellow captive is now so obesely spherical the stockade holding him looks ready to burst if he so much as breathes deeply. " + "At that time a procession of wildings arrives, carrying torches and strange symbols, headed by the shaman who captured the pair of you. " + "At a gesture from " + enemyt.gender.him + ", a number of the \'heftier\' wildings lumber forward and prize open the pen holding your friend, the stakes tumbling down in their paws. " + "Then after a few ritual dances and some ceremonial-looking drinking, they form up and with obvious practice begin to roll the " + NPC1.species.name + " away into the gathering gloom, " + "presumably for sacrifice. " + "It\'s a long, slow, above all heavy job, and under any other circumstances would be hilarious, if not for the thought that this was likely to happen to YOU, too. " + "With their captive making muffled protests all the way and leaving a furrow pressed into the earth that they can all fit in, the remaining members of the procession leave, " + "trailing their victim. As night falls completely another small burrrp escapes your increasingly chubby lips, and as you begin to drift off to sleep, " + "still inflating with flab, you\'re rather depressingly certain that you\'ve just seen the \'fat\' that \'a-weights\' you come tomorrow...  ", true);
                                    defeatEvent(devoured);
                                };
                                break;
                            case false:
                                switch (this.enemyt.attackCounterA) {
                                    case 1:
                                        this.scene("<li>Feed</li>", false);
                                        this.scene("The shaman slowly raises one scrawny paw towards you, as if in greeting. " + this.capFirst(this.enemyt.gender.he) + " smiles as your stomach lets out a deep gurgle, and you feel your " + this.waist() + " belly bulge even bigger! " + "You stumble slightly, unbalanced by the extra weight, and a deep BURP forces its way up grudgingly from inside you. " + "Hefting your growing gut, you realise that you\'re not getting much fatter, but you ARE getting a lot fuller! ", false);
                                        this.doConsume(this.dXY(4, 8), 0, this.dXY(3, 6));
                                        this.enemyt.attackCounterA = 0;
                                        break;
                                    default:
                                        switch (this.grapple <= 0 && this.dXY(1, 3) == 1) {
                                            case true:
                                                this.scene("<li>Grab</li>", false);
                                                this.scene("The shaman fixes " + this.enemyt.gender.his + " piercing gaze on you and their lips begin to move soundlessly. " + "You feel a breeze pick up and swirl fitfully across your " + this.playerSpecies.furBack + " " + this.playerSpecies.fur + ". " + "At the same time " + this.enemyt.gender.he + " brings " + this.enemyt.gender.his + " paws up as if holding a ball, and then slowly moves them closer together. " + "The air around you seems to set like stone- you feel as though you\'re clamped in the fingers of an invisible giant! You can\'t move! ", false);
                                                this.grapple = this.enemyt.INT * 3;
                                                break;
                                            case false:
                                                this.scene("<li>Feed</li>", false);
                                                this.scene("The shaman raises " + this.enemyt.gender.his + " paw once again, chanting soundlessly in an unknown language. ", false);
                                                switch (this.dXY(1, 2) == 1) {
                                                    case true:
                                                        this.scene("Another loud BELCH escapes your muzzle, and your " + this.playerSpecies.hands + " go to your belly as you bulge with yet more added bulk, " + "your stomach and sides spreading wider while your caboose balloons behind you. ", false);
                                                        break;
                                                    case false:
                                                        this.scene("You struggle to bite down a deep, rolling BURRRP as another jolt of forced-fullness hits you, " + "more blubber \'softening\' your now downright " + this.waist() + " girth to even greater curvaceousness. " + "You feel your thickening arms push up slightly from your sides, while your stance widens to accommodate your increasingly chubby thighs. ", false);
                                                }
                                                this.doConsume(this.dXY(4, 8), 0, this.dXY(3, 6));
                                                this.chgTempStats("fat", this.dXY(8, 15));
                                        }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tYou pant and groan as you struggle to keep standing on your own two increasingly porky " + this.playerSpecies.feet + ". " + "Another tonsil-rattling BURRRRP forces itself out from between your jaws, " + "and you feel the underside of your ever-increasing belly bounce against the hard-packed ground, then spread. ", false);
                                    this.doConsume(25, 0, 0);
                                    this.scene("You desperately try to haul yourself backwards, belly dragging, but the weight of your still-swelling butt presses down through your tired legs, and you finally sink to the floor, " + "exhausted, landing with an earth-shaking plop onto your expansive backside. " + "Seeing that you\'re not going anywhere, the shaman brings the flute " + this.enemyt.gender.he + "\'s carrying to " + this.enemyt.gender.his + " lips, and begins to play. " + "Absolutely no sound hits your ears, but almost at once your eyelids begin to droop irresistibly. You feel so, sooo sleepy... ", false);
                                    currentState = "defeated";
                                    this.nextView();
                                    this.listen = function ():void {
                                        scene("\tYou finally surface to wakefulness again, blinking and smacking your lips sleepily, feeling very warm and comfortable, although for the moment you can\'t quite remember where yo- " + "\n\tYou jolt fully awake, and at the same time realise what\'s keeping you so warm and comfortable is YOU! " + "With an effort you manage to lean your chin forward, meeting resistance from your apparently-sizable chest, and are confronted by the huge, curving vista of your stomach. " + "You\'re HEW-MUNG-GOUS- you can feel the underside of your " + playerSpecies.furBelly + " belly pressing on the ground, spreading your legs wide apart, " + "while your backside is taking up an awful lot of room by the feel of it. Worse than that, you\'re surrounded by a circle of wooden stakes. " + "With an audible GULP you slowly twist your head, and to one side catch sight of the " + NPC1.species.name + " who asked for your help, likewise penned, " + "but even bigger than he was before! " + "Mobility obviously well beyond him, his now-stubby arms have lifted above horizontal by the sheer amount of blubber surrounding them and pressing up from underneath, " + "while his backside is in danger of pushing the enclosure down all by itself. His gargantuan girth makes you look merely a bit chunky. " + "His superfattened features cast you a wordless look of disgust, and with visible effort turns his gaze away from you. " + "Just then the pair of you stifle slightly out-of-synch belches, and you immediately feel yourself expand, gut and butt both inching outwards across the ground. " + "Panicking, you try to run, to stand, to move ANYTHING, but straining your muscles only produces a few wobbles on your weighed-down frame, your backside not even leaving the floor. " + "Even that leaves you panting and in a sweat. You\'re BOTH captives now. " + "\n\tYou both remain in silence throughout the following day, gradually getting fatter, and fatter, and fatter. By sundown you\'ve grown considerably more massive, " + "while your fellow captive is now so obesely spherical the stockade holding him looks ready to burst if he so much as breathes deeply. " + "At that time a procession of wildings arrives, carrying torches and strange symbols, headed by the shaman who captured the pair of you. " + "At a gesture from " + enemyt.gender.him + ", a number of the \'heftier\' wildings lumber forward and prize open the pen holding your friend, the stakes tumbling down in their paws. " + "Then after a few ritual dances and some ceremonial-looking drinking, they form up and with obvious practice begin to roll the " + NPC1.species.name + " away into the gathering gloom, " + "presumably for sacrifice. " + "It\'s a long, slow, above all heavy job, and under any other circumstances would be hilarious, if not for the thought that this was likely to happen to YOU, too. " + "With their captive making muffled protests all the way and leaving a furrow pressed into the earth that they can all fit in, the remaining members of the procession leave, " + "trailing their victim. As night falls completely another small burrrp escapes your increasingly chubby lips, and as you begin to drift off to sleep, " + "still inflating with flab, you\'re rather depressingly certain that you\'ve just seen the \'fat\' that \'a-weights\' you come tomorrow...  ", true);
                                        defeatEvent(devoured);
                                    };
                                }
                        }
                        break;
                    case this.anacondaBoss:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou stop your struggles, unwilling to fight this gigantic creature anymore. " + "The enormous creature crushes you with its body, and you swiftly lose consciousness as your strength is squeezed out of you. ", false);
                                this.defeatEvent(this.devoured);
                                break;
                            case false:
                                if (this.grapple > 0) {
                                    switch (this.HEA > this.maxHEA * 0.6) {
                                        case true:
                                            this.scene("<li>Squeeze</li>", false);
                                            this.scene("The snake squeezes at you with incredible strength, like being crushed by a mountain. ", false);
                                            this.doHealth(-this.eDMG * 1.1);
                                            if (this.HEA <= this.maxHEA * 0.6) {
                                                this.scene("Deciding that you\'ve weakened enough, the snake opens its jaws and engulfs you from the head down. " + "Everything goes dark as you find yourself in the long belly of the beast! ", false);
                                                this.enemyt.grappleEscapeFail = "You struggle and strain, but can&apos;t manage to free yourself from the snake&apos;s squeezing stomach! ";
                                                this.enemyt.grappleEscapeSucceed = "You wriggle and writhe, forcing yourself against the slippery snake&apos;s insides and are ejected out of the snake&apos;s mouth! ";
                                            }
                                            break;
                                        case false:
                                            this.scene("<li>Squeeze</li>", false);
                                            this.scene("The walls of the snake\'s long stomach squeezes down around you! ", false);
                                            this.doHealth(-this.eDMG * 1.3);
                                    }
                                }
                                if (this.grapple <= 0) {
                                    this.enemyt.grappleEscapeFail = ObjectUtil.copy(this.enemy.grappleEscapeFail) as String;
                                    this.enemyt.grappleEscapeSucceed = ObjectUtil.copy(this.enemy.grappleEscapeSucceed) as String;
                                    switch (this.dXY(1, 3)) {
                                        case 1:
                                            switch (this.dXY(1, 3) == 3) {
                                                case true:
                                                    this.scene("<li>Earthquake</li>", false);
                                                    this.scene("The giant snake suddenly rears up high, then comes crashing back to the ground. The earth shakes violently beneath your feet, knocking you to the ground! ", false);
                                                    this.doHealth(-this.eDMG * 1.5);
                                                    if (this.d100() < 40) {
                                                        this.chgTempStats("stun", 2);
                                                        this.scene("You are disoriented by the intense shaking! ", false);
                                                    }
                                                    break;
                                                case false:
                                                    this.scene("<li>Timber</li>", false);
                                                    switch (this.dodge()) {
                                                        case true:
                                                            this.scene("The enormous snake\'s entire body writhes, causing trees to collapse around you. " + "You are able to avoid being hit by them through equal parts speed and luck. ", false);
                                                            break;
                                                        case false:
                                                            this.scene("The enormous snake\'s entire body writhes, and the trees all around you begin to collapse. You are caught under several that fall upon you. ", false);
                                                            this.doHealth(-this.eDMG * 1.3);
                                                    }
                                            }
                                            break;
                                        case 2:
                                            this.scene("<li>Acid spray</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("The giant serpent rears back and opents its mouth, suddenly spraying out foul-smelling bile, " + "but you manage to put some trees between you and it and stay unmelted. ", false);
                                                    break;
                                                case false:
                                                    this.scene("The giant serpent rears back and opens its mouth, suddenly spraying out foul-smelling bile all over you! ", false);
                                                    this.doHealth(-this.eDMG * 1.3);
                                            }
                                            break;
                                        case 3:
                                            this.scene("<li>Grab</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("The giant snake constricts its thick and muscular torso, but you leap well clear of it before it can grab you. ", false);
                                                    break;
                                                case false:
                                                    this.scene("The giant snake constricts its thick and muscular torso, clamping down tight around you as it tries to crush you into submission! ", false);
                                                    this.grapple = this.enemyt.STR * 3;
                                            }
                                    }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tThe intense battering the enormous anaconda has delivered to you proves to be too much, and your body goes limp, unresponsive to your commands. " + "You are just another tiny meal to the giant snake, but are fortunate enough to lose consciousness before things can get any worse. ", false);
                                    this.defeatEvent(this.devoured);
                                }
                        }
                        break;
                    case this.GingerbreadWitch:
                        if (this.surrender) {
                            this.scene("\t\"That\'s a good dear. I think you deserve a reward. Here-\" the witch raises her arms over her head as a swirling orb of thick chocolate coalesces into being. " + "Just the smell is enough to make your mouth water and you open your mouth without even thinking. " + "A thick tendril of warm chocolate spirals out from the orb and pours itself down your throat. " + "You feel your stomach slowly swell with warm sweet chocolate and as your gut expands larger and larger you find yourself unable to stay awake. " + "You eventually collapse to the floor, too full and contented to stay awake. ", true);
                            currentState = "default";
                            this.stuffToBursting();
                            this.nextView();
                            this.specialEvent = 3;
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    doEvent(GingerbreadHouse);
                                }
                            };
                        }
                        else {
                            this.scene("<li>Feed</li>", false);
                            switch (this.dXY(1, 4)) {
                                case 1:
                                    this.scene("The witch cackles as a slice of cake appears in a puff of purple smoke and flies towards your mouth, cramming itself down your throat. " + "You swallow instinctively and lick your face clean. " + "Against your will, you open your mouth, waiting for more. ", false);
                                    this.doConsume(4, 0, 2);
                                    break;
                                case 2:
                                    this.scene("The witch grins evilly as a cupcake poofs into existence in a shower of green sparks and flies towards your face and practically leaps down your throat. " + "You swallow instinctively. Against your will, you open your mouth, waiting for more. ", false);
                                    this.doConsume(3, 0, 1.5);
                                    break;
                                case 3:
                                    this.scene("A shower of red sparks heralds a lemon meringue pie rocketing out of thin air and smacking you in the face. " + "You swallow large sweet and tart globs of lemon and meringue. " + "Against your will, you open your mouth, waiting for more. ", false);
                                    this.doConsume(5, 0, 2.5);
                                    break;
                                case 4:
                                    this.scene("The witch raises her arms in the air and you hear the ceiling above you quake. " + "You look up just as a large hunk of gingerbread ceiling falls down and lands in your mouth, the momentum painfully ramming down it your throat and crashing into your stomach. ", false);
                                    this.doConsume(6, 0, 3);
                            }
                            if (!this.alive()) {
                                this.scene("\n\tYour overtaxed stomach can handle no more. You stumble and fall to the ground, holding on to your overstuffed belly as you fall. The witch stands over you. " + "\n\t\"Don\'t tell me you\'re full already, I was just getting ready for the second course! Hee hee hee hee!\" You attempt to stand again, but you\'re just too full. " + "You pass out in a food coma as the witch stands over you, cackling evilly. ", false);
                                currentState = "default";
                                this.nextView();
                                this.specialEvent = 3;
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        doEvent(GingerbreadHouse);
                                    }
                                };
                            }
                        }
                        break;
                    case this.GluttonSeparatistBoss:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou lower yourself to the ground, submitting before your opponent. " + this.capFirst(this.enemyt.gender.he) + " grumbles angrily and bashes the back of your head with the butt of " + this.enemyt.gender.his + " spear, sending you sprawling to the ground and the world spinning. ", false);
                                this.doHealth(-this.maxHEA * 0.25);
                                if (this.HEA < 1) {
                                    this.HEA = 1;
                                }
                                this.scene("You are dragged off, eventually placed before a robed shaman. ", false);
                                if (this.weight() <= 300) {
                                    this.scene("Two reptillian bystanders haul you onto an altar. ", false);
                                }
                                if (this.weight() > 300) {
                                    this.scene("Four reptillian bystanders haul you onto an altar. ", false);
                                }
                                this.scene("From there, the shaman begins to chant, the unfamiliar island language interspersed with unnatural sounding words that you can barely even comprehend, let alone identify. " + "As magic flows around you, the world goes dark, the altar and village seeming to fade away, leaving you with the distinct feeling of falling. " + "\n\tWhen the sensation stops, you find yourself somewhere cold and dark. All you can see is five glowing lights, like sets of eyes staring at you. " + "A whispy, deep voice echoes around you in an unnatural tongue, and your pulse quickens, a cold feeling spreading through you. " + "Before you can fully comprehend what is happening, your body dissipates, absorbed by something in the darkness, and you are no more. ", false);
                                this.defeatEvent(this.transformed);
                                break;
                            case false:
                                switch (this.dXY(1, 3)) {
                                    case 1:
                                        this.scene("<li>Jab</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " jabs at you with " + this.enemyt.gender.his + " spear, but you deftly evade.", false);
                                                break;
                                            default:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " jabs at you with " + this.enemyt.gender.his + " spear, catching you with the pointed tip! ", false);
                                                this.doHealth(-this.eDMG * 1.2);
                                        }
                                        break;
                                    case 2:
                                        this.scene("<li>Stick Beat</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " suddenly swipes " + this.enemyt.gender.his + " spear at you, intending to bash you with the shaft, but you carefully duck out of the way. ", false);
                                                break;
                                            default:
                                                this.scene(this.capFirst(this.enemyt.gender.he) + " suddenly swipes " + this.enemyt.gender.his + " spear at you, the shaft of it making a solid thwack as it slaps hard into you! ", false);
                                                this.doHealth(-this.eDMG);
                                        }
                                        break;
                                    case 3:
                                        this.scene("<li>Body Slam</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene("Suddenly the fat " + this.enemyt.species.name + " rushes at you and jumps into the air, but you keep well clear as " + this.enemyt.gender.he + " crashes down onto the ground! " + this.capFirst(this.enemyt.gender.he) + " slowly gets back up to face you again, clearly worse for wear after that. ", false);
                                                if (this.d100() < 33) {
                                                    this.scene("Looks like " + this.enemyt.gender.he + " is a bit dizzy, to boot. ", false);
                                                    this.eStatusStunTime = 1;
                                                }
                                                break;
                                            default:
                                                this.scene("Suddenly the fat " + this.enemyt.species.name + " rushes at you and jumps into the air, " + this.enemyt.gender.his + " weight crashing down on you as you are both sent sprawling! ", false);
                                                this.doHealth(-this.eDMG);
                                                if (this.d100() < 33) {
                                                    this.scene("The impact makes your head spin! ", false);
                                                    this.chgTempStats("stun", 1);
                                                }
                                        }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tThe " + this.enemyt.species.name + "\'s last attack sends you to the ground hard, and try as you might, you can\'t pick yourself back up. " + "The painful beating causes you to lose consciousness, with the last thing you feel being a sense of being dragged somewhere. " + "\n\tWhen you awaken later, you are somewhere cold and dark. All you can see is five glowing lights, like sets of eyes staring at you. " + "A whispy, deep voice echoes around you in an unnatural tongue, and your pulse quickens, a cold feeling spreading through you. " + "Before you can fully comprehend what is happening, your body dissipates, absorbed by something in the darkness, and you are no more. ", false);
                                    this.defeatEvent(this.transformed);
                                }
                        }
                        break;
                    case this.Manticore:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou lower yourself to the ground and bow your head, unwilling to fight any further. " + "From above, the dog\'s voice rings out again, \"Good! I knew I could convince you.\" " + "The manticore pounces at you, but before it can eat you, you are transported again, this time to a sterile, well-lit chamber. " + "Beside you is an extremely obese goat munching on handfuls of grain scooped out of a large bag. \n", false);
                                this.subEvent = "Experiment";
                                this.endCombat();
                                currentState = "default";
                                this.nextView();
                                this.listen = function ():void {
                                    doEvent(WizardTower);
                                };
                                break;
                            default:
                                switch (this.dXY(1, 3)) {
                                    case 1:
                                        this.scene("<li>Claw</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene("The manticore rushes towards you and rises up on its hind legs, but you\'re already out of the way before it brings its claws down at you. ", false);
                                                break;
                                            default:
                                                this.scene("The great beast rushes at you, rises onto its hind legs, and mauls you with its huge claws! ", false);
                                                this.doHealth(-this.eDMG);
                                        }
                                        break;
                                    case 2:
                                        this.scene("<li>Tackle</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene("The creature flaps its wings and jumps through the air, but you\'re fast enough to duck under it and evade its huge bulk. ", false);
                                                break;
                                            default:
                                                this.scene("The manticore suddenly leaps into the air, its wings beating a few times to lend it speed. " + "You are too slow to escape, and it smashes the bulk of its body into you, sending you sprawling! ", false);
                                                if (this.d100() < 50) {
                                                    this.chgTempStats("stun", 1);
                                                }
                                                this.doHealth(-this.eDMG);
                                        }
                                        break;
                                    case 3:
                                        this.scene("<li>Sting</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene("You see the beast lower its head, and duck to the side as its stinger comes lancing towards where you were. ", false);
                                                break;
                                            default:
                                                this.scene("The beast lowers its head a bit further, and suddenly its stinging tail comes lashing over top of it, jabbing you full of poison! " + "It makes you feel sluggish, and also... full? ", false);
                                                this.chgTempStats("AGI", this.dXY(3, 6));
                                                this.statusBloatVenomPower = this.statusBloatVenomPower + this.dXY(3, 6);
                                        }
                                }
                                if (!this.alive() || this.AGI <= 0) {
                                    this.scene("\n\tThe manticore proves too much for you to handle, and the pain and poison send you sprawling to the ground. " + "It marches over to you and opens its mouth, rows of pointed teeth glinting above you, when you suddenly hear the wizard call out, \"I think I\'ve made my point.\" " + "The world blurs just before the creature sets on you to devour you, and you find yourself just able to stand. It appears you\'ve been moved to a sterile, well-lit chamber. " + "Beside you is an extremely overweight goat eating handful after handful of grain, which he takes from a large bag beside him. ", false);
                                    this.subEvent = "Experiment";
                                    this.endCombat();
                                    currentState = "default";
                                    this.nextView();
                                    this.listen = function ():void {
                                        doEvent(WizardTower);
                                    };
                                }
                        }
                        break;
                    case this.cheeseMonster:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou give up. With a groan, you slump to your knees, resigned to the fact that you\'ve bitten off more than you can chew here. " + "The cheese bounces on the spot and hoots at you in triumph, seeming to grow slightly bigger. Then it thuds forwards and launches itself high into the air. " + "You look up to follow it, and the last thing you see before the world turns black is the underside of a large wheel of cheese, " + "hurtling down towards your head, getting bigger and bigger and bigge- ", false);
                                this.defeatEvent(this.battle);
                                break;
                            default:
                                switch (this.dXY(1, 3)) {
                                    case 1:
                                        this.scene("<li>Charge</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene("You see the huge cheese hurtling towards you through the air, but dodge to one side. " + "The cheese flies past you and smacks hard into a wooden beam, making a crack appear in the rind. " + "It crashes to the floor and sits dazed for a moment, then seems to shake itself and bounces around to face you again. This thing just doesn\'t give up! ", false);
                                                break;
                                            default:
                                                this.scene("The wheel of cheese bounces heavily on the wooden floor in front of you, snarling, making the boards shake. " + "Then it suddenly launches itself at you in a furious bound and catches you squarely in the stomach! You let out a loud OOF and are knocked backwards, winded. " + "The cheese rebounds off your " + this.waist() + " belly, flips through the air like a gigantic coin and lands back on the boards with a thud. ", false);
                                                this.doHealth(-this.eDMG);
                                        }
                                        break;
                                    case 2:
                                        if (this.eHEA < this.enemyt.maxHEA * 0.5 && this.dXY(1, 2) == 1) {
                                            this.scene("<li>Melt</li>", false);
                                            this.scene("Sitting on the floor, the battle-damaged cheese quivers on the spot, seeming to strain in effort. " + "As you watch, the rind begins to reseal itself, and some of the gouges in the wheel begin to refill as surrounding cheese softens and flows into the cracks before rehardening. " + "When it stops straining, the cheese looks a lot less nibbled than it did. Looks like you\'ve still got a lot on your plate. ", false);
                                            this.enemyt.maxHEA = this.enemyt.maxHEA - 25;
                                            this.doEnemyHealth(this.dXY(45, 55));
                                        }
                                        else {
                                            this.scene("<li>Roar</li>", false);
                                            this.scene("As you approach the cheese like someone trying to wrestle a bronco, it lets out a bellow- deep and bassy, but with an edge of goat\'s bleat, " + "a throaty hint of a lion\'s roar and the piercing keen of a hunting eagle thrown in. " + "It echoes in the confined space and saws across your ears, making spots appear before your eyes. " + "You stumble back, clutching your ears. The cheese\'s bellow drops into what sounds suspiciously like a snigger. ", false);
                                            if (this.AGI > 8) {
                                                this.chgTempStats("AGI", this.dXY(4, 8));
                                            }
                                        }
                                        break;
                                    case 3:
                                        this.scene("<li>Stench</li>", false);
                                        this.scene("You advance on the cheese, but it quivers on the spot and snorts out a cloud of steam which envelops you. " + "You\'re overwhelmed by the foulest, cheesiest stench you\'ve even encountered, and you stagger back, coughing and clutching your nose. " + "Urgh, you think you can even smell it though your EARS, it\'s that vile. It\'s like Limburger, Munster and Camembert, cubed! " + "You feel your face going green, and you\'re left feeling distinctly unwell. A smell like that is enough to make you lose your appetite. ", false);
                                        this.chgTempStats("STO", this.dXY(6, 10));
                                        this.doHealth(-this.eDMG * 0.25);
                                }
                                if (!this.alive()) {
                                    switch (this.FUL > this.maxFUL) {
                                        case true:
                                            this.scene("\n\tLetting out a stuffed, painful BELCH, you fall back onto your butt and sprawl on the milking shed floor, weakly rubbing at your massively overstuffed belly. " + "The cheese bounces to and fro, growling at you, but you\'re too full to pay it any more attention, and it seems to realise the fact. " + "As the world begins to spin around you, your last coherent thought is that you\'re going to have some pretty spectacular nightmares tonight. " + "The cheese suddenly launches itself into the air, and bounces on your aching, over-pressurised belly with a heavy BWOOMPH! " + "You let out a weak cry and mercifully black out... ", false);
                                            this.defeatEvent(this.overeating);
                                            break;
                                        default:
                                            this.scene("\n\tYou stagger drunkenly, stomach aching and head ringing from the overpowering smell of cheese in your nostrils. You never want to touch the stuff again! " + "As you drop your guard, the cheese senses your weakness and suddenly launches itself toward you at head height, spinning like a discus! " + "By the time you look up and see it you\'re too slow and fuddled to react in time. " + "You manage to get your arm half up to defend yourself but the cheese whizzes past your guard and cannons into the side of your head. " + "You drop to your knees, seeing stars and feeling the room spin around you. " + "It\'s all too much, and you gratefully let yourself fall forwards into the black unconsciousness that rushes up to greet you... ", false);
                                            this.defeatEvent(this.battle);
                                    }
                                }
                        }
                        break;
                    case this.golemBoss:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tUnwilling to fight further, you lower yourself to the ground, hoping that this creature understands what submission is. " + "The golem stops for a moment, then picks you up with surprising gentleness in its stone hand as a deep, growling voice rumbles through it: " + "\"FOR YOUR OWN SAKE, DO NOT SEEK THE SWORD.\" With this warning, the world is replaced by a brilliant white flash, " + "and you find yourself back in the eastern island village, none the worse for wear. ", false);
                                currentState = "default";
                                this.endCombat();
                                this.endEvent(this.DinosaurCenter);
                                break;
                            case false:
                                if (this.eHEA < this.enemyt.maxHEA * 0.5 && this.enemyt.attackCounterA < this.eHEA) {
                                    this.scene("<li>Shard shatter</li>", false);
                                    this.scene("Your attack causes the golem to shatter, sending viciously sharp shards at you for " + int(this.eDMG * 0.4) + " damage! ", false);
                                    this.doHealth(-this.eDMG * 0.4);
                                    this.enemyt.attackCounterA = this.eHEA;
                                }
                                switch (this.dXY(1, 3)) {
                                    case 1:
                                        this.scene("<li>Heavy blow</li>", false);
                                        switch (this.dodge()) {
                                            case true:
                                                this.scene("The obsidian golem swings its arms in an unnatural sweep, but you are quick enough to avoid getting smashed! ", false);
                                                break;
                                            case false:
                                                this.scene("The obsidian golem swings its arms in an unnatural sweep, catching you in the side with a tremendous blow and doing " + this.eDMG + " damage! ", false);
                                                this.doHealth(-this.eDMG);
                                        }
                                        break;
                                    case 2:
                                        this.scene("<li>Shockwave</li>", false);
                                        switch (this.dodge() && this.dodge()) {
                                            case true:
                                                this.scene("The giant obsidian creature clasps its \'hands\' together above its \'head\' and smashes them downward to the ground, " + "sending a magical shockwave at you, but you are ready for it, and dodge to the side! ", false);
                                                break;
                                            case false:
                                                this.scene("The giant obsidian creature clasps its \'hands\' together above its \'head\' and smashes them downward to the ground, " + "sending a magical shockwave at you that catches you off-guard, crashing into you and doing " + this.eDMG + " damage! ", false);
                                                this.doHealth(-this.eDMG);
                                        }
                                        break;
                                    case 3:
                                        this.scene("<li>Magma call</li>", false);
                                        switch (this.dodge() || this.dodge()) {
                                            case true:
                                                this.scene("The obsidian golem seems to lower its body and force its \'hands\' into the side of the volcano. " + "The ground begins to rumble, and a few moments later, spouts of molten rock burst forth around you! " + "Fortunately, they\'re far enough away that you don\'t get burned! ", false);
                                                break;
                                            case false:
                                                this.scene("The obsidian golem seems to lower its body and force its \'hands\' into the side of the volcano. " + "The ground begins to rumble, and a few moments later, spouts of molten rock burst forth around you! " + "You are painfully close to the superheated earth and take " + this.eDMG + " damage! ", false);
                                                if (this.d100() < 50) {
                                                    this.scene("Just being this close is enough to cause painful burns! ", false);
                                                    this.chgTempStats("burn", this.eDMG * 0.5);
                                                }
                                                this.doHealth(-this.eDMG);
                                        }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tYou fall to your knees, thoroughly battered by the large obsidian golem. " + "It picks you up, holding you in one \'hand\' as a deep, growling voice seems to rumble through it: \"DO NOT SEEK THE SWORD.\" " + "With this warning, the world is replaced by flaring white, and you find yourself back in the eastern island village, battered and bruised, but still intact. ", false);
                                    currentState = "default";
                                    this.endCombat();
                                    this.HEA = 1;
                                    this.endEvent(this.DinosaurCenter);
                                }
                        }
                        break;
                    case this.RoyalGuardWasp:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou decide that you don\'t want to fight any more and lower your defenses, hoping to get this over with quickly. " + "The wasp seizes the advantage and impales you on its stinger, the huge amount of poison overwhelming your body and leaving you unable to move. " + "Though you are wracked with pain, you can still see the relatively small insects tending to the queen come over to you and crawl beneath you. " + "As they congregate beneath you, you are dragged into the queen\'s chamber, at which point a flying insect picks you up. " + "In a manner almost choreographed, you are buzzed over to the great, unmoving, somehow fat looking bloated insect\'s head. " + "It opens its mandibles, and you are dropped into its mouth and swallowed easily. " + "The buzzing of the hive becomes muted as you are engulfed by its innards, and the squeezing of its stomach on you causes you to finally lose consciousness. ", false);
                                this.defeatEvent(this.devoured);
                                break;
                            default:
                                switch (this.dXY(1, 3)) {
                                    case 1:
                                        this.scene("<li>Tackle</li>", false);
                                        switch (this.testSkillRange(this.AGI + this.INT, this.enemyt.AGI + this.enemyt.INT, 10, 75)) {
                                            case true:
                                                this.scene("The wasp streaks towards you, but you duck out of its way before it collides with you. ", false);
                                                break;
                                            default:
                                                this.scene("The wasp dashes through the air and plows into you with its chitinous torso, stunning you! ", false);
                                                this.doHealth(-this.eDMG);
                                                this.chgTempStats("stun", 1);
                                        }
                                        break;
                                    case 2:
                                        this.scene("<li>Envenom</li>", false);
                                        this.scene("The wasp suddenly flicks its stinger at you, a surprisingly voluminous spray of its poison spattering all around. " + "It slowly starts to burn where it touches your skin, the pain intensifying with each passing moment! ", false);
                                        this.chgTempStats("poison", 3);
                                        break;
                                    default:
                                        this.scene("<li>Sting</li>", false);
                                        switch (this.testSkillRange(this.AGI + this.INT, this.enemyt.AGI + this.enemyt.INT, 10, 75)) {
                                            case true:
                                                this.scene("The wasp launches itself at you stinger-first, but a combination of a parry and a partial dodge keeps you safe from its venomous pierce. ", false);
                                                break;
                                            default:
                                                this.scene("The wasp jabs its stinger at you, piercing your armor and stabbing into your flesh. " + "Its poison makes the wound even more painful, and it\'s getting worse by the second! ", false);
                                                this.doHealth(-this.eDMG);
                                                this.chgTempStats("poison", 6);
                                        }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tThe pain, poison, and blood loss prove to be too much and you fall to the ground, thoroughly beaten. ", false);
                                    this.defeatEvent(this.battle);
                                }
                        }
                        break;
                    case this.shamanBoss:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tUnwilling to fight the shaman any further, you lower yourself to the ground in submission before the raptor. He scoffs and barks out a command in the island language. ", false);
                                if (this.weight() <= 300) {
                                    this.scene("Two reptillian bystanders haul you onto an altar. ", false);
                                }
                                if (this.weight() <= 600 && this.weight() > 300) {
                                    this.scene("Four reptillian bystanders haul you onto an altar. ", false);
                                }
                                if (this.weight() <= 1000 && this.weight() > 600) {
                                    this.scene("Half a dozen reptillian bystanders haul you haphazardly onto an altar. ", false);
                                }
                                if (this.weight() > 1000) {
                                    this.scene("What feels like an entire village of reptillian bystanders struggle to haul your massive body onto an altar. ", false);
                                }
                                this.scene("From there, the shaman begins to chant, the unfamiliar island language interspersed with unnatural sounding words that you can barely even comprehend, let alone identify. " + "As magic flows around you, the world goes dark, the altar and village seeming to fade away, leaving you with the distinct feeling of falling. " + "\n\tWhen the sensation stops, you find yourself somewhere cold and dark. All you can see is five glowing lights, like sets of eyes staring at you. " + "A whispy, deep voice echoes around you in an unnatural tongue, and your pulse quickens, a cold feeling spreading through you. " + "Before you can fully comprehend what is happening, your body dissipates, absorbed by something in the darkness, and you are no more. ", false);
                                this.defeatEvent(this.transformed);
                                break;
                            case false:
                                if (this.enemyt.attackCounterA == 2 && this.eHEA <= this.enemyt.maxHEA * 0.5 && !enemyAttacked) {
                                    this.scene("<li>Stardust</li>", false);
                                    this.scene("The raptor raises the totem high, looking up to the heavens and calling out in a language you don\'t understand. " + "The sky streaks with falling stars, and in a few moments you are pelted with countless small, burning stones. ", false);
                                    this.doHealth(-this.eDMG * 1.7);
                                    this.enemyt.attackCounterA = 1;
                                    enemyAttacked = true;
                                }
                                if (this.enemyt.attackCounterA == 2 && this.eHEA <= this.enemyt.maxHEA * 0.25 && !enemyAttacked) {
                                    this.scene("<li>Dragon breath</li>", false);
                                    switch (this.dodge()) {
                                        case true:
                                            this.scene("With a bit of panic on his face, the raptor begins to utter deep, rumbling words of power. As he utters the last syllable, he lurches forward, mouth open wide. " + "Taking this as a sign to get out of the way, you put as many objects between him and you as possible, " + "and a gout of fire erupts from his mouth, but fails to do more than cause you to sweat! ", false);
                                            break;
                                        case false:
                                            this.scene("With a bit of panic on his face, the raptor begins to utter deep, rumbling words of power. " + "As he utters the last syllable, he lurches forward, mouth open wide as a gout of flame erupts from it, engulfing you in fire! ", false);
                                            this.doHealth(-this.eDMG * 1.5);
                                            this.chgTempStats("burn", this.eDMG * 0.5);
                                    }
                                    this.enemyt.attackCounterA = 0;
                                    enemyAttacked = true;
                                }
                                if (this.attemptsLeft <= 0 && !enemyAttacked) {
                                    this.scene("<li>Thorn wrap</li>", false);
                                    this.scene("The shaman chants a few words, and the ground ruptures below your feet, thorned vines erupting forth and biting into your flesh as they wrap tightly around you! ", false);
                                    this.attemptsLeft = 5;
                                    enemyAttacked = true;
                                }
                                if (this.attemptsLeft > 0) {
                                    this.scene("<li>Thorns</li>", false);
                                    this.scene("The thorny vines dig into you. ", false);
                                    this.doHealth(-this.dXY(8, 15));
                                    if (this.d100() < 20) {
                                        this.chgTempStats("stun", 1);
                                    }
                                    this.attemptsLeft--;
                                    if (this.attemptsLeft <= 0) {
                                        this.attemptsLeft = 0;
                                        this.scene("The vines around you retract back into the ground, expended of their magic! ", false);
                                    }
                                }
                                if (!enemyAttacked) {
                                    switch (this.dXY(1, 2)) {
                                        case 1:
                                            if (this.dXY(1, 3) == 3 || this.AGI < 10 || this.STR < 10) {
                                                this.scene("<li>Geyser</li>", false);
                                                this.scene("The shaman bends low to the ground, hands facing upwards before he suddenly rises, throwing " + this.enemyt.gender.his + " hands up in the air. " + "Below you, the earth rumbles, then cracks open as a geyser of water pounds into you, sending you flying into the air before you land hard on the ground. ", false);
                                                this.doHealth(-this.eDMG);
                                            }
                                            else {
                                                this.scene("<li>Fatten</li>", false);
                                                this.scene("The shaman waves his hands, chanting curses at you in a language you don\'t understand. " + "The world suddenly seems heavier, your strength leaving you as your muscles turn into thick, heavy fat on your body! ", false);
                                                this.chgTempStats("STR", this.dXY(4, 9));
                                                this.chgTempStats("AGI", this.dXY(4, 9));
                                                this.chgTempStats("fat", this.dXY(8, 18));
                                            }
                                            break;
                                        case 2:
                                            this.scene("<li>Boulder smash</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("The shaman raises his hand and clenches it into a fist, causing the ground around you to hurl itself at you in dozens of large chunks. " + "Fortunately, you are able to get yourself away from its epicenter without getting crushed thanks to a quick leap to the side. ", false);
                                                    break;
                                                case false:
                                                    this.scene("The shaman raises his hand and clenches it into a fist, causing the ground around you to hurl itself at you in dozens of large chunks, smashing into you! ", false);
                                                    this.doHealth(-this.eDMG);
                                            }
                                    }
                                }
                                if (!this.alive()) {
                                    this.scene("\n\tThe raptor\'s last spell proves to be too much, and you slump to the ground, defeated. ", false);
                                    if (this.weight() <= 300) {
                                        this.scene("Two reptillian bystanders haul you onto an altar. ", false);
                                    }
                                    if (this.weight() <= 600 && this.weight() > 300) {
                                        this.scene("Four reptillian bystanders haul you onto an altar. ", false);
                                    }
                                    if (this.weight() <= 1000 && this.weight() > 600) {
                                        this.scene("Half a dozen reptillian bystanders haul you haphazardly onto an altar. ", false);
                                    }
                                    if (this.weight() > 1000) {
                                        this.scene("What feels like an entire village of reptillian bystanders struggle to haul your massive body onto an altar. ", false);
                                    }
                                    this.scene("From there, the shaman begins to chant, the unfamiliar island language interspersed with unnatural sounding words that you can barely even comprehend, let alone identify. " + "As magic flows around you, the world goes dark, the altar and village seeming to fade away, leaving you with the distinct feeling of falling. " + "\n\tWhen the sensation stops, you find yourself somewhere cold and dark. All you can see is five glowing lights, like sets of eyes staring at you. " + "A whispy, deep voice echoes around you in an unnatural tongue, and your pulse quickens, a cold feeling spreading through you. " + "Before you can fully comprehend what is happening, your body dissipates, absorbed by something in the darkness, and you are no more. ", false);
                                    this.defeatEvent(this.transformed);
                                }
                        }
                        break;
                    case this.Smarty:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou hold up your hands in submission, not wanting to be on Smarty\'s bad side, but this only seems to make him angrier. " + "\"You think you can just attack Snookums and everything\'ll be fine?!\" he yells, his head throbbing more visibly. \"GET OFF MY MOUNTAIN!\" he bellows, pointing his wand at you. " + "This proves to not be a request as a magical force bursts out at you, sending you flying! " + "You crash back down to the rocks below, sliding and bouncing as you go further and further down the mountain\'s steep side. " + "You can\'t bring yourself to a halt until well after you\'ve hit the base of it. You slowly get to your feet, rubbing at your bruises before staggering off to find somewhere else to explore. " + "Maybe he\'ll cool down a bit later... ", false);
                                this.HEA = 1;
                                currentState = "default";
                                this.endEvent(this.HillsHub);
                                break;
                            default:
                                switch (this.eHEA <= this.enemyt.maxHEA / 3 && this.eHEA > 1) {
                                    case true:
                                        this.scene("<li>Calamity</li>", false);
                                        this.scene("The rabbit utters a curse, glaring at you for a moment before staring at a point directly in front of him. " + "His hands shake as he focuses, and a brilliantly shining bead appears in front of him. \"Goodbye, troublemaker,\" he growls, then reaches out and touches the bead with his wand. " + "Before you can react, the world is replaced with a tumult of roiling magical energies, a massive explosion engulfing the two of you! ", false);
                                        this.doHealth(-1000);
                                        this.doEnemyHealth(1 - this.eHEA);
                                        this.eStatusStunTime = this.eStatusStunTime + 3;
                                        this.eStatusSlowTime = this.eStatusSlowTime + 3;
                                        break;
                                    default:
                                        switch (this.dXY(1, 3)) {
                                            case 1:
                                                this.scene("<li>Flame Leviathan</li>", false);
                                                switch (this.dodge()) {
                                                    case true:
                                                        this.scene("The rabbit throws his arm in a wild circle, then points at you through it. " + "You, however, have gotten on the far side of the cave entrance and are only made uncomfortably hot when an enormous, " + "fiery serpent flies through the air, roaring past you. When it passes, you duck back inside. ", false);
                                                        break;
                                                    default:
                                                        this.scene("The rabbit throws his arm in a wild circle, then points at you through it. " + "An enormous gout of fire erupts from the air, taking the form of a roaring serpent. " + "Its maw opens wide as it flies forth and engulfs you, its long body forming a tunnel of flames that scorch you as it passes! ", false);
                                                        this.doHealth(-this.eDMG);
                                                        if (this.d100() < 75) {
                                                            this.chgTempStats("burn", this.eDMG * 0.1);
                                                        }
                                                }
                                                break;
                                            case 2:
                                                this.scene("<li>Avalanche</li>", false);
                                                switch (this.dodge()) {
                                                    case true:
                                                        this.scene("The rabbit holds an arm out towards you, fingers curled. " + "With a hiss, several boulders of ice congeal around you, but you fortunately spot a gap you can fit through. " + "As he clenches his hand into a fist, you dive between them, narrowly escaping being crushed and frozen, as the ice blocks slam together and burst. ", false);
                                                        break;
                                                    default:
                                                        this.scene("The rabbit holds an arm out towards you, fingers curled. With a hiss, several boulders of ice congeal around you, blocking all sides of you. " + "Before you can figure out how to escape, he clenches his hand into a fist, and the boulders smash into you, then burst in frigid blasts! ", false);
                                                        this.doHealth(-this.eDMG * 1.5);
                                                        if (this.d100() < 20) {
                                                            this.chgTempStats("stun", 1);
                                                        }
                                                }
                                                break;
                                            case 3:
                                                this.scene("<li>Heaven\'s Lightning</li>", false);
                                                this.scene("The rabbit takes a knee, holding his hand in front of his face and uttering an invokation to the gods. As he finishes, he points accusatively at you. " + "The clouds part outside, giving way to a brilliant, shimmering light. " + "As you look out, an enormous bolt of lightning strikes you, the light blinding and the crack of thunder deafening! ", false);
                                                this.doHealth(-this.eDMG);
                                                if (this.d100() < 30) {
                                                    this.chgTempStats("stun", 1);
                                                }
                                        }
                                        if (!this.alive()) {
                                            this.scene("\n\tAs the last spell smashes into you, you are sent crashing to the ground, unable to put up any more resistance. " + "Before you lose consciousness, you hear Smarty ask, \"Was that really necessary?\" ", false);
                                            this.defeatEvent(this.battle);
                                        }
                                }
                        }
                        break;
                    case this.Snookums:
                        switch (this.surrender) {
                            case true:
                                this.scene("\tYou hold up your hands in surrender, not wanting to fight the massive squirrel. She nods and lets out a grunt, then leads you inside. ", false);
                                this.subEvent = "Talking to smarty";
                                currentState = "default";
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        locationTravel(ExperimentCave);
                                    }
                                };
                                break;
                            default:
                                if (this.grapple > 0) {
                                    this.scene("<li>Devour</li>", false);
                                    switch (this.attemptsLeft) {
                                        case 2:
                                            this.scene("Unable to escape, you are helpless as the massive squirrel takes you into her mouth, your entire head fitting neatly in her maw. ", false);
                                            break;
                                        case 1:
                                            this.scene("She adjusts her grip on you, grabbing your waist to pick you up and force you further into her mouth, which stretches to accomodate you. ", false);
                                            break;
                                        case 0:
                                            this.scene("Her jaw unhinges as you are thrust into the squeezing, wet prison of her throat, your pushing against her proving fruitless. " + "Effortlessly, she flips you upwards and pulls at you, your descent down her gullet suddenly becoming extremely quick. " + "In a matter of moments, you are in her belly. For as voluminous as her gut looked on the outside, " + "it\'s a very tight fit that doesn\'t even leave room to struggle as her stomach walls begin to squeeze down around you. " + "Before you lose consciousness, you hear a male voice say \"Snookums, did you eat a new arrival?\" " + "You can hear her let out a guilty, affirmative grunt, then the voice responds, \"Snookums, I told you not to do that.\" ", false);
                                            this.defeatEvent(this.devoured);
                                    }
                                }
                                else {
                                    switch (this.eHEA <= this.enemyt.maxHEA * 0.5 && this.dXY(1, 3) == 3) {
                                        case true:
                                            this.scene("<li>Grab</li>", false);
                                            switch (this.dodge()) {
                                                case true:
                                                    this.scene("You notice just in time that she has gotten quite a bit closer to you than before, and back off just as She lunges forth and swings both arms in to grab at you. ", false);
                                                    break;
                                                default:
                                                    this.scene("Before you notice that She has gotten much closer than is comfortable, she suddenly lunges at you, wrapping her gigantic arms around you. " + "Your bones creak under her immensely strong grip as She prepares to pull you into her gaping mouth! ", false);
                                                    this.grapple = this.enemyt.STR * 3;
                                                    this.attemptsLeft = 2;
                                            }
                                            break;
                                        default:
                                            switch (this.dXY(1, 2)) {
                                                case 1:
                                                    this.scene("<li>Smash</li>", false);
                                                    switch (this.dodge()) {
                                                        case true:
                                                            this.scene("She starts to swing her club, but her wide swing telegraphs the attack, and you swiftly evade. ", false);
                                                            break;
                                                        default:
                                                            this.scene("With a violent motion, she twists her whole body around in a massive swing. Her mace catches you in the side, and the impact sends you tumbling! ", false);
                                                            this.doHealth(-this.eDMG);
                                                    }
                                                    break;
                                                case 2:
                                                    this.scene("<li>Bite</li>", false);
                                                    switch (this.dodge()) {
                                                        case true:
                                                            this.scene("She lunges at you greedily, jaws wide to take a bite out of you, but she overextends and you are able to avoid her. ", false);
                                                            break;
                                                        default:
                                                            this.scene("She suddenly lunges for you, jaws wide open. It\'s not enough to devour you whole, but she does take a nasty bite out of you! ", false);
                                                            this.doHealth(-this.eDMG);
                                                    }
                                            }
                                    }
                                    if (!this.alive()) {
                                        this.scene("\n\tWith her last attack, you stumble, stagger, and collapse to the ground. The squirrel lets out a pleased, wordless groan before descending upon your fallen form. " + "She grabs you under the arms, her grip steely and inescapable, and shoves you into her maw. " + "Her mouth stretches to accomodate you, jaw unhinging as you are thrust into the squeezing, wet prison of her throat. " + "Effortlessly, she flips you upwards and pulls at you, your descent down her gullet suddenly becoming extremely quick. " + "In a matter of moments, you are in her belly. For as voluminous as her gut looked on the outside, " + "it\'s a very tight fit that doesn\'t even leave room to struggle as her stomach walls begin to squeeze down around you. " + "Before you lose consciousness, you hear a male voice say \"Snookums, did you eat a new arrival?\" " + "You can hear her let out a guilty, affirmative grunt, then the voice responds, \"Snookums, I told you not to do that.\" ", false);
                                        this.defeatEvent(this.devoured);
                                    }
                                }
                        }
                        break;
                    case this.StoreRoomOwner:
                        if (this.surrender) {
                            this.scene("\tYou lower your defences and admit defeat.\"Well that\'s mighty kind of \'ya, but I think it\'s a bit too late for apologies now.\" he whacks you over the head and you fall to the floor. " + "You collapse flat on your back and start panting as the angered local looms over you. " + "\n\"Oh I\'m gonna\' have some fun with you, heh heh heh.\" You\'re vision slowly fades to black as you lose consciousnes and the " + this.enemyt.species.name + " laughs maliciously over your head. ", true);
                            currentState = "defeated";
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    specialEvent = 9;
                                    doEvent(StoreRoom);
                                }
                            };
                        }
                        else {
                            this.scene("<li>Attack</li>", false);
                            switch (this.dXY(1, 4)) {
                                case 1:
                                    this.scene("\"Think you can get away with eatin\' all my food eh!?\", he shouts before whacking you in the head with his stick. ", false);
                                    break;
                                case 2:
                                    this.scene("\"Think ye can just gobble up all my hard work jus\' like that!?\" He jabs you hard in the gut with his stick, eliciting a pained grunt from you. ", false);
                                    break;
                                case 3:
                                    this.scene("\"I was gonna have myself a grand \'ol feast and you had to cram it all in your fat face!\" he slaps you across the face with his walking stick. ", false);
                                    break;
                                default:
                                    this.scene("\"Eat this!\" He picks up a nearby apple and pegs you right in the head with it. ", false);
                            }
                            this.doHealth(-this.eDMG);
                            if (!this.alive()) {
                                this.scene("\n\tUnable to take anymore of his onslaught, you slowly sink to the ground. You collapse flat on your back and start panting as the angered local looms over you. " + "\n\"Oh I\'m gonna\' have some fun with you, heh heh heh.\" " + "You\'re vision slowly fades to black as you lose consciousnes and the " + this.enemyt.species.name + " laughs maliciously over your head. ", false);
                                currentState = "defeated";
                                this.specialEvent = 9;
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        doEvent(StoreRoom);
                                    }
                                };
                            }
                        }
                        break;
                    default:
                        this.scene("The " + this.enemyt.name + " attacks you, dealing " + this.eDMG + " damage. ", false);
                        this.doHealth(-this.eDMG);
                        if (!this.alive()) {
                            this.scene("\n\tYou\'re vision fades to black as you fall unconscious. ", false);
                            this.defeatEvent(this.battle);
                        }
                }
            }
            this.surrender = false;
            if (this.inCombat()) {
                this.combatButtons();
            }
            if (startingHEA > this.HEA) {
                this.doArrow("HEAdown");
            }
            if (startingHEA < this.HEA) {
                this.doArrow("HEAup");
            }
            if (this.HEA < 0) {
                this.HEA = 0;
            }
        }

        protected function eventRandomization(param1:Array):int {
            var _loc2_:int = 0;
            var _loc3_:int = 0;
            _loc2_ = 0;
            _loc3_ = 0;
            this.i = 0;
            while (this.i < param1.length - 1) {
                param1[this.i] = param1[this.i] + param1[this.i + 1];
                this.i = this.i + 2;
            }
            this.i = 0;
            while (this.i < param1.length - 1) {
                if (param1[this.i] >= param1[_loc3_]) {
                    _loc3_ = this.i;
                    _loc2_ = this.i * 0.5 + 1;
                }
                this.i = this.i + 2;
            }
            param1[_loc3_] = 0;
            return _loc2_;
        }

        protected function locationUpdate(param1:Locations):void {
            if (param1 != this.Wall && param1 != null && param1 != this.blank) {
                this.cameFrom = this.location;
                this.location = param1;
                this.surroundingsArray = new Array();
                this.i = 0;
                while (this.i < 9) {
                    this.surroundingsArray[this.i] = this.location.Surroundings[this.i];
                    this.i++;
                }
                this.updateStats();
                this.updateBackground();
            }
        }

        protected function updateBackground():void {
            if (this.dayTime()) {
                this.backgroundImageSource = this.location.locationZone.dayBackground;
            }
            else {
                this.backgroundImageSource = this.location.locationZone.nightBackground;
            }
        }

        protected function locationTravel(param1:Locations):void {
            if (param1.locationZone != this.impassable && param1 != null) {
                if (this.location != param1) {
                    this.doWalk(3);
                }
                this.locationUpdate(param1);
                this.doEvent(param1);
            }
        }

        protected function testImmobileClose():Boolean {
            return this.testImmobile(1.3);
        }

        protected function testImmobile(param1:Number):Boolean {
            var _loc2_:Boolean = false;
            _loc2_ = false;
            if ((this.FAT + this.ATE * 2) * param1 > this.STR * 12) {
                _loc2_ = true;
            }
            return _loc2_;
        }

        protected function explore():void {
            var exploreLocation:Locations = null;
            this.clearView();
            this.i = 0;
            while (this.i < 9) {
                exploreLocation = this.surroundingsArray[this.i];
                if (exploreLocation != null) {
                    if (exploreLocation.Name != "") {
                        this.btntxt(this.i + 1, this.capFirst(exploreLocation.Name));
                    }
                    if (exploreLocation.icon != null) {
                        this.buttonIcons(this.i + 1, exploreLocation.icon);
                    }
                }
                this.i++;
            }
            if (this.STA <= 0) {
                if (this.eventText.htmlText.match("You\'re too tired to keep going. You just want to sit down and rest a while.") == null) {
                    this.scene("\n\n<i>You\'re too tired to keep going. You just want to sit down and rest a while.</i> ", false);
                }
            }
            this.listen = function ():void {
                if (STA > 0) {
                    locationTravel(surroundingsArray[btnchc - 1]);
                }
            };
        }

        protected function endEvent(param1:Locations):void {
            this.specialEvent = 0;
            this.subEvent = "";
            this.appView(0);
            this.locationUpdate(param1);
            this.general();
        }

        protected function defeatEvent(param1:Defeats):void {
            this.defeatedBy = param1;
            currentState = "defeated";
            this.nextButton();
        }

        protected function ambientTravelScene(param1:Locations):void {
            var _loc2_:* = null;
            _loc2_ = "";
            switch (param1) {
                case this.WestTownHub:
                case this.CentralSquare:
                case this.WesternSquare:
                case this.EasternSquare:
                case this.SouthernSquare:
                    switch (this.timeOfDay()) {
                        case "night":
                            _loc2_ = _loc2_ + "The sun has completely set, leaving the town in darkness only broken by small pools of light around flickering street lamps. ";
                            switch (this.dXY(1, 9)) {
                                case 1:
                                    _loc2_ = _loc2_ + ("All folks that have had too much to eat or drink already, and those obliged to wake before sunrise have dozed off in their beds and hospital wards, " + "and the square is left to the nocturnal songbirds, last tardy porters, lurching connoisseurs of cheap drink and surly guards lighting the torches. ");
                                    break;
                                case 2:
                                    _loc2_ = _loc2_ + ("This time of night, no one is on the streets who doesn\'t absolutely need to be there, meaning the streetcleaners, " + "the pudgy stray dogs going about their business after an evening of snatching sausages from the spoiled gourmands, and the perpetually gloomy night watch officers. ");
                                    break;
                                case 3:
                                    _loc2_ = _loc2_ + ("It\'s the dead of night in the " + param1.Name + " square, and whenever the night watch isn\'t around, shadowy figures can be seen creeping along the walls, " + "exchanging mysterious objects and secretive whispers with each other before sinking into the nearest alleyway. ");
                                    break;
                                case 4:
                                    _loc2_ = _loc2_ + ("One or two lit windows can be counted in this city of hundreds, and now that both the the citizenry and the scarce town fauna have quieted down, " + "muffled echos of strange and disturbing wilderness sounds can be heard from beyond the city walls. ");
                                    break;
                                case 5:
                                    _loc2_ = _loc2_ + ("The contrast of the dead silence filling the square to the din of the city at noon could not be more stark than at this awkward, empty hour, " + "and even the usually bickering and grouching night watch officers seem to be feeling oppressed, as they plod by with their torches and jingling keychains. ");
                                    break;
                                case 6:
                                    _loc2_ = _loc2_ + ("Only a rare prematurely awoken bird ever produces a halfhearted chirp this early, " + "but the air and the subtle change of lighting feel like the whole city tosses and turns in its sleep, ready to cringe at the first rays of the sun. ");
                                    break;
                                case 7:
                                    _loc2_ = _loc2_ + "A fur is passed out in the gutter with a wine bottle in his hand. His swollen stomach sticks up in the air and occasionaly sloshes back and forth as he rolls in his sleep. ";
                                    break;
                                case 8:
                                    _loc2_ = _loc2_ + ("A small group of " + this.NPC1.species.name + "s drunkenly stumbles past you as they waddle down the street. " + "They\'re each sporting swollen sloshing stomachs that bump into each other as they lean on each other\'s shoulders and sing drunken bar songs off key. ");
                                    break;
                                case 9:
                                    _loc2_ = _loc2_ + ("A stiff breeze ruffles across your " + this.playerSpecies.fur + ". ");
                            }
                            break;
                        case "morning":
                            _loc2_ = _loc2_ + "The morning sunlight has just begun shining on the city streets. ";
                            switch (this.dXY(1, 7)) {
                                case 1:
                                    _loc2_ = _loc2_ + ("It is still much too early for anyone to be up and about, and the only notable sounds consist of the grunting, " + "coughing and swearing of the night watch guards shuffling to their barracks to be relieved after long shift. ");
                                    break;
                                case 2:
                                    _loc2_ = _loc2_ + ("The few birds that inhabit the rooftops of the city\'s buildings can be heard lazily starting their daily routine of chirps and twitterings, " + "but for the most part the common folk are still dreaming. ");
                                    break;
                                case 3:
                                    _loc2_ = _loc2_ + ("The earliest of craftsmen and the last night\'s party guests on their way back home can be occasionally seen staggering about with sleepy expressions, " + "and more and more window blinds are opened to greet the morning light and let out the smells of early breakfast tea. ");
                                    break;
                                case 4:
                                    _loc2_ = _loc2_ + ("The chilly morning air is slowly becoming saturated with the beehive sounds of a large, busy city coming awake, " + "and an inviting aroma starts emanating from the restaurant as it first orders are prepared for the early bird patrons. ");
                                    break;
                                case 5:
                                    _loc2_ = _loc2_ + ("The porters and vendors can be seen carting their goods, pouring out of every street and alleyway and funneling into the market square, " + "although some of those carts carry living passangers bloated with imprudent gorging - those steer towards the hospital entrance instead. ");
                                    break;
                                case 6:
                                    _loc2_ = _loc2_ + ("The square is slowly filling up with all sorts of people - not just those who have any actual business being there, " + "but also the persons of leisure taking their relaxed morning strolls, tourists and street entertainers. ");
                                    break;
                                case 7:
                                    _loc2_ = _loc2_ + "Birds chirp merrily from the branches of the city\'s trees. ";
                            }
                            break;
                        case "day":
                            _loc2_ = _loc2_ + "The warm sun hangs over head and beats down upon the city. ";
                            switch (this.dXY(1, 7)) {
                                case 1:
                                    _loc2_ = _loc2_ + ("The paved space of the town\'s center is starting to clear out after the morning rush, " + "but you still cannot walk through the square in a straight line without bumping into someone. ");
                                    break;
                                case 2:
                                    _loc2_ = _loc2_ + ("A steady stream of diners vanishes behind the voracious doors of the restaurant, and a corresponding queue of porters issue from the establishment\'s back doors, " + "carrying the customers towards the hospital\'s overworked overindulgence ward. ");
                                    break;
                                case 3:
                                    _loc2_ = _loc2_ + ("At this time, the square has more or less cleared out of all the urgently rushing folk, leaving behind the easy sight of promenading nobles " + "and the more prudent of diners hauling their bulks out of the restaurant halls and towards their destinations of choice. ");
                                    break;
                                case 4:
                                    _loc2_ = _loc2_ + ("There is a sense of sun-baked contentment in the almost empty square, but even with the lack of ruckus nearby, a low hum of busy life permeates the city, " + "accentuated every now and then by a loud call, a door getting bashed shut, a sound of explosion from one of the hospital wards or a satisfied belch from one of the restaurant regulars. ");
                                    break;
                                case 5:
                                    _loc2_ = _loc2_ + "Between a rare cart or a lone rider passing across it, the square is largely empty at the moment, allowing the birds to be heard above the subdued din of the working city. ";
                                    break;
                                case 6:
                                    _loc2_ = _loc2_ + ("The " + param1.Name + " is filled with the sounds of conversation as groups of furs walk past you. ");
                                    break;
                                case 7:
                                    _loc2_ = _loc2_ + ("A very overweight " + this.NPC1.species.name + " waddles " + this.NPC1.gender.his + " way down the street with several bags of food under each arm. ");
                            }
                            break;
                        case "evening":
                            _loc2_ = _loc2_ + "The sunlight is starting to get dimmer as the sun sets. ";
                            switch (this.dXY(1, 7)) {
                                case 1:
                                    _loc2_ = _loc2_ + ("The lazier, fatter midday city guards give way to their more exercised and hardened night watch counterparts, " + "and the evening bells summon the vanguard of the wearied workers and vendors getting back from work. ");
                                    break;
                                case 2:
                                    _loc2_ = _loc2_ + ("The square is crowding up at an alarming rate, with the three main components of this stew being the hungry restaurant patrons, " + "the already overtly sated being rushed to the hospital, and the market porters with the significantly lightened carts bowling through. ");
                                    break;
                                case 3:
                                    _loc2_ = _loc2_ + ("Bustling with both amiable cheers and irritated cursing, the city\'s hub is replete with people of all trades, shaped and sizes, " + "and this gathering draws forth the street bards, jesters and the portable snack stand proprietors seeking to service those that didn\'t fit into the crowded restaurant. ");
                                    break;
                                case 4:
                                    _loc2_ = _loc2_ + ("The evening revelries are in full swing now, and as the first windows become lit with candles and magic glowstones, " + "the loud crowd outside them trades the heavily laid dinner plattes for mugs and flagons of ale, and go around singing, chatting and carousing. ");
                                    break;
                                case 5:
                                    _loc2_ = _loc2_ + ("As the darkness falls on the city, the cacophonic commotion begins to decline, " + "with only the most devoted of party animals continuing to gorge and quaff in the settling quiet of the night. ");
                                    break;
                                case 6:
                                    _loc2_ = _loc2_ + ("All of the chatty congregations of townsfolk have long since dispersed in this late hour, " + "and the last bits of merry laughter and sated burps now come from inside the homes around the square.");
                                    break;
                                case 7:
                                    _loc2_ = _loc2_ + ("A " + this.NPC1.species.name + " sits on a bench outside the grocery store and " + this.NPC1.gender.he + "\'s busily cramming slices of cake into his face as " + this.NPC1.gender.he + " " + "rubs " + this.NPC1.gender.his + " swollen stomach. ");
                            }
                    }
                    break;
                case this.ForestHub:
                    switch (this.timeOfDay()) {
                        case "night":
                            switch (this.dXY(1, 6)) {
                                case 1:
                                    _loc2_ = _loc2_ + ("The moon rises, and its shine along with that of starlight seeps through the silver-tinted canopy leaves and scantly illuminates " + "the mysterious nightly happenings of the forest, that include far more than just noturnal hunting and gurgling of both canivorous and ruminant bellies filled during midday and twilight. ");
                                    break;
                                case 2:
                                    _loc2_ = _loc2_ + ("As the rustle of elusive, yet hefty bats and likewise well-fed night time birds fills the air above, hisses and rattling start coming from the underbrush, " + "and strange, bizarrely moving silhouettes can be spotted against the eldritch glow coming from the heart of the forest. ");
                                    break;
                                case 3:
                                    _loc2_ = _loc2_ + ("Unsettling whispers come from everywhere, resonating from tree to tree and floating through the bushes and grass, " + "and the eerie shapes are moving ever closer to your hinding place that doesn\'t feel so secure now, " + "and the plants themselves seem to move subtly on their own accord without any wind promting them. ");
                                    break;
                                case 4:
                                    _loc2_ = _loc2_ + ("Chittering and clicking come from inside the mossy tree stumps, and the branches above bend with creaking effort, " + "as though reaching for something, and the ghostly murmurs around you seems so obnoxiously mocking that you cannot help feeling that those thing are making fun of you. ");
                                    break;
                                case 5:
                                    _loc2_ = _loc2_ + ("As the night draws nearer the end, the frightening whispers abate and withdraw back into the sylvan depths, " + "leaving in their place the terrible hungry noises from nocturnal beasts on the prowl, " + "and at times you could swear you heard screams for help coming from some unlucky traveller too far away to locate, let alone lend a hand. ");
                                    break;
                                case 6:
                                    _loc2_ = _loc2_ + ("The creatures of the deep woods have not all gone away, but are steadily retreating, lurching past the trees on the edges of your sight, " + "and the forest air is unmistakably frosty with a promise of timely sunrise, " + "with no other creature allowing itself to be heard or seen as the first calls of the daytime birds greet the coming morning. ");
                            }
                            break;
                        case "morning":
                            switch (this.dXY(1, 6)) {
                                case 1:
                                    _loc2_ = _loc2_ + ("Even the wild things consider this crispy cold hour early, and it\'s eerily quiet under the treecover, " + "seeing as most of the nocturnal beasts have already crawled into their dens to sleep, and the daylight critters are still shy about leaving their dens. ");
                                    break;
                                case 2:
                                    _loc2_ = _loc2_ + ("The milky white light of the setting sun starts making its way through the dense canopy, " + "banishing the last night birds and beasts and driving the rest to start their early foraging and hunting. ");
                                    break;
                                case 3:
                                    _loc2_ = _loc2_ + ("A hodgepodge chorus of small birds fills the morning air, and life awakens on the forest\'s shadowy floor, " + "with little creatures scurrying around and larger forms rustling the bushes and cracking dry branches under their feet and paws. ");
                                    break;
                                case 4:
                                    _loc2_ = _loc2_ + ("As more light drains through the tangle of leaves and branches overhead, " + "the most of the daylight-loving inhabitants of the woods emerge from their dense and start their food chain interplay, " + "and you start hearing the warning cries of prey creatures and the growls of those preying on the former. ");
                                    break;
                                case 5:
                                    _loc2_ = _loc2_ + ("Even though it is still significantly shady under the tree crowns, " + "the illumination is enough to let you see the incredible diversity of the waking wildlife from your hideout, " + "and both the cunning, social wolves and the jumpy deer show clear signs of benefitting from the land\'s recent abundance, flaunting heavy bellies and jiggling rumps. ");
                                    break;
                                case 6:
                                    _loc2_ = _loc2_ + ("The sundry fluttering and twittering birds above gradually lose their caution as the day unfolds, sometimes darting by so low you could try and catch one, " + "especially since the recent diets of the local aviary have made it harder for their plump rounded bodies to defy gravity. ");
                            }
                            break;
                        case "day":
                            switch (this.dXY(1, 6)) {
                                case 1:
                                    _loc2_ = _loc2_ + ("The forest is bustling with all sorts of activities this time of day, " + "and the strange things one would never even associate with the sylvan habitat roam the limited spaces between the treetrunks and dangling vines, " + "while the more conventional beasts and birds practically have to wait in line of their beastly cousins in order to follow the trail of their choosing. ");
                                    break;
                                case 2:
                                    _loc2_ = _loc2_ + ("The hunt is on in the darkened environment of arching branches, and you don\'t have to wait for too long before a fat feral jackrabbit or an overweight wild boar rushes past, " + "followed by a wolf equally encumbered by jiggling flab, and the traditionally swift and tense contest of speed quickly devolves into an arduous panting clash of endurances, " + "with the victorious predators often collapsing right by their prey, unable to start feasting until they\'ve had a good long rest. ");
                                    break;
                                case 3:
                                    _loc2_ = _loc2_ + ("Although the most prevalent representatives of the forest bestiary tend to be stout bears and portly wolves hunting fleshy deer and blubbery wood pigs, with badgers, weasels, " + "rats, shrews, rabbits and foxes in varying stages of obesity creeping, crawling and leaping between the roots, " + "an occasional call can be heard from some of the sentient woodland explorers. ");
                                    break;
                                case 4:
                                    _loc2_ = _loc2_ + ("Not even the bushy mesh of the tall treetops can deter the sun beating down from above, " + "although the rays sifting down only reach the forest floor as a multitude of tiny glowing dots and blotches, and the commotion of the wildlife has abated for a time being, " + "and a kind of informal truce is proclaimed by the distant rumbling sounds of full bellies and sated belches of the predators. ");
                                    break;
                                case 5:
                                    _loc2_ = _loc2_ + ("With most of the successful hunters fed and safely docile for a while, " + "the herbivores of all shapes and sizes cast off their morning fretfulness and start roaming and foraging in larger groups, stuffing themselves with lush foliage, " + "berries and fruit that grow and ripen too quickly and abundantly for this biome. ");
                                    break;
                                case 6:
                                    _loc2_ = _loc2_ + ("An occassional sleepy bear with a bloated midsection might be seen waddling by your observation every now and then, " + "but the visible and audible fauna is firmly dominated by the herds and flocks prey species that don\'t stop their dedicated banqueting " + "even when one of their number becomes a filling breakfast for one of the less forunate morning hunters before their very eyes. ");
                            }
                            break;
                        case "evening":
                            switch (this.dXY(1, 6)) {
                                case 1:
                                    _loc2_ = _loc2_ + ("For a while, everything is quiet in the woods, with most of its inhabitants sated and at leisure, even the birds that have ceased their persistant twittering and feasting, " + "now weighting down the tree branches with their hefty frames and lazily monitoring the dull motionless forest floor. ");
                                    break;
                                case 2:
                                    _loc2_ = _loc2_ + ("Still largely in the grasp of contented silence, the forest starts showins signs of entering its dusky phase with urgent rustling in the underbrush, " + "wary scuttling of the deer and the yawning calls of predators awaking from their siestas and getting up for the evening hunt. ");
                                    break;
                                case 3:
                                    _loc2_ = _loc2_ + ("Neither the huntes nor they quarry could be seen in the gathering dark, but the ruckus of growls, yelps, chirps and hisses permeates passages between the trees, " + "and much stranger things crawl into view, some lacking any distinquishable limbs and flowing forwards with dogged determination, " + "the others seemingly flowing from one tree trunk and into the other. ");
                                    break;
                                case 4:
                                    _loc2_ = _loc2_ + ("The evening birds start with their maddening symphony of trills and clicks, accompanied by the less diverse, " + "but more relentless hum of insects that fill the gloom among the trees, and a triumphant belch of the evening hunter that has just dined rocks the air every few minutes. ");
                                    break;
                                case 5:
                                    _loc2_ = _loc2_ + ("Although it is too dark to see clearly past the nearest trees, " + "the fireflies and some stranger, peculiar sources of luminescence can be seen flickering against the leaves and the bark, and uncanny, " + "echoing whispering is heard above the din of the feathered and chitinous musicians of the dark. ");
                                    break;
                                case 6:
                                    _loc2_ = _loc2_ + ("The avian chorus has died down slightly, switching from the incessant chirping to more elaborate songs of the nightly species, with the crooning howling of the wolves " + "entering the ensemble from far away, and despite the noisy background and rare tardy beasts rushing towards their holes and dens, the woodlands are at peace. ");
                            }
                    }
            }
            this.scene("\t" + _loc2_, false);
        }

        protected function getQuest(param1:Quests):void {
            var _loc2_:Quests = null;
            if (!this.hasQuest(param1)) {
                _loc2_ = ObjectUtil.copy(param1) as Quests;
                this.questArray.push(_loc2_);
            }
        }

        protected function questActive(param1:Quests):Boolean {
            var _loc2_:Boolean = false;
            _loc2_ = false;
            if (this.hasQuest(param1) && !this.questCompleted(param1)) {
                _loc2_ = true;
            }
            return _loc2_;
        }

        protected function questFind(param1:Quests):int {
            var _loc2_:int = 0;
            var _loc3_:Quests = null;
            _loc2_ = -1;
            this.i = 0;
            while (this.i < this.questArray.length) {
                _loc3_ = this.questArray[this.i];
                if (param1.questName == _loc3_.questName) {
                    _loc2_ = this.i;
                }
                this.i++;
            }
            return _loc2_;
        }

        protected function questStage(param1:Quests):int {
            var _loc2_:int = 0;
            var _loc3_:Quests = null;
            _loc2_ = -1;
            if (this.hasQuest(param1)) {
                _loc3_ = this.questArray[this.questFind(param1)];
                _loc2_ = _loc3_.questProgress;
            }
            return _loc2_;
        }

        protected function hasQuest(param1:Quests):Boolean {
            var _loc2_:Boolean = false;
            _loc2_ = false;
            if (this.questFind(param1) > -1) {
                _loc2_ = true;
            }
            return _loc2_;
        }

        protected function questAdvance(param1:Quests):void {
            var _loc2_:Quests = null;
            if (this.hasQuest(param1)) {
                _loc2_ = ObjectUtil.copy(this.questArray[this.questFind(param1)]) as Quests;
                if (_loc2_.questProgress < _loc2_.questGoal) {
                    _loc2_.questProgress++;
                }
                this.questArray.splice(this.questFind(param1), 1, _loc2_);
            }
        }

        protected function questReady(param1:Quests):Boolean {
            var _loc2_:Quests = null;
            var _loc3_:Boolean = false;
            _loc3_ = false;
            if (this.hasQuest(param1)) {
                _loc2_ = this.questArray[this.questFind(param1)];
                if (_loc2_.questProgress >= _loc2_.questGoal) {
                    _loc3_ = true;
                }
            }
            return _loc3_;
        }

        protected function questCompleted(param1:Quests):Boolean {
            var _loc2_:Boolean = false;
            var _loc3_:Quests = null;
            _loc2_ = false;
            if (this.hasQuest(param1)) {
                _loc3_ = this.questArray[this.questFind(param1)];
                if (_loc3_.completed == true) {
                    _loc2_ = true;
                }
            }
            return _loc2_;
        }

        protected function questReward(param1:Quests):void {
            var _loc2_:Quests = null;
            if (this.hasQuest(param1)) {
                _loc2_ = this.questArray[this.questFind(param1)];
                this.scene("<li>Quest complete!</li>", false);
                this.doXP(_loc2_.questXP);
                this.doGold(_loc2_.questGold);
                if (_loc2_.questItem != null) {
                    this.forceGetItem(_loc2_.questItem);
                }
                _loc2_.questProgress = _loc2_.questGoal;
                _loc2_.completed = true;
                _loc2_.visible = false;
            }
        }

        protected function questRemove(param1:Quests):void {
            if (this.hasQuest(param1)) {
                this.questArray.splice(this.questFind(param1), 1);
            }
        }

        protected function doEvent(param1:Locations):void {
            var randomAquatics:Array = null;
            var tempTailor:Items = null;
            var tempQuest:Quests = null;
            var tempQuest2:Quests = null;
            var treeItem:Items = null;
            var foundItem:Items = null;
            var attempts:int = 0;
            var distraction:Items = null;
            var tempEnemies:Array = null;
            var ownsFood:Boolean = false;
            var captiveFood:Items = null;
            var tempQuestUncommonTaste:Quests = null;
            var adventurerGenderQuest:Quests = null;
            var tempHorseQuest:Quests = null;
            var questLine:int = 0;
            var horseQuestFightStage:String = null;
            var submitNumber:* = undefined;
            var temp1:int = 0;
            var temp2:int = 0;
            var tempCompleted:int = 0;
            var ID:Locations = param1;
            this.scene("", true);
            this.general();
            if (ID.Surroundings.length == 0) {
                this.appView(0);
            }
            if (ID.Surroundings.length > 0) {
                this.appView(1);
            }
            switch (ID) {
                case this.OceanHub:
                    this.scene("\tYou walk to the shoreline and as you do you pass what looks like a charity stall on the way there. " + "You stop and look, seeing that the stall has lots of crates of pills. " + "A quick read of a pamphlet on the stall says that they’re water-breathing pills being given out for free.  " + "You take a couple, nodding your thanks to the stall attendant, before gulping one down and diving into the water. ", true);
                    break;
                case this.BeachEvent:
                    switch (this.eventRandomization(this.beachTravel)) {
                        case 1:
                            switch (this.dXY(1, 4)) {
                                case 1:
                                    this.scene("\tPacing along the shoreline you come across a heap of seaweed at the water’s edge. It looks fairly fresh, the fronds still green and slippery. " + "You cautiously lift a wide, strap-like frond, tugging, and to your surprise it stretches rather like stiff rubber- " + "when you let go the strand snaps back against the mass of beached plant matter. " + "Bracing your " + this.playerSpecies.feet + " in the sand you reach into the pile, grab hold of a few fronds and HEAVE. " + "The kelp stretches and stubbornly refuses to break, but just when you’re about to turn purple with exertion a handful RIPS free, " + "sending you stumbling backwards, arms windmilling for balance. ", false);
                                    switch (this.dXY(1, 3)) {
                                        case 1:
                                            this.locationUpdate(this.BeachHub);
                                            this.setEnemy(this.WaterElemental);
                                            if (this.dXY(1, 2) == 1) {
                                                this.setEnemy(this.SandSnake);
                                            }
                                            this.scene("\n\tUnfortunately, your strenuous activity disturbs something. As you stand, panting, your eyes widen when the mass of seaweed suddenly heaves and begins to lift up, " + "as if growing before your eyes. When it gets to waist-height the tangled mass of fronds begin to slide apart, and up bursts " + this.enemyt.name + "! ", false);
                                            this.startFight();
                                            break;
                                        default:
                                            this.endEvent(this.BeachHub);
                                            this.getItem(this.StretchySeaweed);
                                    }
                                case 2:
                                    this.doEvent(this.SandMound);
                                    break;
                                case 3:
                                    this.doEvent(this.HydraEvent);
                                    break;
                                case 4:
                                    this.locationTravel(this.raccoonStore);
                            }
                            break;
                        case 2:
                            if (this.dXY(1, 2) == 1) {
                                this.scene("\tAs you comb across the beach, you step on a sand dune that squishes under your feet in a peculiar fashion. " + "You step back in confusion as water bubble up through the sand beneat your " + this.playerSpecies.feet + ". " + "A sudden geyser of water knocks you in the air and causes you to fall on your ass in the sand. " + "As you pick yourself up and dust yourself off, the geyser of water collects together and forms into a vaguely anthropomorphic form in front of you. " + "If the previous few moments are any indication, it certainly doesn\'t appear to be in a very polite mood. ", false);
                                this.setEnemy(this.WaterElemental);
                            }
                            else {
                                this.scene("\tAs you comb across the beach, you step on a sand dune that squishes under your " + this.playerSpecies.feet + " in a peculiar fashion. " + "Jumping back, the sand dune starts shifting under your feet as a large orange snake shifts out from the sand. It glares at you and hisses angrily for disturbing it\'s rest. ", false);
                                this.setEnemy(this.SandSnake);
                            }
                            this.locationUpdate(this.BeachHub);
                            this.startFight();
                            break;
                        case 3:
                            this.scene("You stroll across the beach, the sand gently shifting beneath your " + this.playerSpecies.feet + ". While very scenic, you don\'t actually find anything of interest. ", false);
                            this.locationUpdate(this.BeachHub);
                            this.general();
                            break;
                        case 4:
                            this.doEvent(this.CoconutTree);
                    }
                    break;
                case this.OceanEvent:
                    switch (this.eventRandomization(this.oceanTravel)) {
                        case 1:
                            switch (this.dXY(1, 3)) {
                                case 1:
                                    this.locationTravel(this.BuriedTreasure);
                                    break;
                                case 2:
                                    this.scene("\tAs you plough your way through the water, you find yourself swimming into a bed of seaweed growing from a rocky outcrop. " + "Through the crystal-clear water you watch fish and crustaceans darting between the fronds, with a few brightly-coloured clownfish nibbling on them. " + "Just then a large, ugly-looking catfish swims out of the wide blue yonder and makes to gulp one of these bright little critters up. " + "Its jaws clamp around the tailfin, and the little clownfish paddles frantically to escape. " + "To your astonishment you watch as its tailfin stretches like rubber, and when the catfish opens its jaws to take another bite, the little fish PINGS into the safety of the kelp. " + "\n\tCuriously, you dive down, frightening off the catfish as you go. Grabbing hold of some fronds you tug at them, and watch them stretch sluggishly rather than break. " + "Treading water you take a firmer hold and HEAVE, kicking your legs furiously as you do so. " + "The fronds stretch and this time a few SNAP, sending you into an ungainly backwards somersault that leaves you floating upside down, clutching a handful of seaweed. ", false);
                                    this.getItem(this.StretchySeaweed);
                                    this.endEvent(this.OceanHub);
                                    break;
                                default:
                                    switch (this.dXY(1, 2)) {
                                        case 1:
                                            this.locationTravel(this.raccoonStore);
                                            break;
                                        case 2:
                                            this.locationTravel(this.SirensEvent);
                                    }
                            }
                            break;
                        case 2:
                            if (this.dXY(1, 2) == 1) {
                                this.combatEvent(this.SphericalShark);
                                this.scene("\tAs you’re swimming in the ocean, you notice a grey dorsal fin heading right for you. You duck under the water to get a better view, and see an enormous shark heading your way! ", false);
                            }
                            else {
                                this.combatEvent(this.BubbleOrca);
                                this.scene("\tDuring your swim, you stumble across what looks like one of those crates from earlier, containing the tubes of pills. " + "Strangely, there seems to be lots of empty ones dotted around the crate, and you can see a large, blue tail poking out of the crate. " + "You begin to backstroke away from it, but whatever it is detects you and pulls itself out of the crate. " + "As it faces you, you can see it’s a large orca, but different from those you may have seen in the sea or in books – " + "It’s taken a deep blue hue with a light blue underbelly, evidently changed by eating the pills. " + this.capFirst(this.enemyt.gender.he) + " looks at you, smiling as a few bubbles drool out of " + this.enemyt.gender.his + " mouth. ", false);
                            }
                            this.locationUpdate(this.OceanHub);
                            break;
                        case 3:
                            break;
                        case 4:
                    }
                    break;
                case this.SirensEvent:
                    switch (this.subEvent) {
                        case "":
                            this.scene("\tSwimming through the water, your eye is caught by a small, rocky, offshore island in the distance, made indistinct by a mist clinging around it. " + "Swimming a little closer, you can make out a number of indistinct figures laying near the water\'s edge. Do you swim closer to investigate? ", false);
                            this.yesView(11);
                            this.noView(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 13:
                                        scene("\tFeeling rather nervous for some reason, as quietly as you can, you turn around in the water and swim determinedly away until the foggy island is entirely out of sight. ", true);
                                        endEvent(OceanHub);
                                        break;
                                    case 11:
                                        createNPC(1, playerSpecies, Female);
                                        scene("\tYou swim a little closer, aided by a helpful current. You\'re beginning to enter the fog, but you can see the island more clearly now. " + "Even at this distance, you can\'t help but notice that some of the animals on the beach look remarkably... Rubenesque. " + "It looks like they\'re being attended to by a number of smaller figures, which move with the rather jerky motion of seals. " + "As the current carries you even closer, you have trouble believing your eyes. The smaller figures look like mermaids! " + "They have the long, flexible tails of fish, but their upper bodies are those of land-dwelling animals- well, except for the remarkably statuesque female orca you can see. " + "While most are beautiful- if somewhat curvaceous- females, you can also see a couple of extremely handsome, rather chunky mer-males, as well. " + "\n\tJust then, on the rocky outcrop closest to you, a head pops into view. She\'s a " + NPC1.species.name + ", just like you, though you\'d be willing to be she\'s sporting a fish-tail. " + "She gazes lazily down at you with long, silvery eyelashes, and smiles. " + "Then she opens her mouth, and starts to sing in the sweetest voice you\'ve ever head- it makes you think of honey and apple. " + "The other mermaids on the beach look up, and join in the singing. " + "Their voices echo around the rocks, and so you only catch vague snatches of the words while the sweet music tickles your ears. " + "\n\t\"...Come stranger... island of plenty... all you could ever want... come... eat... COME... EAT...\" " + "Suddenly you realise how amazingly hungry you are, and you immediately begin paddling toward the island before something inside warns you- this doesn\'t feel normal. ", true);
                                        clearView();
                                        subEvent = "escape from sirens";
                                        attemptsLeft = 3;
                                        nextView();
                                        listen = function ():void {
                                            doEvent(SirensEvent);
                                        };
                                }
                            };
                            break;
                        case "escape from sirens":
                            this.scene("\tThe creatures singing to you are beautiful, operatically-built mermaids, with silvery fish-tails joined to their hour-glass hips where their lower limbs would be on a land-dwelling animal. " + "Their voices are almost painfully sweet, and the sound is almost hypnotic. They seem very, very keen for you to join them for a feast... " + "\n\tThe Sirens raise their voices even further and sing out, the wonderfully enchanting music booming against the rocks and over the sound of the waves. " + "You can\'t make out any words, but the sound resonates in the pit of your stomach, and it fills your mind with visions and scents of all the finest, tastiest foods that you can imagine. " + "Your mouth starts to water uncontrollably. You\'ve never felt this hungry- their song makes you want to eat until you\'re ", false);
                            switch (this.dXY(1, 5)) {
                                case 1:
                                    this.scene("full to the brim", false);
                                    break;
                                case 2:
                                    this.scene("stuffed to the ears", false);
                                    break;
                                case 3:
                                    this.scene("too full to move", false);
                                    break;
                                case 4:
                                    this.scene("bursting out of your clothes", false);
                                    break;
                                case 5:
                                    this.scene("ready to explode", false);
                            }
                            this.scene(". You can feel your resistance weakening. ", false);
                            this.btntxt(1, "Escape");
                            this.btntxt(3, "Submit");
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        switch (attemptsLeft) {
                                            case 3:
                                                scene("\tCold sea water splashes into your face, and you partially come to your senses. " + "Flipping over in the foggy ocean, you begin to swim away from the island, but find that the \'helpful\' current is suddenly dead against you leaving. " + "You have to swim hard to make any headway at all. ", true);
                                                doStamina(-40);
                                                attemptsLeft--;
                                                break;
                                            case 2:
                                                scene("\n\tYou plough through the water with ", false);
                                                if (staminaCost(40) > 33) {
                                                    scene("slow and feeble", false);
                                                }
                                                if (staminaCost(40) > 22 && staminaCost(40) <= 33) {
                                                    scene("reasonably strong", false);
                                                }
                                                if (staminaCost(40) <= 22) {
                                                    scene("strong and powerful", false);
                                                }
                                                scene(" strokes, against the tide, making ", false);
                                                if (staminaCost(40) > 33) {
                                                    scene("slow", false);
                                                }
                                                if (staminaCost(40) > 22 && staminaCost(40) <= 33) {
                                                    scene("reasonable", false);
                                                }
                                                if (staminaCost(40) <= 22) {
                                                    scene("good", false);
                                                }
                                                scene(" headway away from the island. Through the thickening fog you can make out the shore of the mainland, " + "but that haunting music is willing you to just stop swimming and let the tide drag you back to the island. " + "You dunk your head in the water to drown out the sound, but you can still hear it. ", false);
                                                doStamina(-40);
                                                attemptsLeft--;
                                                break;
                                            case 1:
                                                scene("\n\tStarting to tire, you keep swimming doggedly away from the island. " + "Although the fog is starting to thin, the water is turning choppier, incoming waves lifting you up and swooping you back down again. " + "It\'s getting harder to swim through, and somehow you think that that\'s not entirely coincidence... ", false);
                                                doStamina(-40);
                                                attemptsLeft--;
                                                break;
                                            case 0:
                                                subEvent = "escaped from sirens";
                                                doEvent(SirensEvent);
                                        }
                                        if (STA <= 0) {
                                            scene("\n\tYour frantic paddling slows to a stop- you\'re just too tired to fight against the current any more, " + "and the more you hear that lovely music, you realise that you no longer WANT to. " + "The tide carries you quickly back to the island as you float helplessly, belly-down, and a wave dumps you, fairly gently, on the shore. " + "You slowly heave yourself to your " + playerSpecies.feet + " and stagger a few feet up from the shoreline, surrounded by that sweet music, which is now humming to you like a lullaby. " + "Maybe after... a short nap you... be able to... get aw... ", false);
                                            subEvent = "lost to sirens";
                                            nextView();
                                            listen = function ():void {
                                                doEvent(SirensEvent);
                                            };
                                        }
                                        break;
                                    case 3:
                                        scene("\tYou never believed in fairy-tales. Listening to your stomach, you dreamily decide \'what harm can it do?\', " + "and start paddling towards the island shore, much to the pleasure of the mer-folk. " + "The current sweeps you on towards the island, and the song of the Sirens grows louder and louder around you, until you can practically TASTE the feast awaiting you. " + "You feel your " + waist() + " stomach scraping pebbles in the shallow water, " + "and scramble to your feet, wading onto the stony shore, the enchanting, delicious-sounding music all around you. Phew.. that swim has REALLY left you tired. Hang on ", true);
                                        if (!optionsFemales && optionsMales) {
                                            scene("guys", false);
                                        }
                                        if (!optionsMales && optionsFemales) {
                                            scene("girls", false);
                                        }
                                        if (optionsMales == optionsFemales) {
                                            scene("girls", false);
                                        }
                                        scene(", just a... short rest and... and then... you\'ll be ready for that meal... ", false);
                                        subEvent = "lost to sirens";
                                        nextView();
                                        listen = function ():void {
                                            doEvent(SirensEvent);
                                        };
                                }
                            };
                            break;
                        case "escaped from sirens":
                            this.scene("\tWith a burst of effort you swim frantically for shore, and finally feel that current loosen its grip on you. " + "You shoot forward, the mist around you thinning until you\'re in clear blue sea again, with that island retreating into the distance just as fast as you can swim. " + "You can still hear the voices of the sirens, getting shriller and shriller as they attempt to call you back, " + "a note of anger and frustration now audible in them as you cheat them of their fun. The compulsion to return to their island finally subsides, and you feel free to go on your way. " + "Maybe next time, ladies... ", false);
                            this.doStamina(-40);
                            this.doXP(20);
                            this.endEvent(this.OceanHub);
                            break;
                        case "lost to sirens":
                            this.scene("\tYou wake up slowly, finding yourself laying sprawled on the beach, belly up. There\'s the murmur of musical voices all around you, and you feel amazingly comfortable. " + "You stretch lazily, then flop back peacefully onto the pebbles- absolutely NOTHING could persuade you to move from this spot. " + "Gazing around you sleepily, you see that you\'re not alone- you\'re now amongst the figures you saw from the ocean. " + "Each has a mermaid or –male by their side, and as you watch you can\'t help but think that they\'re all slowly putting on weight. " + "A panda with salt-bleached fur laying a little way away looks absolutely gargantuan, his body more boulder-like than anything, " + "while the otter blissfully rubbing his belly a little further away is starting to look downright obese. \n\tJust then, ", false);
                            if (!this.optionsFemales && this.optionsMales) {
                                this.createNPC(1, this.playerSpecies, this.Male);
                            }
                            if (!this.optionsMales && this.optionsFemales) {
                                this.createNPC(1, this.playerSpecies, this.Female);
                            }
                            if (this.optionsMales == this.optionsFemales) {
                                this.createNPC(1, this.playerSpecies, this.Female);
                            }
                            if (this.NPC1.gender.name == this.Female.name) {
                                this.scene("an extremely pretty " + this.NPC1.species.name + " mermaid with a lovely curvaceous figure ", false);
                            }
                            if (this.NPC1.gender.name != this.Female.name) {
                                this.scene("a heftily-handsome " + this.NPC1.species.name + " mer-male with chunky features ", false);
                            }
                            this.scene("approaches you. Looking down at you, " + this.NPC1.gender.he + " opens " + this.NPC1.gender.his + " mouth and begins to sing to you in a ", false);
                            if (this.NPC1.gender.name == this.Female.name) {
                                this.scene("sweet contralto", false);
                            }
                            if (this.NPC1.gender.name != this.Female.name) {
                                this.scene("thrumming baritone", false);
                            }
                            this.scene(". Immediately your mind fills with thoughts of food, the most delicious food you\'ve ever tasted, and as much as you could possibly eat. " + "You stifle a small groan and feel your jaw go slack in pleasure. You can actually taste all that wonderful food, a feast to end all feasts. " + "Putting your hands to your stomach, you dreamily realise that it\'s starting to feel a little bigger. " + "Well, you tell yourself- ANYONE who ate food THIS good would find themselves putting on weight. " + "\n\tNow completely under " + this.NPC1.gender.his + " spell, you lay there quite helplessly, dreaming of eating, and eating, and EATING. " + "As you do so, you begin growing fatter, and fatter, and fatter under the magical influence, " + "your butt spreading beneath you, your sides rolling out over the shingle, and your increasingly doughy arms and legs spreading out wide. " + "Pretty soon you\'re spread-eagled on the beach like the rest of them, pinned beneath an absolutely huge belly, and you\'re STILL growing. " + "You woozily glance back over at the panda and the otter, but all you can see where they were laying now are huge, " + "smooth boulders, that look vaguely like sprawled, vastly-obese animals if you half-close your eyes and squint. " + "It\'s hard to only half-close your eyes, though- you\'re starting to feel enormously full and sleepy. " + "Besides, your stomach is blocking almost ALL of the view now. So your eyes shut all the way, even your eyelids having apparently put on weight. " + "You drift off into a bloated sleep with the mer", false);
                            if (this.NPC1.gender.name == this.Female.name) {
                                this.scene("maid", false);
                            }
                            if (this.NPC1.gender.name != this.Female.name) {
                                this.scene("man", false);
                            }
                            this.scene(" still singing to you, dreaming of yet more food... ", false);
                            this.stuffToBursting();
                            this.chgTempStats("fat", 4000);
                            this.defeatEvent(this.overeating);
                    }
                    break;
                case this.raccoonStore:
                    switch (this.cameFrom) {
                        case this.BeachEvent:
                            this.scene("\tMaking your way along the strand, you walk right past an impressively large palm tree, thinking little of it. " + "A moment later, you realize that there was someone there, and that somehow you\'d almost completely missed him. " + "Turning, you see an impressive specimen of a raccoon taking a nap right at the base of the trunk. His strong, muscular arms rest peacefully over a prodigious brown gut. " + "He slips one eye open as you approach, donning a welcoming smile. \"Ah, a customer!\" He proclaims. " + "\n\tHe hefts himself to his feet, before stretching out and releasing a rumbling yawn, licking his chops and scritching his belly afterwards. " + "While his torso is bare, he\'s sporting a roomy pair of traditional-looking pants and an apron with an intricate insignia. \"So, buddy, can I getcha somethin?\" ", false);
                            break;
                        case this.OceanEvent:
                            this.scene("\tSwimming along, you notice something floating on the surface a good distance away. Pushing forward, you surface to find a little boat shop lazily bobbing in the water. " + "There\'s a small bar and a few stools, one of which is straining under the weight of a very ample otter. " + "Behind the counter stands a pleasant-looking raccoon, calmly sharpening a rather fine looking piece of cutlery. " + "Bright and beautiful specimens of seafood and produce fill the space behind him, and you can see crates full of sizeable crustaceans floating in the water around the boat. " + "\"Well, ya comin up for a bite or not?\" The bare-chested raccoon asks, not glancing up from his work. ", false);
                    }
                    this.choiceButton();
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 11:
                                Vendor = ObjectUtil.copy(clerkRaccoon) as Vendors;
                                switch (cameFrom) {
                                    case BeachEvent:
                                        Vendor.Buying = "&quot;Alriiiight!&quot; He cheers, abrupty slapping a broad green leaf over your face. " + "You quickly pull it away, to find that the raccoon is now standing at a little booth of crude design, but there is a very alluring spread of seafood within his reach, " + "razor-sharp cutlery, and somehow even a pot of boiling oil. &quot;Oh, teeeeensy warning? Let\'s just say...my portions are a little more filling than they look. " + "Twice the taste with a lot less chewing!&quot; He thumps his chest proudly. &quot;So, what\'ll it be?&quot; He asks, gesturing to a yellowed menu written in expert penmanship. ";
                                        Vendor.StoreExit = BeachHub;
                                        break;
                                    case OceanEvent:
                                        Vendor.Buying = "You pull yourself from the water onto the open deck, starting to drip-dry. " + "The raccoon smiles at you as you take a seat, putting down his knives and leaning over the counter, pointing to an old, but well-penned menu. " + "&quot;Just tell me what ya want, and its yours! But I gotta warn ya, this stuff may be small, but it\'s more filling than it looks!&quot; " + "He gestures to the steadily-growing otter, lowering his voice. &quot;He didn\'t look like that four hours ago.&quot; ";
                                        Vendor.StoreExit = OceanHub;
                                }
                                inShop = false;
                                doShop();
                                break;
                            case 13:
                                switch (cameFrom) {
                                    case BeachEvent:
                                        scene("\tThe raccoon stops scritching his gut, looking a bit surprised that you\'d decline. He then smiles and shrugs. \"Your loss.\" " + "He stretches his neck from side to side and plops himself back down against the palm, getting comfortable. \"Maybe another time.\"  ", true);
                                        endEvent(BeachHub);
                                        break;
                                    case OceanEvent:
                                        scene("\t\"You\'re missin\' out!\" He says, shrugging. \"Maybe another time.\" And with a quiet \'plunk,\' you slip back into the water. ", true);
                                        endEvent(OceanHub);
                                }
                        }
                    };
                    break;
                case this.SandMound:
                    this.scene("\tWhile walking along, something about the sand nearby makes you stop. It seems somewhat displaced and stirred up, looking lighter in shade than the rest. Maybe there’s something there? ", false);
                    this.btntxt(11, "Investigate");
                    this.btntxt(13, "Ignore");
                    this.listen = function ():void {
                        if (btnchc == 13) {
                            scene("\tDeciding against digging, you shrug and move on, leaving the disturbed sand alone. ", true);
                            endEvent(BeachHub);
                        }
                        else if (btnchc == 11) {
                            scene("\tYou walk over to the patch of sand and start digging with your " + playerSpecies.hands + ". ", true);
                            chance = d100();
                            if (chance > 85) {
                                scene("After a small amount of digging, your hand collides with something metallic. You brush the sand aside and see the top of a beautiful treasure chest. ", false);
                                if (STR > 40) {
                                    scene("You brace yourself in the hole, gripping the chest as hard as possible and pulling. After a few moments it slides free. " + "As it comes loose, you can hear something jingling inside. You pick it up carefully and stow it for when you’re ready to open it. ", false);
                                }
                                else {
                                    scene("You tug at the chest, but it won’t budge. " + "Looking around, you find a sturdy stick nearby and climb back into the hole, wedging it in between the chest and the sand, and after a hard push, you manage to crowbar it free. " + "As it comes loose, you can hear something jingling inside. You pick it up carefully and stow it for when you’re ready to open it. ", false);
                                }
                                endEvent(BeachHub);
                                getItem(TreasureChest);
                            }
                            else if (chance > 60) {
                                scene("After a small amount of digging, your hand touches something solid. You reach into and pull, and a small box pops out, the sand shifting back into the hole as you dust it off. " + "You shake it gently, and can hear tightly-packed sand inside. It’s impossible to tell if it holds anything but without opening it. ", false);
                                endEvent(BeachHub);
                                getItem(SandyBox);
                            }
                            else if (chance > 35) {
                                scene("As you dig, the sand shifts worryingly under your grasp. " + "You step back a little, thinking it might just be a minor cave-in, but an ominous hiss heralds a large, orange snake bursting out of the sand. " + "Some of its body is still under the sand, but it’s a foot wide, far bigger than any snakes you’ve seen. " + "It has a few gritty fragments of coconut hanging out of its mouth, but it snaps them down and hisses at you, looking at you ravenously. ", false);
                                endEvent(BeachHub);
                                combatEvent(SandSnake);
                            }
                            else {
                                scene("You dig a foot or so down, but find nothing of value. You kick the sand back into the hole and continue on your journey. ", false);
                                endEvent(BeachHub);
                            }
                        }
                    };
                    break;
                case this.CoconutTree:
                    this.scene("\tAs you meander along the beach, you notice a few coconut trees. " + "They were originally there just as ornaments, but they’ve \"Succumbed\" to the same wave of prosperity all plants seem to have been affected by. " + "You walk up to it, and notice several coconuts among its leaves. Looking around, you decide that the people around wouldn’t mind if you tried to get a couple. " + "You grab and shake the tree a little, making several of them fall out, and you have to step out of the way so one of them doesn’t hit you on the head. " + "As they hit the ground, one cracks open, spilling milk into the sand which seems to draw the attention of something under the sand. " + "You step back a bit as you feel something shift under there, and a few orange snakes surface from under the sand, " + "snatching the shattered remnants of the coconut, as well as grabbing some of the intact ones. " + "You quickly stoop down and grab one just before another snake pops up to grab it. " + "It looks at you disdainfully, but knows that picking a fight with you wouldn’t be a good idea, tunnelling back underground. As you dust off the coconut, the sand under you settles. ", false);
                    this.endEvent(this.BeachHub);
                    this.getItem(this.Coconut);
                    break;
                case this.BuriedTreasure:
                    if (this.specialEvent == 0) {
                        this.scene("\tYou notice a glint on the sea floor, which stops your swimming around. " + "You dive down for a better look, and you can see something peeking out of the sand, but it’s too deeply buried to be identifiable. Do you want to go and retrieve it? ", false);
                        this.choiceButton();
                        this.listen = function ():void {
                            var triesLeft:int = 0;
                            if (btnchc == 13) {
                                scene("\tYou figure if something is too good to be true, it probably is. You swim by, ignoring the object. ", true);
                                endEvent(OceanHub);
                            }
                            else if (dXY(1, 2) == 1) {
                                scene("\tYou swim down further, reaching forward and tugging the object out – it seems to be a small crate of some description. ", true);
                                endEvent(OceanHub);
                                switch (dXY(1, 4)) {
                                    case 1:
                                        getItem(TreasureChest);
                                        break;
                                    default:
                                        getItem(SandyBox);
                                }
                            }
                            else {
                                scene("\tYou swim down further, reaching forward and tugging the object out.... " + "But when you do, a horrible clunking noise rings out through the water before the sand around you shudders and a wooden cage hidden under it flips up on all sides and slams shut. " + "You’re trapped! \n\t", true);
                                eHEA = dXY(120, 180);
                                triesLeft = 3;
                                clearView();
                                btntxt(1, "Struggle");
                                btntxt(3, "Surrender");
                                listen = function ():void {
                                    if (btnchc == 3) {
                                        specialEvent = 1;
                                        doEvent(BuriedTreasure);
                                    }
                                    else {
                                        scene("You punch and kick at the wooden beams imprisoning you. ", false);
                                        eHEA = eHEA - STR;
                                        if (eHEA > 0) {
                                            if (triesLeft > 0) {
                                                if (triesLeft == 3) {
                                                    scene("They’re sturdy, and while they do splinter, they don’t give way. ", false);
                                                }
                                                if (triesLeft == 2) {
                                                    scene("You make some more head way, but you still can\'t quite get free. ", false);
                                                }
                                                if (triesLeft == 1) {
                                                    scene("You give one final kick attempting to break free of your entrapment. ", false);
                                                }
                                                triesLeft--;
                                            }
                                            if (triesLeft <= 0) {
                                                specialEvent = 1;
                                                doEvent(BuriedTreasure);
                                            }
                                        }
                                        else {
                                            scene("As you attack them they splinter and eventually break. You quickly swim away from the trap. " + "You realise you’re still holding the box, but you can already see it’s open and empty. Cursing, you toss it aside and swim away. ", false);
                                            endEvent(OceanHub);
                                        }
                                    }
                                };
                            }
                        };
                    }
                    if (this.specialEvent == 1) {
                        randomAquatics = [this.Shark, this.Orca, this.Dolphin];
                        this.createNPC(1, randomAquatics[this.dXY(0, randomAquatics.length - 1)], this.randomGender());
                        this.scene("\tA shadow from behind you makes you pause and turn around. Behind you is a rather primal-looking anthro " + this.NPC1.species.name + " in a crude wetsuit, holding a length of rope. " + this.capFirst(this.NPC1.gender.he) + " reaches through the bars, grabbing your arms and despite your struggling, ties them up behind your back. " + this.capFirst(this.NPC1.gender.he) + " opens the cage and reaches in to grab you, but you try to swim away, which is a bit difficult considering your bindings. " + this.capFirst(this.NPC1.gender.he) + " rolls " + this.NPC1.gender.his + " eyes before picking up the cage and smacking you over the head with it, knocking you unconscious. ", false);
                        this.nextButton();
                        this.listen = function ():void {
                            if (btnchc == 12) {
                                createNPC(2, Orca, randomGender());
                                scene("\tYou later awake, looking up at what looks like a woven seaweed canvas. " + "You crane your neck and look around, and can just about see that you’re in some sort of underwater village, with several mined-out boulders making up the buildings. " + "You try to move further, but realise you’re wrapped up in seaweed, making movement impossible. " + "You’re just about to struggle before you hear two people conversing in a weird, unknown language right next to you. " + "You strain your neck in the other direction to look at the two – There’s the " + NPC1.species.name + " that captured you and a heavily obese anthro Orca. " + "The Orca points at you and holds out " + NPC2.gender.his + " hand, dropping a large pile of coins into the " + NPC1.species.name + "’s hand. " + "The Orca grins at you, grabbing and stuffing you under one of " + NPC2.gender.his + " arms before you see " + NPC2.gender.him + " picking up another bound and worried-looking anthro from where you were lying before. " + "One look at where you were puts everything together – you can see you were on a stall that’s selling live, land-walking creatures, all of which are wrapped up! " + "\n\tThe fact that the Orca is looking at you two and licking " + NPC2.gender.his + " lips kind of hints at just why the person’s catching and selling land-dwellers like you. " + capFirst(NPC2.gender.he) + " begins pushing you headfirst into " + NPC2.gender.his + " cavernous mouth, " + "and try as you might, the woven seaweed bindings you’re wrapped in are far too strong to break out of. " + "The Orca purrs in delight as " + NPC2.gender.he + " licks at you a few times, savouring your flavour before " + NPC2.gender.he + " pushes you in completely and swallows, barely taking the time to breathe before cramming the other anthro in. " + "You hear a loud belch from outside as your confines become more cramped, before you hear more talking and more money changing hands, " + "before more loud gulping heralds a third and fourth meal joining you. " + "The Orca’s midway through ordering fifths and sixths before the cramped conditions and warmth get too much for you and you pass out. ", true);
                                defeatEvent(devoured);
                            }
                        };
                    }
                    break;
                case this.HydraEvent:
                    this.scene("\tAs you walk along the shore you hear a commotion near the water’s edge which has gathered a crowd. Do you want to investigate? ", false);
                    this.choiceButton();
                    this.listen = function ():void {
                        if (btnchc == 11) {
                            scene("\tAs you approach the water, you notice a dark shape from under the surface. " + "You are about to ask what’s going on, when all of a sudden a colossal shape bursts from the deeps. " + "As the mist clears you can make out a huge sand-coloured creature’s back " + "and more noticeably three huge necks with large reptilian heads at the ends gazing at the crowd before roaring and snapping down, " + "grabbing three anthros from the crowd and swallowing them. " + "The crowd screams and scatters, running away as the Hydra turns its three separate gazes upon you. ", true);
                            locationUpdate(BeachHub);
                            combatEvent(Hydra);
                        }
                        if (btnchc == 13) {
                            scene("\tYou realise in this world large crowds can often lead to issues, so you hurry on your way as quickly as possible. ", true);
                            endEvent(BeachHub);
                        }
                    };
            }
            switch (ID) {
                case this.WestTownStore:
                    this.scene("\tYou " + this.walk() + " into the west town general store, which is neat and organized to display their goods. " + "A smattering of various foods and clothing are on a few shelves, and an array of weapons lines an entire wall. " + "Behind a counter, a young looking panther girl smiles at you. \"Welcome to the store!\" she greets you chipperly, \"everything is for sale, so don\'t hesitate to ask for whatever you want.\" ", false);
                    this.tradeButton(1);
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                enterStore(ClerkWestTown);
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"I\'m Dianne. I run the shop while my mom\'s out adventuring. We\'ve got clothes for swimming, candy for eating, and big nasty weapons for fighting monsters!\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"Mom took a boat west over the ocean. She says there\'s an island out there where dinosaurs live. I bet she\'s having super exciting adventures all the time there!\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"Are you an adventurer? I\'m gonna be one when I grow up. I wanna find a big ol\' dragon and poke it in the face!\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"I like selling things, too. Running a store is fun, but it\'s a different kind of fun than exploring. I smile and tell people a price, and they give me gold! Hee hee!\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                endEvent(WestTownHub);
                        }
                    };
                    break;
                case this.Docks:
                    this.scene("\tExtending out from town is a long pier, not particularly bustling with activity, though there are a few boats docked here. " + "Signs point out the docks reserved by business-minded captains willing to offer services and transport. " + "You follow the sign to what seems to be a docked houseboat with a sail. From the deck, a thick-bodied and round-bellied brown bear can be seen lazily fishing. " + "He glances towards the dock and catches sight of you, waving politely before calling out, \"Step onboard, " + this.playerGender.sir + "! Let me know what I can do for you!\" ", false);
                    if (this.weight() > 600) {
                        this.scene("You step aboard onto the lightly swaying vessel. ", false);
                    }
                    if (this.weight() <= 600) {
                        this.scene("You cautiously step aboard the vessel, your heavy body causing it to sway deeply when you do so. " + "After a moment it settles back to a light sway. Fortunately, he doesn\'t seem bothered by this. ", false);
                    }
                    this.scene("\"This boat heads to the western island,\" the bear explains, not leaving his rod. \"I head out regularly, and can bring you along, if you\'d like. What do you say?\" ", false);
                    this.btntxt(1, "Travel");
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(9);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                endEvent(DinosaurCenter);
                                scene("\t\"All right, make yourself comfortable,\" the bear says, finally getting up to weigh anchor as he hums a little song to himself. " + "He seems content to do the job by hand, pulling it up with his burly arms rather than a winch before pushing the boat away from the dock with one thick leg. " + "He breaks into a song about someone named Barrett, you think, as he looses the sail and makes for the helm. ", true);
                                switch (dXY(1, 8)) {
                                    case 1:
                                        scene("You spend the trip fishing, but the captain takes what you catch as a fare. ", false);
                                        break;
                                    case 2:
                                        scene("The trip is spent singing progressively more outlandish songs about things that almost certainly never happened. ", false);
                                        break;
                                    case 3:
                                        scene("The captain spends the entire time regaling you with facts about fishing that you will never, ever use. ", false);
                                        break;
                                    case 4:
                                        scene("The captain talks about the dozens of ways you can prepare a fish. He never seems to run out. ", false);
                                        break;
                                    case 5:
                                        scene("The trip is a little worrying as the captain somehow takes a nap that lasts the duration. Fortunately, he wakes up in time to dock safely. ", false);
                                        break;
                                    case 6:
                                        scene("You manage to get a view of a pod of dolphins swimming by. One of them waves at you cheerfully. ", false);
                                        break;
                                    default:
                                        switch (dXY(1, 4)) {
                                            case 1:
                                                scene("The captain spends the trip weaving consecutively bigger lies about the loves he\'s had and lost. " + "You call him out around the time he tries to convince you he picked a flower from the moon to swoon some damsel or another. " + "The rest of the trip is spent with awkward silence and sheepish expressions from him. ", false);
                                                break;
                                            case 2:
                                                scene("The captain regales you with a certainly-false tale of his chance encounter with a bear-maid, a mystical creature with the upper body of a beautiful lady bear " + "and the lower body of a dolphin. He looks a bit dismayed when you just shake your head at his nonsense. ", false);
                                                break;
                                            case 3:
                                                scene("The captain spends the entire trip spinning tales of great sea monsters, claiming that a giant, three-headed sea snake is the reason why there aren\'t very many ships. " + "He seems put off when you bring up the point that there just isn\'t all that much else out there so far as anyone knows. ", false);
                                                break;
                                            case 4:
                                                scene("The captain spends a great deal of time telling you about a poem that he received from another sea farer in his travels. " + "Specifically, about the lengths he\'s gone to to try to understand it. " + "When you ask for a look, you can\'t make too much of it either, but it\'s got something to do with a poet eating lions. ", false);
                                        }
                                }
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"The name\'s Everett, and I love the sea. This boat\'s my home, and my home\'s this boat. Wouldn\'t have it any other way.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"When I\'m not ferrying folks, I\'m shipping goods. When I\'m not shipping goods, I\'m fishing. " + "When I\'m not fishing, I\'m ferrying folks. Pretty good life for a man of the sea!\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"The living space doesn\'t make up most of this boat, even though it looks that way. Most of it\'s empty space for hauling trade goods or fish. " + "I may not look like it, but I\'m a bit of a wheeler and dealer!\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"I\'ll tell you a true story: One time I was out fishing way off, and I swear to you, just below the surface, I saw a great blue dragon! " + "Before I could even do anything, it looked at me and my boat, and the water just carried us off like it wanted to be left alone. Lost my favorite pole that day, I did.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 9:
                                endEvent(WestTownHub);
                                scene("\tYou decide not to bother with boats at the moment and head back to West Town. ", true);
                        }
                    };
                    break;
                case this.MageGuild:
                    this.scene("\tYou step into the main foyer of the mage\'s guild, your eyes immediately assaulted by carpets and tapestries of various loud and gaudy colors. " + "In various parts of the comfortably-furnished room, small groups of robed furs have debates, discussions, and demonstrations of magical theory, " + "all while gorging themselves on food that floats to their beckoning hands. A dolphin fellow lazily swims in the air towards you, smiling happily. \"Greetings to you,\" he says. ", false);
                    this.btntxt(1, "Library");
                    this.btntxt(2, "Apothecary");
                    this.buttonIcons(2, this.iconStore);
                    this.btntxt(3, "Study hall");
                    this.btntxt(4, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                locationTravel(MageGuildLibrary);
                                break;
                            case 2:
                                locationTravel(MageGuildStore);
                                break;
                            case 3:
                                locationTravel(MageGuildHall);
                                break;
                            case 4:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"Welcome to the Mage\'s Guild. All you need to be permitted here is a desire to understand the mysterious. But a fancy robe helps you fit in.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"My name? Well, I was born in the ocean, so it\'s a series of clicks and cries, but I tend to go by \'Larry\' on land.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"You should check out the library if you haven\'t already. Even if you don\'t need to study, it\'s got a fine cookbook section, too. That\'s been popular lately.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"The Apothecary sells a variety of magical goods, and the Study Hall is where the masters teach spells. " + "The guild\'s not a complicated place; the complexity is in the mystery of magic! And determining the perfect color of hat.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                endEvent(WestTownHub);
                        }
                    };
                    break;
                case this.MageGuildStore:
                    this.scene("\tYou walk over to the Apothecary\'s, which is a relatively small room that doesn\'t seem to have much in the way of actual stock, appearing to have only one of each item that is sold here. " + "A rotund ferret lounges about behind a counter, garbed in a hideous yellow robe that no longer contains his long, bulging belly. " + "He raises a hand at you, eating a ham sandwich with far too much mustard, if the yellow splotches on his face and chest are any indication. " + "With an exagerrated swallow, he clears his mouth and says, \"What can I get for ya?\" ", false);
                    this.tradeButton(1);
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                enterStore(ClerkMagesGuild);
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"Name\'s Riggs, I sell the stuff to the folks, blah blah blah, magic. I freaking love magic. I used magic to make this sandwich. This is the best damn sandwich.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"Hm? Oh. No, there\'s not much stuff out here. Why should there be? You buy something, I magic it up from the store rooms. " + "Walking around to get things is for chumps. I got magic for that.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"You want robes? We got robes. We got robes in every color. All of them. Some of them ARE every color. " + "We\'re mages. We do that with magic. Even are duds are friggin\' magic. Being a mage is awesome.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"So apparently there are dudes that like, do things with like, the power of their bodies. I don\'t even know what they are ON about. " + "Body magic done by crafting your body to perfection? Screw that noise, I got magic.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                locationTravel(MageGuild);
                        }
                    };
                    break;
                case this.MageGuildLibrary:
                    this.scene("\tYou enter the library, and the first thing you notice is that sound seems to be muffled here. " + "The second thing you notice is that the library extends to a size significantly larger than what you remember the building being from the outside. " + "Tall, wheeled ladders sit beside pillars that double as book shelves, and there is even a large selection of particularly magical books that float in a magical clump above a reading area. " + "An index sits a few steps in and seems to respond to inquiries you make even as you are thinking of them. " + "Sections are labelled by floating glyphs that separate the library into dozens of sections based on topic, including more esoteric things, such as \'Learning Methods\' and \'Meta-Studies.\' " + "You get the impression that you could definitely get your learn on here. ", false);
                    this.btntxt(1, "Study");
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                doTime(30);
                                if (FAT > 3) {
                                    doFat(-3);
                                    chgStats(0, 0, 0, 0.3, 0);
                                    scene("\tYou pore over some books and somehow feel yourself becoming much smarter... yet somehow physically drained....", true);
                                }
                                else {
                                    scene("\tYou skim through several books, but the information seems to just slide out of your brain. " + "Your only thought is that you feel so hungry and sooooo skinny. ", true);
                                }
                                break;
                            case 13:
                                scene("\tYou exit the library. ", true);
                                locationTravel(MageGuild);
                        }
                    };
                    break;
                case this.MageGuildHall:
                    this.scene("\tYou " + this.walk() + " into a hallway that leads to the classrooms of the guild. There are exactly three doors, each with a lit sign above them. " + "Behind the door labelled Destructatorium, you can hear explosions and crackling, and the occasional yell of \"Ow!\". Generally following that, you see a singed fur running over to the Restoratorium door. " + "Those that go into the Altertarium tend to come out looking more confused than when they started. ", false);
                    this.btntxt(1, "Destruction");
                    this.btntxt(4, "Restoration");
                    this.btntxt(7, "Alteration");
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                locationTravel(MageGuildDestruction);
                                break;
                            case 4:
                                locationTravel(MageGuildRestoration);
                                break;
                            case 7:
                                locationTravel(MageGuildAlteration);
                                break;
                            case 13:
                                locationTravel(MageGuild);
                        }
                    };
                    break;
                case this.MageGuildAlteration:
                    this.scene("\tYou walk into the Altertarium. There, you can see a white-furred fox giving a lecture to several confused-looking apprentice mages. " + "He has drawn diagrams and figures magically in the air and is gesticulating wildly as he tries to explain the hows and whats of Alteration. " + "After a few more moments of this, the lesson comes to an abrupt end. As the students shuffle out, he walks up to you. \"Alteration magic. Care to try? Maybe learn some?\" ", false);
                    this.btntxt(1, "Learn");
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                doTeaching(TeacherAlteration);
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"Lucille? No. Lucern? Still no. Lucas? That sounds right. Lucas. That\'s my name. For now. Alteration is always changing.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"Hard to pin down. No, impossible, really. Alteration is. The best mind for it is the mind that can change. Maybe.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"How long? Have I been using Alteration magic? What a silly question. Ten days. Or was it years? Yes, it was years.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"Change yourself by changing your mind. Change your mind by changing your thoughts. Change your thoughts by changing yourself. These are the rules of Alteration. For now.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                locationTravel(MageGuildHall);
                        }
                    };
                    break;
                case this.MageGuildDestruction:
                    this.scene("\tWalking into the Destructatorium, the sounds you heard from outside suddenly have much more distinct sources. " + "A professional looking blue dragon in an armored black robe is walking up and down a line of students as they hurl fireballs and lightning bolts at insulated target dummies. " + "At some, he nods, at others, he barks out brief instructions, causing them to visibly flinch. After a moment, he spots you, and walks over to you. \"Spells or words?\" he asks curtly. ", false);
                    this.btntxt(1, "Learn");
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                doTeaching(TeacherDestruction);
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"Name\'s Dren. I\'m here to drill combat readiness into the minds of these layabouts. " + "Casting in battle is harder than casting when you have all the time in the world to focus.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"Almost all fighting magic takes the form of an element. " + "It\'s simpler and more reliable to try to conjure something that has a natural form than it is to make solid arcana.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"Some foes resist elements. Some foes resist physical forces. Some foes even resist raw arcana. " + "Don\'t get stuck in a mindset of trying something that\'s failed again unless you like getting eaten by monsters. " + "It won\'t work as well as changing your tactics, even if you do it \'harder.\'\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"Fire can burn, ice can slow movement, lightning can give \'em the shakes. My preference is lightning. " + "Things don\'t fight very well when they\'re twitching in a fetal position on the ground.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                locationTravel(MageGuildHall);
                        }
                    };
                    break;
                case this.MageGuildRestoration:
                    this.randomNPC(1);
                    this.scene("\tYou head into the Restoratorium, and aside from treating burned mage trainees, you can see rather a lot of figures of anatomy. " + "From the looks of it, learning what organs do what and where they are in the body has high importance in this class. " + "A mouse lady in a white robe rubs ointment on a " + this.NPC1.species.name + "\'s hand, then walks up to you. \"If you need assistance, I am here to help however I can.\" she says. ", false);
                    this.btntxt(1, "Learn");
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                doTeaching(TeacherRestoration);
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"I\'m Rosalina, and I\'m in charge of teaching students Restoration spells. Anything that makes the body whole and well is my passion.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"In my spare time, I tend to a reagent garden outside. Did you think they were just flowers? " + "Well, in addition to being lovely, they are the primary ingredients for the potions for sale at the Apothecary and other places.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"With how easy it is to grow ingredients, we have a special arrangement with the hospital in the city. " + "Half of the potions we send them are free of charge, since they have such need to put them to good use lately.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"My most sincere hope is that, by teaching these spells to any that can learn them, I can save even a single person from suffering. " + "Please, if you choose to learn my spells, share them freely with those in need.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                locationTravel(MageGuildHall);
                        }
                    };
                    break;
                case this.WestTownInn:
                    switch (this.questCompleted(this.slimeQuest5)) {
                        case true:
                            this.scene("\tYou " + this.walk() + " into an inn near the seashore, newly rebuilt and redecorated, it would seem. " + "Built from reclaimed wood, there\'s a pleasant smell of sawdust and beeswax around the place, and all the freshly-stripped and scrubbed planking gleams, " + "livened up by touches of cheerful paint here and there. Large porthole-style windows let in plenty of light to make the modest place seem airy. " + "A set of fine straw beds seem to be available for any who want them, and for free. " + "A surprisingly tall and muscular white duck clad in a bright flower-patterned shirt and apron seems to be in charge of the place, busily wiping down tables and keeping things spick-and-span. ", true);
                            break;
                        case false:
                            if (!this.hasQuest(this.slimeQuest1)) {
                                this.scene("\tYou " + this.walk() + " into a slightly dank inn, apparently made from reclaimed ship\'s wood. There are rows of hammocks strung to wooden pillars that keep the place intact. " + "The jagged windows give you a good view of the ocean, and the sound of the waves is soothing enough that you think you could catch a good night\'s sleep here " + "in spite of the less-than-sterling appearance of the place. A massively obese pig fellow is doing his best to ignore everything that is not his meal while still \'running\' the place. ", true);
                            }
                            if (this.hasQuest(this.slimeQuest1) && !this.hasQuest(this.slimeQuest2)) {
                                this.scene("\tYou " + this.walk() + " into a slightly dank inn, apparently made from reclaimed ship\'s wood. There are rows of hammocks strung to wooden pillars that keep the place intact. " + "The jagged windows give you a good view of the ocean, " + "and the sound of the waves is soothing enough that you think you could catch a good night\'s sleep here in spite of the less-than-sterling appearance of the place. " + "A massively obese pig fellow is doing his best to ignore everything that is not his meal while still \'running\' the place. ", true);
                            }
                            if (this.hasQuest(this.slimeQuest2) && !this.hasQuest(this.slimeQuest3)) {
                                this.scene("\tYou " + this.walk() + " into a slightly dank inn, apparently made from reclaimed ship\'s wood. There are rows of hammocks strung to wooden pillars that keep the place intact. " + "The jagged windows give you a good view of the ocean, " + "and the sound of the waves is soothing enough that you think you could catch a good night\'s sleep here in spite of the less-than-sterling appearance of the place. " + "A massively obese pig fellow is doing his best to ignore everything that is not his meal while still \'running\' the place. ", true);
                            }
                            if (this.hasQuest(this.slimeQuest3) && !this.hasQuest(this.slimeQuest4)) {
                                switch (this.questStage(this.slimeQuest3)) {
                                    case 0:
                                        this.scene("\tYou " + this.walk() + " into a slightly dank inn, apparently made from reclaimed ship\'s wood. There are rows of hammocks strung to wooden pillars that keep the place intact. " + "The jagged windows give you a good view of the ocean, " + "and the sound of the waves is soothing enough that you think you could catch a good night\'s sleep here in spite of the less-than-sterling appearance of the place. " + "\n\tBronk the innkeeper is still sitting at the dining table, the fat hog as surly as ever. " + "He\'s put on some weight since you brought him that last Lemon Slime, a crescent of his round belly poking out from under his taut beige tunic. ", true);
                                        break;
                                    case 1:
                                        this.scene("\tYou " + this.walk() + " into a slightly dank inn, apparently made from reclaimed ship\'s wood. There are rows of hammocks strung to wooden pillars that keep the place intact. " + "The jagged windows give you a good view of the ocean, " + "and the sound of the waves is soothing enough that you think you could catch a good night\'s sleep here in spite of the less-than-sterling appearance of the place. " + "\n\tBronk the innkeeper is still sitting at the dining table, the outsized hog as surly as ever. " + "He\'s gotten even porkier recently- his grubby old tunic and pants are splitting at the seams, but are somehow grimly sticking with him. " + "His swollen porcine paunch fills his lap and presses up against the table, while the bench he sits on is bending beneath his bulging backside. ", true);
                                        break;
                                    case 2:
                                        this.scene("\tYou " + this.walk() + " into a slightly dank inn, apparently made from reclaimed ship\'s wood. There are rows of hammocks strung to wooden pillars that keep the place intact. " + "The jagged windows give you a good view of the ocean, " + "and the sound of the waves is soothing enough that you think you could catch a good night\'s sleep here in spite of the less-than-sterling appearance of the place. " + "\n\tBronk the innkeeper is still sitting at the dining table, the huge hog as surly as ever. " + "His recent weight-gain has become un-ignorable, a good two-thirds of his torso swelling out from beneath his burst tunic, a love-handle slung like an enormous tyre around his middle. " + "The table now digs deeply into the front of his huge stomach, the top part bulging over onto its surface. " + "The bench creaks in protest beneath his double-plus-sized posterior, his pants only clinging on thanks to a huge split across their seat. " + "His face has grown to moon-roundness, snout sticking out from between fat cheeks and a sizeable double-chin. " + "And that\'s without his mouth full, which seems to be a rarity these days. ", true);
                                }
                            }
                            if (this.hasQuest(this.slimeQuest4) && !this.hasQuest(this.slimeQuest5)) {
                                this.scene("\tYou " + this.walk() + " into a slightly dank inn, apparently made from reclaimed ship\'s wood. " + "There are rows of hammocks strung to wooden pillars that keep the place intact. " + "The jagged windows give you a good view of the ocean, " + "and the sound of the waves is soothing enough that you think you could catch a good night\'s sleep here in spite of the less-than-sterling appearance of the place. " + "\n\tBronk the innkeeper has become a local landmark, a pig so super-sized that visitors come to stay just to gawp at him. " + "Wider than he is tall, the near-spherical porker sits at his usual table, his stomach mostly resting on top, the front of it wobbling off the planks at the far side. " + "His bacon-ball behind is parked on a bench built for three and leaves no room for anyone else. " + "The bench bends so far that it actually touches the ground- it HAS to be magically reinforced, no mere wood could survive that load. " + "The burst and split remnants of a tunic and rough pants cling to his overblown curves, just enough to leave him decent, but leaving very little of him to the imagination. " + "His chubby chins rest atop his swollen chest, his head being pushed slightly up and back to accommodate its volume. " + "His fat arms rest on his sides when he\'s not eating- and these days that\'s practically ALL he does, shovelling down meal after meal. ", true);
                            }
                            if (this.hasQuest(this.slimeQuest5)) {
                                switch (this.questStage(this.slimeQuest5)) {
                                    case 0:
                                        this.scene("\tYou " + this.walk() + " into a slightly dank inn, apparently made from reclaimed ship\'s wood. " + "There are rows of hammocks strung to wooden pillars that keep the place intact. " + "The jagged windows give you a good view of the ocean, " + "and the sound of the waves is soothing enough that you think you could catch a good night\'s sleep here in spite of the less-than-sterling appearance of the place. " + "\n\tBronk the sumo-sized porcine innkeeper is still sitting at the dining table, bigger than ever, and twice as surly! " + "This hugely overfed specimen of pig-kind is now making the table he sits at look kind of small, almost swamped beneath his downright vast, doughy belly. " + "Since you last saw him even more pig-blubber has bulged free of the confines of his burst and tattered clothing, which are starting to look under a desperate strain. " + "Magically reinforced or not, the 3-person bench he\'s sitting on has bowed down further yet beneath the weight of his gigantic bottom, and he\'s grown nearly as wide as it. ", true);
                                        break;
                                    case 1:
                                        this.scene("\tYou " + this.walk() + " into a slightly dank inn, apparently made from reclaimed ship\'s wood. There are rows of hammocks strung to wooden pillars that keep the place intact. " + "The jagged windows give you a good view of the ocean, " + "and the sound of the waves is soothing enough that you think you could catch a good night\'s sleep here in spite of the less-than-sterling appearance of the place. " + "\n\tBronk the enormous porcine innkeeper is still sitting at the dining table, bigger than ever, and twice as surly! " + "This massively overfed specimen of pig-kind is now practically filling his corner of the inn, " + "that table now completely buried beneath the pachyderm-sized ball of flab that he calls his middle. " + "Since you last saw him even more pig-blubber has bulged free of the confines of his burst and tattered clothing, which are now hardly noticeable on his humungous frame. " + "Magically reinforced or not, the 3-person bench he\'s sitting on has bowed down further yet beneath the weight of his stupendously fat bottom, and he\'s now visibly wider than it. ", true);
                                        break;
                                    case 2:
                                        this.scene("\tYou " + this.walk() + " into a slightly dank inn, apparently made from reclaimed ship\'s wood. There are rows of hammocks strung to wooden pillars that keep the place intact. " + "The jagged windows give you a good view of the ocean, " + "and the sound of the waves is soothing enough that you think you could catch a good night\'s sleep here in spite of the less-than-sterling appearance of the place. " + "\n\tBronk the gargantuan porcine innkeeper is still sitting at the dining table, bigger than ever, and twice as surly! " + "This stupendously overfed specimen of pig-kind is starting to make the inn feel a bit small, " + "the table now groaning beneath the hot-air balloon-sized hill of fatty pork that he calls his middle. " + "Since you last saw him even more pig-blubber has bulged free of the confines of his burst and tattered clothing, which are now threatening to burst if he so much as breathes deeply. " + "Magically reinforced or not, the 3-person bench he\'s sitting on has bowed down further yet beneath the weight of his whale-like bottom, which is now starting to overflow it. ", true);
                                        break;
                                    case 3:
                                        this.scene("\tYou " + this.walk() + " into a slightly dank inn, apparently made from reclaimed ship\'s wood. There are rows of hammocks strung to wooden pillars that keep the place intact. " + "The jagged windows give you a good view of the ocean, " + "and the sound of the waves is soothing enough that you think you could catch a good night\'s sleep here in spite of the less-than-sterling appearance of the place. " + "\n\tBronk the porcine innkeeper has now achieved whale-like proportions, and makes the entire building feel downright cramped! " + "Travellers just stop and gape at this ludicrously overfed, sweaty specimen of pig-kind, " + "the dining table buried somewhere beneath his mountainous blimp of a belly bending and creeeaking under the load, while they eat their dinners off their laps. " + "The straining tatters of clothes hanging on around his balloon-like bulk are now on the verge of destruction, creaking dangerously if he so much as hiccups. " + "His neck has completely vanished, sandwiched somewhere between the twin hills his chest has become and the thick facial tyre of his double chin. " + "Magically reinforced or not, the 3-person bench he\'s sitting on is now almost hidden it from view beneath his indescribably fat backside, " + "the only sign of its existence the occasional creak when he reaches laboriously back to scratch an itch. ", true);
                                }
                            }
                    }
                    this.btntxt(1, "Save");
                    this.btntxt(2, "Sleep");
                    this.buttonIcons(2, this.iconRest);
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    if (!this.questCompleted(this.slimeQuest5)) {
                        this.btntxt(4, "Quest");
                    }
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                trySave();
                                break;
                            case 2:
                                doSleep();
                                break;
                            case 3:
                                switch (questCompleted(slimeQuest5)) {
                                    case true:
                                        switch (attemptsLeft) {
                                            case 0:
                                                scene("\n\t\"Well hi there! Welcome to the Spruce Goose! Anything you want, just ask!\" ", false);
                                                attemptsLeft++;
                                                break;
                                            case 1:
                                                scene("\n\t\"I\'m the new innkeeper! The previous one..? Oh, he retired. Sorta. We don\'t like to talk about it much. Oh, I\'m Larry, by the way! Pleased to meet you!\" ", false);
                                                attemptsLeft++;
                                                break;
                                            case 2:
                                                scene("\n\t\"I just flew in from overseas. I think I\'m going to like it here! " + "But I have to say, a lot of the locals seem very... relaxed about their figures. Nosiree, you won\'t catch that happening to me! I\'m gonna be staying in shape!\" ", false);
                                                attemptsLeft++;
                                                break;
                                            case 3:
                                                scene("\n\t\"Am I always this cheerful? Sure am! I\'ve got a lot to be cheerful about!\" ", false);
                                                attemptsLeft++;
                                                break;
                                            case 4:
                                                scene("\n\t\"If you want a bed for the night, please just help yourself! We can even do you a healthy snack if you like!\" ", false);
                                                attemptsLeft++;
                                        }
                                        break;
                                    case false:
                                        if (!hasQuest(slimeQuest3)) {
                                            switch (attemptsLeft) {
                                                case 0:
                                                    scene("\n\t\"Eh, what? Oh. Yeah, I\'m Bronk. Ever met anyone named Bronk? Well now you have.\" ", false);
                                                    attemptsLeft++;
                                                    break;
                                                case 1:
                                                    scene("\n\t\"Have a nap, it\'s free. The Mages across the way pay me to keep this place open to adventurers and whatnot. " + "Even put an enchantment on the place to keep bugs away. Good deal, you ask me. All I gotta do is make sure it doesn\'t collapse. It won\'t, by the way.\" ", false);
                                                    attemptsLeft++;
                                                    break;
                                                case 2:
                                                    scene("\n\t\"My wife\'s out adventuring, and she told me earlier that when she went to the forest last, some of the plants grabbed her and started stuffing her with syrup. " + "I thought she\'d finally lost it, but she gave me a piece she cut off, and sure enough, syrup in a vine. Crazy, huh?\" ", false);
                                                    attemptsLeft++;
                                                    break;
                                                case 3:
                                                    scene("\n\t\"If you see my wife out there, tell her I said to see if she can bring back some gelatinous monster goop. " + "She says it\'s delicious and I want to try some, but hell if I\'m going out to get lost in the forest for it.\" ", false);
                                                    attemptsLeft++;
                                            }
                                        }
                                        if (hasQuest(slimeQuest3) && !hasQuest(slimeQuest4)) {
                                            switch (questStage(slimeQuest3)) {
                                                case 0:
                                                    switch (attemptsLeft) {
                                                        case 0:
                                                            scene("\n\t\"Whaddya want? Can\'t you see I\'m EATING, here?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 1:
                                                            scene("\n\t\"Have a nap, it\'s free. The Mages across the way pay me to keep this place open to adventurers and whatnot. " + "Even put an enchantment on the place to keep bugs away. Good deal, you ask me. All I gotta do is make sure it doesn\'t collapse. It won\'t, by the way.\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 2:
                                                            scene("\n\t\"Whaddya talking about, \'Put on weight\'? I ain\'t put on no weight, just you ask the wife! " + "She\'ll say I\'m still the fine figure of the boar she married more\'n 10 years ago!\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 3:
                                                            scene("\n\t\"My wife\'s out adventuring, and she told me earlier that when she went to the forest last, some of the plants grabbed her and started stuffing her with syrup. " + "I thought she\'d finally lost it, but she gave me a piece she cut off, and sure enough, syrup in a vine. Crazy, huh?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 4:
                                                            scene("\n\t\"Yeah, I\'ve seen those yellow goop things out in the forest myself. " + "In fact, just the other day had to I show one of them a thing or two- wound up eating the whole damn thing! Ever tried one? " + "Well, let me tell you, they\'re damned tasty.\" ", false);
                                                            attemptsLeft++;
                                                    }
                                                    break;
                                                case 1:
                                                    switch (attemptsLeft) {
                                                        case 0:
                                                            scene("\n\t\"Whaddya want? Can\'t you see I\'m EATING, here?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 1:
                                                            scene("\n\t\"Have a nap, it\'s free. The Mages across the way pay me to keep this place open to adventurers and whatnot. " + "Even put an enchantment on the place to keep bugs away. Good deal, you ask me. All I gotta do is make sure it doesn\'t collapse. It won\'t, by the way.\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 2:
                                                            scene("\n\t\"Say what you like about those mages, they can\'t do laundry worth a dang- " + "they managed to SHRINK alla my clothes, and that\'s when I ain\'t even never got them washed in the first place!\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 3:
                                                            scene("\n\t\"My wife\'s out adventuring, and she told me earlier that when she went to the forest last, some of the plants grabbed her and started stuffing her with syrup. " + "I thought she\'d finally lost it, but she gave me a piece she cut off, and sure enough, syrup in a vine. Crazy, huh?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 4:
                                                            scene("\n\t\"Yep, I went out and caught me one of those Yellow Goop Monsters out in the forest. Let me tell you, it was THIS big- I nearly couldn\'t finish it all!\" ", false);
                                                            attemptsLeft++;
                                                    }
                                                    break;
                                                case 2:
                                                    switch (attemptsLeft) {
                                                        case 0:
                                                            scene("\n\t\"Whaddya want? Can\'t you see I\'m EATING, here?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 1:
                                                            scene("\n\t\"Have a nap, it\'s free. The Mages across the way pay me to keep this place open to adventurers and whatnot. " + "Even put an enchantment on the place to keep bugs away. Good deal, you ask me. All I gotta do is make sure it doesn\'t collapse. It won\'t, by the way.\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 2:
                                                            scene("\n\t\"One of those Mages came over here the other day talking about \'struck-ture-ral ree-in-forse-ment of the floor. " + "Ain\'t nothing wrong with this floor- it ALWAYS sounds like this when I walk on it, I told him.\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 3:
                                                            scene("\n\t\"My wife\'s started talking about me going on a diet. *Snort* What\'d I\'D need with a diet, I said? And since when did it get so draughty in here?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 4:
                                                            scene("\n\t\"Yep, that\'s me- Bronk Boyer, Yellow Goop Monster Destroyer. " + "Took two down one day last week- didn\'t even work up a sweat! Well, no more\'n USUAL, anyway...\" ", false);
                                                            attemptsLeft++;
                                                    }
                                            }
                                        }
                                        if (hasQuest(slimeQuest4) && !hasQuest(slimeQuest5)) {
                                            switch (attemptsLeft) {
                                                case 0:
                                                    scene("\n\t\"Whaddya want? Can\'t you see I\'m EATING, here?\" ", false);
                                                    attemptsLeft++;
                                                    break;
                                                case 1:
                                                    scene("\n\t\"Yep, I\'m Bronk, guess you\'ve heard of me. Took down three Yellow Goop Monsters at once. Don\'t know anyone ELSE who could stomach that, eh?\" ", false);
                                                    attemptsLeft++;
                                                    break;
                                                case 2:
                                                    scene("\n\t\"Those dumb Mages opposite are trying to make me pay for an extra spell to keep the floor up, can you believe it! Shoddy workmanship, that\'s what\'s to blame! " + "If it can\'t take the weight of just one pig standin\' on it they should go get their money back. \'Risk of collapse\', my butt! Uh... not that it\'s gonna, of course.\" ", false);
                                                    attemptsLeft++;
                                                    break;
                                                case 3:
                                                    scene("\n\t\"My wife was back for a little bit, sure, did pretty good in the kitchen, but now she\'s gone out adventuring again. " + "I told her not to, but would she listen? It\'s terrible- she\'d put on ten pounds out there. " + "She\'s really letting herself go- say, that a slice of cake you\'ve got there?\" ", false);
                                                    attemptsLeft++;
                                                    break;
                                                case 4:
                                                    scene("\n\t\"You heard they\'ve only gone and found some BLUE goop monsters out in the hills? " + "I hear tell it\'s REAL tasty. What I wouldn\'t give to get my hands on one of THEM. But SOMEONE\'s- BURRP- gotta keep this place from fallin\' down...\" ", false);
                                                    attemptsLeft++;
                                            }
                                        }
                                        if (hasQuest(slimeQuest5)) {
                                            switch (questStage(slimeQuest3)) {
                                                case 0:
                                                    switch (attemptsLeft) {
                                                        case 0:
                                                            scene("\n\t\"Whaddya want? Can\'t you see I\'m EATING, here?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 1:
                                                            scene("\n\t\"Weight problem? Who says I\'ve got a WEIGHT PROBLEM? You show me who said that n\' I\'ll SIT on \'em! Haw, THEN we\'ll see who\'s problem it is!\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 2:
                                                            scene("\n\t\"My wife\'s started talking about me going on a diet. *Snort* What\'d I\'D need with a diet, I said? And since when did it get so draughty in here?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 3:
                                                            scene("\n\t\"I tell you, those stupid mages MUST have messed up the spell they tried to put on this floor- all the tables have gone and started to shrink! " + "You can hardly fit a decent meal across TWO of them, now.\" ", false);
                                                            attemptsLeft++;
                                                    }
                                                    break;
                                                case 1:
                                                    switch (attemptsLeft) {
                                                        case 0:
                                                            scene("\n\t\"Whaddya want? Can\'t you see I\'m EATING, here?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 1:
                                                            scene("\n\t\"Weight problem? Who says I\'ve got a WEIGHT PROBLEM? You show me who said that n\' I\'ll SIT on \'em! Haw, THEN we\'ll see who\'s problem it is!\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 2:
                                                            scene("\n\t\"Ok, so maybe I HAVE got a bit \'huskier\' lately. So what? Have you SEEN some of the fat-asses lumbering around here lately? " + "I told the wife, there\'s plenty of people out there who APPRECIATE someone who\'s more\'n just skin and bones.\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 3:
                                                            scene("\n\t\"Those mages still haven\'t fixed that spell they messed up when they \'fixed\' the floor- now the rest of the furniture\'s started to shrink! " + "I got my butt stuck in a chair the other day- burst the thing clean apart trying to squeeze out of it!\" ", false);
                                                            attemptsLeft++;
                                                    }
                                                    break;
                                                case 2:
                                                    switch (attemptsLeft) {
                                                        case 0:
                                                            scene("\n\t\"Whaddya want? Can\'t you see I\'m EATING, here?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 1:
                                                            scene("\n\t\"Weight problem? Who says I\'ve got a WEIGHT PROBLEM? You show me who said that n\' I\'ll SIT on \'em! Haw, THEN we\'ll see who\'s problem it is!\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 2:
                                                            scene("\n\t\"Ok, so maybe I AM getting rounder. So what? People expect us innkeepers to be \'jolly\'. It\'s practically a law. Pass me that jug of cream, willya?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 3:
                                                            scene("\n\t\"Those clowns at the Mages\' Guild STILL haven\'t fixed that spell they messed up when they \'fixed\' the floor- now the doorways have started shrinking. " + "Tried to get to the kitchen last night and got wedged tight. You know how much butter my wife had to rub on me before I could squeeze through? " + "The stuff costs money!\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 4:
                                                            scene("\n\t\"You got any chow on you? All this talkin\'s working up a real APPETITE...\" ", false);
                                                            attemptsLeft++;
                                                    }
                                                    break;
                                                case 3:
                                                    switch (attemptsLeft) {
                                                        case 0:
                                                            scene("\n\t\"Whaddya want? Can\'t you see I\'m EATING, here?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 1:
                                                            scene("\n\t\"Weight problem? Who says I\'ve got a WEIGHT PROBLEM? You show me who said that n\' I\'ll SIT on \'em! Haw, THEN we\'ll see who\'s problem it is!\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 2:
                                                            scene("\n\t\"What is it with people? You put on a LITTLE bit of extra weight and they start acting like you\'re some fat PIG or something. " + "My wife called me a downright greedy hog the other day. Can you believe it?\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 3:
                                                            scene("\n\t\"Since when did you all start to get so SKINNY? " + "I tell you, those jokers at the Mages\' Guild have really gotta get this crazy spell of theirs under control, or you\'ll all wind up vanishing!\" ", false);
                                                            attemptsLeft++;
                                                            break;
                                                        case 4:
                                                            scene("\n\t\"You got any chow on you? All this talkin\'s worked up one serious appetite...\" ", false);
                                                            attemptsLeft++;
                                                    }
                                            }
                                        }
                                }
                                break;
                            case 4:
                                if (hasQuest(slimeQuest5) && !questCompleted(slimeQuest5)) {
                                    switch (itemOwned(blueSlimeItem)) {
                                        case true:
                                            switch (questStage(slimeQuest5)) {
                                                case 0:
                                                    scene("\tWith a mighty heave you haul the entire Blueberry slime onto the rapidly-shrinking free table-space, setting it down with a loud SPLAT! " + "Bronk grunts happily, and with a deft jab elicits a squirt of blue slime that he catches in his mouth, rather messily. The remains of his tunic let out a warning creeeeak. " + "\"Mphh, at last! I\'d almost forgotten how TASTY these things were... Whattya doin\' just standing around, Bigmouth? Go and get the rest! And HUSTLE, this time!\" " + "\n\tYou turn to leave, and behind you you hear the king-sized oinker smacking his lips, and that huge gut rumble loudly. " + "\"I can smell the profit already... if only it didn\'t make me so... HUNGRY...\" " + "As you reach the door you hear a gloopy, gelatinous SQUEAK followed by some quite revolting slurping, sucking and lip-smacking sounds. " + "A few paces down the road you\'re followed by a deep, rolling BURRRRRP! from the depths of the inn. ", true);
                                                    removeItem(blueSlimeItem);
                                                    questAdvance(slimeQuest5);
                                                    break;
                                                case 1:
                                                    scene("\tWith a mighty heave you haul the Blueberry slime into the air to show the pig. It dangles from your hand like some weird novelty dessert. " + "Bronk oinks eagerly and takes it from you, and with an expert squeeze elicits a long jet of slime that he slurps down, his obese body bloating even bigger. " + "He finally wipes his lips and sighs happily. " + "\"By apple sauce that stuff\'s good. Folks won\'t be able to get enough of it! Whattya doin\' just standing around, Bigmouth? Go and get the rest! And HUSTLE, this time!\" " + "\n\tYou turn to leave, while behind you the emperor-sized oinker\'s gargantuan belly rumbles demandingly. \"This stuff\'s just... irresistible. *Snort!* " + "I just can\'t... get enough of it...\" As you reach the door you hear a gloopy, gelatinous SQUEAK followed by some quite revolting slurping, sucking and lip-smacking sounds. " + "A few paces down the road you\'re followed by a deep, rolling BURRRRRP! from the depths of the inn. ", true);
                                                    removeItem(blueSlimeItem);
                                                    questAdvance(slimeQuest5);
                                                    break;
                                                case 2:
                                                    scene("\tWith a mighty heave you haul the Blueberry slime into the air to show the pig. It dangles from your hand like some weird novelty dessert. " + "Bronk grunts greedily with delight and makes a grab for it with his fat arms, huffing with the effort. " + "He wrings the struggling gelatinous cube like a giant sponge, gulping down the slime until it runs dry, " + "then he sits back, panting, one fat, goopy hand absently patting his still-swelling gut. " + "\"Oogh... that\'s the real stuff alright, but I still hadta make SURE. BURRRP! " + "I\'m gonna have customers queuing round the town for this! Whattya doin\' just standing around, Bigmouth? Go and get the rest! And HUSTLE, this time!\" " + "\n\tAs you turn to leave, you overhear the sultan-sized oinker\'s Taj-Mahal-scale stomach rumble tectonically. " + "\"Oof... THIS time I really gotta save you for the farm... but then again you\'re so, so TASTY... No, I-I really GOTTA...\" " + "As you reach the door you hear a gloopy, gelatinous SQUEAK followed by some quite revolting slurping, sucking and lip-smacking sounds. " + "A few paces down the road you\'re followed by a deep, rolling BURRRRRP! from the depths of the inn. ", true);
                                                    removeItem(blueSlimeItem);
                                                    questAdvance(slimeQuest5);
                                                    break;
                                                case 3:
                                                    scene("\tWith a mighty heave you haul the Blueberry slime into the air, raising an appreciative \'Ooo\' from nearby customers. " + "It dangles from your hand like some weird novelty dessert. " + "Bronk puffs and grunts, eyeing it without his usual enthusiasm, so you lean forward and ceremoniously plonk it on top of his barn-sized belly, where it wobbles sluggishly. " + "The gigantic pig oinks and groans, his fat hands pressing against his sides. " + "\"Y-yeah, thanks, that one looks great too, \'m just... BURRRP! ...kinda FULL right now...\" He looks ready to burst. \"H-here\'s your gold, s-sucker. " + "Ha, just one of these is enough to m-make me a FORTUNE. Enjoy being POOR, Bigmouth!\" " + "With a knowing smile you turn and leave, although you pause at the door, just waiting for what comes next. ", true);
                                                    removeItem(blueSlimeItem);
                                                    questReward(slimeQuest5);
                                                    switch (optionsPopping) {
                                                        case true:
                                                            scene("\t\"Groo... Cryin\' Chipolatas... I\'m... s-so STUFFED, but... but... I... just... can\'t... STOP...\" " + "\n\tThere\'s a quite abominable squelching noise, followed by a gloopy slurp, and you turn back in time to see the last of the slime getting swallowed. " + "With one last gulp it\'s gone and for a moment nothing happens, the pig just sitting there, looking dazed. " + "Then a low, rending groan starts from his ruined, painfully-tight clothing, getting louder and louder until finally it all BURSTS apart at once! " + "With a surprised OINK! Bronk\'s belly surges outwards, his whole body visibly swelling from his latest \'snack\'. But he just doesn\'t seem to stop! " + "A deep gurrrgling comes from that behemoth of a belly, and he continues to swell fatter, and fatter, and fatter! " + "The magically-reinforced bench beneath him finally SNAPS beneath his weight, the force of the pig\'s impact shaking the entire building! " + "But he just keeps on ballooning outwards, barely recognisable as a pig anymore as chairs and tables and scraped across the floor in front of him, " + "now starting to fill a sizeable fraction of the inn! And keeps on growing! " + "\n\tSensing trouble you duck through the doorway and set off briskly down the road, whistling innocently. " + "A few minutes later you hear frantic scrambling sounds and turn to watch customers from the inn leaving by any exit they can. " + "A low, thrumming groan can be heard coming from the inn, felt more through the " + playerSpecies.feet + " than the ears. " + "One pauses long enough to cup his paws to his mouth and bellow, \"BRONK\'S GONNA BLOOOOOW!!!\" " + "\n\tWatching with interest, you see the wooden walls of the inn quiver slightly, " + "and then you\'re almost knocked off your " + playerSpecies.feet + " by a deafening KABOOSHHH! " + "The roof bulges out and then sags inwards a little, and little splatters of slime fly everywhere. Ouch, that\'s going to need more than a re-paint... ", false);
                                                            break;
                                                        case false:
                                                            scene("\t\"Groo... Cryin\' Chipolatas... I\'m... s-so STUFFED, but... but... I... just... can\'t... STOP...\" " + "\n\tThere\'s a quite abominable squelching noise, followed by a gloopy slurp, and you turn back in time to see the last of the slime getting swallowed. " + "With one last gulp it\'s gone and for a moment nothing happens, the pig just sitting there, looking dazed. " + "Then a low, rending groan starts from his ruined, painfully-tight clothing, getting louder and louder until finally it all BURSTS apart at once! " + "Bronk\'s belly surges outwards, his whole body visibly swelling from his last \'snack\'. " + "It\'s too much for the furniture- with a final, devastating SNAP the bench gives way beneath him. " + "The planks may have been magically reinforced, but it looks like no-one thought the legs would ever need it. " + "The behemoth of a pig starts to tumble backwards, almost in slow-motion. " + "Another CRACK announces the collapse of the table beneath his gut, and then there\'s a long, meaty, building-shaking SLAP as he hits the floor, " + "backside first, then his back, and then his shoulders. Several unsuspecting customers are thrown off their feet by the impact. " + "He bounces slightly, before crashing down again. Dust shakes down from the ceiling and you can see cracks in the walls where the wooden joists have shifted. " + "\n\tThe stunned, slime-splattered pig lays there, an island of his own making. You grin and head out of the door, which has fallen off one hinge. " + "As you step outside you head a deep, rumbling, bubbling gurgle coming from the supersized porker\'s stomach. " + "THIS time you\'re sure they can hear the volcanic BELCH that follows two islands along. It even lifts the roof off the inn! ", false);
                                                    }
                                                    endEvent(WestTownHub);
                                            }
                                            break;
                                        case false:
                                            scene("\t\"What took you so long, " + playerGender.mister + " Bigmouth? Got me another of those Blue Goop Monsters, yet? " + "Well what\'re you doing standing around HERE for, you ", true);
                                            if (FAT > 100) {
                                                scene("skinny", false);
                                            }
                                            if (FAT <= 100) {
                                                scene("fat", false);
                                            }
                                            scene(" layabout? Go fetch me one! Don\'t make me go out there and do your job for you!\" ", false);
                                    }
                                }
                                if (hasQuest(slimeQuest4) && !questCompleted(slimeQuest4)) {
                                    switch (itemOwned(blueSlimeItem)) {
                                        case true:
                                            scene("\tWith a mighty heave you haul the entire Blueberry slime onto the remaining free table-space, setting it down with a loud SPLAT! " + "The inn falls quiet for a moment at its appearance, and even Bronk forgets to look unimpressed, staring at the very large, translucent blue block of gelatine in front of him. " + "He sniffs at it curiously, and gets a jet of blue slime between his lips for his trouble. He gulps in surprise... and then he licks his lips, piggy eyes lighting up. " + "\n\t\"Smokin\' BACON that\'s tasty! Dang, if I could only FARM these things I\'d have all the Goop I\'d want- and it\'d sell by the barrel...\" " + "\n\tBronk catches sight of you, and the obese oinker\'s fat face creases into an expression mixing gluttony with cunning. " + "\"Say there, Pardner. Thanks for rounding up this little fella- here\'s 30 gold for ya trouble. Now, how\'d you feel about getting me a few MORE of these critters? " + "You do and I\'ll give you... 100 gold- OK! OK!\" he says, seeing your expression and starting to sweat, \"150, but you ain\'t squeezin\' a copper more outa me, you got that? Good. " + "Make \'em big, healthy ones, too. It shouldn\'t take more\'n FOUR to start things off. Well... what\'re you doin\' just STANDING there?\" " + "You turn to leave, and behind you you hear Bronk say, \"Of course... it\'d be a crying shame to let THIS one just go to waste...\" " + "As you reach the door you hear a gloopy, gelatinous SQUEAK followed by some quite revolting slurping, sucking and lip-smacking sounds. " + "The expression on a few of the customers\' faces encourages you not to look back. " + "A few paces down the road you\'re followed by a deep, rolling BURRRRRP! from the depths of the inn. ", true);
                                            removeItem(blueSlimeItem);
                                            questReward(slimeQuest4);
                                            getQuest(slimeQuest5);
                                            break;
                                        case false:
                                            scene("\t\"Back already, " + playerGender.mister + " Bigmouth? Got me that Blue Goop Monster I told you to get me, yet? " + "Well what\'re you doing standing around HERE for, you ", true);
                                            if (FAT > 100) {
                                                scene("skinny", false);
                                            }
                                            if (FAT <= 100) {
                                                scene("fat", false);
                                            }
                                            scene(" layabout? Go fetch me one! I\'m starting to get HUNGRY, here!\" ", false);
                                    }
                                }
                                if (!hasQuest(slimeQuest4) && questCompleted(slimeQuest3)) {
                                    scene("\tYou offer to go and fetch a Blueberry slime from the hills for the innkeeper- again. " + "Bronk\'s piggy eyes narrow behind his fat, swollen cheeks across the table, which is still splattered with yellow-ish slime where it\'s visible from underneath that gigantic bacon-belly. " + "\n\t\"Back again, huh, " + playerGender.mister + " Bigmouth? Boy, have you got ", true);
                                    if (FAT > 100) {
                                        scene("skinny", false);
                                    }
                                    if (FAT <= 100) {
                                        scene("FAT", false);
                                    }
                                    scene("! Yer lucky that business is so good lately, otherwise I\'d be out there getting one of those things for myself! " + "But I\'m working myself to the bone here keeping things going. Alright, you bring me some of this blue monster goop and I\'ll make it worth your while. " + "But even THINK \'bout trying to con me- this time I want a WHOLE one, straight off! I\'m wearing myself to skin and bones as it is!\" ", false);
                                    getQuest(slimeQuest4);
                                }
                                if (hasQuest(slimeQuest3) && !questCompleted(slimeQuest3)) {
                                    switch (itemOwned(lemonSlimeItem)) {
                                        case true:
                                            switch (questStage(slimeQuest3)) {
                                                case 0:
                                                    scene("\tYou haul the Lemon Slime onto the table, to appreciative gasps from bystanders. Bronk\'s piggy eyes gleam with delight. " + "The greedy pig grabs the end of the glistening cube and pulls off a large handful, " + "holding it quivering in front of his face before he opens wide and pushes the whole chunk in at once. " + "Then he unceremoniously begins stuffing great goopy hunks of it into his mouth as fast as he can, making his cheeks bulge out in funny shapes. " + "You don\'t stay to watch. As you turn away he calls out, rather indistinctly, \"Dry do geb be ab eben BIGGER wub negt dime!\" ", true);
                                                    removeItem(lemonSlimeItem);
                                                    questAdvance(slimeQuest3);
                                                    break;
                                                case 1:
                                                    scene("\tYou haul the Lemon Slime onto the slime-stained table-top, to astonished gasps from bystanders. Bronk\'s piggy eyes gleam with delight from behind his chubbed-up cheeks. " + "He looks so pleased even his flapping ears perk up some. " + "\n\t\"Hot DIGGITY!\" The shameless glutton then tears in with his hands, ravenously stuffing great goopy hunks of it into his mouth as if he hadn\'t eaten for weeks. " + "With each noisy swallow he seems to swell even bigger. As you turn away he calls out, rather indistinctly, " + "\"Nob bag, bug dry do geb be ab eben BIGGER wub negt dime, Bigmoud!\" ", true);
                                                    removeItem(lemonSlimeItem);
                                                    questAdvance(slimeQuest3);
                                                    break;
                                                case 2:
                                                    scene("\tYou haul the Lemon Slime onto what space there is on the slime-slicked table-top in front of Bronk, to astonished gasps from bystanders. " + "Bronk grins from ear-to-ear, then lunges straight at the thing, head-first! " + "He sinks his snout in the dead-centre of the glistening, jiggling cube with a tremendous GLOOP noise. " + "The sounds that follow as he gorges the thing down are simply indescribable. What an out-and-out PIG! " + "As he stuffs himself he swells rounder and rounder, more stitches bursting as he further outgrows his tattered clothing. " + "\n\tHe finally slurps down the last of the slime- even licking the table clean!- " + "and slowly rocks back on the bench, letting out a tremendous BURRRRRRP, looking too stuffed to move. " + "He pants, his swollen chest heaving as he wobbles there, making few remaining stitches of his tunic strain audibly. " + "\n\t\"Ok... ok... I guess y\'vearned yer- BURP!- money THIS time...\" " + "The enormously fat pig wobbles futilely in an attempt to reach his money-pouch, which in the end is found laying on the ground beneath the bench, " + "along with the torn end of his burst belt. His fat fingers sluggishly fumble out 50 gold pieces onto the curved top of his bloated belly. " + "When you\'ve retrieved your gold he sits back and puts his hands to the sides of his massive middle. \"I can\'t believe I ate the whole thing....\" ", true);
                                                    removeItem(lemonSlimeItem);
                                                    questAdvance(slimeQuest3);
                                                    questReward(slimeQuest3);
                                            }
                                            break;
                                        case false:
                                            scene("\t\"It\'s about time you showed up again, " + playerGender.mister + " Bigmouth! Ain\'t you got me another of those Lemon Goop Monsters yet? " + "Well hurry it up! They\'re darn tasty! In fact, it\'s making me hungry just THINKING about it! Pass me ", true);
                                            switch (dXY(1, 4)) {
                                                case 1:
                                                    scene("those crackers", false);
                                                    break;
                                                case 2:
                                                    scene("the mustard", false);
                                                    break;
                                                case 3:
                                                    scene("that ham", false);
                                                    break;
                                                default:
                                                    scene("the cheese", false);
                                            }
                                            scene(", willya?\" ", false);
                                    }
                                }
                                if (hasQuest(slimeQuest2) && !questCompleted(slimeQuest2)) {
                                    switch (itemOwned(lemonSlimeItem)) {
                                        case true:
                                            scene("\tYou heave the Lemon Slime onto the table like a trawlerman landing a catch. Bronk is so surprised he actually stands up, the bench he was sat on creaking with relief. " + "The Slime glistens and wobbles in the lamplight, apparently stunned by its capture. " + "\n\t\"Holy mudda of...\" The pig\'s eyes widen, and then for the first time his fat face breaks into a greasy grin. " + "\"It\'s a WHOLE one! You gone and got me a whole one!\" He runs a finger down one of the cube\'s wobbling sides, and licks it. \"And it tastes even better fresh!\" " + "You cough and Bronk scowls at you, annoyed at the interruption. \"Oh, yeah...\" " + "Surprisingly, he digs into his money-pouch and pays you without any further complaint, his eyes always returning to the large yellow jello-cube sprawled across his table. " + "\"Tell ya what, I\'ll give you another 50 if you can bring me THREE more of these things!\" He\'s already licking his lips at the thought. " + "The Slime quivers a little on the table, possibly picking up on the pig\'s voracious thoughts. You shrug agreement. " + "\n\tAs you turn away, you hear the rather disgusting sucking and schlurping sounds of someone tucking into an enormous lump of jello... ", true);
                                            removeItem(lemonSlimeItem);
                                            questReward(slimeQuest2);
                                            getQuest(slimeQuest3);
                                            break;
                                        case false:
                                            scene("\t\"Pah, bet you ain\'t NEVER got one- got a friend of yours to fetch you that last bit, didya? Well tell him to find me some more!\" ", true);
                                    }
                                }
                                if (hasQuest(slimeQuest1) && !questCompleted(slimeQuest1)) {
                                    switch (itemOwned(lemonSampleItem)) {
                                        case true:
                                            scene("\tYou plonk your sample of slime onto the empty plate in front of Bronk, where it wobbles gelatinously. " + "The fat pig\'s eyes widen behind his porky cheeks. He scoops up some of it with his fingers and sniffs it suspiciously. " + "\n\t\"Hmm... I GUESS you\'re on the level...\" He pops the yellow slime into his mouth, chewing. His face lights up, and you could swear he almost smiles. " + "\"Say, that\'s REALLY tasty!\". He reaches to scoop the rest of the sample off the plate, but your hand clamps around his wrist, and you politely remind him of your deal. " + "An argument ensues. You eventually persuade Bronk to grudgingly count out 5 gold pieces from his money pouch. " + "\"This is a pretty puny serving, " + playerGender.mister + " Bigmouth- I\'ll give you the other 5 if you can bring me a WHOLE one of these things-\" " + "his big belly lets out an impatient gurgle, \"- AND another 15 on top of that!\" he adds, his trapped hand scrabbling to reach the remains of the goop you brought. " + "Seeing your hesitation, he adds, a little desperately, \"I\'ll even call us even about that spoon!\" " + "\n\t20 gold for capturing a Lemon slime- you can live with a deal like that. " + "You let go of Bronk\'s wrist, and he grabs the remainder of the lemon slime from the plate, stuffing it into his mouth, then noisily sucks his fingers clean. " + "As you turn away he even picks up the plate and licks it clean. ", true);
                                            removeItem(lemonSampleItem);
                                            questReward(slimeQuest1);
                                            getQuest(slimeQuest2);
                                            break;
                                        case false:
                                            scene("\t\"Where\'s that Lemon Thing you were gonna bring me? Have you caught me one, yet? Well I ain\'t gonna wait all week for it. And where\'s my 2 gold for that spoon you bent?\" ", true);
                                    }
                                }
                                if (!hasQuest(slimeQuest1)) {
                                    scene("\tYou ask the innkeeper if there\'s any work he needs doing and he regales you with a tale of a curiously delicious monster in the forests east of town. " + "You offer to bring back some of this \'gelatinous monster goop\' from the forest for Bronk to try... for a fee. " + "Bronk looks at you suspiciously from his bench at the dining table, but his appetite makes the decision for him. " + "\n\t\"Ok, you manage to bring me back some of that goop to try and I\'ll give you... 3 gold for it.\" " + "With a bit of hard bartering you manage to argue him up to 10 gold- once you\'ve outlined the violence needed to subdue a slime monster. " + "With a small but vivid demonstration on one of the inn\'s spoons. " + "\n\t\"Alright, I\'ll give you 10 gold for it- but don\'t think you can try to trick me! " + "I\'ll know if it\'s a fake- the real stuff tastes of lemon, my wife says. And you owe me 2 for that spoon!\" ", true);
                                    getQuest(slimeQuest1);
                                }
                                break;
                            case 13:
                                scene("\tYou " + walk() + " out of the inn back into the central square. ", true);
                                locationTravel(WestTownHub);
                        }
                    };
            }
            switch (ID) {
                case this.TestArea:
                    this.FAT = this.FAT + 1000;
                    this.bSTR = 99;
                    this.doGold(5000);
                    this.endEvent(this.CentralSquare);
                    break;
                case this.donutShop:
                    this.randomNPC(1);
                    this.ambientTravelScene(this.cameFrom);
                    this.scene("\n\tJust then, your nose picks up a gorgeous scent on the night breeze, sweet and sugary and loaded with spices. " + "Almost immediately your mouth starts watering, and you find yourself taking a step in that direction, towards an alleyway leading away from the square. Do you follow it? ", false);
                    this.choiceButton();
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 11:
                                randomNPC(1);
                                randomNPC(2);
                                randomNPC(3);
                                scene("Following your nose, you very quickly get yourself in the maze of little back alleys. " + "They all look the same at night, and besides, your mind is too preoccupied with the delicious scent drawing you onwards. " + "You eventually approach the source of the smell, a pair of wide, wooden double-doors with a sign reading \'Donut Shoppe\' above them. " + "It glows with a slight blue shimmer outlining it. Just before you reach them, a VERY hefty, inexplicably shirtless " + NPC1.species.name + " bursts through them, almost running right over you. " + "\"Out of my way!\" " + NPC1.gender.he + " pants, " + NPC1.species.mouth + " still half-full of something, \"I\'ve got to fetch more GOLD!\" " + "You watch them pound away down the night-lit alley until they\'re swallowed by the shadows, then you shrug and go in. " + "\n\tInside, illuminated by candlelight, you see a set of benches along the nearest walls. " + "You spot a gravely obese " + NPC2.species.name + " and " + NPC3.species.name + " propped up against them, asleep (or at least unconscious). " + "Both have apparently burst out of their clothes, hugely bloated stomachs wobbling in time with their overstuffed snores. " + "Crumbs litter their expansive chests and the surrounding floor. Could they REALLY have stuffed themselves to the point where they can\'t even move? " + "\n\tBehind a large, polished counter directly in front of you stands a rather chunky dog wearing an apron around his middle, " + "who eagerly beckons you closer with an expansive gesture and a big smile on his plump canine muzzle. \"Hello there, friend, welcome to my parlour!\" " + "He eyes your " + waist() + " stomach, and his smile widens a notch. \"You look like someone who could use a few doughnuts to help " + playerGender.him + " back on the road!\" " + "Safely behind the counter you can see his wares, tray after tray of donuts, all different kinds, and all about twice the size of any you\'ve seen elsewhere. " + "On the wall behind him you see a blackboard with the scrawled message \'All donuts 10 gold each\'. HOW much?! " + "\n\t\"Yeah, it\'s a bit steep,\" he admits with that same smile in place, \"but I do a special deal: the first one is always free. " + "But I\'ll warn ya, there\'s not a customer yet who can stop at just one of MY donuts.\" He proffers you a single, perfect specimen, and winks. " + "\"Like I said, this one\'s on the house. If I can tempt you?\" ", true);
                                choiceButton();
                                btntxt(11, "Yes, gimme!");
                                btntxt(13, "No thanks");
                                listen = function ():void {
                                    switch (btnchc) {
                                        case 11:
                                            scene("\tYou eagerly take the freebie from his paws- it\'s baked to a perfect, even colour and sparkles with sugar. It\'s still warm and the sweet aroma rising from it is mouth-watering. " + "You sink your teeth into it, and the filling squirts into your mouth. ", true);
                                            switch (dXY(1, 4)) {
                                                case 1:
                                                    scene(capFirst("strawberry! "), false);
                                                    break;
                                                case 2:
                                                    scene(capFirst("raspberry! "), false);
                                                    break;
                                                case 3:
                                                    scene(capFirst("chocolate! "), false);
                                                    break;
                                                case 4:
                                                    scene(capFirst("vanilla! "), false);
                                            }
                                            scene("\n\tAs you chew, a strange feeling starts to come over you. This is by far the best, BEST donut you have ever tasted! " + "You find yourself taking another bite from it even before you\'ve swallowed the first, your cheeks bulging. " + "That amazing flavour fills your mouth again, making your tongue tingle and your tastebuds beg for more. " + "Before you know it you\'ve crammed the last of the doughnut between your lips, cheeks stuffed, and gulp down the treat pretty much as fast as you can, " + "then even start sucking the sugar from your paws. You\'re your stomach seems to be able to taste it. SO... GOOD! But it\'s all gone! That realisation physically hurts. " + "Within moments the luscious, filling treat inside you seems to melt away to nothing, to be replaced by a yawning void as your stomach growls for another little chunk of heaven. " + "It\'s more than just a want, it\'s a NEED. You reflexively reach to grab another donut from behind the counter, but the owner\'s paw expertly blocks you and presses you back. " + "\n\t\"Hold your horses there, big " + playerSpecies.name + "!\" he says with a wicked grin. \"Only that FIRST one was free. Now they\'re 10 gold apiece, remember? " + "You got the gold, you can have ALL the donuts you can stomach.\" He prods at your " + waist() + " midriff. " + "Suddenly he\'s holding out another donut towards you, and his smile looks a whole lot more predatory. " + "The sweet smell of baked confectionary fills your entire world, and you can\'t take your eyes off that donut. You try to take a step back, but seem to be rooted to the spot. " + "\"So what\'s it going to be, you greedy " + playerGender.fella + "?\" ", false);
                                            break;
                                        case 13:
                                            scene("\tHis exuberant smile fades slightly, and he looks a little disappointed in you. " + "\"Well now, that\'s a shame, " + playerGender.sport + ". Sure I can\'t tempt you to a free sample? Not even a lick?\" You\'re sure, though it does look delectable. " + "\"Well, there\'s always later,\" he slowly puts the donut on the counter top, then smiles at you again. " + "\"Tell you what, if you ever change your mind, this little beauty will be waiting for you!\" he calls out invitingly as you back through the doors and out into the alley. " + "A few turns later and you find yourself somewhere you recognise- the " + cameFrom.Name + ". " + "You turn back and sniff, but that wonderfully enticing smell is too faint for you to trace. ", true);
                                            endEvent(cameFrom);
                                    }
                                };
                                break;
                            case 13:
                                endEvent(cameFrom);
                        }
                    };
                    break;
                case this.Church:
                    this.scene("\tYou step into the church, which is resplendant, clean and quiet. The marble floor is decorated by colored carpets that lead to a variety of shrines and altars dedicated to the gods. " + "Above, the stone archways are painted with images depicting events of great significance and spiritual importance. " + "The head priest, a raven in robed finery, nods to acknowledge you as he makes his way from one end of the room to the other, cleaning each altar and praying at each shrine. ", false);
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"Greetings, adventurer. I am Oswald, and I tend to this place. In these strange times, you would do well to pay heed to the gods, lest you be led astray.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"Those with the explorer\'s heart are granted a boon by the goddess of courage. " + "Should they meet their end beyond the reach of mortal aid, they will be led to Her altar to begin anew. " + "Bear in mind that there is a cost to this, for the drive to explore must come from deep desire.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"Be wary of those that delve too deeply into the magics of change. " + "While the gods will respect whatever natural form you make choose to take, there is a boundary beyond which you are something that does not belong in this world. " + "Those that cross this line have a history of coming to madness.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"To be honest, my faith is tried with our current state of affairs. " + "The blessings of the god of harvest are surely grand and wonderous, but whether it was His intent that we fall into gluttony from them I am not certain. " + "Are we being tested? Are we being rewarded? Or is there yet another force at work? I fear I cannot say.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                endEvent(EasternSquare);
                        }
                    };
                    break;
                case this.ClothesStore:
                    this.scene("\tYou walk into the clothier\'s shop, greeted by the sight of rows of clothing hung up for display. A well-dressed and well-fed cow lady comes up to greet you. " + "\"Welcome to my store,\" she says, gesturing around politely. \"If you are interested in any of my wares, or need your clothing mended or altered, please let me know.\" ", false);
                    this.tradeButton(1);
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                enterStore(ClerkClothes);
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"My name is Edna, and I\'ve made all the clothes you see here. My husband, Charles, is quite a bit more busy, as he works the alterations and mending.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"If you want my opinion, I think you might try something in a nice ", false);
                                        switch (dXY(1, 3)) {
                                            case 1:
                                                scene("black", false);
                                                break;
                                            case 2:
                                                scene("blue", false);
                                                break;
                                            case 3:
                                                scene("red", false);
                                        }
                                        scene(". Or perhaps ", false);
                                        switch (dXY(1, 3)) {
                                            case 1:
                                                scene("green", false);
                                                break;
                                            case 2:
                                                scene("white", false);
                                                break;
                                            case 3:
                                                scene("orange", false);
                                        }
                                        scene(" might suit your tastes?\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"A mage came through here a while back, asked for my most colorful cloth. I showed him a bright green bolt of fabric, but he didn\'t find it gaudy enough. " + "Mages! No sense of fashion, the lot of them.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                endEvent(MarketSquare);
                        }
                    };
                    break;
                case this.GroceryStore:
                    this.scene("\tYou walk into the grocery store, which is nearly as packed as the restaurant. " + "Several furs in aprons are quickly bustling about carrying loads of food out to display shelves, which are emptied nearly as fast as they are filled. " + "A few penguins waddle about about, arms full of iced meats to fill their stocks. One fat and happy looking brown bear lady walks up to you, clearly the proprietor of the place, and greets you warmly, " + "\"Welcome to my store. We\'re quite busy, but have everything you need. Feel free to browse the ingredients or the pre-made meals.\" " + "As she speaks, she gestures to the main floor, then to the deli off to the side, which is also busy but well staffed. ", false);
                    this.tradeButton(1);
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                enterStore(ClerkGrocery);
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"I\'ve had to hire a lot of help lately, but there\'s as little shortage of folks willing to work with food as there is folks willing to eat it, so I\'m set.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"We\'re getting more food faster all the time, but it goes out faster every day, too. " + "Can\'t complain, it\'s made me a good bit of gold, but it is starting to make me wonder.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"Everything here is locally grown, and all the meats are packed with magically enchanted ice to stay cold and fresh until you eat it.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                endEvent(MarketSquare);
                        }
                    };
                    break;
                case this.GeneralStore:
                    this.scene("\tYou " + this.walk() + " into the general store, a small, cluttered structure with barely any space to walk around with all the oddities and tools on display. " + "A pudgy rat fellow in slightly dirty clothes sits behind a counter that is, itself, piled high with assorted goods that he is inspecting. " + "When he gets a good view of you, he waves and says, \"Welcome, adventurer. You buy, I buy. Everybody buys here. Let me know if you want to do business.\" ", false);
                    this.tradeButton(1);
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                enterStore(ClerkGeneral);
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"Name\'s Charles. You might\'ve heard that I\'m a hoarder. " + "Don\'t believe those people; all this stuff is good, and I\'m perfectly willing to give it away in exchange for gold. Or something else good.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"With times as strange as they are, I\'ve been getting a lot more adventurers, and I tell \'em all the same things: " + "First off, make sure you got gear. Second, make sure you got potions. Third, let me buy what you don\'t need.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"The potions I have are my most popular items, for true. But that doesn\'t mean you can\'t buy anything else here. " + "If nothing catches your eye right off, give me a bit of time. I\'m sure I\'ll have something for you to buy.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"Listen, little free advice for you, adventurer: If you\'re in over your head, escape. " + "The goddess of courage watches out for you, sure, but there\'s a fine line between courage and getting eaten by something too big for you.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                endEvent(MarketSquare);
                        }
                    };
                    break;
                case this.EquipmentStore:
                    this.scene("\tYou step into the Armory, greeted by the sounds of hammer hitting anvil, the heat of a working forge, and the sight of a shirtless, thick-bodied lion at work. " + "He looks up at you and rumbles out, \"Welcome to the Armory. Don\'t hesitate to ask if ye\'ve any interest in my works.\" ", false);
                    this.tradeButton(1);
                    this.btntxt(2, "Work");
                    this.btntxt(3, "Talk");
                    if (this.questActive(this.horseQuestArmor)) {
                        this.btntxt(4, "Burst chainmail");
                    }
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                enterStore(ClerkEquipment);
                                break;
                            case 2:
                                switch (hasQuest(smithedArmor)) {
                                    case true:
                                        scene("\t\"Thank ye for the offer, but ye\'ve done quite enough fer\' today. Come back by t\'morrow and I should have more work for ye\'.\" ", true);
                                        break;
                                    default:
                                        switch (hasQuest(learningToSmith)) {
                                            case false:
                                                getQuest(learningToSmith);
                                                scene("\tThe lion stops working for a moment, stroking his shaggy mane as he gives you a looking over. " + "\"So, yer\' needin\' some work are yeh? I might be able ta use an assistant for a while...\" " + "He stands up and leads you to his anvil before handing you his hammer. \"Give it a swing for me, let me see what it tells me of ye,\" he requests. ", true);
                                                switch (STR > 35) {
                                                    case true:
                                                        scene("You swing the hammer at the metal he was shaping. The hammer is heavy, but you manage a good swing, and get a rewarding \'clank\' from it and dent the metal. " + "The lion nods approvingly. \"A bit of a wild swing, but you\'ve an arm fer it, and that\'s important. " + "I won\'t be teachin\' yeh the finer bits of it, but yeh kin\' still help me prepare the metal fer shapin\'. " + "Let me know when yeh want ta start.\" Looks like you qualify. ", false);
                                                        questAdvance(learningToSmith);
                                                        break;
                                                    default:
                                                        scene("You swing the hammer at the metal he was shaping, barely able to lift the surprisingly heavy hunk of iron. It gives a quiet \'tink\' as you hit it. " + "The lion shakes his head. \"I\'m afraid that as yeh are, ye\'d be more hindrance than help. I need an assistant, not an apprentice. " + "If yer\' desp\'rate fer work, though, check the rest\'raunt. They always need someone ta do the dishes.\" He takes back his hammer and sets back to work. ", false);
                                                }
                                                break;
                                            default:
                                                switch (questStage(learningToSmith)) {
                                                    case 0:
                                                        scene("\tThe lion stops working for a moment, looking up at you. \"Back again? Do yeh feel like ye can handle it now?\" He stands up once more, leading you to the anvil. " + "\"Give it another swing, let\'s see how ye\'ve come along.\" He gives you his hammer again, and gestures to the anvil. ", true);
                                                        switch (STR > 35) {
                                                            case true:
                                                                scene("You swing the hammer at the anvil, feeling much more in control than last time. " + "You manage a good swing, and get a rewarding \'clank\' and a dent in the metal on the anvil. " + "The lion nods approvingly. \"Looks like ye\'ve gained an arm fer it, so good on yeh. " + "I\'ll not be teachin\' yeh the finer bits a\' smithin\' fer this job, but yeh kin\' help me prepare the metal fer shapin\'. " + "Just let me know when ye\'re ready ta start.\" Looks like you\'re strong enough to qualify now. ", false);
                                                                questAdvance(learningToSmith);
                                                                break;
                                                            default:
                                                                scene("You give it another swing, but the hammer is still just too heavy for you to wield well. You produce another quiet \'tink\' as you hit the anvil. " + "The lion shakes his head once more. \"Still not there, I\'m afraid. Don\'t worry, " + playerGender.lad + ". " + "If ye\'re not cut out fer this, there\'s still plenty a\' things ye can do. " + "Yeh might try goin\' out west and visitin\' the Mage\'s Guild out there, seein\' if ye can use yer mind instead a\' yer arms.\" ", false);
                                                        }
                                                        break;
                                                    case 1:
                                                        doTime(240);
                                                        doStamina(-50);
                                                        getQuest(smithedArmor);
                                                        scene("\tThe lion gives you a nod, and says, \"Ah, good, ye\'re ready ta start. Come back ta th\' furnace with me an\' we\'ll get yeh goin\'.\" " + "With that, he leads you into a cramped, hot room. Metal ingots line a wall and hot coals glow in a stone furnace. " + "You are given a list of how many casts of metal are needed with each of the molds available, " + "and set to the task of melting the metal and pouring it into the molds to be refined later. ", true);
                                                        switch (STR > 50 && END > 50) {
                                                            case true:
                                                                scene("It\'s hard, tiring work, but you accomplish most of what was requested alone. " + "The lion comes back a few times, seemingly immune to the immense heat as he works while you get a much-needed drink. " + "After several hours of this, you are called back to the front and presented with a pouch of gold. \"Mannin\' the furnace is hard work, but ye did well. " + "Here\'s some coin fer yer sweat today.\" ", false);
                                                                doGold(50);
                                                                break;
                                                            default:
                                                                scene("It\'s hard work, but you keep at it, not letting the heat keep you from your task. " + "After a full and busy few hours, you find that you\'ve cast all the pieces that were requested and head back to the front. " + "The lion nods approvingly. \"Well, ye\'ve got the chops for this, yeh do. Ye did quite well, an\' I\'ll be able ta easily meet me quota fer today now. " + "If\'n I\'m ever lookin\' for an apprentice, I do hope yeh come ta fill the role. " + "Take some coin fer yer hard work.\" You are presented with a small bag of gold. ", false);
                                                                doGold(20);
                                                        }
                                                }
                                        }
                                }
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"The name\'s Argus. I\'ve worked this forge since I was at me pappy\'s knee.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"I specialize in making steel armors. I\'ve not the heart to make something truly dangerous, truth be told, but I do have some basic weapons for defending yerself.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"If you\'re looking for more dangerous kit, head westward along the road and towards the seaside town. They import more dangerous gear from an island out west, I\'m told.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"I was in contact with a smith out east near the mountains, shared some fine knowledge with him. Lately he\'s stopped writing me, though. I do hope he\'s alright.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 4:
                                scene("\tYou proffer the burst chainmail to Argus, who stops work to examine it. Holding it up to the forge-light, he shakes his head. " + "\"Aye, this is skilled craft, I\'ll grant you. I can\'t say who forged this, but they had rare talent, maybe magic, too. " + "I cannae touch it " + playerGender.laddie + "- I just don\'t have the know-how. " + "You may have better luck out West, or I knew of a fine smith in the mountains, if he\'s still around. ", true);
                                break;
                            case 13:
                                endEvent(MarketSquare);
                        }
                    };
                    break;
                case this.YourHouse:
                    this.clearView();
                    switch (this.specialEvent) {
                        case 0:
                            this.scene("You step into your sparsely furnished living room. ", true);
                            this.leaveButton(13);
                            this.btntxt(1, "Bedroom");
                            this.buttonIcons(1, this.iconRest);
                            this.btntxt(3, "Storage");
                            this.buttonIcons(3, this.iconInventory);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        specialEvent = 1;
                                        doEvent(YourHouse);
                                        break;
                                    case 3:
                                        depositing = true;
                                        invPage = 1;
                                        doStorage();
                                        break;
                                    case 13:
                                        scene("You " + walk() + " out of your house and onto the city\'s central square. ", true);
                                        endEvent(CentralSquare);
                                }
                            };
                            break;
                        case 1:
                            this.scene("You " + this.walk() + " into your small bedroom. ", true);
                            this.btntxt(1, "Save");
                            this.btntxt(2, "Load");
                            this.btntxt(3, "Sleep");
                            this.buttonIcons(3, this.iconRest);
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        trySave();
                                        break;
                                    case 2:
                                        tryLoad();
                                        break;
                                    case 3:
                                        scene("\tYou climb into bed and curl up under the covers and close your eyes as you drift off into sleep. ", true);
                                        if (weight() > 400) {
                                            scene("The bed creaks ominously under your weight. ", false);
                                        }
                                        doSleep();
                                        break;
                                    case 13:
                                        specialEvent = 0;
                                        doEvent(YourHouse);
                                }
                            };
                    }
                    break;
                case this.TrainingGrounds:
                    this.scene("\tYou " + this.walk() + " onto the city\'s training grounds. " + "There\'s an open field where several different musclebound furs lift weights, while several leaner furs run around a dirt track. ", true);
                    this.clearView();
                    this.btntxt(7, "Rest");
                    this.leaveButton(13);
                    if (this.STA > 20) {
                        this.btntxt(1, "Lift weights");
                        this.btntxt(3, "Run track");
                    }
                    else {
                        this.scene("Just watching them makes you realize how tired you are. You don\'t feel like you have the energy to exercise right now. ", false);
                    }
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                doTime(30);
                                doStamina(-20);
                                doEvent(TrainingGrounds);
                                scene("\n\tYou go around lifting various heavy things until your whole body is sore. ", false);
                                if (FAT >= 3) {
                                    scene("You feel slightly stronger. ", false);
                                    chgStats(0.3, 0, 0.1, 0, 0);
                                    doFat(-3);
                                }
                                else {
                                    scene("You work up a sweat, but you don\'t feel any stronger. ", false);
                                }
                                break;
                            case 3:
                                doTime(30);
                                doStamina(-20);
                                doEvent(TrainingGrounds);
                                scene("\n\tYou run several laps around the track until your legs are sore. ", false);
                                if (FAT >= 3) {
                                    scene("You feel slightly faster. ", false);
                                    chgStats(0, 0.3, 0.1, 0, 0);
                                    doFat(-3);
                                }
                                else {
                                    scene("You work up a sweat, but you don\'t feel any faster. ", false);
                                }
                                break;
                            case 7:
                                doRest();
                                doEvent(TrainingGrounds);
                                scene("\n\tYou sit down on one of the park\'s benches and have a rest. ", false);
                                break;
                            case 13:
                                scene("You decide to leave. ", true);
                                endEvent(WesternSquare);
                        }
                    };
                    break;
                case this.Restaurant:
                    this.scene("\tYou step into the city\'s local restaurant. It is jam-packed with people in various states of overwhelming obesity eating huge portions of food. " + "Eventually, you are shown to a seat by a heavy-set fox lady whose every motion showcases exhaustion. " + "\"Payment in advance in case you overstuff yourself, what can I get for ya?\" she drones out, her voice a tired monotone. ", false);
                    if (this.GLD > 3) {
                        this.btntxt(1, "Cheap meal");
                    }
                    if (this.GLD > 6) {
                        this.btntxt(2, "Normal meal");
                    }
                    if (this.GLD > 12) {
                        this.btntxt(3, "Large meal");
                    }
                    if (this.GLD > 24) {
                        this.btntxt(4, "Huge meal");
                    }
                    if (this.GLD > 48) {
                        this.btntxt(5, "Too much food");
                    }
                    if (this.GLD > 96) {
                        this.btntxt(6, "Way too much food");
                    }
                    this.btntxt(8, "Talk");
                    this.btntxt(9, "Work");
                    this.leaveButton(13);
                    this.attemptsLeft = 0;
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                doConsume(3, 1, 2);
                                doTime(15);
                                doHealth(maxHEA);
                                doGold(-3);
                                doEvent(Restaurant);
                                scene("\tYou ask for something to fit an extremely tight budget and plunk down a couple of coins. " + "The waitress heads off and starts and eventually returns with a tiny plate of food and a glass of water. " + "A dish this small can\'t make you help but feel like this is from the kid\'s menu. But maybe that\'s just because the dish is arranged to make a smiley face. ", true);
                                switch (HEA > 0) {
                                    case true:
                                        scene("It\'s not the best, but it\'s a meal. ", false);
                                        statusWellFedPower = 5;
                                        if (statusWellFed < 60) {
                                            statusWellFed = 60;
                                        }
                                        break;
                                    case false:
                                        scene("You lean back and let out a groan, your " + waist() + " belly far too full after your last meal. When the waitress notices this, she calls out flatly, " + "\"Hey Doc, got another one here.\" It is the last thing you hear as you drift off to unconsciousness, thoughts of food flitting through your mind. ", false);
                                        defeatEvent(overeating);
                                }
                                break;
                            case 2:
                                doConsume(7, 3, 7);
                                doTime(30);
                                doHealth(maxHEA);
                                doGold(-6);
                                doEvent(Restaurant);
                                scene("\tYou order a regular meal and put down some coins. The waitress heads off to the kitchen, yelling out some garbled nonsense that the cook manages to correctly interpret. " + "A few minutes later, she delivers a steaming plate loaded with a healthy variety of foodstuffs, which you chow down ravenously. ", true);
                                switch (HEA > 0) {
                                    case true:
                                        scene("It feels nice to eat a fresh, expertly prepared meal. ", false);
                                        statusWellFedPower = 5;
                                        if (statusWellFed < 120) {
                                            statusWellFed = 120;
                                        }
                                        break;
                                    case false:
                                        scene("You lean back and let out a groan, your " + waist() + " belly far too full after your last meal. When the waitress notices this, she calls out flatly, " + "\"Hey Doc, got another one here.\" It is the last thing you hear as you drift off to unconsciousness, thoughts of food flitting through your mind. ", false);
                                        defeatEvent(overeating);
                                }
                                break;
                            case 3:
                                doConsume(18, 4, 15);
                                doTime(45);
                                doHealth(maxHEA);
                                doGold(-12);
                                doEvent(Restaurant);
                                scene("\tYou order a generous amount of food and pay a bit of gold. The waitress heads off to the kitchen after writing down everything, hangs the order and yells \"Order up!\" " + "The kitchen bustles with activity, and a while later, you are delivered several plates piled high with meats, cheeses, vegetables, sauces, and grains. " + "Your drink is comically tiny in comparison. ", true);
                                switch (HEA > 0) {
                                    case true:
                                        scene("You devour it all hungrily, then lean back and pat your " + waist() + " stomach, warmed and comforted by the well-cooked meal. ", false);
                                        statusWellFedPower = 5;
                                        if (statusWellFed < 180) {
                                            statusWellFed = 180;
                                        }
                                        break;
                                    case false:
                                        scene("You lean back and let out a groan, your " + waist() + " belly far too full after your last meal. When the waitress notices this, she calls out flatly, " + "\"Hey Doc, got another one here.\" It is the last thing you hear as you drift off to unconsciousness, thoughts of food flitting through your mind. ", false);
                                        defeatEvent(overeating);
                                }
                                break;
                            case 4:
                                doConsume(46, 8, 38);
                                doTime(60);
                                doHealth(maxHEA);
                                doGold(-24);
                                doEvent(Restaurant);
                                scene("\tYou decide to splurge and order a couple of meals worth of food, putting down a small pile of gold. " + "The waitress quickly writes down everything and repeats it all back to you, which is a fairly lengthy process. " + "Afterwards, she takes the order back to the kitchen, and the kitchen bustles with fervent activity. " + "A while later, the waitress returns with a completely loaded cart of dishes and trays, which soon becomes a full table of food, various noodle, " + "meat and rice dishes side by side with a few early desserts and large, decadent soups. " + "You feverishly demolish it all, scraping plates and licking bowls to get every last bit of the delicious meal into your mouth and down your throat. ", true);
                                switch (HEA > 0) {
                                    case true:
                                        scene("When you\'re done, you let out a breath, leaning back and rubbing your " + waist() + " stomach while you enjoy the feeling of well made food filling you. ", false);
                                        statusWellFedPower = 5;
                                        if (statusWellFed < 240) {
                                            statusWellFed = 240;
                                        }
                                        break;
                                    case false:
                                        scene("You lean back and let out a groan, your " + waist() + " belly far too full after your last meal. When the waitress notices this, she calls out flatly, " + "\"Hey Doc, got another one here.\" It is the last thing you hear as you drift off to unconsciousness, thoughts of food flitting through your mind. ", false);
                                        defeatEvent(overeating);
                                }
                                break;
                            case 5:
                                doConsume(110, 16, 81);
                                doTime(120);
                                doHealth(maxHEA);
                                doGold(-48);
                                doEvent(Restaurant);
                                scene("\tYou go a little crazy, ordering entire columns from the menu, paying up a large pile of gold, and are subsequently led away from your table and to a significantly larger banquet table. " + "The waitress foregoes writing down your order, simply circling large parts of a menu, and heads off to the kitchen, which visibly lights up from the sudden increase in working ovens and fires. " + "After a good while, the waitress begins to wheel out fully loaded carts and setting out their contents on the table. " + "You don\'t even wait until she\'s finished before you start eating everything in sight. " + "Time passes, appetizers eventually giving way to meals, meals eventually giving way to desserts, and drinks being available by the double-fistful the whole time. " + "It takes a while before you\'re done, and several of the dishes you ate on at the start have had time to be cleaned, dried, and piled high with more food for you before it\'s over. ", true);
                                switch (HEA > 0) {
                                    case true:
                                        scene("You let out a comforted hum, leaning back lazily to rub your " + waist() + " belly, the delightful feast making you feel warm and happy. ", false);
                                        statusWellFedPower = 5;
                                        if (statusWellFed < 300) {
                                            statusWellFed = 300;
                                        }
                                        break;
                                    case false:
                                        scene("You lean back and let out a groan, your " + waist() + " belly far too full after your last meal. When the waitress notices this, she calls out flatly, " + "\"Hey Doc, got another one here.\" It is the last thing you hear as you drift off to unconsciousness, thoughts of food flitting through your mind. ", false);
                                        defeatEvent(overeating);
                                }
                                break;
                            case 6:
                                doConsume(268, 32, 210);
                                doTime(180);
                                doHealth(maxHEA);
                                doGold(-96);
                                doEvent(Restaurant);
                                scene("\tYou hand the menu back, ordering it all. The waitress blanches at this, but shakes her head and says \"Alright, if that\'s what you want\" as you hand her a huge amount of gold. " + "She heads to the kitchen to deliver your order, and it becomes a din of clanging pots and pans and glowing fires. Before too long, you are being delivered entire meals three at a time. " + "By the time you\'re done with them, another set is being delivered. Used dishes pile up, clean and empty in the wake of your hungering mouth. " + "Food piles up in your belly as the hours stretch on, and you refuse to even slow down. " + "Eventually, you have tasted every appetizer, breakfast, lunch, dinner, dessert, and drink the restaurant has to offer, " + "and eaten enough that some people have stopped their daily activities just to watch you ram tremendous amounts of food down your gullot in morbid fascination. ", true);
                                switch (HEA > 0) {
                                    case true:
                                        scene("You let out a happy groan and rub your " + waist() + " stomach, the heavy weight of it actually making you feel quite good. ", false);
                                        statusWellFedPower = 5;
                                        if (statusWellFed < 360) {
                                            statusWellFed = 360;
                                        }
                                        break;
                                    case false:
                                        scene("You lean back and let out a groan, your " + waist() + " belly far too full after your last meal. When the waitress notices this, she calls out flatly, " + "\"Hey Doc, got another one here.\" It is the last thing you hear as you drift off to unconsciousness, thoughts of food flitting through your mind. ", false);
                                        defeatEvent(overeating);
                                }
                                break;
                            case 7:
                                scene("", false);
                                break;
                            case 8:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"Name\'s Deb, I\'ll be your waitress today, seein\' as Beck and Pete both ate themselves into the hospital last night.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"No offense, hon, but I\'m way too busy for chit-chat. Place your order or I have to get to the next customer to keep up.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 9:
                                if (hasQuest(washedDishes) && hasQuest(cookedFood)) {
                                    scene("\t\"We\'ve actually got it more or less under control for the moment, thanks to all your help. If you come back tomorrow though I\'m sure we\'ll be fallin\' right back behind though.\" ", true);
                                }
                                if (!hasQuest(washedDishes) || !hasQuest(cookedFood)) {
                                    scene("\tThe fox lady puts her hands to the side and lets out a relieved sigh. \"You want to help out? Thank goodness. I can cover all the orders, but we need some help in back. ", true);
                                    if (!hasQuest(washedDishes) && !hasQuest(cookedFood)) {
                                        scene("Dishes, anyone can do, but you need the know-how and the speed to keep up and help Cookie with the meals. We can pay you alright either way, but cookin\'s more in need. ", false);
                                    }
                                    if (hasQuest(washedDishes) && !hasQuest(cookedFood)) {
                                        scene("We\'re really falling behind on the cooking front. If you could help them out back there we could make it worth your while. ", false);
                                    }
                                    if (!hasQuest(washedDishes) && hasQuest(cookedFood)) {
                                        scene("We\'ve practically run out of dishes to serve people on and it\'s a bit of a mad house in the dish room. ", false);
                                    }
                                    scene("What\'ll it be?\" ", false);
                                }
                                clearView();
                                if (!hasQuest(washedDishes)) {
                                    btntxt(1, "Dishes");
                                }
                                if (!hasQuest(cookedFood)) {
                                    btntxt(2, "Cook");
                                }
                                returnView(3);
                                listen = function ():void {
                                    switch (btnchc) {
                                        case 1:
                                            doTime(240);
                                            doStamina(-50);
                                            switch (AGI > 35 && END > 35) {
                                                case true:
                                                    doGold(25);
                                                    break;
                                                default:
                                                    doGold(10);
                                            }
                                            getQuest(washedDishes);
                                            doEvent(Restaurant);
                                            scene("\tYou are led to the back of the kitchen, where a small pile of soap and rags are dwarfed by a massive pile of used dishes. " + "The waitress points to three areas and says simply, \"Dirty, clean, dry. Do your best,\" before heading back out. " + "You crack your knuckles and set to it, pumping water into the sink and soaping up a rag. ", true);
                                            switch (AGI > 35 && END > 35) {
                                                case true:
                                                    scene("\n\tAs time passes, you manage to get ahead of the curve, the mountain of dishes steadily shrinking from your efforts. " + "You manage to create a brief moment in which all the dishes are in the clean and dry piles. " + "This lasts for about twelve seconds before more dirty dishes come in, but you consider it a victory. The waitress comes up to you with a handful of gold. " + "\"Nice goin\' there, speedy. Boss says you can have this for a job well done. Come help out again some time.\" " + "She gives you an honest smile for the first time since you walked in, and you head back out with some extra spending money. ", false);
                                                    break;
                                                default:
                                                    scene("\n\tAs fast as you work, the pile never seems to get much smaller, even though you\'re quite certain that you\'ve cleaned a huge number of them. " + "After a few hours of this, you hang up your rag, stopping for now. The waitress comes back up to you with a handful of gold. " + "\"Don\'t worry, you did alright. Boss says you can have this for your trouble. Thanks for the help, hon.\" " + "She gives an honest smile for the first time since you walked in, and you head back out with a little extra gold. ", false);
                                            }
                                            break;
                                        case 2:
                                            doTime(240);
                                            doStamina(-50);
                                            switch (AGI > 45 && INT > 45) {
                                                case true:
                                                    doGold(40);
                                                    break;
                                                default:
                                                    doGold(10);
                                            }
                                            getQuest(cookedFood);
                                            doEvent(Restaurant);
                                            scene("\tYou offer to help cook, and are led back to the kitchen, where you see what at first appears to be 3 identical cheetahs manning several stoves and cooking fires. " + "\"Hey, Cookie,\" the waitress says. As the cheetahs come to a stop, you realize that it was just the one, moving VERY fast. " + "\"You got an assistant,\" she continues, then heads back out. The cheetah gives you a looking over, then nods at you silently, " + "handing you a chef\'s knife and pointing to a massive pile of vegetables on a long table. " + "It is separated into thirds labelled \"Dice,\" \"Slice,\" and \"Mince.\" You wash your hands and go to work. ", true);
                                            switch (AGI > 45 && INT > 45) {
                                                case true:
                                                    scene("\n\tYou are able to smoothly cut through everything necessary, leaving the table a pile of variously cut ingredients in spite of " + "Cookie rushing up and placing more on top every once in a while and taking large amounts away. " + "With your speed and skill, you even find the time to exercise your knowledge of recipes and get some cooking in yourself on a couple of stoves, much to Cookie\'s relief. " + "The waitress eventually returns with a pouch of gold, which you take as a sign that you\'ve done enough. \"Cookie\'s taciturn, but trust me: " + "He thinks you did a good job today, and so\'s the boss. Take this for your trouble, and come help again whenever you want.\" " + "She gives you the gold and a tired, but honest smile, and you head back out with your coin purse a bit fuller. ", false);
                                                    break;
                                                default:
                                                    scene("\n\tAs you do, Cookie slides the ingredients onto a plate and dumps them into various cooking equipment. " + "You don\'t have the time to prepare a single dish yourself, but still prove useful. " + "The waitress returns with a small pouch of gold after a few hours, which you take as a sign to stop. " + "\"Cookie\'s taciturn, but trust me: He appreciates you helpin\' him out, and so\'s the boss. Here you go, hon.\" " + "She gives you the gold and a tired, but honest smile, and you head back out with your pockets jingling. ", false);
                                            }
                                            break;
                                        case 3:
                                            doEvent(Restaurant);
                                            if (!hasQuest(washedDishes) || !hasQuest(cookedFood)) {
                                                scene("\tThe waitress looks a bit ruffled and says, \"Well, we can use you whenever you want to help out. What can I do for you, then?\" ", true);
                                            }
                                            if (hasQuest(washedDishes) && hasQuest(cookedFood)) {
                                                scene("\t\"Thank you so much for the offer sweetheart. Now what can I help <i>you</i> with?\" ", true);
                                            }
                                    }
                                };
                                break;
                            case 13:
                                endEvent(CentralSquare);
                        }
                    };
                    break;
                case this.Tailor:
                    this.scene("\tYou walk into the tailor\'s shop. " + "A slim tiger in a finely made suit asks you, \"Is there anything I can help you with " + this.playerGender.sir + "?\" ", true);
                    this.clearView();
                    this.leaveButton(13);
                    if (this.itemFind(this.goldThread) > -1) {
                        this.btntxt(11, "Gold thread");
                    }
                    if (this.questStage(this.horseQuestClothes) == 0) {
                        this.btntxt(12, "Old worn pants");
                    }
                    if (this.questStage(this.horseQuestClothes) == 1 && this.itemOwned(this.WizardsRobes)) {
                        this.btntxt(12, "Old worn pants");
                    }
                    this.tailorArray = new Array();
                    this.i = 0;
                    while (this.i <= this.invArray.length) {
                        if (this.invArray[this.i - 1] != null) {
                            tempTailor = this.invArray[this.i - 1];
                            if (tempTailor.Top || tempTailor.Bottom && tempTailor.Expand > 0) {
                                this.tailorArray.push(tempTailor);
                            }
                        }
                        this.i++;
                    }
                    this.i = 0;
                    while (this.i < 9) {
                        if (this.tailorArray[this.i] != null) {
                            this.writeItems(this.i, this.tailorArray[this.i]);
                        }
                        this.i++;
                    }
                    if (this.tailorArray.length == 0) {
                        this.scene("You have no items in your inventory that require tailoring. ", false);
                    }
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 11:
                                switch (hasQuest(foundGoldThread)) {
                                    case false:
                                        scene("\tYou withdraw a length of Gold Thread, holding it out to the tiger. At first, he gives you a curious look, before stepping closer and getting a better look at it. " + "His eyes widen and he seems to realize what you\'re presenting him. " + "\n\t\"This...I know this thread.\" He explains, a bit shocked. \"It was made by my brother. How did you manage to get this from him? He\'s incredibly powerful!\" " + "The slim tiger puts an orange paw to his head in bewilderment, before retaining his composure. " + "\n\t\"Well, however you got it, I\'m glad to see it. It probably means either my brother finally got what was coming to him, or at least learned a lesson.\" " + "He smiles at you, looking you up and down. \"But on to more pressing matters. There\'s three things I can do here. " + "Either I can stitch this into a piece of clothing you already wear, making it stretch enough to fit you, no matter what. I can reward you with 500 gold. " + "Or if you prefer, I could weave it into a bracelet for you, which, when worn, would make your body able to expand more. So what will it be?\" ", true);
                                        getQuest(foundGoldThread);
                                        break;
                                    default:
                                        scene("\t\"Ah! A gold thread!\" The tiger steps up, getting a good look at it. \"Yep, and it\'s just as magical as ever. So then, what\'ll it be? ", true);
                                }
                                clearView();
                                btntxt(1, "Gold");
                                btntxt(2, "Embroider");
                                btntxt(3, "Bracelet");
                                returnView(11);
                                listen = function ():void {
                                    var embroiderArray:Array = null;
                                    var tempEmbroider:Items = null;
                                    var testGoldQuest:Quests = null;
                                    var completeGoldThread:Quests = null;
                                    switch (btnchc) {
                                        case 1:
                                            expendItem(invArray[itemFind(goldThread)]);
                                            doEvent(Tailor);
                                            scene("\tThe tiger happily trades you a heavy sack of coins for your length of thread, looking very much like he got the better end of the deal.", true);
                                            doGold(500);
                                            break;
                                        case 2:
                                            embroiderArray = new Array();
                                            i = 0;
                                            while (i <= invArray.length) {
                                                if (invArray[i - 1] != null) {
                                                    tempEmbroider = invArray[i - 1];
                                                    if (tempEmbroider.Top || tempEmbroider.Bottom && tempEmbroider.Expand > 0) {
                                                        embroiderArray.push(tempEmbroider);
                                                    }
                                                }
                                                i++;
                                            }
                                            clearView();
                                            i = 0;
                                            while (i < 9) {
                                                if (embroiderArray[i] != null) {
                                                    writeItems(i, embroiderArray[i]);
                                                }
                                                i++;
                                            }
                                            returnView(11);
                                            if (embroiderArray.length == 0) {
                                                scene("\tYou have no items in your inventory that require embroidering. ", true);
                                            }
                                            listen = function ():void {
                                                if (btnchc < 10 && btnchc > 0) {
                                                    if (embroiderArray[btnchc - 1] != null) {
                                                        doEmbroider(embroiderArray[btnchc - 1]);
                                                        expendItem(invArray[itemFind(goldThread)]);
                                                        doEvent(Tailor);
                                                        scene("\tTaking the thread and the desired clothing, the tiger excuses himself momentarily, returning with a freshly-tailored, gold-threaded update. " + "\"There! One size will fit all, no matter your size!\" ", true);
                                                    }
                                                }
                                                if (btnchc == 11) {
                                                    doEvent(Tailor);
                                                }
                                            };
                                            break;
                                        case 3:
                                            switch (questStage(foundGoldThread)) {
                                                case 0:
                                                    expendItem(invArray[itemFind(goldThread)]);
                                                    doEvent(Tailor);
                                                    testGoldQuest = questArray[questFind(foundGoldThread)];
                                                    testGoldQuest.visible = true;
                                                    questAdvance(foundGoldThread);
                                                    scene("\tGetting a quick measurement of your wrist, the tiger quickly and effortlessly works the thread into a thin woven bracelet, handing it back to you. " + "\"There you go. Wearing that will definitely effect how much food you can hold on to. " + "Also, if you happen to get more threads, I can weave them into this bracelet, increasing the effect. " + "But there\'s no way I could do it more than a few times. I don\'t trust this magic enough to know what\'ll happen.\" ", true);
                                                    break;
                                                case 5:
                                                    doEvent(Tailor);
                                                    scene("\tThe tiger puts up his paws and shakes his head, " + "\"Oh no. Sorry, but you\'ve already got more than enough threads on that thing. I don\'t trust putting any more on.\" ", true);
                                                    break;
                                                default:
                                                    expendItem(invArray[itemFind(goldThread)]);
                                                    doEvent(Tailor);
                                                    questAdvance(foundGoldThread);
                                                    scene("\tWith deft ease, the tiger works the new thread around the old, weaving it in as if it had always belonged there. \"There we go! ", true);
                                                    if (questStage(foundGoldThread) < 4) {
                                                        scene("Now, I\'d say you could handle another " + (5 - questStage(foundGoldThread)) + " additions. ", false);
                                                    }
                                                    if (questStage(foundGoldThread) == 4) {
                                                        scene("Now, I\'d say you could handle just one more addition. ", false);
                                                    }
                                                    if (questStage(foundGoldThread) == 5) {
                                                        completeGoldThread = questArray[questFind(foundGoldThread)];
                                                        completeGoldThread.visible = false;
                                                        scene("That\'s about as far as I\'m willing to go, otherwise the consequences could be... dire. ", false);
                                                    }
                                                    scene("Thanks!\" ", false);
                                            }
                                            updateStats();
                                            break;
                                        case 11:
                                            doEvent(Tailor);
                                    }
                                };
                                break;
                            case 12:
                                switch (questStage(horseQuestClothes)) {
                                    case 0:
                                        questAdvance(horseQuestClothes);
                                        doEvent(Tailor);
                                        scene("\tThe tiger\'s expression as you produce such an ancient, threadbare garment is one of polite, fastidious horror. " + "When you hand over the measurements to go with them, and explain, his expression is more of incredulity. \"I remember Sampson Shire, of course!\" " + "Still clutching the note, the tiger looks down at the atrocious pants, and comments vaguely, " + "\"I recall that his hindquarters were ALWAYS built a little too generously for a conventional fit...\" " + "\n\tHe takes the pants through to his work-room. But he returns very quickly, shaking his head over the measurements. " + "\n\t\"I\'m very sorry, but I just don\'t have enough suitable material to make the adjustments- or even to make a new pair- in THIS size! " + "Quite honestly I don\'t think any of our standard fabrics would cut it, anyway. " + "If you\'re willing to help me, I think the only thing that will work is magical cloth- the sort they make at the Mage\'s Guild. " + "I have some experience at making alterations with that- even Mages want their robes letting out from time to time...\" He looks doubtfully at the list of measurements again. " + "\"I\'m not sure that even an Apprentice\'s robes will do, it\'ll have to be a full Wizard\'s Robe to provide sufficient support. " + "If you can get me a Wizard\'s Robe, I think that I should be able to make Sampson some new pants. " + "And of course I\'ll pay you back for the robe- I\'ll just add it to HIS bill.\" ", true);
                                        break;
                                    case 1:
                                        questAdvance(horseQuestClothes);
                                        doEvent(Tailor);
                                        scene("\t\"Ah, of course!\" The tiger\'s face lights up with pleasure. He takes the robe to the back and begins working on it. " + "Faster than what might otherwise seem possible, he comes back with an extremely large pair of pants, heavily patched with gaudy material from the wizard\'s robe. " + "\n\t\"There you are sir. Is there anything else I can help you with?\" ", true);
                                        removeItem(horsePantsBroke);
                                        expendItem(invArray[itemFind(WizardsRobes)]);
                                        getItem(horsePantsFixed);
                                        doGold(15);
                                }
                                break;
                            case 13:
                                scene("You leave the tailor\'s shop. ", true);
                                endEvent(MarketSquare);
                                break;
                            default:
                                if (btnchc < 10) {
                                    tryTailor(tailorArray[btnchc - 1]);
                                }
                        }
                    };
                    break;
                case this.Hospital:
                    this.scene("\t" + this.Hospital.Description + "\n\t", true);
                    this.randomNPC(1);
                    switch (this.dXY(1, 3)) {
                        case 1:
                            this.scene("A stuffed " + this.NPC1.species.name + " is dragged through the waiting area on a gurney. " + this.capFirst(this.NPC1.gender.his) + " bloated stomach is so large four strong orderlies brace against it to prevent the unconscious fur from rolling to the floor. ", false);
                            break;
                        case 2:
                            this.randomNPC(2);
                            this.scene("A stuffed " + this.NPC1.species.name + " is dragged through the waiting area on a gurney. " + this.capFirst(this.NPC1.gender.his) + " bloated stomach is so large that eight strong orderlies brace against it to prevent the unconscious fur from rolling to the floor. " + "With a mighty groan, the gurney collapses under the colossal weight of its rider. " + this.capFirst(this.NPC2.species.article) + " " + this.NPC2.species.name + " orderly falls directly in the path of the overfed patient and cries out as " + this.NPC2.gender.he + "’s crushed under the mountainous stomach. " + "One of the other orderlies just sighs and throws the knocked down " + this.NPC2.species.name + " " + "over his shoulder and follows the rest of the group as they roll the patient into one of the side rooms. ", false);
                            break;
                        default:
                            this.scene("", false);
                    }
                    break;
                case this.HospitalInfirmary:
                    if (this.hasQuest(this.eatingContest) == false) {
                        this.getQuest(this.eatingContest);
                        tempQuest = this.questArray[this.questFind(this.eatingContest)];
                        this.randomNPC(1);
                        tempQuest.questNPC = this.NPC1;
                    }
                    if (this.questStage(this.eatingContest) == 0) {
                        tempQuest2 = this.questArray[this.questFind(this.eatingContest)];
                        this.createNPC(1, tempQuest2.questNPC.species, tempQuest2.questNPC.gender);
                        this.scene("\tA large " + this.NPC1.species.name + " lies on a matress placed on the floor, " + this.NPC1.gender.his + " " + this.NPC1.species.furBelly + " spherical gut swollen to a massive size. " + this.capFirst(this.NPC1.gender.he) + " looks to be in constant pain as " + this.NPC1.gender.he + " moves about in " + this.NPC1.gender.his + " makeshift bed, obviously too big for any conventional stretcher. ", true);
                        this.clearView();
                        this.btntxt(1, "Talk to " + this.NPC1.gender.him);
                        this.leaveButton(13);
                        this.listen = function ():void {
                            if (btnchc == 13) {
                                scene("\n\tYou decide it\'s probably best not to disturb " + NPC1.gender.him + " and leave " + NPC1.gender.him + " to digest in peace. ", false);
                                endEvent(Hospital);
                            }
                            if (btnchc == 1) {
                                scene("\n\t\"Hello,\" the " + NPC1.species.name + " grunts in pain between short breaths, \"Sorry about this, but could you please take my place?\" the " + NPC1.species.name + " rubs " + NPC1.gender.his + " gut to help soothe the discomfort. " + "\"I got a bit nervous before the contest, so I did some eating to relax,\" another groan, \"I have a bet on someone else losing...\" " + "\n\tAs you inquire further, you start to build the story up bit by bit between " + NPC1.gender.his + " constant groans, grunts of pain and shortness of breath. " + "There is an eating contest that happens every so often. " + "You pay to join and if you beat the others, you get a gold prize. " + capFirst(NPC1.gender.he) + "\'s willing to forego the prize and let you take " + NPC1.gender.his + " place, but " + NPC1.gender.he + " asks you to try and beat the champion. ", false);
                                clearView();
                                btntxt(11, "Accept");
                                btntxt(13, "Decline");
                                listen = function ():void {
                                    if (btnchc == 11) {
                                        scene("\n\tYou don\'t know how you think you\'ll fare, but you can\'t help but lick your lips in anticipation of more food. " + "And with the abundance of food this year, it\'s bound to be even tastier. " + "You happily agree and " + NPC1.gender.he + " gives you a card with the number 4 on it. " + "\"This is your seat number. It\'s being hosted at the dairy farm, so don\'t miss the contest.\" ", false);
                                        questAdvance(eatingContest);
                                        repEatingContest = 1;
                                    }
                                    if (btnchc == 13) {
                                        scene("\n\tYou don\'t know how you think you\'ll fare, so you decline " + NPC1.gender.his + " offer. " + "\"Fair enough suit yourself, but if you change your mind I\'m sure I\'ll still be here.\" " + capFirst(NPC1.gender.he) + " belches and continues to rub " + NPC1.gender.his + " taught gurgling stomach. " + "\"I\'m pretty sure I won\'t be getting out of here for a while.\" ", false);
                                    }
                                    endEvent(Hospital);
                                };
                            }
                        };
                    }
                    else {
                        this.scene("\tSeveral hospital beds line each wall of the long infirmary. " + "Almost every single one has a fur in some form of distess laying upon them. " + "Several beds appear to have been crushed under a great weight and meerly left that way, " + "and it\'s easy to tell how they got that way as most of the crushed beds have an incredibly overstuffed and/or massively obese fur laying upon them. " + "There\'s also a reasonable number of furs with legitimate injuries like bites and lacerations resting up with bandages covering them, " + "although the overfed furs seem to outnumber the others just by virtue of taking up so much space. ", false);
                        this.clearView();
                        this.leaveButton(13);
                        this.listen = function ():void {
                            endEvent(Hospital);
                        };
                    }
            }
            switch (ID) {
                case this.ForestHub:
                    this.scene("\tYou " + this.walk() + " off the beaten path into the dense forest. ", true);
                    break;
                case this.ForestEvent:
                    switch (this.eventRandomization(this.forestTravel)) {
                        case 1:
                            switch (this.eventRandomization(this.forestTravelSpecial)) {
                                case 1:
                                    this.locationTravel(this.ForestFeast);
                                    break;
                                case 2:
                                    this.locationTravel(this.GingerbreadHouse);
                                    break;
                                case 3:
                                    this.locationTravel(this.StoreRoom);
                                    break;
                                default:
                                    this.locationTravel(this.alphaWolf);
                            }
                            break;
                        case 2:
                            this.combatEvent(this.ForestHub.enemies[this.dXY(0, this.ForestHub.enemies.length - 1)]);
                            this.locationUpdate(this.ForestHub);
                            if (this.enemyt.introduction == "") {
                                this.scene("\tAs you adventure through the forest, you suddenly run into " + this.enemyt.article + " " + this.enemyt.name + "! ", true);
                            }
                            if (this.enemyt.introduction != "") {
                                this.scene("\t" + this.enemyt.introduction, true);
                            }
                            break;
                        case 3:
                            this.scene("\tYou find a clearing ahead. As you approach closer you find it is one of the roads out of the city! Do you want to leave? ", true);
                            this.choiceButton();
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        switch (dXY(1, 2)) {
                                            case 1:
                                                endEvent(WestRoad);
                                                scene("\tYou emerge from the woods and find yourself on the western road. ", true);
                                                break;
                                            default:
                                                endEvent(EastRoad);
                                                scene("\tYou emerge from the woods and find yourself on the eastern road. ", true);
                                        }
                                        break;
                                    case 13:
                                        endEvent(ForestHub);
                                        scene("\tYou decide to stay in the forest for a while longer. ", true);
                                }
                            };
                            break;
                        default:
                            switch (this.dXY(1, 8)) {
                                case 1:
                                    this.scene("\tAs you travel through the forest, you come across a small tree bearing fruit. You each up and pick the only ripe looking fruit. ", true);
                                    this.endEvent(this.ForestHub);
                                    switch (this.dXY(1, 2)) {
                                        case 1:
                                            this.getItem(this.orange);
                                            break;
                                        case 2:
                                            this.getItem(this.Apple);
                                    }
                                    break;
                                case 2:
                                    treeItem = this.Apple;
                                    this.scene("\tAs you travel through the forest you come across a massive " + treeItem.Name + " tree. " + "All of the branches appear to have been bent under a massive bounty of fruit, but they\'ve been picked almost completely bare. " + "Laying on the ground around the tree are several of the fattest deer, racoons, squirrels and other forest animals you\'ve seen. " + "Each of them has a bulging stomach and they are all surrounded by the chewed up remains of " + treeItem.Name + "s. " + "You " + this.walk() + " up and poke a deer in the gut, eliciting an annoyed grunt from the blob-like creature. " + "It stretches its neck out and picks up the nearest remains of an " + treeItem.Name + " and starts chewing it again as it goes back to sleep. " + "You look up and see there\'s one remaining " + treeItem.Name + " that the other animals couldn\'t reach and pluck it. ", true);
                                    this.endEvent(this.ForestHub);
                                    this.getItem(treeItem);
                                    break;
                                case 3:
                                    this.scene("\tAs you travel through the forest you hear the faint sound of trickling water. " + "As you follow the sound, you find a small waterfall pouring from a cliff above. " + "At the base of the waterfall you find a small pile of flasks. Most of them are broken, but one of them is still in pristine condition. " + "You look around and it doesn\'t seem like anyone\'s been here recently. Whoever owned these left them here long ago. " + "You pick up the flask and fill it up from the waterfall. ", true);
                                    this.endEvent(this.ForestHub);
                                    this.getItem(this.WaterFlask);
                                    break;
                                case 4:
                                    this.scene("\tYou wander into a small clearing, in the middle of which you see a large stump. " + "You cross the clearing and approach the stump, upon which you find a small wooden box. " + "It looks rather simple, but has a few strange words carved into the top in some language you cannot decipher. " + "\n\tYou open the lid and find a small strange diamond shaped cookie with white frosting on top, while a few crumbs lie about it from where others must have once been. " + "You take it, and replaced the box where you found it. ", true);
                                    this.endEvent(this.ForestHub);
                                    this.getItem(this.OddCookie);
                                    break;
                                case 5:
                                    this.randomNPC(1);
                                    foundItem = this.Apple;
                                    this.chance = this.d100();
                                    if (this.chance > 90) {
                                        foundItem = this.Trident;
                                    }
                                    else if (this.chance > 75) {
                                        foundItem = this.Apple;
                                    }
                                    else if (this.chance > 40) {
                                        foundItem = this.SmallHealthPotion;
                                    }
                                    else {
                                        foundItem = this.Cheeseburger;
                                    }
                                    this.scene("\tAs you " + this.walk() + " through the forest, you start to faintly hear the sounds of a struggle. " + "As you stealthily make your way through the underbrush towards the noise, you come across " + this.NPC1.species.article + " " + this.NPC1.species.name + " entangled in the tendrils of a mass of syrupy vines. " + this.capFirst(this.NPC1.gender.he) + "\'s quite clearly fighting a losing battle as " + this.NPC1.gender.he + "\'s become hopelessly entangled in the vines\' grasp with several of them crammed in his mouth. " + this.capFirst(this.NPC1.gender.his) + " " + this.NPC1.species.furBelly + " " + this.NPC1.species.furred + " belly has shredded through " + this.NPC1.gender.his + " leather armor as " + this.NPC1.gender.his + " stomach has been inflated to a grotesque size. " + "The syrup soaked " + this.NPC1.species.name + "\'s movements become more and more frantic as " + this.NPC1.gender.he + " approaches " + this.NPC1.gender.his + " bursting point. ", false);
                                    if (this.optionsPopping) {
                                        this.scene("\n\tYou can almost see " + this.NPC1.gender.his + " enormously bloated stomach stretch fuller and fuller as syrup is pumped into the helpless " + this.NPC1.species.name + ". " + "With a final loud gurgle, the poor " + this.NPC1.species.name + " explodes in a shower of syrup. " + "You duck for cover and when you stand back up you find nothing left behind of the " + this.NPC1.species.name + ". " + "You pause in surprise for a moment before you carefully creep forawrd and survey the scene. " + "After poking the limp vines a few times, you confirm that it\'s been entirely drained of syrup and merely hang limply from the tree. ", false);
                                        if (foundItem.Name != this.Apple.Name) {
                                            this.scene("Searching the syrupy ground, you manage to find " + foundItem.article + " " + foundItem.Name + "! ", false);
                                        }
                                        if (foundItem.Name == this.Apple.Name) {
                                            this.scene("Searching the syrupy ground, you manage to find a small bag of gold! ", false);
                                        }
                                    }
                                    if (!this.optionsPopping) {
                                        this.scene("\n\tThere\'s a creaking noise which you first attribute to the " + this.NPC1.species.name + "\'s overstretched stomach, " + "but soon afterwards there\'s a snapping noise as the vines break under " + this.NPC1.gender.his + " weight. " + this.capFirst(this.NPC1.gender.he) + " falls on the ground roughly and slowly rolls onto " + this.NPC1.gender.his + " back with " + this.NPC1.gender.his + " sticky belly sloshing back and forth. " + "Before you have a chance to come out from your hiding spot, a large feral wolf leaps out from some bushes on the opposite side from you. " + "Apparently the wolf had been lying in wait for its opportunity at a free meal, " + "because before the " + this.NPC1.species.name + " realizes " + this.NPC1.gender.he + "\'s under attack again, the wolf already has " + this.NPC1.gender.his + " legs in his mouth. " + "The " + this.NPC1.species.name + " puts up a weak struggle, evidently far too painfully inflated with syrup to put up much of a fight. " + "Before you can react, the previously slim-gutted wolf has swallowed the syruped " + this.NPC1.species.name + " down and is already waddling his way back into the forest. " + "Now that the maelstrom of activity is over, you leave your hiding spot in the bushes and survey the combat zone. " + "After poking through the syrupy ground, you finally find ", false);
                                        if (foundItem.Name != this.Apple.Name) {
                                            this.scene(foundItem.article + " " + foundItem.Name + "! ", false);
                                        }
                                        if (foundItem.Name == this.Apple.Name) {
                                            this.scene("a small bag of gold! ", false);
                                        }
                                    }
                                    this.endEvent(this.ForestHub);
                                    if (foundItem.Name != this.Apple.Name) {
                                        this.getItem(foundItem);
                                    }
                                    if (foundItem.Name == this.Apple.Name) {
                                        this.doGold(this.dXY(26, 33));
                                    }
                                    break;
                                default:
                                    this.ambientTravelScene(this.ForestHub);
                                    this.endEvent(this.ForestHub);
                            }
                    }
                    break;
                case this.ForestFeast:
                    this.appView(0);
                    switch (this.specialEvent) {
                        case 0:
                            this.scene("\tYou come accross a mysterious table sitting in a clearing near the woods. Perhaps even more mysteriously, it is covered by a feast fit for a dozen high class noble types. " + "There is only one place set at the table. On the end nearest you there is a very ornate and old looking wooden chair is set in front a table setting of fine silverware. " + "You can\'t help but feel this is somewhat suspicious. ", true);
                            this.btntxt(11, "Dig in!");
                            this.leaveButton(13);
                            this.clrchc();
                            this.listen = function ():void {
                                if (btnchc == 11) {
                                    specialEvent = 11;
                                }
                                if (btnchc == 13) {
                                    specialEvent = 12;
                                }
                                doEvent(ForestFeast);
                            };
                            break;
                        case 11:
                            this.scene("\tYou take a seat at the head of the table. The chair\'s even more comfortable than it looked. " + "You eagerly pick up your knife and fork and carve yourself off a huge hunk of a ham sitting nearest you. " + "You eagerly cram it in your mouth and are greeted by a sweet juicy explosion of flavor. You lean back and close your eyes as you savor some of the tastiest meat you\'ve ever eaten. " + "\n\tWhen you open your eyes though, you are shocked to see that the chair has wrapped several varnished wooden tendrils around your arms and feet. " + "The knife and fork fly out of your hands and of their own volition begin carving out a hunk of turkey half the size of your head! " + "The fork slowly levitates back over to you, wobbling under the weight of it\'s offering. The sharp knife pokes you insistently in the gut, as if coercing you to open your mouth. ", true);
                            this.doConsume(3, 0, 1.5);
                            this.eHEA = 100;
                            this.btntxt(11, "Struggle");
                            this.clrchc();
                            this.listen = function ():void {
                                if (btnchc == 11) {
                                    specialEvent = 111;
                                }
                                doEvent(ForestFeast);
                            };
                            break;
                        case 111:
                            this.eHEA = this.eHEA - this.STR;
                            if (this.eHEA > 0) {
                                this.scene("\tYou struggle against the the thick wooden tendrils of the chair. ", true);
                                if (this.eHEA < 100) {
                                    this.scene("They give slightly but you still can\'t quite break free. ", false);
                                }
                                this.scene("\n\tYou turn your head away and clench your mouth shut as the fork drunkenly tries to jab the juicy hunk of turkey in your mouth. " + "The knife jabs you in the gut again, almost hard enough to draw blood, and you yelp in pain. The fork seizes this opportunity to cram the whole hunk of turkey in your mouth. " + "You reflexively close your mouth as another explosion of rich savory flavor hits your tastebuds. The fork hovers around your throat menacingly, clearly threatening you into swallowing. " + "\n\tAfter weighing your options for a short while, you\'re overcome by the deliciousness and swallow hard, sending the massive hunk of bird down your throat, stretching it out painfully. ", false);
                                this.doConsume(8, 0, 4);
                                this.updateStats();
                                if (this.FUL <= this.maxFUL) {
                                    this.scene("Seemingly pleased with this, the knife zooms off again and struggles to pick up a " + this.sayDistance(1) + " thick slab of steak. The knife flys off to join him. ", false);
                                    this.btntxt(11, "Struggle");
                                    this.clrchc();
                                    this.listen = function ():void {
                                        if (btnchc == 11) {
                                            specialEvent = 111;
                                        }
                                        doEvent(ForestFeast);
                                    };
                                }
                                if (this.FUL > this.maxFUL) {
                                    this.scene("Your stomach stretches around it as well and you realize you\'ve reached your limit. Your stomach is stuffed absolutely full and you\'re having trouble staying conscious. " + "Your cutlery captors are unmoved by your bloated groans of protest. Once again the fork wobbles into view, carrying another large chunk of food. " + "Your eyes drift shut even as the fork crams more food in your mouth. ", false);
                                    this.nextView();
                                    this.clrchc();
                                    this.listen = function ():void {
                                        if (btnchc == 12) {
                                            specialEvent = 9;
                                        }
                                        doEvent(ForestFeast);
                                    };
                                }
                            }
                            if (this.eHEA <= 0) {
                                this.scene("\tYou struggle against your bonds and manage to break free from your wooden captor, sending splinters flying in the air. " + "You decide haste is the better part of valor and make a hasty exit from the forest clearing. The knife begins to follow you, the fork trailing behind while still wielding a huge hunk of food. " + "They don\'t follow you far though before they dejectedly make their way back to their table. ", true);
                                this.doXP(20);
                                this.endEvent(this.ForestHub);
                            }
                            break;
                        case 9:
                            this.doConsume(15, 5, 10);
                            this.doRest();
                            this.scene("\tYour eyes drift open as you look up into a sea of tree branches. Looking around you find yourself laying on top of the table. " + "You look down at your " + this.waist() + " stomach and finally realize how much more stuffed you were than when you passed out. " + "You try to get up, but your arms and legs are pinned to the table. You look over and see your arms are are fixed to the table by makeshift manacles of bent cutlery. " + "You try to move your jaws and also find that they\'re being pried open by two spoons. " + "\n\tThe top spoon pushes up on the roof of your mouth, forcing you to lay your head back on the table. " + "A large flagon of mead floats into view and tips over, pouring a massive deluge of alcohol down your throat. " + "You sputter and try to gulp it down as fast as you can, feeling your stomach slowly stretch even larger. " + "\n\tNo sooner have you swallowed the last of it down before you see a huge cast iron pot slowly hop down the table, making a large thud that rattles the table with every jump. " + "A soup ladle larger than your cupped hands floats out of the massive pot before almost gently pouring a ladlefull of warm savory stew down your throat. " + "You struggle to swallow it down as the ladle floats down to massage your stomach as best a floating soup ladle can. " + "It gives you a moment to breathe before going back and pouring another huge soup ladle full of stew down your throat. " + "It slowly repeats this process several times, each time going back and massaging your stomach. Sometimes eliciting a belch from you when you have a moment to breathe. ", true);
                            this.doConsume(10, 10, 10);
                            this.scene("Each time you hope it\'s the end, but there\'s only more and more and more. Your stomach keeps stretching beyond it\'s normal limits. " + "Between being completely stuffed full of rich warm stew and the gentle ministrations of the soup ladle\'s massages, " + "you slowly drift into unconsciousness even as the ladle dutifully serves you more stew. ", false);
                            this.stuffToBursting();
                            this.defeatEvent(this.overeating);
                            break;
                        case 12:
                            this.scene("\tYou decide caution is the better part of valor and leave the weird forest food alone. ", true);
                            this.endEvent(this.ForestHub);
                    }
                    break;
                case this.StoreRoom:
                    this.appView(0);
                    this.clearView();
                    switch (this.specialEvent) {
                        case 0:
                            this.scene("\tAs you adventure through the forest, you come upon a building in a small clearing ahead. ", true);
                            this.btntxt(11, "Approach");
                            this.leaveButton(13);
                            this.listen = function ():void {
                                if (btnchc == 11) {
                                    specialEvent = 1;
                                }
                                if (btnchc == 13) {
                                    specialEvent = 2;
                                }
                                doEvent(StoreRoom);
                            };
                            break;
                        case 1:
                            this.scene("\tYou approach the building and discover it to be a smallish shack. " + "There\'s a door on one end and a small window up on the opposite side of the building. ", true);
                            this.btntxt(1, "Door");
                            this.btntxt(3, "Window");
                            this.leaveButton(5);
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    specialEvent = 3;
                                }
                                if (btnchc == 3) {
                                    specialEvent = 11;
                                }
                                if (btnchc == 5) {
                                    specialEvent = 2;
                                }
                                doEvent(StoreRoom);
                            };
                            break;
                        case 2:
                            this.scene("\tYou decide to leave other people\'s property alone and head back into the forest. ", true);
                            this.specialEvent = 0;
                            this.locationUpdate(this.ForestHub);
                            this.nextButton();
                            break;
                        case 3:
                            this.scene("\tYou try the door, but unfortunately find it locked. ", true);
                            this.btntxt(1, "Break it down");
                            this.btntxt(3, "Window");
                            this.leaveButton(5);
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    specialEvent = 31;
                                }
                                if (btnchc == 3) {
                                    specialEvent = 11;
                                }
                                if (btnchc == 5) {
                                    specialEvent = 2;
                                }
                                doEvent(StoreRoom);
                            };
                            break;
                        case 4:
                            this.scene("\tYou try to squeeze through, but unfortunately you\'re just too big to fit through the window. ", true);
                            this.btntxt(1, "Door");
                            this.leaveButton(5);
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    specialEvent = 3;
                                }
                                if (btnchc == 5) {
                                    specialEvent = 2;
                                }
                                doEvent(StoreRoom);
                            };
                            break;
                        case 5:
                            this.scene("\tDejectedly, you " + this.walk() + " back off into the forest. ", true);
                            this.endEvent(this.ForestHub);
                            break;
                        case 31:
                            this.scene("\tYou look at the door, assessing its weak points before you go to ram the door. " + "You run through several ideas of how you\'ll ram the door down to get inside. " + "After you\'re satisfied with your brilliant plan, you do a run up and attempt to ram the door in. ", true);
                            this.doStamina(-10);
                            if (this.STR > 80) {
                                this.scene("After a few attempts, the door splinters and you crash through. ", false);
                                this.nextButton();
                                this.listen = function ():void {
                                    specialEvent = 311;
                                    if (btnchc == 12) {
                                        doEvent(StoreRoom);
                                    }
                                };
                            }
                            else {
                                this.scene("You ram your shoulder up against the door, kick it, headbutt it and throw sticks and stones at it. " + "The door shows no signs of budging and eventually you give up, sore and tired. ", false);
                                this.btntxt(3, "Window");
                                this.leaveButton(5);
                                this.listen = function ():void {
                                    if (btnchc == 3) {
                                        specialEvent = 11;
                                    }
                                    if (btnchc == 5) {
                                        specialEvent = 2;
                                    }
                                    doEvent(StoreRoom);
                                };
                            }
                            break;
                        case 311:
                            this.scene("\tYou you step through the broken door and rub your " + this.playerSpecies.hands + " together greedily upon the sight of the massive hoards of food. ", false);
                            this.btntxt(1, "Rack of ribs");
                            this.btntxt(2, "Roast Duck");
                            this.btntxt(3, "Rope of sausages");
                            this.btntxt(4, "Barrel of corn");
                            this.btntxt(5, "Crate of apples");
                            this.btntxt(6, "Bag of oats");
                            this.btntxt(7, "Keg of wine");
                            this.btntxt(8, "Barrel of water");
                            this.leaveButton(9);
                            this.listen = function ():void {
                                specialEvent = 3111;
                                switch (btnchc) {
                                    case 1:
                                        doConsume(5, 0, 2.5);
                                        doEvent(StoreRoom);
                                        scene("You tear off huge hunks of succulent meat from a grilled rack of ribs, barbecue sauce covering your muzzle. ", false);
                                        break;
                                    case 2:
                                        doConsume(4, 0, 2);
                                        doEvent(StoreRoom);
                                        scene("You pick up a huge roast duck and tear off strips off juicy meat and swallow them down. ", false);
                                        break;
                                    case 3:
                                        doConsume(3, 0, 1.5);
                                        doEvent(StoreRoom);
                                        scene("You pick up a rope of smoked sausages and swallow them down whole, one after another. ", false);
                                        break;
                                    case 4:
                                        doConsume(3, 0, 1.5);
                                        doEvent(StoreRoom);
                                        scene("You reach into a barrel of corn and pull out several juicy cobs dripping with butter. " + "You cram entire ears of corn in your mouth and pull out the cobs, stripping all the kernels off as you do so. ", false);
                                        break;
                                    case 5:
                                        doConsume(3, 0, 1.5);
                                        doEvent(StoreRoom);
                                        scene("You pull out an armload of some of the largest juiciest red apples you\'ve ever seen. " + "You cram one into your mouth whole and crunch down creating a sweet juicy explosion of apple. You swallow it down and repeat this process on several other apples. ", false);
                                        break;
                                    case 6:
                                        doConsume(4, 0, 2);
                                        doEvent(StoreRoom);
                                        scene("You cram your entire head into a bag of oats and start sucking them down with reckless abandon like a wild animal. ", false);
                                        break;
                                    case 7:
                                        doConsume(0, 3, 1.5);
                                        doEvent(StoreRoom);
                                        scene("You decide to quench your thirst as you hold a small keg of wine over your head. " + "You put the tap in your mouth and open it up and suck down the sweet aromatic drink, making you feel slightly tipsy. ", false);
                                        break;
                                    case 8:
                                        doConsume(0, 3, 0);
                                        doEvent(StoreRoom);
                                        scene("You dunk your whole head into a barrel of water and start sucking it down, your belly slowly stretching out as it fills with pure clean water. ", false);
                                        break;
                                    case 9:
                                        specialEvent = 31119;
                                        doEvent(StoreRoom);
                                }
                            };
                            break;
                        case 3111:
                            if (this.alive()) {
                                this.scene("\tYou look around for what to eat next. ", false);
                                this.btntxt(1, "Rack of ribs");
                                this.btntxt(2, "Roast Duck");
                                this.btntxt(3, "Rope of sausages");
                                this.btntxt(4, "Barrel of corn");
                                this.btntxt(5, "Crate of apples");
                                this.btntxt(6, "Bag of oats");
                                this.btntxt(7, "Keg of wine");
                                this.btntxt(8, "Barrel of water");
                                this.leaveButton(9);
                                this.listen = function ():void {
                                    switch (btnchc) {
                                        case 1:
                                            doConsume(5, 0, 2.5);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You tear off huge hunks of succulent meat from a grilled rack of ribs, barbecue sauce covering your muzzle. ", false);
                                            }
                                            break;
                                        case 2:
                                            doConsume(4, 0, 2);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You pick up a huge roast duck and tear off strips off juicy meat and swallow them down. ", false);
                                            }
                                            break;
                                        case 3:
                                            doConsume(3, 0, 1.5);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You pick up a rope of smoked sausages and swallow them down whole, one after another. ", false);
                                            }
                                            break;
                                        case 4:
                                            doConsume(3, 0, 1.5);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You reach into a barrel of corn and pull out several juicy cobs dripping with butter. " + "You cram entire ears of corn in your mouth and pull out the cobs, stripping all the kernels off as you do so. ", false);
                                            }
                                            break;
                                        case 5:
                                            doConsume(3, 0, 1.5);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You pull out an armload of some of the largest juiciest red apples you\'ve ever seen. " + "You cram one into your mouth whole and crunch down creating a sweet juicy explosion of apple. You swallow it down and repeat this process on several other apples. ", false);
                                            }
                                            break;
                                        case 6:
                                            doConsume(4, 0, 2);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You cram your entire head into a bag of oats and start sucking them down with reckless abandon like a wild animal. ", false);
                                            }
                                            break;
                                        case 7:
                                            doConsume(0, 3, 1.5);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You decide to quench your thirst as you hold a small keg of wine over your head. " + "You put the tap in your mouth and open it up and suck down the sweet aromatic drink, making you feel slightly tipsy. ", false);
                                            }
                                            break;
                                        case 8:
                                            doConsume(0, 3, 0);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You dunk your whole head into a barrel of water and start sucking it down, your belly slowly stretching out as it fills with pure clean water. ", false);
                                            }
                                            break;
                                        case 9:
                                            specialEvent = 31119;
                                            doEvent(StoreRoom);
                                    }
                                };
                            }
                            else {
                                this.combatEvent(this.StoreRoomOwner);
                                this.scene("\tAfter that last swallow you finally feel too stuffed to even stay awake any more. You fwomp onto your back with a thud and rub your overly full belly. " + "Just as you\'re about to pass out, you suddenly hear someone whistling as the sound of footsteps make their way up to the shed door. " + "You attempt to get up to try to escape, but you\'re practically too stuffed to keep your eyes open. " + "\n\tAs you hear someone fumbling with a set of keys, you fall back on the floor and unwillingly start drifting off to sleep. " + "You stay awake just long enough to see " + this.enemyt.species.article + " " + this.enemyt.species.name + " walk in and shout " + "\"What the hell!\" in a country drawl just before you pass out in an overstuffed stupor. ", false);
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        specialEvent = 9;
                                    }
                                    doEvent(StoreRoom);
                                };
                            }
                            break;
                        case 31119:
                            this.scene("\tYou decide to get up and leave the feast. ", false);
                            if (this.waistDiameter() < 36) {
                                this.scene("You squeeze through the door easily, having no troubles and quickly dash off before the owner comes back. ", false);
                                this.endEvent(this.ForestHub);
                            }
                            else {
                                this.setEnemy(this.StoreRoomOwner);
                                this.scene("You try to get through the doorway before your progress is suddenly impeeded by your sheer width struggling to get through the door. " + "You push and pull, grunt and strain before you hear the whistling tune of somebody coming! \n\t", false);
                                this.eHEA = (this.waistDiameter() - 20) * 25;
                                attempts = 3;
                                this.clearView();
                                this.btntxt(1, "Struggle");
                                this.listen = function ():void {
                                    if (btnchc == 1) {
                                        eHEA = eHEA - (STR + AGI) * 0.5;
                                        attempts--;
                                        doStamina(-10);
                                        if (eHEA < 0) {
                                            scene("You push and pull with all your might, popping free from the door frame. " + "Just in time too, as you see " + enemyt.species.article + " " + enemyt.species.name + " walking down the path towards the house. " + "They stop as they see you bursting through the front door and give chase, yelling at you angrily. ", false);
                                            endEvent(ForestHub);
                                        }
                                        else {
                                            if (attempts >= 2) {
                                                scene("You grab on to the door frame and attempt to pulse yourself through. You can hear the wood splinter but you still can\'t quite get free. ", false);
                                            }
                                            if (attempts == 1) {
                                                scene("Alas, as much as you heave and ho, you cannot break free. " + "In the distance you see the " + enemyt.species.name + " stop and stare at you from the path. He starts running towards you in a rage, a stick in their hand. ", false);
                                            }
                                            if (attempts <= 0) {
                                                scene("He gives you an incredibly powerful kick to your gut and you break free from the door frame, falling onto your back. ", false);
                                                HEA = HEA - 7;
                                                specialEvent = 8;
                                                if (HEA < 1) {
                                                    HEA = 1;
                                                }
                                                startFight();
                                            }
                                        }
                                    }
                                };
                            }
                            break;
                        case 11:
                            this.scene("\tYou go to the back side of the shack where there\'s a stack of empty crates you can stand on to look through the window. " + "When you peer through the window you find a single gas lantern illuminating a store room crammed to the rafters with food. " + "The window is unlocked and looks just large enough for someone to fit through. ", true);
                            this.btntxt(3, "Climb in");
                            this.leaveButton(5);
                            this.listen = function ():void {
                                if (btnchc == 5) {
                                    specialEvent = 2;
                                }
                                if (btnchc == 3) {
                                    if (waistDiameter() > 20) {
                                        specialEvent = 4;
                                    }
                                    else {
                                        specialEvent = 111;
                                    }
                                }
                                doEvent(StoreRoom);
                            };
                            break;
                        case 111:
                            if (this.waistDiameter() > 15) {
                                this.scene("\tYou just barely manage to squeeze through the window, your gut brushing heavily against the window frame. ", true);
                            }
                            else if (this.waistDiameter() > 10) {
                                this.scene("\tWith some difficulty, you manage to squeeze your way through the small window. Your gut almost grazing the bottom of the window. ", true);
                            }
                            else {
                                this.scene("\tYou climb through the small window rather easily. ", true);
                            }
                            this.scene("You land on the ground and rub your " + this.playerSpecies.hands + " together greedily as you look around at more food than most people have ever seen. ", false);
                            this.btntxt(1, "Rack of ribs");
                            this.btntxt(2, "Roast Duck");
                            this.btntxt(3, "Rope of sausages");
                            this.btntxt(4, "Barrel of corn");
                            this.btntxt(5, "Crate of apples");
                            this.btntxt(6, "Bag of oats");
                            this.btntxt(7, "Keg of wine");
                            this.btntxt(8, "Barrel of water");
                            this.leaveButton(9);
                            this.listen = function ():void {
                                specialEvent = 11111;
                                switch (btnchc) {
                                    case 1:
                                        doConsume(5, 0, 2.5);
                                        doEvent(StoreRoom);
                                        scene("You tear off huge hunks of succulent meat from a grilled rack of ribs, barbecue sauce covering your muzzle. ", false);
                                        break;
                                    case 2:
                                        doConsume(4, 0, 2);
                                        doEvent(StoreRoom);
                                        scene("You pick up a huge roast duck and tear off strips off juicy meat and swallow them down. ", false);
                                        break;
                                    case 3:
                                        doConsume(3, 0, 1.5);
                                        doEvent(StoreRoom);
                                        scene("You pick up a rope of smoked sausages and swallow them down whole, one after another. ", false);
                                        break;
                                    case 4:
                                        doConsume(3, 0, 1.5);
                                        doEvent(StoreRoom);
                                        scene("You reach into a barrel of corn and pull out several juicy cobs dripping with butter. " + "You cram entire ears of corn in your mouth and pull out the cobs, stripping all the kernels off as you do so. ", false);
                                        break;
                                    case 5:
                                        doConsume(3, 0, 1.5);
                                        doEvent(StoreRoom);
                                        scene("You pull out an armload of some of the largest juiciest red apples you\'ve ever seen. " + "You cram one into your mouth whole and crunch down creating a sweet juicy explosion of apple. You swallow it down and repeat this process on several other apples. ", false);
                                        break;
                                    case 6:
                                        doConsume(4, 0, 2);
                                        doEvent(StoreRoom);
                                        scene("You cram your entire head into a bag of oats and start sucking them down with reckless abandon like a wild animal. ", false);
                                        break;
                                    case 7:
                                        doConsume(0, 3, 1.5);
                                        doEvent(StoreRoom);
                                        scene("You decide to quench your thirst as you hold a small keg of wine over your head. " + "You put the tap in your mouth and open it up and suck down the sweet aromatic drink, making you feel slightly tipsy. ", false);
                                        break;
                                    case 8:
                                        doConsume(0, 3, 0);
                                        doEvent(StoreRoom);
                                        scene("You dunk your whole head into a barrel of water and start sucking it down, your belly slowly stretching out as it fills with pure clean water. ", false);
                                        break;
                                    case 9:
                                        specialEvent = 1119;
                                        doEvent(StoreRoom);
                                }
                            };
                            break;
                        case 1119:
                            this.scene("\tYou decide to leave this treasure trove of food, and just in time it seems, as you can just now hear footsteps and whistling as someone approaches the shack. " + "Just as the whistling reaches the door, you make a leap towards the window and run off back into the forest unnoticed. ", true);
                            this.endEvent(this.ForestHub);
                            break;
                        case 11111:
                            if (this.HEA > 0) {
                                this.scene("\tYou look around for what to eat next. ", false);
                                this.btntxt(1, "Rack of ribs");
                                this.btntxt(2, "Roast Duck");
                                this.btntxt(3, "Rope of sausages");
                                this.btntxt(4, "Barrel of corn");
                                this.btntxt(5, "Crate of apples");
                                this.btntxt(6, "Bag of oats");
                                this.btntxt(7, "Keg of wine");
                                this.btntxt(8, "Barrel of water");
                                this.leaveButton(9);
                                this.listen = function ():void {
                                    switch (btnchc) {
                                        case 1:
                                            doConsume(5, 0, 2.5);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You tear off huge hunks of succulent meat from a grilled rack of ribs, barbecue sauce covering your muzzle. ", false);
                                            }
                                            break;
                                        case 2:
                                            doConsume(4, 0, 2);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You pick up a huge roast duck and tear off strips off juicy meat and swallow them down. ", false);
                                            }
                                            break;
                                        case 3:
                                            doConsume(3, 0, 1.5);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You pick up a rope of smoked sausages and swallow them down whole, one after another. ", false);
                                            }
                                            break;
                                        case 4:
                                            doConsume(3, 0, 1.5);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You reach into a barrel of corn and pull out several juicy cobs dripping with butter. " + "You cram entire ears of corn in your mouth and pull out the cobs, stripping all the kernels off as you do so. ", false);
                                            }
                                            break;
                                        case 5:
                                            doConsume(3, 0, 1.5);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You pull out an armload of some of the largest juiciest red apples you\'ve ever seen. " + "You cram one into your mouth whole and crunch down creating a sweet juicy explosion of apple. You swallow it down and repeat this process on several other apples. ", false);
                                            }
                                            break;
                                        case 6:
                                            doConsume(4, 0, 2);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You cram your entire head into a bag of oats and start sucking them down with reckless abandon like a wild animal. ", false);
                                            }
                                            break;
                                        case 7:
                                            doConsume(0, 3, 1.5);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You decide to quench your thirst as you hold a small keg of wine over your head. " + "You put the tap in your mouth and open it up and suck down the sweet aromatic drink, making you feel slightly tipsy. ", false);
                                            }
                                            break;
                                        case 8:
                                            doConsume(0, 3, 0);
                                            doEvent(StoreRoom);
                                            if (HEA > 0) {
                                                scene("You dunk your whole head into a barrel of water and start sucking it down, your belly slowly stretching out as it fills with pure clean water. ", false);
                                            }
                                            break;
                                        case 9:
                                            specialEvent = 11119;
                                            doEvent(StoreRoom);
                                    }
                                };
                            }
                            else {
                                this.combatEvent(this.StoreRoomOwner);
                                this.scene("\tAfter that last swallow you finally feel too stuffed to even stay awake any more. You fwomp onto your back with a thud and rub your overly full belly. " + "Just as you\'re about to pass out, you suddenly hear someone whistling as the sound of footsteps make their way up to the shed door. " + "You attempt to get up to try to escape, but you\'re practically too stuffed to keep your eyes open. " + "\n\tAs you hear someone fumbling with a set of keys, you fall back on the floor and unwillingly start drifting off to sleep. " + "You stay awake just long enough to see " + this.enemyt.species.article + " " + this.enemyt.species.name + " walk in and shout " + "\"What the hell!\" in a country drawl just before you pass out in an overstuffed stupor. ", false);
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        specialEvent = 9;
                                    }
                                    doEvent(StoreRoom);
                                };
                            }
                            break;
                        case 11119:
                            this.scene("\tHaving decided that you\'ve eaten enough, you pick yourself up and prepare to leave. " + "As you do so though, you begin to hear whistling in the distance that sounds like it\'s getting closer. " + "You quickly turn and jump for the window", true);
                            if (this.waistDiameter() < 20) {
                                this.scene(" and fit through. After landing on the outside you run of into the forest.", false);
                                this.endEvent(this.ForestHub);
                            }
                            else {
                                this.eHEA = (this.waistDiameter() - 20) * 25;
                                this.scene(", but you get stuck halfway through. ", false);
                                if (this.eHEA <= 40) {
                                    this.scene("It seems you\'ve gotten somewhat larger since you first entered the window and have become slightly stuck. ", false);
                                }
                                else if (this.eHEA <= 80) {
                                    this.scene("It seems you\'ve grown quite a bit larger since you first entered the window and have become pretty stuck. ", false);
                                }
                                else if (this.eHEA <= 120) {
                                    this.scene("It seems you\'ve grown a whole lot larger since you first entered the window and have become very stuck. ", false);
                                }
                                else if (this.eHEA > 120) {
                                    this.scene("It seems you\'ve grown humongously larger since you first entered the window and have become incredibly stuck. ", false);
                                }
                                this.btntxt(1, "Struggle");
                                this.listen = function ():void {
                                    if (btnchc == 1) {
                                        specialEvent = 111191;
                                    }
                                    doEvent(StoreRoom);
                                };
                            }
                            break;
                        case 111191:
                            this.eHEA = this.eHEA - this.STR;
                            this.scene("You can definitely tell the whistling is getting closer as you try to wrestle your gut through the window. ", true);
                            if (this.eHEA <= 0) {
                                this.scene("You struggle to push yourself out and manage to break free. You waddle off into the forest just in the nick of time. ", false);
                                this.endEvent(this.ForestHub);
                            }
                            else {
                                this.scene("You struggle to squeeze your overstuffed form out of the window, but only manage to make a little headway. ", false);
                                this.btntxt(1, "Struggle");
                                this.listen = function ():void {
                                    if (btnchc == 1) {
                                        specialEvent = 111192;
                                    }
                                    doEvent(StoreRoom);
                                };
                            }
                            break;
                        case 111192:
                            this.scene("You can hear footsteps approaching the door. ", true);
                            this.eHEA = this.eHEA - this.STR;
                            if (this.eHEA <= 0) {
                                this.scene("You continue to try and pull your widened form out of the window and finally manage to pop out. You waddle off into the forest just in the nick of time. ", false);
                                this.endEvent(this.ForestHub);
                            }
                            else {
                                this.scene("Your continued attempts to escape your stuck fate manages to splinter the window frame, but even still you remain trapped by your swollen gut. ", false);
                                this.btntxt(1, "Struggle");
                                this.listen = function ():void {
                                    if (btnchc == 1) {
                                        specialEvent = 111193;
                                    }
                                    doEvent(StoreRoom);
                                };
                            }
                            break;
                        case 111193:
                            this.scene("\tYou can hear someone fumbling with keys. If you\'re going to get out of here, you better do it now. ", true);
                            this.eHEA = this.eHEA - this.STR;
                            if (this.eHEA <= 0) {
                                this.scene("In a hail of splinters, you finally manage to get your fat gut through the smashed out window. " + "As you waddle as fast as you can to the cover of the woods, you can hear loud angered shouting coming from the store room.", false);
                                this.endEvent(this.ForestHub);
                            }
                            else {
                                this.combatEvent(this.StoreRoomOwner);
                                this.scene("With a final heave you desperately try to break free of your confinement, but your huge gut remains stalwart in it\'s attempts to anchor you in the window. " + "A voice behind you angrily shouts \"What the hell are you doin\' \'ere?\" before you\'re yanked back inside. You\'re face to face with an angry " + this.enemyt.species.name + ". " + "He\'s brandishing a big walking stick and appears none too happy with your prescence here. Looks like you\'re going to have to fight your way out. ", false);
                                this.specialEvent = 8;
                                this.startFight();
                            }
                            break;
                        case 8:
                            this.scene("You see the open door behind him and take this opportunity to beat a hasty retreat. ", false);
                            this.btntxt(1, "Run");
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    endEvent(ForestHub);
                                }
                            };
                            break;
                        case 9:
                            this.doRest();
                            this.stuffToBursting();
                            this.scene("\tAn hour later you groggily wake up. " + "As you blink the sleep from your eyes you begin to notice the room swaying back and forth slightly. " + "You also swiftly notice how tremendously overstuffed your gut feels. " + "You look down at your " + this.waist() + " stomach and it\'s even larger than you remembered it being before you passed out. " + "Finally reminded of your recent predicament, you snap your head around to figure out what happened. " + "The sudden movement causes the room to sway even more as you finally realize you\'ve hanging from the store room rafters by your feet. " + "Your vision finally clears and focuses in on your captor grinning evilly at you. " + "\n\t\"Well, nice to see ya\'ll finally woken up!\" he says in a mock jovial tone. " + "\"I\'ve just been takin\' the liberty of helpin\' you enjoy my bounteous provisions. I hope you don\'t mind.\" " + "He motions to a now significantly emptier store room, and the source of your extremely swollen gut is now much less of a mystery. " + "You attempt to shout at him but your attempts are muffled by a gag in your mouth. " + "\n\t\"Oh, no need to thank me.\" he laughs darkly and rubs your swollen gut, " + "\"I\'m just doin\' my part to help a fellow food connoisseur out. Speakin\' o\' which, if your appetite is quite satisfied, I think it\'s about time I have my supper.\" " + "\n\tWith that, the " + this.enemyt.species.name + " opens his jaws wider than you would have thought possible as he engulfs your head and begins swallowing you down. " + "He stops only for a moment at your bulging gut before finally swallowing you down whole, your vision fading to black as he does so. ", true);
                            this.defeatEvent(this.devoured);
                    }
                    break;
                case this.GingerbreadHouse:
                    this.appView(0);
                    switch (this.specialEvent) {
                        case 0:
                            this.setEnemy(this.GingerbreadWitch);
                            this.randomNPC(1);
                            this.scene("\tAs you adventure through the forest, you come upon a building in a small clearing ahead. ", true);
                            this.btntxt(11, "Approach");
                            this.leaveButton(13);
                            this.clrchc();
                            this.listen = function ():void {
                                if (btnchc == 11) {
                                    specialEvent = 1;
                                }
                                if (btnchc == 13) {
                                    specialEvent = 2;
                                }
                                doEvent(GingerbreadHouse);
                            };
                            break;
                        case 2:
                            this.scene("\tYou decide to leave other people\'s property alone and head back into the forest. ", true);
                            this.endEvent(this.ForestHub);
                            break;
                        case 1:
                            this.scene("\tYou find a small cottage that appears to be made entirely of... candy and gingerbread? " + "One corner of the house appears to have been heavily chewed on. The house does look quite delicious. ", true);
                            this.btntxt(1, "Door");
                            this.btntxt(2, "Eat house");
                            this.leaveButton(3);
                            this.clrchc();
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    specialEvent = 11;
                                }
                                if (btnchc == 2) {
                                    specialEvent = 12;
                                }
                                if (btnchc == 3) {
                                    specialEvent = 2;
                                }
                                doEvent(GingerbreadHouse);
                            };
                            break;
                        case 11:
                            this.scene("\tYou " + this.walk() + " into the living room and it\'s furnished entirely with junk food. " + "Gingerbread is used as though it were wood and everything appears to be held together with icing and peppermint for support. " + "\n\tYou see a set of stairs going up to a door and a doorway that leads to the kitchen. ", true);
                            this.btntxt(1, "Stairs");
                            this.btntxt(2, "Kitchen");
                            this.leaveButton(3);
                            this.clrchc();
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    specialEvent = 111;
                                }
                                if (btnchc == 2) {
                                    specialEvent = 112;
                                }
                                if (btnchc == 3) {
                                    specialEvent = 2;
                                }
                                doEvent(GingerbreadHouse);
                            };
                            break;
                        case 111:
                            this.scene("\tYou go up the stairs and through the door at the top. Inside you find a bedroom built with a continuing candy motif. " + "The bedsheets are even made of cotton candy. You can\'t imagine this is a comfortable place to live, in spite of its deliciousness. " + "\n\tYou see a book left open on a desk in the corner. The book looks to be the only thing not made of candy here. ", true);
                            this.btntxt(1, "Read");
                            this.btntxt(3, "Downstairs");
                            this.clrchc();
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    specialEvent = 1111;
                                }
                                if (btnchc == 3) {
                                    specialEvent = 11;
                                }
                                doEvent(GingerbreadHouse);
                            };
                            break;
                        case 1111:
                            this.scene("\tYou start looking through the book. Most of it is written in strange symbols beyond your comprehension, but you can definitely tell this book has something to do with magic. " + "The last few pages are written as a diary though. It seems that whoever lives here is capturing people and fattening them up to devour them. " + "Something about absorbing people as a natural source of magical energy, and the bigger they are, the more power you get. " + "\n\tAs you scan over the last few pages you hear the front door open and the sound of footsteps. ", true);
                            this.btntxt(1, "Downstairs");
                            this.btntxt(3, "Window");
                            this.clrchc();
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    specialEvent = 11111;
                                }
                                if (btnchc == 3) {
                                    specialEvent = 11112;
                                }
                                doEvent(GingerbreadHouse);
                            };
                            break;
                        case 11112:
                            this.scene("\tIn a panic, you jump out the spun glass window and land harshly on the ground outside. You hurt yourself, but at least you escaped. ", true);
                            this.endEvent(this.ForestHub);
                            break;
                        case 11111:
                            this.scene("\tYou make a break for the bedroom door, but before you can reach it someone else busts in. " + "You run almost headlong into a scrawny woman dressed in shabby dark purple and black robes with a floppy black hat. " + "\n\t\"Well, looks like some oaf has been sticking " + this.playerGender.his + " nose where it doesn\'t belong. And I was just preparing for dinner too, hee hee hee.\" " + "It looks like if you want to escape you\'ll have to fight your way out. ", true);
                            this.specialEvent = 91;
                            this.startFight();
                            break;
                        case 12:
                            this.scene("\tYou decide a house made of gingerbread is too good a meal to pass up and start tearing hunks off a wall and cramming them in your mouth. " + "It\'s just about the sweetest and most delicious thing you\'ve ever tasted, you can hardly believe how good it is. You can only think of eating more. ", true);
                            this.doConsume(4, 0, 2);
                            if (this.alive()) {
                                this.btntxt(1, "Eat house");
                                this.leaveButton(3);
                                this.listen = function ():void {
                                    if (btnchc == 1) {
                                        specialEvent = 121;
                                    }
                                    if (btnchc == 3) {
                                        specialEvent = 122;
                                    }
                                    doEvent(GingerbreadHouse);
                                };
                            }
                            else {
                                this.scene("\n\tThat last bite proves too much for your stomach to handle though and you lie down on your back, falling into an overstuffed stupor. " + "Even as you fall asleep you try to cram more gingerbread into your mouth. ", false);
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        specialEvent = 3;
                                    }
                                    doEvent(GingerbreadHouse);
                                };
                            }
                            break;
                        case 121:
                            this.scene("\tYou tear off a huge chunk of wall and dip it in gobs of exposed icing before stuffing it down your throat. " + "You just can\'t seem to help yourself, it tastes sooooo good! ", true);
                            this.doConsume(5, 0, 2.5);
                            if (this.alive()) {
                                this.btntxt(1, "Keep eating");
                                this.leaveButton(3);
                                this.listen = function ():void {
                                    if (btnchc == 1) {
                                        specialEvent = 121;
                                    }
                                    if (btnchc == 3) {
                                        specialEvent = 122;
                                    }
                                    doEvent(GingerbreadHouse);
                                };
                            }
                            else {
                                this.scene("\n\tThat last bite proves too much for your stomach to handle though and you lie down on your back, falling into an overstuffed stupor. " + "Even as you fall asleep you lazily try to cram more gingerbread into your mouth. ", false);
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        specialEvent = 3;
                                    }
                                    doEvent(GingerbreadHouse);
                                };
                            }
                            break;
                        case 122:
                            this.scene("\tYou decide you\'ve eaten enough and start to get up to leave, but after taking a step away from the house you find your eyes uncontrollaby drawn back. " + "You immediately dive back to the house and start cramming hunks of gingerbread and icing into your mouth with manic vigor. " + "You\'ve just lost complete control of yourself and you madly try to stuff as much of this delicious house into your face as possible. " + "Your stomach groans and gurgles as it is crammed to it\'s bursting point with rich chewy gingerbread. ", true);
                            this.stuffToBursting();
                            this.scene("\n\tEventually you\'re too full too stay awake, but that doesn\'t stop you from still trying to eat the house, even as you drift off to sleep. ", false);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    specialEvent = 3;
                                }
                                doEvent(GingerbreadHouse);
                            };
                            break;
                        case 3:
                            this.doSleep();
                            this.scene("\tYou groggily wake up and try to wipe the sleep from your eyes but only manage to whack yourself in the head with something cold and metallic. You snap awake and look around you. " + "You see that you\'re sitting in what looks like an oversized wrought iron birdcage suspended from a ceiling in a basement. " + "Your wrists are locked in manacles attached to the top of the cage and your mouth is gagged. ", true);
                            if (this.waistDiameter() > 24) {
                                this.scene("Your belly is so large it pushes hard against the bars of the cage and oozes around them. ", false);
                            }
                            else if (this.waistDiameter() > 20) {
                                this.scene("Your belly is so large it pushes solidly against the bars of the cage. ", false);
                            }
                            else if (this.waistDiameter() > 16) {
                                this.scene("Your belly is large enough that it brushes against the cage bars. ", false);
                            }
                            this.scene("You smell the unmistakable and powerful scent of gingerbread and realize you must be in the basement of the gingerbread house. " + "Looking to your right theres another cage with a corpulent " + this.NPC1.species.name + " in it, but " + this.playerGender.he + "\'s sleeping like a rock. " + "You hear footsteps coming down the stairs as a hunched over " + this.enemyt.species.name + " witch enters the basement. " + "\n\t\"How\'s my fat little piggy doing, hmmmm?\" she asks in a high pitched voice. She walks up to you and grabs your gut and jiggles it roughly. " + "\"My my, you\'re practically skin and bones! I\'ll just have to fatten you up!\" " + "You try to say something, but you can only mumble through the gag in your mouth. \"What\'s that? You\'re starving?\" the witch asks with mock concern. \"How about some cake?\" " + "The witch holds out her other hand and in a sparkling swirl of magic, a large white cake apears in her hand. A slice of it levitates up in the air and floats towards your face. " + "\n\t\"Now open wide.\" The gag in your mouth mysteriously falls away and before you can say anything, the entire slice of cake crams itself into your mouth. " + "You reflexively try to chew through it and find yourself overwhelmed by the sweet rich flavors. You eventually chew up the massive mouthful of food down and manage to swallow. " + "You gaze longingly at the remaining cake, practically hypnotized. " + "\"Ready for seconds?\" the witch asks sarcastically. You can only nod emphatically as your eyes remain locked on the cake, your tongue lolling from your mouth. " + "The witch laughs cruelly as another huge slice of cake floats into your eagerly waiting mouth. " + "You chomp it down as though you haven\'t eaten in days and swallow the entire wedge. " + "You open your mouth wide, wordlessly begging for the next slice as your eyes remain transfixed on the mesmerizing cake. " + "The witch cackles again and obliges you by levitating another slice into your mouth. " + "She repeats this process several times, each time you swallow it down and open your mouth, desperate for more. ", false);
                            this.doConsume(10, 0, 5);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    if (!alive()) {
                                        specialEvent = 4;
                                    }
                                    else {
                                        specialEvent = 31;
                                    }
                                }
                                doEvent(GingerbreadHouse);
                            };
                            break;
                        case 31:
                            this.scene("\tAs you swallow down the last bite, the witch walks up and squeezes your belly between her hands. ", true);
                            if (this.FUL + 10 >= this.maxFUL) {
                                this.scene("Your belly squishes in, but just barely. ", false);
                            }
                            else if (this.FUL + 20 >= this.maxFUL) {
                                this.scene("Your belly squishes in a bit, but not much. ", false);
                            }
                            else {
                                this.scene("Your belly squishes in quite a bit. ", false);
                            }
                            this.scene("\n\t\"Well, feels like you\'ve got plenty of room left in there, eh my little piglet?\" the witch asks sarcastically. " + "You nod emphatically and open your mouth wide again, you\'re eyes glazed over in submission. " + "The which laughs as a large plate of chocolate chip cookies poofs into existence in her hands. \"Ready for the next course?\" " + "Your mouth waters in anticipation as a cookie levitates through the air and practically crams itself down your throat. " + "You swallow it down and immediately open your moth in anticipation of the next one already flying towards your face. " + "In rapid succession, the last half dozen cookies fly down the hatch. ", false);
                            this.doConsume(10, 0, 5);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    if (!alive()) {
                                        specialEvent = 4;
                                    }
                                    else {
                                        specialEvent = 311;
                                    }
                                }
                                doEvent(GingerbreadHouse);
                            };
                            break;
                        case 311:
                            this.scene("\tAs you swallow down the last bite, the witch walks up and squeezes your belly between her hands once again. ", true);
                            if (this.FUL + 10 >= this.maxFUL) {
                                this.scene("Your belly squishes in, but just barely. ", false);
                            }
                            else if (this.FUL + 20 >= this.maxFUL) {
                                this.scene("Your belly squishes in a bit, but not much. ", false);
                            }
                            else {
                                this.scene("Your belly squishes in quite a bit. ", false);
                            }
                            this.scene("\n\t\"Well you\'re quite the bottomless pit, aren\'t you dear?\" You just nod absent mindedly, your mouth hanging open for more." + "\"Well we\'ll just have to see if we can fill you up!\" In an austentatious flash of sparkles, a glass jug full of chocolate appears above your head. " + "You tilt your head back and open your jaws wide as the huge jug of chocolate syrup tips over and starts dumping hug blobs of chocolate syrup down your throat. " + "\n\tYour stomach slowly swells outward as gallons of chocolate pour down your gullet. The witch squishes your belly as it expands, waiting until you reach the proper fullness. ", false);
                            this.stuffToAlmostBursting();
                            this.scene("Satisfied that you\'ve reached your absolute limit, the witch stops pouring the chocolate syrup and rubs your incredibly bloated stomach. ", false);
                            if (this.waistDiameter() > 24) {
                                this.scene("Your belly is so large it pushes hard against the bars of the cage and oozes around them. ", false);
                            }
                            else if (this.waistDiameter() > 20) {
                                this.scene("Your belly is so large it pushes solidly against the bars of the cage. ", false);
                            }
                            else if (this.waistDiameter() > 16) {
                                this.scene("Your belly is large enough that it brushes against the cage bars. ", false);
                            }
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    specialEvent = 4;
                                }
                                doEvent(GingerbreadHouse);
                            };
                            break;
                        case 4:
                            this.scene("\t\"Are you all nice and full, hmmm?\" You pause and nod slowly. \"Do you have a tummy ache?\" You let out a small belch and nod your head slowly again. " + "\"Well I\'ll just rub your belly and see if that makes it feel better.\" She grabs your belly and starts squishing and rubbing it all over. " + "You feel a gurgling and roiling sensation in your stomach. As you look down you see your bulging stomach shrink as your body slowly but steadily inflates with fat. ", true);
                            this.doDigest(1440);
                            this.scene("You\'re now " + this.fatness() + ". " + "\n\t\"There, now that\'s how a growing piglet should look! Feel better now?\" You simply nod and open your mouth again. " + "\"Ah ah ah, I think you\'ve had enough little piggy, now it\'s time I\'ve had my dinner.\" She waves her hand and the bottom of the cage flops open, dropping you hard onto your ass. " + "Before you can recover, the floor surrounding you turns pitch black. The witch\'s hands glow with dark energy as she rubs her stomach. Slowly you begin to sink into the floor. " + "You stare blankly at your erstwhile caretaker and watch as her stomach swiftly balloons outwards as you slowly sink into the floor. " + "Her robes are quickly stretched to their limit and start tearing down the sides. " + "\n\tAs your head slowly sinks through the floor, the witch falls back on her ass with her belly towering over her. " + "Finally you\'re fully transported into the witches stomach and you vision slowly fades to black. ", false);
                            this.defeatEvent(this.devoured);
                            break;
                        case 112:
                            this.scene("\tYou " + this.walk() + " into the kitchen and find it, of course, made of candy. " + "The countertops are made of peppermint which seems like it would get really sticky if you tried to actually cook anything in here. Although this place doesn\'t seem to have much need for logic. " + "There\'s a door that has a gingerbread sign. The sign says \"CELLAR: Do Not Enter\" written in white frosting, which makes it pretty hard to take seriously. " + "There\'s also a large cake and a plate of cookies sitting on the kitchen table, the only thing you\'ve found in this house which seems to actually be meant as food instead of building material. ", true);
                            this.btntxt(1, "Cellar");
                            this.btntxt(2, "Eat Food");
                            this.btntxt(3, "Living Room");
                            this.clrchc();
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    specialEvent = 1121;
                                }
                                if (btnchc == 2) {
                                    specialEvent = 1122;
                                }
                                if (btnchc == 3) {
                                    specialEvent = 11;
                                }
                                doEvent(GingerbreadHouse);
                            };
                            break;
                        case 1122:
                            this.scene("\tYou sit down on the peppermint kitchen chair, noting that you stick to it slightly. " + "You pick up the peppermint untensils and start thinking this place\'s decor is a little too silly. " + "Shrugging your shoulders, you cut yourself out a large slice of cake. " + "When you raise the piece of cake to your lips and take your first taste, your mind spins with the sensation of the richest moistest sweetest confection you\'ve ever eaten. " + "After a brief pause in amazement that something could taste so good, you begin shoveling cake into your mouth as fast as you can. " + "As you swallow down the last of the slice of cake you even chomp down the eating utensils. ", true);
                            this.doConsume(4, 0, 2);
                            if (!this.alive()) {
                                this.scene("The last bite proves to much for your overtaxed stomach to handle however and you lean back in your chair and slowly drift off to sleep. ", false);
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        specialEvent = 3;
                                    }
                                    doEvent(GingerbreadHouse);
                                };
                            }
                            else {
                                this.btntxt(1, "Keep eating");
                                this.btntxt(3, "Get up");
                                this.clrchc();
                                this.listen = function ():void {
                                    if (btnchc == 1) {
                                        specialEvent = 11221;
                                    }
                                    if (btnchc == 3) {
                                        specialEvent = 11222;
                                    }
                                    doEvent(GingerbreadHouse);
                                };
                            }
                            break;
                        case 11221:
                            this.scene("\tYou look over to the heaping plate of chocolate chip cookies. " + "Your mouth waters and you pick up cookies in both hands and shovel them into your mouth. ", true);
                            this.doConsume(4, 0, 2);
                            this.scene("After you finish off the plate of cookies, you look up and see that the cake has somehow returned to it\'s uneaten state. ", false);
                            if (!this.alive()) {
                                this.scene("The last bite proves to much for your overtaxed stomach to handle however and you lean back in your chair and slowly drift off to sleep. ", false);
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        specialEvent = 3;
                                    }
                                    doEvent(GingerbreadHouse);
                                };
                            }
                            else {
                                this.btntxt(1, "Keep eating");
                                this.btntxt(3, "Get up");
                                this.clrchc();
                                this.listen = function ():void {
                                    if (btnchc == 1) {
                                        specialEvent = 11223;
                                    }
                                    if (btnchc == 3) {
                                        specialEvent = 11222;
                                    }
                                    doEvent(GingerbreadHouse);
                                };
                            }
                            break;
                        case 11223:
                            this.scene("\tYou look over to the pristine white cake. " + "Your mouth waters and you pick up handfuls of cake in both hands and shovel them into your mouth. ", true);
                            this.doConsume(4, 0, 2);
                            this.scene("After you finish off the hunk of cake, you look up and see that the plate is once again heaped to overflowing with cookies. ", false);
                            if (!this.alive()) {
                                this.scene("The last bite proves to much for your overtaxed stomach to handle however and you lean back in your chair and slowly drift off to sleep. ", false);
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        specialEvent = 3;
                                    }
                                    doEvent(GingerbreadHouse);
                                };
                            }
                            else {
                                this.btntxt(1, "Keep eating");
                                this.btntxt(3, "Get up");
                                this.clrchc();
                                this.listen = function ():void {
                                    if (btnchc == 1) {
                                        specialEvent = 11221;
                                    }
                                    if (btnchc == 3) {
                                        specialEvent = 11222;
                                    }
                                    doEvent(GingerbreadHouse);
                                };
                            }
                            break;
                        case 11222:
                            this.scene("\tYou attempt to stand up but find yourself stuck to the candy chair. " + "You put your hands on the armrests to try and pull yourself up, but only manage to get your hands stuck as well. " + "Looking up you see the cake and cookies floating in the air of their own accord. " + "Your mouth hangs agape in surprise and a cookie launches itself into your mouth. " + "You cough and choke it down and find yourself opening your mouth without you thinking about it. " + "A hunk of cake tears free from the rest of itself and similarly flings itself into your waiting jaws. " + "You chew this down as well and once again your mouth hangs open of it\'s own accord. ", true);
                            this.doConsume(6, 0, 3);
                            this.scene("Cake and cookies alternate cramming themselves into your mouth and no matter how full you get you find yourself opening your mouth for more. ", false);
                            if (this.FUL < this.maxFUL) {
                                this.stuffToBursting();
                            }
                            this.scene("Your stomach is finally stretched to it\'s limits and as you start to lose consciousness a particularly large hunk of cake floats up and crams itself into your mouth. ", false);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    specialEvent = 3;
                                }
                                doEvent(GingerbreadHouse);
                            };
                            break;
                        case 1121:
                            this.scene("\tYou throw caution to the wind and open the cellar door and " + this.walk() + " down the stairs. " + "As you go down you notice that the candy bulding motif finally ends as you enter a regular dirt basement. " + "When you reach the bottom of the stairs you are quite surprised to find an incredibly fat " + this.NPC1.species.name + " stuffing cake into " + this.NPC1.gender.his + " face. " + "What makes it particularly surprising is that said " + this.NPC1.species.name + " is locked up in what looks like an oversized iron birdcage suspended from the ceiling. " + "The " + this.NPC1.species.name + " is so rotund that " + this.NPC1.gender.his + " belly is pushing hard against the cage bars. You wonder how someone in such a state could keep on eating. " + "The " + this.NPC1.species.name + " picks up a hunk of cake from a table placed next to " + this.NPC1.gender.his + " cage and reluctantly crams it into " + this.NPC1.gender.his + " mouth before " + this.NPC1.gender.he + " notices you. " + "\n\t\"Hemf ooh!\" " + this.NPC1.gender.he + " attempts to say as " + this.NPC1.gender.he + " forces " + this.NPC1.gender.him + "self to swallow the mouthful of cake. " + "\"Could you please help me out of here!?\" " + this.NPC1.gender.he + " quickly shouts before cramming yet another handful of cake into " + this.NPC1.gender.his + " mouth. ", true);
                            this.btntxt(1, "Why are you here?");
                            this.btntxt(3, "Why are you still eating?");
                            this.btntxt(4, "Sure thing.");
                            this.btntxt(6, "I should probably go.");
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        doEvent(GingerbreadHouse);
                                        scene("\n\n\t\"I was exploring the forest a couple days ago and I came across this bizzare house.\" " + NPC1.gender.he + " picks up a cookie from next to " + NPC1.gender.him + " and starts eating it. " + "\"*mmf* So, not one to waste an opportunity, I start eating the side of the house.\" " + NPC1.gender.he + " picks up a glass of chocolate milk and chugs some of it down. " + "\"*gulp* Well it just tasted so good I couldn\'t stop eating it. I tried to leave but I just felt like I had to keep eating. " + "Eventually I ate so much I passed out with a massive stomach ache,\" " + NPC1.gender.he + " says as " + NPC1.gender.he + " sticks " + NPC1.gender.his + " paw into a tub of icing and starts licking it off, \"*smack* and when I woke up, I was locked in here.\" ", false);
                                        break;
                                    case 3:
                                        doEvent(GingerbreadHouse);
                                        scene("\n\n\t\"There\'s something weird about the food here. Once you start eating it, you just can\'t stop.\" " + capFirst(NPC1.gender.he) + " reluctantly picks up a wad of cotton candy and stuffs the whole handful into " + NPC1.gender.his + " mouth. " + "\"*smacksmack* When I woke up in this cage, this witch is standing there in front of me and stuffs some more gingerbread in my mouth " + "and ever since then I\'ve felt compelled to just keep eating.\" " + "True to " + NPC1.gender.his + " word, " + NPC1.gender.he + " picks up a caraffe of chocolate syrup and pours it down " + NPC1.gender.his + " throat. " + "\"*glug* I just wake up, eat until I\'m too stuffed and bloated to stay awake, pass out, and wake up to a table full of food again. " + "I\'ve grown even fatter and made more room in my stomach to stuff myself even more.\" " + capFirst(NPC1.gender.he) + " picks up a handful of jelly beans and tosses them all into " + NPC1.gender.his + " mouth. " + "\"*gulp* I\'ve been full to bursting with candy for days now. I think that witch is fattening me up to eat me! So are you gonna help me out of here?\" ", false);
                                        break;
                                    case 4:
                                        specialEvent = 11211;
                                        doEvent(GingerbreadHouse);
                                        break;
                                    case 6:
                                        specialEvent = 11212;
                                        doEvent(GingerbreadHouse);
                                }
                            };
                            break;
                        case 11211:
                            this.scene("\t\"Great, there\'s a key on the wall over there, and please hurry. I don\'t know when she\'ll be back.\" " + this.capFirst(this.NPC1.gender.he) + " points to a keyring on the wall with one paw as the other stuffs a hunk of cake into " + this.NPC1.gender.his + " mouth. " + "You quickly run over and get the key and come back to unlock the cage. " + "The bottom swings up and the " + this.NPC1.species.name + " falls on the ground and rolls to " + this.NPC1.gender.his + " back. " + this.capFirst(this.NPC1.gender.he) + " tries to roll over and get up, but " + this.NPC1.gender.his + " stomach is pinning " + this.NPC1.gender.him + " to the ground. " + "\n\t\"Erm, sorry, a little help here? I wasn\'t nearly this heavy last time I was walking around.\" " + "You " + this.walk() + " over and with a lot of grunting and wheezing you finally pull " + this.NPC1.gender.him + " up to stand wobbily on " + this.NPC1.gender.his + " feet. \"Alright, let\'s get out of here.\" " + "Even as " + this.playerGender.he + "\'s saying that " + this.NPC1.gender.he + " picks up the plate of cake and continues stuffing " + this.NPC1.gender.him + "self. ", true);
                            this.eHEA = this.dXY(80, 160);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    eHEA = eHEA - STR;
                                    specialEvent = 112111;
                                    doEvent(GingerbreadHouse);
                                }
                            };
                            break;
                        case 112111:
                            this.scene("\tWith " + this.NPC1.gender.his + " arm over your shoulder, you both start slowly making your way up the stairs. " + "The entire time " + this.playerGender.he + "\'s still cramming cake into " + this.NPC1.gender.his + " mouth. ", true);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    eHEA = eHEA - STR;
                                    specialEvent = 1121111;
                                    doEvent(GingerbreadHouse);
                                }
                            };
                            break;
                        case 1121111:
                            this.scene("\tIt\'s slow going but you finally get to the kitchen. " + "As you pass by the kitchen table " + this.NPC1.gender.he + " tosses the cake over " + this.NPC1.gender.his + " shoulder and picks up the plate of cookies and starts eating those. ", true);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    eHEA = eHEA - STR;
                                    specialEvent = 11211111;
                                    doEvent(GingerbreadHouse);
                                }
                            };
                            break;
                        case 11211111:
                            this.scene("\tYou make slow progress hauling your living boulder into the living room. " + "As you pass through the kitchen door way, " + this.NPC1.gender.he + " tosses the last few cookies behind " + this.NPC1.gender.him + " and tears off a piece of the doorway and starts chowing down. " + "\n\t\"I don\'t *wheeze* think I can *pant* eat much more before I pass out again. *sigh* All this food is making my stomach *gulp* hurt.\" " + "Surely enough, whenever " + this.NPC1.gender.his + " stomach bumps into you, you can feel it\'s stuffed tight as a balloon, even under the layers of fat. " + "You better get this " + this.NPC1.gender.guy + " out of here before " + this.NPC1.gender.he + " explodes. ", true);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    eHEA = eHEA - STR;
                                    if (eHEA > 0) {
                                        specialEvent = 112111112;
                                    }
                                    else {
                                        specialEvent = 112111111;
                                    }
                                    doEvent(GingerbreadHouse);
                                }
                            };
                            break;
                        case 112111111:
                            this.scene("\tWith a final triumphant burst of speed, you haul your porcine " + this.NPC1.species.name + " through the front door and outside, although " + this.NPC1.gender.his + " belly almost doesn\'t fit through the door. " + "You both quickly jog down the hillside, your combined momentum almost too much to stop at the bottom. " + "You travel a little further into the woods and out of site of the gingerbread house. " + "Finally out of the reach of the houses power, the " + this.NPC1.species.name + " tosses the last bit of gingerbread to the ground in disgust. " + "\n\t\"*urp* Oh, thank you so much! I don\'t think I would have survived another day in there.\" " + this.capFirst(this.NPC1.gender.he) + " rubs " + this.NPC1.gender.his + " overstretched stomach in an attempt to console it. " + "\"I think I can make it back from here, I don\'t live far. I don\'t want to burden you any more, you should go. I just need a moment to rest. " + "And here, take this, it\'s all I have on me, you deserve it\" " + this.capFirst(this.NPC1.gender.he) + " reaches into pants you couldn\'t even tell " + this.NPC1.gender.he + " was wearing and pulls out a small bag of coins from " + this.NPC1.gender.his + " pocket. " + this.capFirst(this.NPC1.gender.he) + " tosses it on the ground and with that, " + this.NPC1.gender.he + " passes out in a food coma. " + "\n\tAs you backtrack to look at the gingerbread house, you see only a barren hill with no sign of the mysterious structure that once stood there. " + "Without much else to do, you travel back into the woods. ", true);
                            this.doXP(20);
                            this.doGold(25);
                            this.endEvent(this.ForestHub);
                            break;
                        case 112111112:
                            this.scene("\tJust as you make it to the front door and make your triumphant escape, " + "your heart sinks as the door flies open and a lemon meringue pie flies in, hitting your " + this.NPC1.species.name + " compatriot in the face. " + "Against " + this.NPC1.gender.his + " will, " + this.NPC1.gender.he + " swallows most of the pie down as the pie plate slides off " + this.NPC1.gender.his + " face and hits the floor. " + this.capFirst(this.NPC1.gender.he) + " slowly licks the meringue off of " + this.NPC1.gender.his + " muzzle " + "and with a loud *grooaaaaan* " + this.NPC1.gender.his + " arm slips off of your shoulder as " + this.NPC1.gender.he + " rubs " + this.NPC1.gender.his + " bloated gut. " + "Without your support, " + this.NPC1.gender.he + " falls over into a candy cane chair, causing the chair legs to crack slightly and send off shards of candy. " + "With a final moan " + this.NPC1.gender.he + " passes out into a food coma as " + this.NPC1.gender.he + " rubs " + this.NPC1.gender.his + " stomach. " + "Apparently that final pie was too much for " + this.NPC1.gender.his + " stomach to handle. " + "Some of the meringue splattered onto your face when " + this.NPC1.gender.he + " got hit with the pie. Reflexively you lick it off as a scrawny old witch walks into the room. " + "\n\t\"Did you enjoy my pie eh? Hee hee hee!\" You smack your lips and before you can answer your mind reels with the sweet explosion of flavor from just that tiny dab of meringue. " + "You start trying to lick as much of the meringue off your face that you can reach before you finally shake yourself out of it, not wanting to end up like your overstuffed comatose friend. " + "\"There\'s so much more where that came from my pet, let me show you!\" " + "\nIt appears you have a fight on your hands. ", true);
                            this.specialEvent = 92;
                            this.startFight();
                            break;
                        case 11212:
                            this.scene("Not wanting to get involved with this mess. You leave the captive " + this.NPC1.species.name + " to continue stuffing " + this.NPC1.gender.his + " face. " + "Between mouthfuls of food " + this.NPC1.gender.he + " pleads with you for help. " + "As you come through the cellar door you are hit square in the face with a lemon meringue pie. " + "Reflexively, you lick up as much of the sweet insides as you can and swallow it down. " + "You almost black out from the intense lemony flavors and the only thing keeping you up is the desire to eat more of this insanely delicious pie. " + "You\'re about to pick the fallen pie plate off of the floor when your eyes meet with those of the scrawny old witch standing in front of you. " + "\n\t\"Rootin\' around in \'ol grandma\'s cellar eh? If you were hungry you should have just asked.\" " + "You stare at her in a daze before you shake yourself free from whatever sway that pie held over you. " + "\"There\'s plenty here to eat, why don\'t you let dear old grandma fix you a twelve course dinner hmmm? Hee hee hee hee!\" " + "It appears you have a fight on your hands. ", true);
                            this.specialEvent = 93;
                            this.startFight();
                            break;
                        case 91:
                            this.scene("\t\"Oh what a world!\" the witch screams as she collapses to the floor. As soon as she does so, the house is stricken with an ominous rumbling. " + "The shaking quickly intensifies and you start to have trouble staying on your feet. You look around and see the walls cracking and tearing apart as they seem to fall upwards. " + "You struggle to make it down the stairs and out of the corner of your eye you notice the witch has mysteriously vanished without a trace. " + "\n\tYou brace yourself against the walls as you shakily make your way to the front door. " + "Furniture and bits of wall burst into green flame as they fall upward. " + "There\'s a deep and ominous cracking sound as the floor tears in half and starts drifting upward as it\'s eaten at the edges by cold green flames. " + "You barely make it to the front door before the floor beneath your " + this.playerSpecies.feet + " tilts upward and burns away. " + "You dive out of the front door as what remains of the sundered gingerbread house burns away into nothing. " + "You keep running and don\'t stop until you reach the cover of the trees. " + "The last of the house vanishes in a puff of strange sweet smelling green smoke in the sky. " + "A moment later you see a distant figure crawl out of the hole where the house once stood. " + this.capFirst(this.NPC1.gender.he) + " looks away perplexedly before hefting " + this.NPC1.gender.his + " considerable bulk and running off into trees on the far side of the clearing. ", true);
                            this.doXP(20);
                            this.endEvent(this.ForestHub);
                            break;
                        case 92:
                            this.scene("\t\"Oh what a world!\" the witch screams as she collapses to the floor. " + "As soon as she does so, the house is stricken with an ominous rumbling. " + "The shaking quickly intensifies and you start to have trouble staying on your feet. " + "You look around and see the walls cracking and tearing apart as they seem to fall upwards. " + "You quickly turn around and attempt to pick up your overstuffed companion. " + this.capFirst(this.NPC1.gender.he) + " was heavy enough when " + this.NPC1.gender.he + " could stand, now that " + this.playerGender.he + "\'s out cold " + this.playerGender.he + "\'s like a sack of soft bricks. " + "It takes some doing but, you eventually pick " + this.NPC1.gender.him + " up and sling " + this.NPC1.gender.his + " arm over your shoulder. " + "A weak groan lets you know that " + this.playerGender.he + "\'s at least slowly regaining consciousness. " + "\n\tNone too soon either as every bit of candy around you begins crumbling to pieces and floating upwards as green flames consume them. " + "You slowly shuffle your way towards the front door. " + "You notice that that witch has vanished without a trace when you weren\'t looking. " + "You get through the door and have to wait as your bloated " + this.NPC1.species.name + " in distress has become wedged in the front door. " + "With a few pulls you manage to pull " + this.NPC1.gender.him + " through as the entire floor breaks in half and gently drifts upwards. " + this.capFirst(this.NPC1.gender.he) + " pops out of the door frame and the momentum flings " + this.NPC1.gender.him + " into you. You both roll down the hill to the tree line. " + "You stumble dizzily up to your feet and " + this.NPC1.gender.he + " follows suite, albeit somewhat slower. " + "You both stand there and watch as the last of the house drifts into the sky and burns up in a puff of sweet smelling green smoke. " + "\n\t\"Hhhhhhhhhhuh.\" the " + this.NPC1.species.name + " says ineffectualy. \"Well, that was certainly strange.\" " + this.capFirst(this.NPC1.gender.he) + " stumbles back and leans against a nearby tree. \"Well thank you so much.\" " + this.NPC1.gender.he + " says as " + this.NPC1.gender.he + " rubs " + this.NPC1.gender.his + " taut stomach. " + "\"I never would have made it out of there alive if it weren\'t for you.\" " + this.capFirst(this.NPC1.gender.he) + " holds onto " + this.NPC1.gender.his + " gut as " + this.NPC1.gender.he + " slowly sinks to the ground. " + "\"I think I can make it back home from here, I don\'t live far. You should go. I just need a moment to rest. And here, take this with you.\" " + this.capFirst(this.NPC1.gender.he) + " reaches into pants you couldn\'t even tell " + this.NPC1.gender.he + " was wearing and pulls out a small bag of coins from " + this.NPC1.gender.his + " pocket. " + this.capFirst(this.NPC1.gender.he) + " tosses it on the ground and with that, " + this.NPC1.gender.he + " passes out in a food coma. ", true);
                            this.doXP(20);
                            this.doGold(25);
                            this.endEvent(this.ForestHub);
                            break;
                        case 93:
                            this.scene("\t\"Oh what a world!\" the witch screams as she collapses to the floor. As soon as she does so, the house is stricken with an ominous rumbling. " + "The shaking quickly intensifies and you start to have trouble staying on your feet. You look around and see the walls cracking and tearing apart as they seem to fall upwards. " + "You struggle to make it through the kitchen and out of the corner of your eye you notice the witch has mysteriously vanished without a trace. " + "\n\tYou brace yourself against the walls as you shakily make your way to the front door. Furniture and bits of wall burst into green flame as they fall upward. " + "There\'s a deep and ominous cracking sound as the floor tears in half and starts drifting upward as it\'s eaten at the edges by cold green flames. " + "You barely make it to the front door before the floor beneath your " + this.playerSpecies.feet + " tilts upward and burns away. " + "You dive out of the front door as what remains of the sundered gingerbread house burns away into nothing. " + "You keep running and don\'t stop until you reach the cover of the trees. The last of the house vanishes in a puff of strange sweet smelling green smoke in the sky. " + "A moment later you see a distant figure crawl out of the hole where the house once stood. " + this.capFirst(this.NPC1.gender.he) + " looks away perplexedly before hefting " + this.NPC1.gender.his + " considerable bulk and running off into trees on the far side of the clearing. ", true);
                            this.doXP(20);
                            this.endEvent(this.ForestHub);
                    }
                    break;
                case this.alphaWolf:
                    this.appView(0);
                    switch (this.specialEvent) {
                        case 0:
                            this.setEnemy(this.FatWolf);
                            this.scene("\tWhile making your way through the forest, you begin to notice a lot more noise around you than normal. " + "Looking through the overgrowth, you can see a pack of wolves walking through the forest. " + "You quickly hide behind a tree as best you can, waiting for the pack to pass. " + "You peek out, seeing if they’re gone, and can see that their massive, dragging bellies have made a small pathway through the growth, leading somewhere. ", true);
                            this.btntxt(13, "Hide");
                            this.btntxt(11, "Follow");
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        specialEvent = 3;
                                        break;
                                    case 13:
                                        specialEvent = 2;
                                }
                                doEvent(alphaWolf);
                            };
                            break;
                        case 2:
                            switch (this.testSkill(this.INT, -10)) {
                                case true:
                                    this.scene("\tKeeping your breathing shallow to keep any noise down, you wait for a few minutes to make sure there’s nothing waiting for you. " + "Letting out a sigh of relief, you head back on your way.", true);
                                    this.endEvent(this.ForestHub);
                                    break;
                                default:
                                    this.scene("\tYou hear a creaky slithering noise behind you. " + "You realise all too late that this probably wasn’t the best place to hide – An amber-coloured vine jabs itself into your mouth, " + "letting out a jet of sweet syrup into your mouth before you bat it away in alarm. ", true);
                                    this.doConsume(0, 2, 1);
                                    this.scene("Quickly stepping away from the tree, you see that you’ve disturbed a nearby Syrup Vine!", false);
                                    this.specialEvent = 0;
                                    this.locationUpdate(this.ForestHub);
                                    this.combatEvent(this.SyrupVine);
                            }
                            break;
                        case 3:
                            this.scene("\tYou step away from the tree and into the open, looking at the trail. ", true);
                            switch (this.testSkill(this.INT, -10)) {
                                case false:
                                    this.scene("You cautiously step over to it and peer up the way they went. " + "Your efforts to follow them to where they were headed are fruitless, because it seems that one of the heftier ones had knocked into a nearby shrub, knocking it over and blocking your path. " + "You can\'t find another path around, so you can only explore elsewhere. ", false);
                                    this.endEvent(this.ForestHub);
                                    break;
                                default:
                                    this.scene("You see the tail of one of the wolves disappear around a corner, and decide to follow, when all of a sudden, " + "a massive impact to your side knocks you to the ground, dazing you for a few moments. " + "When you snap out of It, you look up to find yourself pinned to the ground by a particularly large wolf – judging from its size, you assume this is probably the alpha wolf. " + "It growls, looking smug about how easily it blind-sided you like this, and it licks its chops. ", false);
                                    this.btntxt(1, "Struggle");
                                    this.btntxt(3, "Submit");
                                    this.btntxt(4, "Give food");
                                    this.btntxt(6, "Give belly rubs");
                                    this.listen = function ():void {
                                        switch (btnchc) {
                                            case 1:
                                                specialEvent = 31;
                                                break;
                                            case 3:
                                                specialEvent = 32;
                                                break;
                                            case 4:
                                                specialEvent = 33;
                                                break;
                                            case 6:
                                                specialEvent = 34;
                                        }
                                        doEvent(alphaWolf);
                                    };
                            }
                            break;
                        case 31:
                            switch (this.testSkill(this.STR + 50, this.enemyt.STR)) {
                                case true:
                                    this.scene("\tYou suddenly yell wordlessly at the wolf and headbutt it in its face, making " + this.enemyt.gender.him + " yowl and momentarily lose " + this.enemyt.gender.his + " concentration. " + "You push hard at the mass of warm flab trapping you, and, to your delight, find yourself just about able to roll " + this.enemyt.gender.him + " off of you onto " + this.enemyt.gender.his + " back. " + "You quickly get up and run, leaving the angry and dazed wolf to howl in fury and try to get back onto " + this.enemyt.gender.his + " feet, with no success.", true);
                                    this.doXP(10);
                                    this.endEvent(this.ForestHub);
                                    break;
                                default:
                                    this.scene("\tYou grunt and headbutt the wolf in " + this.enemyt.gender.his + " face, but end up knocking your own lights out. " + "The wolf shakes " + this.enemyt.gender.his + " head, snapping out of the dazedness a lot easier than you do, then looks at you, more amused than annoyed at your escape attempt. " + this.capFirst(this.enemyt.gender.he) + " opens " + this.enemyt.gender.his + " mouth wide, stretching " + this.enemyt.gender.his + " jaws over your head, " + "slowly backing off of you so " + this.enemyt.gender.he + " can get the rest of you into " + this.enemyt.gender.his + " mouth. " + "Your consciousness flickers in and out before finally failing, and you’re unconscious before you’re even fully inside " + this.enemyt.gender.him + ". ", true);
                                    this.defeatEvent(this.devoured);
                            }
                            break;
                        case 32:
                            this.scene("\tRealising that the area is probably crawling with wolves that would object to aggression or escape, you give up the fight and don’t struggle. " + "The Alpha pauses, puzzled, before giving the closest thing to a shrug " + this.enemyt.gender.he + " can give and opening wide. " + this.capFirst(this.enemyt.gender.he) + " eases " + this.enemyt.gender.his + " jaws over your head, rolling onto " + this.enemyt.gender.his + " backside, carefully pushing you into " + this.enemyt.gender.his + " maw, " + "tilting " + this.enemyt.gender.his + " head back and swallowing you over, burping in quiet satisfaction and rubbing " + this.enemyt.gender.his + " middle, " + "pleasantly surprised at the lack of resistance " + this.enemyt.gender.his + " latest quarry gave. ", true);
                            this.defeatEvent(this.devoured);
                            break;
                        case 33:
                            distraction = this.Apple;
                            if (this.itemFind(this.Sausage) != -1) {
                                distraction = this.Sausage;
                            }
                            else if (this.itemFind(this.Steak) != -1) {
                                distraction = this.Steak;
                            }
                            else if (this.itemFind(this.MeatballSub) != -1) {
                                distraction = this.MeatballSub;
                            }
                            else if (this.itemFind(this.HamSandwich) != -1) {
                                distraction = this.HamSandwich;
                            }
                            else if (this.itemFind(this.Cheeseburger) != -1) {
                                distraction = this.Cheeseburger;
                            }
                            switch (distraction) {
                                case this.Apple:
                                    this.scene("\tYou manage to get a hand free and rummage around for some other food that the wolf might want instead of you. " + "However, nothing in your backpack seems to interest the wolf, who has run out of patience. " + this.capFirst(this.enemyt.gender.he) + " rolls onto " + this.enemyt.gender.his + " back, so you’re on top of " + this.enemyt.gender.his + " mountainous belly, " + "tilting back so you slide headfirst into " + this.enemyt.gender.his + " maw. " + this.capFirst(this.enemyt.gender.he) + " only has to swallow a few times, gravity doing most of the work for " + this.enemyt.gender.him + ". ", true);
                                    this.defeatEvent(this.devoured);
                                    break;
                                default:
                                    this.scene("\tYou just about manage to get a hand free. " + "Remembering that you have " + distraction.article + " " + distraction.Name + " in your backpack, you give the wolf a basic \"Wait\" gesture. " + "It looks a bit annoyed and bemused until you take the food out of your backpack. " + "It whines, then pants, looking at you. " + "You just about manage to flick it away from you, making it land a few feet away. " + "It looks between the food and you a few times, then decides to go for the foodstuff with less clothes and " + this.playerSpecies.fur + " on it. " + "It bounds off you, gnawing on the food. " + "You carefully sneak off while " + this.enemyt.gender.he + "\'s preoccupied and happy. " + "You’ve escaped, but at the cost of your food. ", true);
                                    this.expendItem(this.invArray[this.itemFind(distraction)]);
                                    this.doXP(5);
                                    this.endEvent(this.ForestHub);
                            }
                            break;
                        case 34:
                            this.scene("\tYou manage to get a hand free. You reach down and gently begin to scratch at " + this.enemyt.gender.his + " warm, furry stomach. " + this.capFirst(this.enemyt.gender.he) + " growls a little at first, but this soon stops. " + this.capFirst(this.enemyt.gender.he) + " closes " + this.enemyt.gender.his + " eyes, beginning to trance out. " + "To your amazement, " + this.enemyt.gender.he + " flops onto " + this.enemyt.gender.his + " back, " + this.enemyt.gender.his + " back foot twitching, presumably as an invitation to rub more. " + "You look around and realise that you could probably use this opportunity to make a break for it, or take some other course of action. ", true);
                            this.btntxt(1, "Run");
                            this.btntxt(2, "Stay");
                            this.btntxt(3, "Eat");
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        specialEvent = 341;
                                        break;
                                    case 2:
                                        specialEvent = 342;
                                        break;
                                    case 3:
                                        specialEvent = 343;
                                }
                                doEvent(alphaWolf);
                            };
                            break;
                        case 341:
                            this.scene("\tStanding up as quietly as you possibly can, you continue scratching for a few moments before quickly turning tail.", true);
                            switch (this.testSkill((this.INT + this.AGI) * 0.5, -10)) {
                                case true:
                                    this.scene("You bolt as quickly and quietly as you can (which isn’t saying much) towards a nearby bush, throwing yourself over it. " + "You get back on your feet and keep running, hoping to make the wolf lose your trail. " + "You soon realise however, you aren’t being pursued and can only hear the wolf’s mournful whimpers piercing the overgrowth. ", false);
                                    this.doXP(10);
                                    this.endEvent(this.ForestHub);
                                    break;
                                default:
                                    this.scene("As soon as your hand leaves the wolf’s fur, it snaps out of its daydreaming, looking at you. " + "You run for a nearby bush and try to jump over it, but the wolf leaps after you with surprising agility and bites your ankle, " + "cutting your momentum short and making you fall into the bush, thankfully not causing any lasting damage to your face. " + "You blink the dazedness out of your eyes and spit out a few leaves, but already you can feel a wet, slobbery embrace around your feet. " + "Surrendering to your fate, you feel the wolf’s jaws work their way past your back and over your shoulders. " + this.capFirst(this.enemyt.gender.he) + " pauses, licking at your face as best " + this.enemyt.gender.he + " can, " + "before tilting " + this.enemyt.gender.his + " head back and swallowing the rest of you into the warm, tight confines of " + this.enemyt.gender.his + " insides. ", false);
                                    this.defeatEvent(this.devoured);
                            }
                            break;
                        case 342:
                            this.scene("\tFor some insane reason, you find yourself willing to comply with the wolf’s wishes. You reach both hands over and continue petting and stroking " + this.enemyt.gender.his + " soft, ample middle. " + "All of a sudden, however, you feel a sharp pain in your rump. " + "Another wolf, evidently looking for the Alpha, doubled back and found you, and decided the best course of action to get you away from " + this.enemyt.gender.him + " was to bite and drag you off. " + "You flop onto the floor, disorientated and in pain. After all that work, all you’ve done is delay the inevitable. ", true);
                            switch (this.testSkill(80, 0)) {
                                case true:
                                    this.scene("But then, you hear a commanding, angry bark from the Alpha, looking angrily at the other wolf. " + "It growls, but after another harsher bark from the large " + this.enemyt.gender.name + ", it releases its grip and backs off, whimpering. " + "The Alpha looks at you kindly and gestures its head away. You take it’s cue and run off as quickly as you can. ", false);
                                    this.doXP(10);
                                    this.endEvent(this.ForestHub);
                                    break;
                                default:
                                    this.scene("\n\tThe wolf growls at it’s Alpha master, refusing to listen to " + this.enemyt.gender.his + " orders. You feel yourself get dragged backwards further into the woods. " + "The wolf drops you, repositions himself, and starts to devour you from the feet up. The last thing you see before darkness swallows you is the Alpha trotting over, looking utterly enraged. " + "From the feelings of tumbling and sounds of barking, struggling and whining you hear from outside, you can only assume that the Alpha ate the disobedient wolf for its trespass. " + "You usually aren’t the one to engage in schadenfreude, but as your consciousness drifts away, you give a smug elbow to the stomach wall you’re trapped in, " + "glad that your thwarted escape attempt was at least avenged somewhat. ", false);
                                    this.defeatEvent(this.devoured);
                            }
                            break;
                        case 343:
                            this.scene("\tA devilish grin flickers across your face as your stomach rumbles. Continuing to rub, you walk over to the wolf’s head. You squat down a bit, getting your head close to " + this.enemyt.gender.his + ". " + "You open your mouth wide, and stop rubbing, shoving the wolf’s head into your mouth. ", true);
                            switch (this.remainingCapacity() > 150) {
                                case true:
                                    this.scene("The wolf lets out a surprised, panicked yelp and struggles against you a little, but you push on, holding its forepaws down to make it easier to work your jaws over the wolf’s body. " + "You almost start coughing the wolf up a few times due to the amount of fur in your throat, but something feral sparks within you and you reach a second wind, " + "pushing on " + this.enemyt.gender.his + " belly to squish it into your mouth a bit easier. " + "As " + this.enemyt.gender.he + " begins to reach your stomach, you feel your midriff begin to surge outwards. " + "You eventually reach " + this.enemyt.gender.his + " hindquarters, pushing them in before sucking " + this.enemyt.gender.his + " tail in like a noodle, flopping onto your rear. ", false);
                                    this.doConsume(150, 0, 100);
                                    this.scene("You flick your head back and let out a huge belch that echoes throughout the forest, scaring several birds out of the trees around you. " + "As the noise finally dies down, you hear whimpering around you. You look around and see several of the collection of wolves, surrounding you and staring in fear. " + "As you stand up, the wolves scatter. You’ve won, it seems. ", false);
                                    this.doXP(20);
                                    this.endEvent(this.ForestHub);
                                    break;
                                default:
                                    this.scene("The wolf lets out a surprised, panicked yelp...seemingly unaware that now that you’re actually doing this, you’re beginning to panic too. You did NOT think this through. " + "You manage to make your way past the wolf’s shoulders... but your stomach’s starting to rebel. Shrugging it off, you keep pushing, to the tune of your stomach groaning and creaking. " + "You cough a few times before you feel your consciousness drop. " + "In the dizzy, incoherent mess of senses you experience after, you feel something being pulled out of your mouth, and something else munching its way over your head. " + "You’re uncertain if it’s the Alpha or another wolf eating you, but the important thing is – what you just did majorly backfired. ", false);
                                    this.defeatEvent(this.devoured);
                            }
                    }
            }
            switch (ID) {
                case this.grasslandsHub:
                    this.scene("\tYou " + this.walk() + " off the beaten path into the open grasslands. ", true);
                    break;
                case this.GrasslandsEvent:
                    switch (this.eventRandomization(this.plainsTravel)) {
                        case 1:
                            switch (this.dXY(1, 2)) {
                                case 1:
                                    this.locationTravel(this.wildlingCaptive);
                                    break;
                                case 2:
                                    this.locationTravel(this.FruitFarm);
                            }
                            break;
                        case 2:
                            this.endEvent(this.grasslandsHub);
                            tempEnemies = new Array();
                            switch (this.dXY(1, 3)) {
                                case 1:
                                    tempEnemies = [this.Wildling, this.WildlingRitualist, this.wildlingShaman];
                                    break;
                                default:
                                    tempEnemies = [this.GorgedCheetah, this.BloatedLion, this.ExpandedElephant];
                            }
                            this.combatEvent(tempEnemies[this.dXY(0, tempEnemies.length - 1)]);
                            if (this.enemyt.introduction == "") {
                                this.scene("\tAs you adventure through the grasslands, you suddenly run into " + this.enemyt.article + " " + this.enemyt.name + "! ", true);
                            }
                            if (this.enemyt.introduction != "") {
                                this.scene("\t" + this.enemyt.introduction, false);
                            }
                            break;
                        case 3:
                            this.scene("\tYou find a small foot path worn through some hedges. As you approach closer you find it leads to one of the city roads! Do you want to leave? ", true);
                            this.choiceButton();
                            this.listen = function ():void {
                                if (btnchc == 13) {
                                    endEvent(grasslandsHub);
                                    scene("\tYou decide to stay in the grasslands for a while longer. ", true);
                                }
                                if (btnchc == 11) {
                                    if (dXY(1, 2) == 2) {
                                        endEvent(WestRoad);
                                        scene("\tYou emerge from the grasslands and find yourself on the western road. ", true);
                                    }
                                    else {
                                        endEvent(SouthRoad);
                                        scene("\tYou emerge from the grasslands and find yourself on the southern road. ", true);
                                    }
                                }
                            };
                            break;
                        default:
                            this.endEvent(this.grasslandsHub);
                            switch (this.dXY(1, 4)) {
                                case 1:
                                    this.scene("\tAs you travel through the grasslands, you come across a bush bearing fruit. You reach and pick the only ripe looking fruit. ", true);
                                    switch (this.dXY(1, 2)) {
                                        case 1:
                                            this.getItem(this.Grapes);
                                            break;
                                        case 2:
                                            this.getItem(this.Strawberries);
                                    }
                                    break;
                                case 2:
                                    this.scene("\tAs you travel through the grasslands you come across a wild watermelon patch with some of the largest watermelon you\'ve ever seen. " + "Unfortunately you appear to have been beaten to them as there\'s several hollowed out melon husks laying around. " + "Each one houses fat rabbits, gophers, and meerkats and other tiny animals who\'re fast asleep with bulging sloshing stomachs, their fur stained red with watermelon juice. " + "There\'s only one untouched melon left. Even though it\'s the smallest of them all, it\'s still larger than most you\'ve seen. You bend down to pick it up. ", true);
                                    this.getItem(this.Watermelon);
                                    break;
                                case 3:
                                    this.scene("\tAs you travel through the thick grasslands, you notice out of the corner of your eye a small blue object on the ground. " + "You walk over and bend down to inspect it and find a small blue fruit about the size of your thumb hanging from a single tiny stalk coming out of the ground. " + "You attempt to pick the fruit, but the stalk it\'s hanging from stretches surprisingly far before breaking away and snapping back to the ground. " + "The tiny fruit remains in your hands and you squish it between your fingers, finding it to be surprisingly spongy. " + "If you hadn\'t picked it from the ground yourself you might have thought it was a rubber ball. ", true);
                                    this.getItem(this.StretchyFruit);
                                    break;
                                case 4:
                                    this.randomNPC(1);
                                    if (this.dXY(1, 2) == 1) {
                                        this.setEnemy(this.BloatedLion);
                                    }
                                    else {
                                        this.setEnemy(this.GorgedCheetah);
                                    }
                                    this.scene("\tAs you are " + this.walking() + " through the grasslands you hear the sounds of a struggle. " + "You trudge through the thick grass towards the sounds and find a large clearing where the grass has been flattened from an ongoing battle. " + "You find a " + this.NPC1.species.name + " adventurer already chest deep in the jaws of a " + this.enemyt.species.name + " on the far side of the clearing. " + "The " + this.NPC1.species.name + " curses " + this.NPC1.gender.his + " enemy before finally being swallowed whole. " + "\n\tThe " + this.enemyt.species.name + "\'s once slim waist swiftly balloons outward as " + this.enemyt.gender.he + " tries very hard to swallow the struggling adventurer down. " + "The " + this.enemyt.species.name + "\'s stomach now bulges out in a large taut sphere that practically drags on the ground. " + "The " + this.enemyt.species.name + " stops to pant from exhaustion for a moment as " + this.enemyt.gender.his + " meal continues the struggle inside, " + "causing the " + this.enemyt.species.name + "\'s already unwieldy stomach to sway back and forth underneath " + this.enemyt.gender.him + ". " + "Eventually the struggles calm down and the " + this.enemyt.species.name + " waddles off into the tall grass. " + "" + this.capFirst(this.enemyt.gender.his) + " enormous gut swaying from side to side making it difficult to walk as " + this.enemyt.gender.he + " disappears into the tall grass. ", true);
                                    this.scene("\n\tYou step out into the clearing to try and see where the " + this.enemyt.species.name + " had gone, but " + this.enemyt.gender.he + "\'s all but disappeared. " + "Looking down though you find something that was dropped by the " + this.NPC1.species.name + " adventurer. ", false);
                                    this.chance = this.d100();
                                    if (this.chance > 90) {
                                        this.getItem(this.Rapier);
                                    }
                                    else if (this.chance > 75) {
                                        this.getItem(this.LeatherArmor);
                                    }
                                    else if (this.chance > 40) {
                                        this.getItem(this.SmallHealthPotion);
                                    }
                                    else {
                                        this.getItem(this.HamSandwich);
                                    }
                            }
                    }
                    break;
                case this.wildlingCaptive:
                    this.clearView();
                    switch (this.subEvent) {
                        case "":
                            this.scene("\tAs you " + this.walk() + " through the long grass, you spot a large-looking shape standing out on the horizon. Curious. Do you want to approach and investigate? ", true);
                            this.choiceButton();
                            this.captiveDispelled = false;
                            this.captiveDispelsLeft = 3;
                            this.captiveFeedsLeft = 3;
                            this.captiveFattened = true;
                            this.captiveFreed = false;
                            this.listen = function ():void {
                                var _loc1_:Array = null;
                                switch (btnchc) {
                                    case 11:
                                        _loc1_ = [Lion, Hippo, Rhino];
                                        createNPC(1, _loc1_[dXY(0, 2)], Male);
                                        setEnemy(wildlingShamanBoss);
                                        subEvent = "meetCaptive";
                                        doEvent(wildlingCaptive);
                                        break;
                                    case 13:
                                        scene("\tWith a shrug you turn away from the distant shape and head in a different direction. In a few moments you turn your head and whatever-it-was is now lost from view. ", true);
                                        endEvent(grasslandsHub);
                                }
                            };
                            break;
                        case "meetCaptive":
                            this.scene("\tYou head towards the thing, keeping cautiously to the long grass for cover. " + "For a while whatever it is is completely obscured by a particularly dense and deep patch of grassland, but you finally break through into what looks like a clearing and stop dead, " + "letting out a gasp of surprise. In front of you sits the biggest, fattest anthro " + this.NPC1.species.name + " you\'ve ever seen in your life! " + "You can really only recognise their species by the " + this.NPC1.species.furBack + " " + this.NPC1.species.fur + " and ", false);
                            switch (this.NPC1.species.speciesName) {
                                case this.Lion.speciesName:
                                    this.scene("glossy mane", false);
                                    break;
                                case this.Rhino.speciesName:
                                    this.scene("large horns", false);
                                    break;
                                case this.Hippo.speciesName:
                                    this.scene("broad snout", false);
                            }
                            this.scene("- otherwise he\'s practically just a blob. " + "Wider than he is tall, a staggeringly huge belly and chest wobbles gently in time with his breathing, and his lovehandles are enormously thick and chunky. " + "His chubby arms stick out from his sides, unable to rest flat against the rotund curves of his body. " + "Around him you notice a solid-looking ring of outward-pointing wooden stakes, each crudely carved with symbols. " + "They stand at about shoulder height, a little too high to climb over, ESPECIALLY for one so... famine-resistant. " + "It looks like this Big Boy has been penned in for some reason. " + "The front of that gut is barely inches from the stakes in front of him, while his juicy lovehandles are brushing those at his sides whenever he breathes in. " + "Making a slow, fascinated circuit around this gargantuan " + this.NPC1.species.name + ", you see that likewise his titanic tuckus is also pressing on the posts behind him. " + "Looking closer, you note the torn remnants of pale clothing on the ground around him, " + "along with the remains of some armour and possibly a weapon or two, now mostly submerged under his rolling bulk. This guy must be a fellow adventurer of some sort. " + "\n\tHis thick double chin resting in the dent between his pillowy pecs, he looks to be in a light doze. But as you return to his front side he lets out a small snort and awakens. " + "When he sees you his eyes widen and with some effort he lifts his fat muzzle from his chest. " + "\"Hey, " + this.playerGender.buddy + "! Boy am I glad to see YOU! You\'ve gotta help me get outta here, before I BURST!\" ", false);
                            this.btntxt(1, "I really shouldn\'t interfere");
                            this.btntxt(3, "Sure, but how?");
                            this.btntxt(7, "What do you mean, \'burst\'?");
                            this.btntxt(9, "Why are you in there?");
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        scene("\t\"Huh? No, wait!\" the ", true);
                                        switch (NPC1.species.speciesName) {
                                            case Lion.speciesName:
                                                scene("lardball", false);
                                                break;
                                            case Rhino.speciesName:
                                                scene("rotund", false);
                                                break;
                                            case Hippo.speciesName:
                                                scene("humungous", false);
                                        }
                                        scene(NPC1.species.name + " pleads desperately, \"Y-you can\'t just LEAVE me like this! Grugh...\" " + "He stifles a burp, and you watch with horror as he balloons a little larger right in front of you, that huge stomach swelling outwards by a couple of inches. " + "You start to back away. \"Help me, damnit, " + enemyt.gender.he + " could be back at any moment!\" " + "\n\tNot wanting to get involved in this crazy situation, you turn and run. You can hear the " + NPC1.species.name + " calling after you, and catch a glimpse of him over your shoulder. " + "But when you turn your head back to look where you\'re going you\'re stopped dead- standing right in front of you is a wilding shaman! ", false);
                                        endEvent(grasslandsHub);
                                        startFight();
                                        break;
                                    case 3:
                                        subEvent = "helpCaptive";
                                        doEvent(wildlingCaptive);
                                        break;
                                    case 7:
                                        doEvent(wildlingCaptive);
                                        scene("\t\"I mean... nmphh...\" The ", true);
                                        switch (NPC1.species.speciesName) {
                                            case Lion.speciesName:
                                                scene("wideload", false);
                                                break;
                                            case Rhino.speciesName:
                                                scene("rippling", false);
                                                break;
                                            case Hippo.speciesName:
                                                scene("hugely heavy", false);
                                        }
                                        scene(NPC1.species.name + " stifles a small burp, and your eyes widen as HE does the same! " + "That gargantuan gut bulges out a couple of inches further, some of the items scattered around him being swallowed further by his blubbery body. " + "His arms rise out a little more as they grow fatter, and his sides stretch even more roundly. " + "\"I mean they\'ve put some kind of spell on me so that I\'ve spent the last two days blowing up like a ruddy BALLOON!\" he roars. " + "\"If I don\'t manage to get out of this, and fast, who knows how much bigger they\'re gonna make me! I can hardly move now! " + "Much more of this and I\'m gonna POP! C\'mon, you\'ve gotta HELP me!\" ", false);
                                        break;
                                    case 9:
                                        doEvent(wildlingCaptive);
                                        scene("\tThe ", true);
                                        switch (NPC1.species.speciesName) {
                                            case Lion.speciesName:
                                                scene("fatso feline", false);
                                                break;
                                            default:
                                                scene("enormous pachyderm", false);
                                        }
                                        scene(" sighs and shakes his head slightly. " + "\"I was taking a shortcut through the grasslands when I stumbled into this creepy canine out in the middle of nowhere. " + capFirst(enemyt.gender.he) + " was all skin and bones, had some kind of weird headdress on and was carrying some kind of old rattle.\" " + "With effort, he scratches his head with a hamlike hand. \"I don\'t really remember much else until I woke up in here,\" he nods to the makeshift enclosure, " + "\"with that... that thing standing in front of me! " + capFirst(enemyt.gender.he) + " was playing some kind of pipe, but I couldn\'t hear anything. " + "That was two days ago. And since then...\" he slaps his hands against his colossally corpulent body, which ripples heavily. " + "\"I mean, I know I wasn\'t exactly SKINNY before all of this, b-but THIS is crazy! You\'ve gotta help me escape!\" ", false);
                                }
                            };
                            break;
                        case "helpCaptive":
                            this.scene("\tA look of relief crosses the " + this.NPC1.species.name + "\'s fat features, but he\'s still apprehensive. His ears swivel agitatedly. " + "\"You\'ve got to get me out of this cage, and you\'ve got to break this spell somehow! " + "And HURRY, " + this.enemyt.gender.he + " could come back at any time!\" You look blankly at him, and he stares back blankly at you. \"I\'ve got nothing. Any ideas?\" ", true);
                            if (!this.captiveFreed) {
                                this.btntxt(1, "\"I really shouldn\'t interfere\"");
                                this.btntxt(2, "\"Can you break yourself out?\"");
                                this.btntxt(3, "Break down stockade");
                                if (this.itemOwned(this.dietPill)) {
                                    this.btntxt(4, "Give diet pill");
                                }
                                ownsFood = false;
                                this.i = 0;
                                while (this.i < this.invArray.length) {
                                    captiveFood = this.invArray[this.i];
                                    if (captiveFood.type == "food") {
                                        ownsFood = true;
                                    }
                                    this.i++;
                                }
                                if (ownsFood == true) {
                                    this.btntxt(7, "Feed");
                                }
                            }
                            if (!this.captiveDispelled) {
                                if (this.spellKnown(this.Antidote1) && this.MANA > this.Antidote1.manaCost) {
                                    this.btntxt(5, "Dispel");
                                }
                                if (this.itemOwned(this.antidotePotion)) {
                                    this.btntxt(6, "Antidote potion");
                                }
                            }
                            if (this.captiveFreed) {
                                this.btntxt(8, "Escape");
                            }
                            this.listen = function ():void {
                                var _loc1_:Items = null;
                                var _loc2_:Items = null;
                                switch (btnchc) {
                                    case 1:
                                        scene("\t\"Huh? No, wait!\" the ", true);
                                        switch (NPC1.species.speciesName) {
                                            case Lion.speciesName:
                                                scene("lardball", false);
                                                break;
                                            case Rhino.speciesName:
                                                scene("rotund", false);
                                                break;
                                            case Hippo.speciesName:
                                                scene("humungous", false);
                                        }
                                        scene(NPC1.species.name + " pleads desperately, \"Y-you can\'t just LEAVE me like this! Grugh...\" " + "He stifles a burp, and you watch with horror as he balloons a little larger right in front of you, that huge stomach swelling outwards by a couple of inches. " + "You start to back away. \"Help me, damnit, " + enemyt.gender.he + " could be back at any moment!\" " + "\n\tNot wanting to get involved in this crazy situation, you turn and run. You can hear the " + NPC1.species.name + " calling after you, and catch a glimpse of him over your shoulder. " + "But when you turn your head back to look where you\'re going you\'re stopped dead- standing right in front of you is a wilding shaman! ", false);
                                        endEvent(grasslandsHub);
                                        startFight();
                                        break;
                                    case 2:
                                        switch (captiveFattened) {
                                            case true:
                                                scene("\tThe huge " + NPC1.species.name + " looks thoughtful, and with a colossal effort hauls himself to his fat feet, paunch hanging way out in front of him. \"Hey, this could work.\" " + "He hefts his gigantic gut experimentally in both hands, and grins. \"Yeah, I like this plan- let\'s USE this bulk! I\'m gonna TRAMPLE the sucker!\" " + "\n\tHe stomps his fat feet like a sumo squaring up for a bout, then takes a couple of slow, lumbering steps forward. " + "Almost immediately his vast belly hits the stakes and squashes slowly, bringing him to a halt. " + "Puffing, he tries backing up to give himself a run up, but almost at once his massive backside bumps against the stakes behind him. He growls with frustration. " + "\"It\'s no good, I just don\'t have enough room to get any momentum! I\'m too FAT!\" ", true);
                                                break;
                                            case false:
                                                captiveFreed = true;
                                                doEvent(wildlingCaptive);
                                                scene("\tThe huge " + NPC1.species.name + " looks thoughtful, and with a colossal effort hauls himself to his fat feet, paunch hanging way out in front of him. " + "\"Hey, this could work.\" He hefts his slightly-reduced-but-still-giant-sized gut experimentally in both hands, and grins. \"Yeah, I like this plan- let\'s USE this bulk! " + "I\'m gonna TRAMPLE the sucker!\" He stomps his fat feet like a sumo squaring up for a bout, and charges at the stockade, " + "starting slow but managing to reach a considerable lumber before he crashes into the stakes, belly-first. " + "His hugely overblown body quivers from the impact, but then so do the stakes! " + "Puffing, he backs up determinedly, until his backside is pressing hard against the posts behind him, and charges again. " + "\n\t\"GERONIMO!\" This time he cannons into the already-loosened stakes with an almighty BUMP, and you watch him literally roll over the barrier, " + "three of the posts uprooting and getting pressed flat into the earth. " + "Your " + NPC1.species.name + " buddy lays beached on his spectacular stomach for a few moments, panting, before he struggles to his feet again. ", true);
                                        }
                                        break;
                                    case 3:
                                        doStamina(-100);
                                        switch (testSkill(STR + STR, 30)) {
                                            case false:
                                                doEvent(wildlingCaptive);
                                                scene("\tYou circle the stockade, but you can\'t see any sign of a gate. How did they get him IN there? " + "Inspecting the posts more closely, you can\'t help but notice that they\'re surrounded by a faint blue glow. This barrier may not be entirely hand-made in nature. Oh well... " + "Cracking your knuckles, you grab hold of one of the thick wooden stakes and you haul on it, first trying to lift it out of the ground, then trying to twist it free, " + "then trying to topple it, eventually hanging off it with all your weight. But although the post creaks and flexes slightly, you\'re not able to break down the barrier. " + "This wood\'s stronger than iron! You back up with a groan, panting and rubbing your aching back. You look up at the bloated " + NPC1.species.name + ", and he shrugs. " + "\n\t\"Any OTHER ideas?\" ", true);
                                                clearButton(3);
                                                break;
                                            case true:
                                                captiveFreed = true;
                                                doEvent(wildlingCaptive);
                                                scene("\tYou circle the stockade, but you can\'t see any sign of a gate. How did they get him IN there? " + "Inspecting the posts more closely, you can\'t help but notice that they\'re surrounded by a faint blue glow. This barrier may not be entirely hand-made in nature. Oh well... " + "Spitting on your hands, you grab hold of one of the thick wooden stakes surrounding the overblown captive and HAUL with all your might. " + "You are rewarded with the post creaking alarmingly, and slowly tilting in its socket until it suddenly flips free with a great spray of earth! " + "Your " + NPC1.species.name + " friend splutters in protest as he\'s showered, but you move on to the next post. One, two, three... TIMBERRR! " + "With another colossal effort you manage to rend another stake from the ground, and now have (just) enough room to squeeze between them! " + "Now able to really put your back into it, you set to work toppling first one heavily-embedded post, then the next, then the next! " + "By the time you\'ve removed enough for your corpulent compadre to get out, you\'re sweating buckets and going weak in the knees. " + "You stagger away from the gap, and sit down heavily. Phew... you just need... a breather for a few moments. The ", true);
                                                switch (NPC1.species.speciesName) {
                                                    case Lion.speciesName:
                                                        scene("ludicrously large", false);
                                                        break;
                                                    case Rhino.speciesName:
                                                        scene("ridiculously round", false);
                                                        break;
                                                    case Hippo.speciesName:
                                                        scene("humungously hefty", false);
                                                }
                                                scene(" " + NPC1.species.name + " squirms through the gap in his prison, finally breaking free of its embrace with an almost audible POP. " + "\n\t\"Phew! Am I glad to be OUT of there! Now what?!\" ", false);
                                        }
                                        break;
                                    case 4:
                                        expendItem(invArray[itemFind(dietPill)]);
                                        captiveFattened = false;
                                        scene("\tThe " + NPC1.species.name + " looks doubtfully at the blue pill you give him. " + "\"What, how is THIS supposed to help?\" With your encouragement he shrugs and claps his chubby hand to his lips, gulping the pill down laboriously. He shudders, making his bulk wobble. " + "\n\t\"Ergh, I HATE taking pills. I... woah...\" He puts both hands to his overblown belly, and it gurgles. \"I... I feel funny...\" With another gurgle his middle begins to shrink. " + "Over a few minutes he easily loses over 200lbs- ok, he\'s hardly this year\'s Mr. Hunkiverse but he\'s visibly slimmer than he was! " + "\"Heey...\" he looks himself over, now able to move more freely, too. " + "\"I gotta get me some more of THOSE!\" ", true);
                                        break;
                                    case 5:
                                        switch (captiveDispelsLeft) {
                                            case 3:
                                                captiveDispelsLeft--;
                                                doMana(Antidote1.manaCost);
                                                doEvent(wildlingCaptive);
                                                scene("\tThe " + NPC1.species.name + " is bathed in a soft blue light. A strange gurgle emanates from his gargantuan belly, and he puts one fat " + NPC1.species.hand + " to it, grunting. " + "\n\t\"Uff, that felt like it did SOMETHING...\" His stomach then lets out a more ominous rumble, and a smothered burp catches him by surprise. He starts to get even rounder! " + "\"B-but I guess it wasn\'t strong enough! Q-quick, can you cast it again?\" ", true);
                                                break;
                                            case 2:
                                                captiveDispelsLeft--;
                                                doMana(Antidote1.manaCost);
                                                doEvent(wildlingCaptive);
                                                scene("\tWith a wave of your arms the blue light returns, and the " + NPC1.species.name + "\'s current growth spurt falters. " + "The faint eldritch glow around the stockade (a far less pretty blue) seems to flicker for a moment. " + "\n\t\"I think it\'s working!\" he exclaims, only for the blue light to fade abruptly, and the weight resumes piling on. A new chin begins to form under his jaw. " + "\"Mphh! M-maybe third time\'s the charm?!\" ", true);
                                                break;
                                            case 1:
                                                captiveDispelsLeft--;
                                                captiveDispelled = true;
                                                doMana(Antidote1.manaCost);
                                                doEvent(wildlingCaptive);
                                                scene("\tYou cast the spell for a third time, and this time the rhino\'s stomach lets out a deep, subterranean GURGLE that makes him quiver! " + "The light around the wooden posts flares abruptly, and then snuffs out. " + "The " + NPC1.species.name + "\'s throat quivers, and he stifles a rather loud BELCH with his fat hand, looking anxious. " + "Only this time, glowing blue smoke curls out of his nostrils. " + "After a few tense moments where he DOESN\'T start to grow, he lets out a deep breath of relief, puffing more blue smoke out. " + "\n\t\"Whew! Talk about INDIGESTION! That was some magic, thanks! Now what?\" ", true);
                                        }
                                        break;
                                    case 6:
                                        captiveDispelled = true;
                                        expendItem(invArray[itemFind(antidotePotion)]);
                                        doEvent(wildlingCaptive);
                                        scene("\tThe ", true);
                                        switch (NPC1.species.speciesName) {
                                            case Lion.speciesName:
                                                scene("fattened feline", false);
                                                break;
                                            case Rhino.speciesName:
                                                scene("rotund rhino", false);
                                                break;
                                            case Hippo.speciesName:
                                                scene("hefty hippo", false);
                                        }
                                        scene(" takes the potion from you and sniffs it suspiciously, before pulling a face. " + "\n\t\"Urgh! Why\'d I want to drink CELERY-JUICE?\" Just then, his stomach lets out another ominous gurgle and his body begins to bulge once again. " + "Very hurriedly he chugs the contents on the flask, having trouble getting it too his lips past his bloated chest and chins. " + "The gurgling in his guts increases in intensity- it sounds like a war going on in there! His expansion falters, quivers, and then subsides! " + "He lets out an enormous, relieved BURRRP, an eldritch blue mist hanging in the air above him for a moment before dissipating. " + "\n\t\"Woah, does that feel BETTER!\" He grins roundly at you and slaps his stupendous stomach. \"Guess that takes care of my \'growth spurts\'! Now what?\" ", false);
                                        break;
                                    case 7:
                                        i = 0;
                                        while (i < invArray.length) {
                                            _loc2_ = invArray[i];
                                            if (_loc2_.type == "food") {
                                                _loc1_ = invArray[i];
                                                break;
                                            }
                                            i++;
                                        }
                                        expendItem(invArray[itemFind(_loc1_)]);
                                        switch (captiveFeedsLeft) {
                                            case 3:
                                                captiveFeedsLeft--;
                                                doEvent(wildlingCaptive);
                                                scene("\tThe supersized " + NPC1.species.name + " blinks incredulously as you proffer " + _loc1_.article + " " + _loc1_.Name + ". " + "\"Huh? Are you crazy? I\'m as big as a whale and you think I should take a SNACK break?\" " + "Nevertheless at the sight of food makes his mouth water, and that gargantuan gut lets out a hungry rumble. \"Well... I g-guess TECHNICALLY I\'ve not eaten in two days...\" " + "He greedily grabs the " + _loc1_.Name + " and stuffs it into his mouth, chubby cheeks wobbling heavily as he chews. " + "Whether it\'s the effect of the spell on him, or he just puts on weight REALLY easily, as he gulps the grub down the " + NPC1.species.name + "\'s belly gurgles and bulges bigger! " + "You step back slightly, and watch that gargantuan gut swell until it presses firmly against the posts in front of him. " + "The " + NPC1.species.name + " wipes his mouth and belches, and then his ears wilt as he notices his gain. \"Aww... shucks!\" ", true);
                                                break;
                                            case 2:
                                                captiveFeedsLeft--;
                                                doEvent(wildlingCaptive);
                                                scene("\t\"What, MORE?\" The increasingly-spherical " + NPC1.species.name + " stares at you in disbelief as you proffer the " + _loc1_.Name + ". " + "\"Look at me! I\'m as big as a HOUSE, and you\'re offering me MORE?\" But as you hold out the tempting treat, his nostrils twitch and he licks his lips nervously. " + "That bottomless-pit of a belly rumbles at him hungrily. \"I... I REALLY shouldn\'t...\" his willpower caves in almost immediately, " + "and he grabs the " + _loc1_.Name + " from you, chomping into it. In a couple of big bites it\'s gone, and with another gurgle the " + NPC1.species.name + " balloons even bigger. " + "As he swells, his stomach begins to press hard against the posts of the stockade. " + "They tremble, and a low creak emerges from them. The " + NPC1.species.name + "\'s expansion stops with another burp, and he groans uncomfortably. " + "\"Thanks... thanks a BUNCH! Now I can... hardly BREATHE in here!\" ", true);
                                                break;
                                            case 1:
                                                captiveFeedsLeft--;
                                                captiveFreed = true;
                                                doEvent(wildlingCaptive);
                                                scene("\tThe mountainous " + NPC1.species.name + " stares at the " + _loc1_.Name + " in your " + playerSpecies.hand + ", starting to pant. " + "The enormous creature\'s arms are now stuck right out, and he resembles a " + NPC1.species.furBack + " " + NPC1.species.furred + " wrecking ball. " + "\"You\'re... you\'re as crazy as that THING is. If I eat... one more bite I\'m... I\'m gonna POP!\" " + "That treacherous blob of a belly rumbles loudly over the creaking of the wooden posts, making him grimace and sweat. \"I... gotta... EAT! Gimme that!\" " + "He chows down on the " + _loc1_.Name + " almost before it\'s left your " + playerSpecies.hand + ". " + "He swallows, and grows even larger, steamrollering over the stakes and toppling them. " + "A couple even snap with a concussive CRACK from the pressure they\'re under, getting buried under that massively overfed middle. " + "The now truly enormous " + NPC1.species.name + " BURPS and seems to wake up from his food daze, looking around in astonishment. " + "\n\t\"Wha...?\" With an immense effort, he slowly hauls himself to his feet in the wreckage of the enclosure, wobbling unsteadily, " + "belly almost dragging on the ground in front of him. He gives you a fat-faced, sweaty grin, and pants. \"Ok, I\'ll admit it- you DO know what you\'re doing.\" " + "He hefts as much of his gargantuan belly as he can with both hands, and grimaces. \"But you\'re paying for my fitness classes. Now what?!\" ", false);
                                        }
                                        break;
                                    case 8:
                                        enemyt.escapable = false;
                                        enemyt.description = "You face the wilding shaman, as skinny and dark as a shadow at noon, " + "with ritualistic markings across the hatchet-like planes of " + enemyt.gender.his + " chiselled canine features and adorned with a full ceremonial headdress and robe. " + "Scrawny and completely unarmed, carrying only an old wooden flute, you still feel the you still feel the skin crawl on the back of your neck when those eyes fix on you. " + capFirst(enemyt.gender.he) + " does not look happy to see you making off with " + enemyt.gender.his + " captive. Sacrilige! And with your fat friend to think of, you\'ve no chance of running. " + "Besides which, he\'s basically blocking the only other path out. You\'ll have to stand and fight! ";
                                        enemyt.victory = "With a snarl the shaman jumps back from your last attack, beaten, and utters a shrill cry of rage. " + "You lunge forwards in an attempt to grab " + enemyt.gender.him + ", but land flat on your face in the dust as a flock of ravens scatters in all directions, cawing and shrieking. " + "\n\tA hollow rumbling shakes the ground beneath you, and you look up into the super-fattened features of probably the world\'s fattest " + NPC1.species.name + ", " + "still beached on his mind-bogglingly big belly. \"Oof! S-sorry, guess all that excitement worked up an appetite\" he comments. " + "He blinks, and a smile stretches his swollen features. \"Hey! I\'m not getting any BIGGER!\" " + "He whoops and punches the air, sending a heavy wobble through his blimped-up form. " + "With an immense effort, and some shoulder-work from you, he manages to roll back onto his feet, although his stomach is still spread firmly on the ground. " + "\n\t\"Thanks " + playerGender.buddy + ", you\'ve just saved my bacon! I owe you, BIG TIME! " + "I lost most of my gear back there-\" you don\'t offer to go and retrieve it, and he doesn\'t look surprised. " + "\"I don\'t even have the clothes I stand up in! But...\" he reaches up, with difficulty, around his neck and fumbles with something, \"...I can offer you THIS as a reward!\" " + "With a final tug, a cord hidden beneath his juicy chins comes loose and a money-pouch drops down into the valley between his collosally bloated pecs. " + "He picks it up and tosses it to you, and it makes a satisfying \'chink\' in your " + playerSpecies.hands + ". " + "Just at that moment, the " + NPC1.species.name + "\'s cavernous stomach growls at him again. He absent-mindedly slaps a hand to his belly, sinking in a couple of feet at least. " + "\"Oof... don\'t you worry about me, I\'ll be fine from here. At least, I WILL be once I find some FOOD. There\'s gotta be a snack-bar or something around here...\" " + "And with that, the colossal ex-captive ploughs laboriously away into the grasslands in search of a meal. ";
                                        enemyt.GLD = enemyt.GLD + dXY(34, 47);
                                        switch (captiveDispelled) {
                                            case true:
                                                scene("\tYou turn on your heel and run, the gigantic " + NPC1.species.name + " waddling right behind you! " + "For someone who\'s stomach is practically dragging on the ground, he can really MOVE! " + "While you\'re pushing aside tall stands of grass, he\'s ploughing a channel that several people abreast could walk down. " + "The thudding of his lumbering feet makes the ground shake and knocks fruit off distant trees. You\'ve just got to hope that nobody comes looking for you both! " + "\n\tEventually, however, you\'re well out of sight of the stockade, with absolutely no signs of pursuit. It looks like you\'ve both got away with it! The vast ", true);
                                                switch (NPC1.species.speciesName) {
                                                    case Lion.speciesName:
                                                        scene("feline", false);
                                                        break;
                                                    default:
                                                        scene("pahyderm", false);
                                                }
                                                scene(" doughball stops to rest, leaning against a tree for support as he pants. " + "\n\t\"Wow, thanks for rescuing me! I really thought I was a gonner! Any longer in that and I\'d have been too big to even move, let alone escape! I owe you, BIG-time!\" " + "With a loud crack the tree suddenly lurches under his weight, leaving him wobbling unsteadily. He grabs hold of what he can reach of his enormous belly and jiggles it, wincing. " + "\"Though how I\'m gonna shed some of THIS I just don\'t know!\" " + "\n\t\"I lost most of my gear back there-\" you don\'t offer to go and retrieve it, and he doesn\'t look surprised. \"I don\'t even have the clothes I stand up in! But...\" " + "he reaches up, with difficulty, around his neck and fumbles with something, \"...I can offer you THIS as a reward!\" " + "With a final tug, a cord hidden beneath his juicy chins comes loose and out drops a money pouch and a shining pendant, resting between the twin mounds of his vast chest. " + "He picks them up and tosses them to you. " + "The money pouch is satisfyingly heavy, while the pendent glints in in the palm of your " + playerSpecies.hand + ". You realise that it\'s a genuine gem! " + "\n\tJust at that moment, the grossly-obese " + NPC1.species.name + "\'s stomach growls ravenously at him. \"Thanks again, " + playerGender.buddy + "! Now I\'ve really got to go. " + "There\'s gotta be SOMETHING to eat around here...\" And with that, you watch the colossal ex-captive waddle away into the grasslands. ", false);
                                                endEvent(grasslandsHub);
                                                doGold(dXY(34, 47));
                                                getItem(UnidentifiedGem);
                                                break;
                                            case false:
                                                scene("\tYou turn on your heel and run, the gigantic " + NPC1.species.name + " waddling right behind you! " + "But after a few lumbering paces you hear an ominous gastric gurgling, and turn to see that your fat friend has faltered, hands clutching at his mammoth middle. " + "He huffs and tries to pick up speed, but hesitates. " + "\n\t\"I think...\" he pants anxiously, \"I... th-think...\" the gurgling intensifies, and his eyes widen. \"Oh, NOOO-urrp!\" " + "The belch catches him by surprise, and he clamps one hand over his mouth in horror. Too late- already you can see his spectacularly superfattened bulk beginning to swell. " + "\n\t\"W-well don\'t just STAND there,\" the " + NPC1.species.name + " bellows, lumbering back into motion, \"K-keep... huff... Keep g-GOING!\" " + "He gets up to a slow, savannah-shaking jog, but with each step he takes you can see his stance widening as more and more subcutaneous blubber weighs him down, " + "his legs having to swing around more and more stomach. His pace quickly slows until he\'s at a slow lumber, sloshing and wobbling unsteadily from foot to foot, " + "belly swaying enormously in front of him, ploughing a furrow in the knee-high grass. " + "\n\t\"K-keep... going,\" he pleads with himself, panting with the effort. \"C\'mon... huff, huff... k-keep... huff... oorf!\" " + "As you watch, the undercarriage of his now-mountainous middle hits solid earth, bounces, then begins to drag steadily. " + "The outrageously obese " + NPC1.species.name + " lets out a groan and presses forward doggedly, but within a few more paces is piling up on top of his own gut! " + "He grinds to a halt, completely immobile and beached atop his own belly. " + "He struggles and wriggles, panting and sweating, then he looks down at you and his eyes widen in horror. " + "\n\t\"Oh, <i>noooo</i>....\" It\'s only then that you realise he\'s not looking AT you, but at something BEHIND you. " + "You slowly turn, to find yourself facing what can only be the wilding shaman who put him in that stockade in the first place. ", true);
                                                endEvent(grasslandsHub);
                                                startFight();
                                        }
                                }
                            };
                    }
                    break;
                case this.FruitFarm:
                    this.clearView();
                    switch (this.specialEvent) {
                        case 0:
                            this.scene("\tAs you wander about, you chance upon a small, but curious farm. There are a mixture of bushes, trees, and vines, and all of them are sporting truly enormous and especially round fruits. " + "A bit away from the fields is a small, comfortable looking shack, most likely where the owner of the place is. The fruits are quite alluring, but the shack looks inviting for certain. ", false);
                            this.btntxt(11, "Field");
                            this.btntxt(12, "Shack");
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        specialEvent = 1;
                                        doEvent(FruitFarm);
                                        break;
                                    case 12:
                                        specialEvent = 2;
                                        doEvent(FruitFarm);
                                        break;
                                    case 13:
                                        scene("You decide not to explore this place, the thought that none of those fruits grow in the same climates or conditions crossing your mind for a moment as you go back to wandering. " + "When you look back you see no sign of the farm, but catch a glimpse of a cart slowly pulling off into the distance. ", false);
                                        endEvent(grasslandsHub);
                                }
                            };
                            break;
                        case 1:
                            this.scene("\tAs you approach, the sheer size of the fruits become even more impressively clear. " + "Tree branches are hung low with apples and oranges the size of beachballs, bushes bear strawberries, raspberries, and blueberries that are fist-sized, " + "and the vines hold pumpkins and watermelons that could be used as low-rent housing in a pinch. " + "As if it wasn\'t obvious enough that something was peculiar with them, they visibly sparkle with magic. " + "Clearly, this place belongs to someone both skilled with magic, and fond of fruits. ", false);
                            this.attemptsLeft = this.dXY(6, 8);
                            if (this.INT >= 70) {
                                this.scene("You can barely sense a very subtle, yet distinct vibration of magic hum and reach out towards the shack. " + "You\'ve almost certainly just set off a magical ward, and odds are very good that whoever\'s in charge is about to know you\'re here. ", false);
                                this.attemptsLeft = this.dXY(17, 19);
                            }
                            if (this.INT >= 30 && this.INT < 70) {
                                this.scene("You can almost hear what sounds like a soft humming noise, but as you look around you can\'t find the source of it. You think perhaps it was just your imagination. ", false);
                                this.attemptsLeft = this.dXY(11, 13);
                            }
                            if (this.INT < 30) {
                                this.scene("Your mouth is watering just looking at those sweet delectables. But with magic involved, it might be a bad idea to eat without permission. ", false);
                            }
                            this.btntxt(1, "Eat");
                            this.btntxt(2, "Shack");
                            this.leaveButton(3);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        specialEvent = 11;
                                        doEvent(FruitFarm);
                                        break;
                                    case 2:
                                        specialEvent = 2;
                                        doEvent(FruitFarm);
                                        break;
                                    case 3:
                                        scene("You decide not to explore this place, the thought that none of those fruits grow in the same climates or conditions crossing your mind for a moment as you go back to wandering. " + "When you look back you see no sign of the farm, but catch a glimpse of a cart slowly pulling off into the distance. ", false);
                                        endEvent(grasslandsHub);
                                }
                            };
                            break;
                        case 11:
                            this.scene("\tYou just can\'t resist; it all looks too good to leave alone. " + "Even better, as you head into the field proper, all the fruit seems to draw towards you, pulling away from their respective branches, vines, and bushes, " + "their peculiar magics making them easy and safe to pluck, as well as clean and ready for eating. ", false);
                            if (this.attemptsLeft > 16) {
                                this.scene("You try to find a secluded spot away from the shack so as to avoid detection by whoever set up the ward. ", false);
                            }
                            if (this.attemptsLeft > 10 && this.attemptsLeft < 16) {
                                this.scene("You\'re still a bit suspicious of that noise you thought you heard earlier, and look for an area slightly off the path to begin your feast. ", false);
                            }
                            this.scene("You\'ve got your pick of the lot; what will you dig into? \n\t", false);
                            this.btntxt(1, "Orange");
                            this.btntxt(2, "Peach");
                            this.btntxt(3, "Raspberry");
                            this.btntxt(4, "Blueberry");
                            this.btntxt(5, "Strawberry");
                            this.btntxt(6, "Pumpkin");
                            this.btntxt(7, "Watermelon");
                            this.btntxt(8, "Grape");
                            this.leaveButton(9);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        scene("The orange oozes its distinctly sweet juice in your mouth as you take a big bite. Even the peel is tasty, and surprisingly edible. ", false);
                                        doConsume(5, 0, 2);
                                        attemptsLeft = attemptsLeft - 1;
                                        break;
                                    case 2:
                                        scene("This peach crunches softly, its juice dribbling down your face as you eat it. ", false);
                                        doConsume(5, 0, 2);
                                        attemptsLeft = attemptsLeft - 1;
                                        break;
                                    case 3:
                                        scene("The tremendous raspberry provides only slight resistance as you sink your teeth into its sweet flesh. ", false);
                                        doConsume(4, 0, 1);
                                        attemptsLeft = attemptsLeft - 1;
                                        break;
                                    case 4:
                                        scene("Your mouth and fingers stain with juice as you eat delicious and gigantic blueberry, your stomach becoming similarly shaped. ", false);
                                        doConsume(4, 0, 1);
                                        attemptsLeft = attemptsLeft - 1;
                                        break;
                                    case 5:
                                        scene("The tiny seeds provide a small bit of hardness, but the sweetness of this massive strawberry is undeniable. ", false);
                                        doConsume(4, 0, 1);
                                        attemptsLeft = attemptsLeft - 1;
                                        break;
                                    case 6:
                                        scene("Once you get past the outer shell, the meat of the enormous pumpkin fills your mouth, stomach, and mind with the delicious Fall season. ", false);
                                        doConsume(6, 0, 2);
                                        attemptsLeft = attemptsLeft - 1;
                                        break;
                                    case 7:
                                        scene("You get a massive chunk of watermelon and set to work getting a sticky mouth and fingers and making a small mountain of spat-out seeds. ", false);
                                        doConsume(5, 1, 2);
                                        attemptsLeft = attemptsLeft - 1;
                                        break;
                                    case 8:
                                        scene("You just manage to fit one grape into your mouth as you eat it straight off the vine. It doesn\'t get fresher than that, or more delicious. ", false);
                                        doConsume(3, 1, 1);
                                        attemptsLeft = attemptsLeft - 1;
                                        break;
                                    case 9:
                                        scene("You pull yourself away from the delicious fruit and glance back at the shack. " + "With no obvious activity, you decide it\'s safe enough and head out of there in a hurry, not wanting to face any repercussions. " + "As you go, the fruits sag, seemingly sad that you\'re no longer there to eat them anymore. ", false);
                                        endEvent(grasslandsHub);
                                }
                                if (!alive()) {
                                    scene("\n\tAs you swallow the last bite, you come to the unfortunate conclusion that you overdid it, " + "and slump against one of the nearby trees, slowly sinking to the ground and groaning as you rub your enormously stuffed belly. " + "As you steadily lose the ability to move from the pressure in your stomach, you just catch the shack\'s door opening out of the corner of your eyes. " + "A short, round lizard in magical finery and sporting a feathered cap is marching towards you, a wicked grin showing his sharp-toothed smile as he approaches. " + "The distinct feeling of the fruit drawing close to you comes up again, but now it\'s less welcoming, and more enclosing. " + "Even if you could move, you doubt you could escape, though with the world going dark, that possibility is nothing but a happy thought... " + "\n\tWith your will to fight sapped to nothing, you are left at the mercy of a wizard that you have wronged. " + "While there are concievably worse situations to be in, this is certainly near the top of the list, and the wide grin on the lizard\'s face shows that he means to prove it. " + "\"You wanted to eat my fruit?\" He taunts, his plants wrapping around you and lowering you to your knees. " + "\"Well, you\'re going to have to eat a whole lot of it if you\'re going to be of use around here,\" he continues, tapping your head with his wand, then poking it into your belly. " + "Though the pressure inside it seems to lessen, your helplessness does not fade, and the plants begin to feed you their fruit. ", false);
                                    stuffToBursting();
                                    scene("You can only watch as your belly stretches bigger and bigger, an endless stream of delicious flavors parading into your mouth. " + "Against your desire and better judgement, you find yourself slowly chewing and swallowing down enormous fruit after enormous fruit. " + "Oranges, pears, grapes, apples, watermelon, all of it is swallowed down as you are stuffed to the brim, and pushed beyond it again and again. " + "It seems to last for days, all the while the little lizard is laughing softly and playing with your oversized belly like it was his own personal plaything. ", false);
                                    doConsume(80, 0, 0);
                                    scene("At length, your jaw stops moving, your body seeming to be unable to take anymore and simply halting entirely. " + "You should have burst what seems like a few hundred gigantic feedings ago, but your tremendous gut rests on the ground now. " + "Giving it a scrutinizing look and letting out an appraising hum, the lizard pats it, and declares, \"That\'ll do, I think.\" " + "Gently, he places his wand on your head. \"Now I\'m going to be nice and let you sleep. Take a good rest, for your bulk will be serving me well...\" " + "Your consciousness slowly fades, and your body begins to feel stiff. " + "Where you touch the ground, you seem to sink into it, and as your vision goes dark, the last thing you see is your skin turning to bark and a leafy growth sprouting from it. ", false);
                                    defeatEvent(transformed);
                                }
                                if (alive() && attemptsLeft <= 0) {
                                    scene("\n\tYou catch a glimpse of the shack, and spot the door open. " + "A short, slightly rotund lizard of some sort emerges, draped in snappy wizardly finery and capped with a feathered cap. " + "He idly manipulates a magical wand in one hand as he walks intently towards you. ", false);
                                    clearTextView();
                                    btntxt(1, "Wait");
                                    btntxt(3, "Run");
                                    listen = function ():void {
                                        switch (btnchc) {
                                            case 1:
                                                endEvent(grasslandsHub);
                                                scene("\tYou cross your arms, and wait for the wizard\'s approach. The little lizard comes up to you, twirling his wand dextrously. " + "He lets out a devious giggle as he approaches, sharp teeth apparent in his wide grin. You steel yourself for a fight, having been caught red handed. ", true);
                                                combatEvent(lizardWizard);
                                                break;
                                            case 3:
                                                endEvent(grasslandsHub);
                                                scene("\tYou try to pull yourself away from the delicious fruits, but it seems that they\'re rather insistant that you stay. " + "The plants appear to shift about subtly, bending and creaking as they encircle you, forming a natural barrier that you can\'t escape from easily. ", true);
                                                switch (testSkill((STR + AGI + INT + 30) / 3, 0)) {
                                                    case true:
                                                        scene("Grunting with effort, you tear at bushes, branches, and vines, managing to make an opening just long enough to slip through. " + "As you start running, you hear the wizard let out an angry, wordless screech of anger. " + "Looking back, it\'s obvious that he\'s nowhere near fast enough to catch you. ", false);
                                                        break;
                                                    case false:
                                                        scene("You pull and tear at the mass of plants in your way, but to no avail. Plant matter seem to regrow as fast as you destroy it. " + "Panting for breath, you turn to face the owner, who\'s sporting a wicked, sharp-toothed grin, " + "which is a disquieting deviation from his round, pudgy, seemingly harmless form. ", false);
                                                        combatEvent(lizardWizard);
                                                }
                                        }
                                    };
                                }
                            };
                            break;
                        case 2:
                            this.scene("\tPulling your longing gaze away from the scrumptious looking fruits, you stalwartly approach the shack. " + "The small windows offer a glimpse of a densly-packed magical apparati and accessories, tomes and calcinators sitting in gently glowing magical circles. " + "Before you can even knock, the door swings open, and a short, round little lizard stands before you, decked out in cloth finery and a feathered cap. " + "\"Ah, a guest!\" he says, his voice dancing with whimsy. " + "\"You\'re quite the lucky fellow to find this place. I was just going to be moving it in a few more minutes.\" " + "You let that last comment go, just accepting that you\'re dealing with the magically-inclined. " + "With an exagerrated bow, he continues to ask, \"What can a humble wielder of the arcane do for you on this fine day?\" ", false);
                            this.tradeButton(1);
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        Vendor = ObjectUtil.copy(ClerkLizard) as Vendors;
                                        Vendor.StoreExit = ClerkLizard.StoreExit;
                                        doShop();
                                        break;
                                    case 13:
                                        scene("\n\tYou politely bid the lizard fellow farewell, your curiosity satisfied. He tilts his head and gives a quizzical look as you walk away and return to your explorations. " + "When you look back, the farm has vanished, and the only sign of the wizard is a cart rolling away towards the horizon. ", false);
                                        endEvent(grasslandsHub);
                                }
                            };
                    }
                    break;
                case this.CapturedByWildlings:
                    this.appView(0);
                    switch (this.specialEvent) {
                        case 1:
                            this.clearView();
                            this.doRest();
                            this.doConsume(10, 5, 8);
                            this.randomNPC(1);
                            this.createNPC(2, this.enemyt.species, this.enemyt.gender);
                            this.scene("\tYou wake up laying on your back and looking up at the sky. " + "Your head throbs with pain", true);
                            if (this.FUL > 100) {
                                this.scene(" as well as your stomach", false);
                            }
                            this.scene(". You lean up and rub your head as you notice your stomach has gotten somewhat fuller than it was before you were knocked unconscious. " + "\n\tYou see the " + this.NPC2.species.name + " you were fighting before having an argument with another much fatter " + this.NPC1.species.name + " wildling. " + "Their language is unkown to you, and yet you somehow can vaguely understand what they\'re saying. " + "They seem to be arguing about the fat one not bringing something. " + "The main thing you can tell is the one you were fighting before is angrily gesticulating at you while the fat one seems to be responding defensively. " + "The skinnier wildling says something in an annoyed tone to the fatter " + this.NPC1.species.name + " and they both head off into the tall grass as their argument continues. ", false);
                            if (this.FUL >= this.maxFUL) {
                                this.scene("\n\tYou start to get up, but as your headache subsides you finally realize how painfully overstuffed you are. " + "You lay back on the ground again with a thud and rub your aching stomach. " + "The wildlings hear you fall back to the ground and turn back towards you. " + "The fatter wildling punches the other one in the shoulder and says something to " + this.NPC2.gender.him + " with a distinctive \"I told you so\" tone. " + "The other one just rolls " + this.NPC2.gender.his + " eyes as they walk up next to you. " + "The " + this.NPC2.species.name + " you were fighting says something dismissive back to " + this.NPC1.gender.him + " before sauntering over to you and roughly planting " + this.NPC2.gender.his + " " + this.NPC2.species.foot + " onto your overfed gut. " + "The rough jolt to your gut is too much for you to withstand and you once again pass out. ", false);
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        specialEvent = 2;
                                        doEvent(CapturedByWildlings);
                                    }
                                };
                            }
                            else if (this.testImmobile(1) == true) {
                                this.scene("\n\tYou roll back and forth in an attempt to stand, but find your " + this.waist() + " is so heavy it anchors you to the ground. " + "The wildlings notice you trying to get up and start walking back towards you. " + "The fatter wildling punches the other one in the shoulder and says something to " + this.NPC2.gender.him + " with a distinctive \"I told you so\" tone. " + "The other one just rolls " + this.NPC2.gender.his + " eyes as they walk up next to you. " + "The " + this.NPC2.species.name + " you were fighting says something dismissive back to " + this.NPC1.gender.him + " before once again whacking you over the head, knocking you unconscious once again. ", false);
                                this.nextView();
                                this.listen = function ():void {
                                    if (btnchc == 12) {
                                        specialEvent = 2;
                                        doEvent(CapturedByWildlings);
                                    }
                                };
                            }
                            else {
                                this.scene("\n\tYou finally regain your wits enough to stand up, but you wobble on your feet and stumble to your knees, as you\'re still woozy and light-headed from the blow to your head. " + "By the time you\'ve regained your senses, they\'ve already dissapeard completely into the grass. ", false);
                                this.endEvent(this.grasslandsHub);
                            }
                            break;
                        case 2:
                            this.statusStretchFruit = 300;
                            this.statusStretchFruitPower = 30;
                            this.updateStats();
                            this.doRest();
                            this.stuffToBursting();
                            this.scene("\tYou\'re jolted awake again as you feel yourself swaying back and forth. " + "You blink your eyes a few times and see the ground drifting downwards in front of you. " + "You attempt to move your arms and legs and noticed that they\'re tied behind you around a wooden pole. " + "You look up and see the fat butt of the " + this.NPC1.species.name + " carrying the pole you\'re tied to on his shoulders with the other wildling presumably carrying the other end. " + "\n\tLooking down you notice your " + this.waist() + " stomach hanging down from your " + this.fatness() + " frame is much larger than it was before, and yet you don\'t feel any fuller. " + "Another rope is tightly looped several times around the large circumference of your waist, " + "fortunately preventing your " + this.sayWeight(this.weight()) + " of weight from pulling entirely on your wrists and ankles even if it puts some much unwanted pressure on your achingly swollen gut. " + "You notice that some sort of blue goo has been liberally smeared all over your " + this.playerSpecies.furBelly + " " + this.playerSpecies.furred + " belly and you smack your lips as you taste an odd rubbery grapey taste. " + "You also notice a distinct tingling sensation wherever the blue goo touches. " + "\n\tThe two wildlings are sharing some banter back and forth, each sounding proud of their new catch. " + "You attempt to understand what they\'re saying, but the heavy load in your bloated tingly gut is making it hard to focus on anything. " + "Eventually the gentle swaying combined with your tremendous meal inevitably pulls you into a food coma. ", true);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    specialEvent = 3;
                                    doEvent(CapturedByWildlings);
                                }
                            };
                            break;
                        case 3:
                            this.doRest();
                            this.scene("\tWhen you regain consciousness you\'re kneeling on the ground, your stomach no larger than it was before although your " + this.playerSpecies.hands + " are still tied in front of you. " + "A fat black dragon of approxiamtely six hundred pounds stands in front of you dressed in a robe of mulitcolored cloths, thickly studded with a mismatch of expensive jewelry and trinkets. " + "He addresses someone next to you and you look up to see the wildlings that captured you standing with their hands on your shoulder, holding you down. " + "The bejeweled dragon says something to them in an impressed tone before writing something down on a clipboard he\'s carrying. " + "The wildlings at your shoulders nod appreciatively back to him before walking off with grins on their faces. " + "\n\tAs you look back at them you finally notice that all around you there\'s a large village of huts with several wildlings milling about their business. " + "It\'s hard to tell from where you\'re sitting, but the village looks to be almost as large as the city. " + "Before you can study the village too intently your attention is drawn back to the heavy set black dragon as he addresses you. " + "\n\t\"You\'ll make quite a good offering, eh " + this.playerSpecies.name + "?\" he says perfectly well in your common language as he pokes you in the gut with his quill pen. " + "He motions to two similarly heavy set, though much more muscular black dragon guards that come over and pick you up to your feet. " + "The jeweled black dragon steps aside to reveal the monumentally large creature behind him. " + "\n\tA crater larger than most houses is filled entirely by the tremendous nonanthro gold scaled dragon sleeping within. " + "The dragon is a rippling sea of shining golden scales, his arms and legs so swaddled in fat as to render them useless, " + "and even with the crater being at least " + this.sayDistance(144) + " deep at the center, the dragons voluminous waist causes the dragons back to stick up another " + this.sayDistance(144) + " above ground level. " + "The dragon is made of so many thick rolls of fat as to render him an almost spherical ball of lard. " + "Around the edges of the crater there are several furs with buckets of blue goo that appear to be massaging huge globs of it into the dragon\'s belly scales. " + "Several other furs are dredging dirt out of the crater and adding it to the wall of dirt surrounding it, apparently attempting to make the pit deeper for the expanding dragon. ", true);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    specialEvent = 4;
                                    doEvent(CapturedByWildlings);
                                }
                            };
                            break;
                        case 4:
                            this.scene("\tThe guards that pulled you to your feet start pulling you towards the crater and on to a wood platform that overhangs it. " + "One of the guards pounds his spear on the platform twice and the dragon opens his eyes and pulls tremendous head up on the end of his thick fat neck. " + "The large dragon looks down at you with a look of disgust before slowly shifting his gaze up to the two quards and giving them the same look. " + "One of the guards gestures widely from you to the dragon and speaks in a loud reverent tone with a large smile on his face. " + "\n\tThe dragon seems to give a bored sigh before dutifully lowering his head to the edge of the platform, his head dwarfing both you and the guards." + "The dragon opens his jaws wide and before you can react the guards heave you into the dragons waiting maw. " + "He swallows you down as you barely make a bulge in his tremendous fleshy neck, sending you down a long trip to his gargantuan stomach. ", true);
                            this.defeatEvent(this.devoured);
                    }
            }
            switch (ID) {
                case this.HillsHub:
                    this.scene("\tYou wander off into the foothills southeast of the city, prepared for adventure. The dark mountains loom in the distance imposingly. ", true);
                    break;
                case this.HillsEvent:
                    switch (this.eventRandomization(this.hillsTravel)) {
                        case 1:
                            switch (this.dXY(1, 3)) {
                                case 1:
                                    this.locationTravel(this.dessertVillage);
                                    break;
                                default:
                                    this.locationTravel(this.wishingWell);
                            }
                            break;
                        case 2:
                            this.locationUpdate(this.HillsHub);
                            this.combatEvent(this.HillsHub.enemies[this.dXY(0, this.HillsHub.enemies.length - 1)]);
                            if (this.enemyt.introduction == "") {
                                this.scene("\tAs you adventure through the hills, suddenly " + this.enemyt.article + " " + this.enemyt.name + " leaps out from behind a rock! ", true);
                            }
                            if (this.enemyt.introduction != "") {
                                this.scene("\t" + this.enemyt.introduction, true);
                            }
                            break;
                        case 3:
                            this.scene("\tYou find a dirt footpath. As you approach closer you find it leads to one of the roads out of the city! Do you want to leave? ", true);
                            this.choiceButton();
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        if (dXY(1, 2) == 1) {
                                            scene("\tYou emerge from the hills and find yourself on the eastern road. ", true);
                                            endEvent(EastRoad);
                                        }
                                        else {
                                            scene("\tYou emerge from the hills and find yourself on the southern road. ", true);
                                            endEvent(SouthRoad);
                                        }
                                        break;
                                    case 13:
                                        scene("\tYou decide to stay in the hills for a while longer. ", true);
                                        endEvent(HillsHub);
                                }
                            };
                            break;
                        default:
                            switch (this.dXY(1, 1)) {
                                case 1:
                                    this.scene("\tAs you travel through the forest, you come across a small tree bearing fruit. You bend down and pick the only ripe looking fruit. ", true);
                                    this.endEvent(this.HillsHub);
                                    switch (this.dXY(1, 2)) {
                                        case 1:
                                            this.getItem(this.orange);
                                            break;
                                        case 2:
                                            this.getItem(this.Apple);
                                    }
                            }
                    }
                    break;
                case this.dessertVillage:
                    this.scene("\tAs you crest the next hill, you come across a tiny town in the next valley that looks to be populated with small creatures made up of various desserts. " + "As you admire them, a few of townsfolk come up to see you and beckon you to follow. ", true);
                    this.btntxt(11, "Eat them!");
                    this.btntxt(12, "Follow them");
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 13:
                                scene("\tYou ignore the miniature dessert people and go on your merry way. They were kind of creepy anyway. ", true);
                                endEvent(HillsHub);
                                break;
                            case 11:
                                scene("\tYou ignore their puny request and grab ahold of the few delicious dessert people talking to you and stuff them in mouth. ", true);
                                doConsume(12, 0, 8);
                                endEvent(HillsHub);
                                break;
                            case 12:
                                scene("\tYou follow the dessert creatures into their small village, your stomach growling as their delicious smells enter your nostrils. " + "You can barely hear them, but it sounds like they want to worship you. As you lose yourself in their smells you realize all of them have disappeared. " + "Just as you\'re looking around you fall unconcious. ", true);
                                nextView();
                                listen = function ():void {
                                    scene("\tYou wake up tied down with a bunch of restraints around your arms, legs and head. " + "You can barely move your head, but you can see hundreds or maybe even thousands of these small dessert creatures and even some much larger ones - " + "even though they are still at most half your size. One of them shouts \"Begin the sacrifice!\"\' as a device opens your mouth impossibly wide. " + "You panick as the dessert people begin piling themselves inside of your maw and going down your throat. " + "Your eyes widen in confusion, but your mouth salivates at how insanely delicious they are. You have no idea why they are doing this, but you don\'t care. " + "Even though the dessert people are fairly small, they seem to be much more... filling than you\'d expect. " + "You feel the pressure in your stomach as it swells out drastically, bulging around the restraints across your body. " + "You enter a state of bliss as you are forcibly devouring an entire race of delicious little people. ", true);
                                    doConsume(40, 0, 30);
                                    switch (alive()) {
                                        case true:
                                            scene("\n\tIn a matter of minutes your stomach has bulged out massively and the restraints across your torso snap and fly off. " + "You can\'t see how many of them are left, but all of the sudden, even though you feel thoroughly stuffed, you want to eat them all. No, you NEED to eat them all. " + "If you weren\'t in restraints you\'d be doing the same thing they are forcing you to do now, eat them and become massive. ", false);
                                            doConsume(275, 0, 200);
                                            switch (alive()) {
                                                case true:
                                                    scene("\n\tHours pass by and eventually only one dessert person remains. " + "Your stomach has grown tremendously and the final restraints on your wrists and ankles are practically stretched to the limit as your fat bulges around them. " + "The final dessert person undoes the restraints as you lay there like a bluberous land-whale. ", false);
                                                    doConsume(550, 0, 400);
                                                    switch (alive()) {
                                                        case true:
                                                            scene("\n\tYou struggle to get to your feet, your center of gravity drastically changing from eating an entire race of delicious dessert people. " + "After you manage to get to your feet, you belch thunderously. They were the most delicious race of people you had ever eaten. " + "Just then you realize... there\'s still one more. ", false);
                                                            clearView();
                                                            btntxt(11, "Eat him");
                                                            leaveButton(13);
                                                            listen = function ():void {
                                                                switch (btnchc) {
                                                                    case 11:
                                                                        scene("\tYou grab ahold of the last dessert person. He gives a tiny triumphant cheer of glee before you stuff him in your mouth and gulp him down. ", true);
                                                                        doConsume(10, 0, 7);
                                                                        switch (alive()) {
                                                                            case true:
                                                                                scene("Hopefully there are more where that came from. ", false);
                                                                                endEvent(HillsHub);
                                                                                break;
                                                                            case false:
                                                                                scene("His muffled cheers travel down your throat and just as they\'re silenced completely, you realize what a mistake that last bite was. " + "You stomach stretches thos last painful few inches and you begin to faint from fullness. You collapse over on your back, " + "crushing the tiny village homes as your overtaxed gut wobbles over you and you pass out from gluttonous pain. ", false);
                                                                                defeatEvent(overeating);
                                                                        }
                                                                        break;
                                                                    case 13:
                                                                        scene("\tYou thank the dessert person and leave, not wanting to risk accidental eruption. " + "You waddle from side to side with every step as your gigantic belly sloshes around. ", true);
                                                                        endEvent(HillsHub);
                                                                }
                                                            };
                                                            break;
                                                        case false:
                                                            scene("You hope to devour the entire race of dessert people, but your stomach starts to protest as the last of the dessert people pile into your mouth. " + "You just want to eat them all, but it seems you won\'t be able to... ", false);
                                                            defeatEvent(overeating);
                                                    }
                                                    break;
                                                case false:
                                                    scene("You pass out off after your stomach becomes so large that you practically can\'t see past it. ", false);
                                                    defeatEvent(overeating);
                                            }
                                            break;
                                        case false:
                                            scene("You doze off as the dessert people continually stuff themselves into your maw, filling your stomach and fattening you up. ", false);
                                            defeatEvent(overeating);
                                    }
                                };
                        }
                    };
                    break;
                case this.wishingWell:
                    this.scene("\tAs you " + this.walk() + " through the hills, you notice a hole in the rockface just ahead, the surrounding rocks shaggy with moss. " + "At first you think it’s just a natural crack in the hillside, but when you stick your head closer you get a sense of depth from the darkness beyond. Maybe it’s some kind of tunnel. ", true);
                    this.btntxt(11, "Investigate");
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 13:
                                scene("\tWith a shrug you withdraw from the hole and head on your way. It’s almost certainly not worth investigating- absolutely NOTHING happens in these thar hills... ", true);
                                endEvent(HillsHub);
                                break;
                            case 11:
                                scene("\tIntrigued, you push further into the rocky gap, which leads into a natural-looking tunnel of some kind. ", true);
                                if (playerHeight >= 72) {
                                    scene("You have to duck slightly to get through the cave entrance without banging your head. ", false);
                                }
                                if (playerHeight >= 48 && playerHeight < 72) {
                                    scene("You can just touch the top of the cave mouth with your fingertips. ", false);
                                }
                                if (playerHeight < 48) {
                                    scene("You try to reach up to the entrance’s ceiling, but can’t. ", false);
                                }
                                if (waistDiameter() >= 36) {
                                    scene("Squeezing your ample backside between the walls most of the way, ", false);
                                }
                                if (waistDiameter() >= 8 && waistDiameter() < 36) {
                                    scene("Having to breathe in at a couple of points to get through, ", false);
                                }
                                if (waistDiameter() < 8) {
                                    scene("Strolling along with ease, ", false);
                                }
                                scene("after a few dozen paces you emerge into a circular cave, with ", false);
                                switch (timeOfDay()) {
                                    case "morning":
                                        scene("morning sunlight slanting in", false);
                                        break;
                                    case "day":
                                        scene("midday sun shining straight down", false);
                                        break;
                                    case "evening":
                                        scene("evening light glowing", false);
                                        break;
                                    case "night":
                                        scene("bright moonlight diffusing", false);
                                }
                                scene(" through a high gap in the crowning rock walls above. What looks like an old well sits in the middle of the cave, apparently bubbling up from an underground spring somewhere below. " + "A rough, low, crumbling wall encloses the water, looking old enough to be from Ancient times. " + "The sparkling water fills it to the very brim, barely held in by surface tension, rivulets of it occasionally trickling out over the coping, glinting like mercury in the low light. " + "You deduce from the scuffed tracks in the sandy floor that you’re not the only person to have adventured down here. " + "\n\tYou slowly make a circuit around its circumference, seeing nothing unusual except for three strange stone heads built at equal distances around the edge. " + "Time and splashes of water have eroded almost all the detail, so you can’t tell much beyond the fact that they all seem vaguely plump. " + "A couple of cracked and crumbling pieces of masonry might or might-not have traces of writing carved on them. " + "Leaning over the edge, you discover that at least some of the sparkle is coming from quite large accumulations of old coins down there, glinting up through the luminously clear water. " + "\n\tJust as you\'re about to complete your circuit, you come across a much more recent item, a wooden board nailed to a post in the time-honoured \'This is a sign\' tradition. " + "On it is baldly painted: " + "\n\t<i>1 gold 4 LucK " + "\n\t10 4 StR3nGtH " + "\n\t20 4 Siz3 " + "\n\t30 4 GiRtH</i> " + "\n\tWow, whoever heard of a wishing-well with a PRICE LIST? You catch sight of your reflection in the rippling water, and give yourself an ironic grin. " + "It\'s true what they say, tourism ruins everything. ", false);
                                clearView();
                                if (GLD >= 1) {
                                    btntxt(1, "1 gold");
                                }
                                if (GLD >= 10) {
                                    btntxt(3, "10 gold");
                                }
                                if (GLD >= 20) {
                                    btntxt(4, "20 gold");
                                }
                                if (GLD >= 30) {
                                    btntxt(6, "30 gold");
                                }
                                btntxt(7, "Drink water");
                                leaveButton(13);
                                listen = function ():void {
                                    var _loc1_:int = 0;
                                    switch (btnchc) {
                                        case 13:
                                            scene("\tYou decide against parting with any cash on this occasion- besides, you\'d rather not mess with things that you don\'t understand. " + "With a rather guilty glance back at the well, you head back down the tunnel and out into the " + saySun() + "light. ", true);
                                            endEvent(HillsHub);
                                            break;
                                        case 1:
                                            doGold(-1);
                                            scene("\tYou flip a single coin into the well, hearing the solitary \'gloop\' it makes as it hits the water. " + "It sinks without a trace, not even a bubble. With a shrug, you turn and make your way back down the tunnel and into the " + saySun() + "light. Maybe it WILL bring you luck, " + "but for one measly gold coin you can\'t help but feel that whatever spirit watches over that well is going to be all that impressed by your generosity. ", true);
                                            endEvent(HillsHub);
                                            break;
                                        case 3:
                                            doGold(-10);
                                            scene("\tYou count out 10 pieces of gold into your palm and tip them into the water, where they make a rattling splash as they hit. " + "You stand there for a moment, wondering if you should offer up some kind of prayer, or at least close your eyes", true);
                                            switch (dXY(1, 2) == 1 && statusSTRBuffPower < 30) {
                                                case true:
                                                    scene(", when you start to feel a little funny. It takes a couple of moments but you realise that it\'s your ", false);
                                                    if (TOP.Name == Shirtless.Name) {
                                                        scene("shoulders! All of a sudden your skin feels tight across shoulders. ", false);
                                                    }
                                                    if (TOP.Name != Shirtless.Name) {
                                                        scene("clothes! All of a sudden your " + TOP.Name + " feels tight across the shoulders. ", false);
                                                    }
                                                    scene("You flex them uncomfortably, and blink at how powerful they feel all of a sudden. " + "That tingly feeling spreads down your arms, and you do a double-take as they grow noticeably thicker and more powerful, too. The tingling spreads down your spine too, " + "and glancing over your shoulder you watch as your " + fatness() + " backside firms up noticeably- proved by a little flex of your cheeks. " + "The feeling goes all the way through you from the tips of your fingers to the ends of your " + playerSpecies.feet + ", leaving you feeling quite a bit tougher. " + "With a smile on your face, you stride back down the tunnel and into the " + saySun() + "light. ", false);
                                                    statusSTRBuff = 360;
                                                    statusSTRBuffPower = 30;
                                                    break;
                                                case false:
                                                    scene(". In the end you do shut them for a bit, but when you open them nothing seems to have changed. Ah, phooey. You head back outside. " + "Maybe the lesson here is that if you want to be stronger you should work out more, rather than relying on wishes! ", false);
                                            }
                                            endEvent(HillsHub);
                                            break;
                                        case 4:
                                            doGold(-20);
                                            scene("\tYou count out 20 gold pieces- a sizeable double-handful- and drop them into the water with a rock-like \'splosh\', a few bubbles rising to the surface in their wake. " + "You wait a few moments, holding your breath, ", true);
                                            switch (dXY(1, 2) == 1 && playerHeight < 100) {
                                                case true:
                                                    playerHeight = playerHeight + 2;
                                                    scene("You start to feel funny a few paces down the tunnel, almost like an ache in your spine, but you keep on going. " + "Two more steps down the tunnel and the feeling has spread all the way through your back, shoulders and legs, " + "like you\'ve been for a long run- or someone has given you one hell of a massage. Although the air in the tunnel isn\'t that warm, you break into a sweat. " + "You can see the mouth of the tunnel ahead, and press on[, squeezing down the tunnel]. " + "When you reach the opening the funny feeling abruptly stops, but it\'s only when you step out that you realise something HAS changed! " + "Blinking in the " + saySun() + "light you examine yourself in astonishment, comparing yourself to a conveniently-placed tree. " + "You\'ve shot up in height by a good " + sayDistance(2) + ". Not too shabby! Grinning at your good fortune, you breezily head on your way. ", false);
                                                    break;
                                                case false:
                                                    scene("then, when it becomes painfully apparent that nothing\'s happening, you let it out with an audible sigh. " + "Shame- you\'ve always had a hankering to be taller. It looks like the spirits of the well like you just the way you are. " + "Turning, you head back down the tunnel and out into the " + saySun() + "light. ", false);
                                            }
                                            endEvent(HillsHub);
                                            break;
                                        case 6:
                                            doGold(-30);
                                            scene("\tCounting out 30 gold- quite the heap of coin, you reach out over the water" + ", and let it fall into the centre of the pool with a loud \'Ger-BLOOSH!\'. " + "The ripples it makes spread all the way to the edge, slopping water around your " + playerSpecies.feet + ". ", true);
                                            switch (dXY(1, 2) == 1) {
                                                case true:
                                                    FAT = FAT + 90;
                                                    scene("You stand there for a couple of moments, arms braced on the well, unsure about what to do next. The uneasy silence is broken by a deep gurgle from your middle. " + "Glancing down at it, you catch sight of your reflection in the water, and blink. Your face looks... fuller than you remember. " + "In fact, it looks to be getting fuller by the minute! Another subterranean gurgle from your " + waist() + " waist. " + "Standing up, you put your " + playerSpecies.hands + " to it and find that you can feel it swelling bigger! " + "As you stand there, you can feel your entire body supernaturally packing on pounds- your backside swells outwards, " + "your legs grow thicker and your belly rolls out against the coping stones. " + "After a few pounding heartbeats the feeling stops, and you stagger back a couple of paces, experimentally hefting at your new bulk. " + "It\'s hard to say, but you\'ve probably just put on a good " + sayWeight(90) + ". " + "You stumble a little unsteadily back to the outside world, the tunnel feeling distinctly less roomy than it did earlier. In the ", false);
                                                    switch (timeOfDay()) {
                                                        case "night":
                                                            scene("cool night air", false);
                                                            break;
                                                        default:
                                                            scene("warm daylight", false);
                                                    }
                                                    scene(" you take a deep breath, relishing the way your enlarged stomach bows out further than ever. It\'s true what they say- you have to give a little to get a little. ", false);
                                                    break;
                                                case false:
                                                    scene("But apart from getting you wet, your gift doesn\'t seem to impress whatever spirits inhabit this place- you wait a good few minutes, but nothing happens. " + "You don\'t even feel particularly hungry right now (for once). " + "With a grunt of disappointment you turn and head back down the tunnel, emerging into the " + saySun() + "light. Wishing well, smishing well... ", false);
                                            }
                                            endEvent(HillsHub);
                                            break;
                                        case 7:
                                            scene("\tYou glance at the sign, then at the well, and lick your lips. " + "Well, it doesn\'t say you CAN\'T... Leaning over the edge of the well you plunge your cupped hands into the cold, clear water and scoop some up, slurping it down messily. ", true);
                                            switch (dXY(1, 7)) {
                                                case 1:
                                                    scene("It tastes... just like water. Apart from quenching your thirst, nothing even slightly supernatural happens. " + "With a rather guilty glance around you turn and hurriedly make your way back down the tunnel and out into the hills. ", false);
                                                    doConsume(0, 5, 0);
                                                    doStamina(30);
                                                    endEvent(HillsHub);
                                                    break;
                                                case 2:
                                                    switch (playerHeight <= 132) {
                                                        case true:
                                                            playerHeight = playerHeight + 12;
                                                            scene("It tastes sweeter than you\'d expected. In fact, it tastes almost exactly like lemonade! Weird! " + "You\'re still rubbing your damp chin when a wave of nausea runs through you, and you double up around your stomach. " + "A deep rumbling emerges from it, growing louder and louder. " + "\n\t<i>\"Oorgh,\"</i> you think to yourself, <i>\"M-maybe I sh-shouldn\'t have drunk the wa-oh... woah... woah...! WOAH...!\"</i> " + "As the rumbling from your middle becomes deafening, you feel your body SURGE upwards, the ground retreating from you at an alarming rate. " + "You stumble unsteadily as you try to stand upright, feeling like you\'re in an earthquake", false);
                                                            if (playerHeight >= 72) {
                                                                scene(", and promptly bang your head on the ceiling", false);
                                                            }
                                                            scene(". The weird rumbling, trembling sensation abruptly dies away, and you\'re left standing there, panting. " + "Looking around you, the world feels... smaller. Quite a lot smaller. You\'ve GROWN! " + "Looking down at the well, you think you must be at least " + sayDistance(12) + " taller than you were a few seconds ago! ", false);
                                                            if (TOP.Name != Shirtless.Name || BTM.Name != Pantsless.Name) {
                                                                scene("Glancing down, you realise that none of your clothes fit you properly any more- " + "you look like you\'ve borrowed them from your little " + playerGender.brother + ". ", false);
                                                            }
                                                            endEvent(HillsHub);
                                                            break;
                                                        case false:
                                                            scene("It tastes... just like water. Apart from quenching your thirst, nothing even slightly supernatural happens. " + "With a rather guilty glance around you turn and hurriedly make your way back down the tunnel and out into the hills. ", false);
                                                            doConsume(0, 5, 0);
                                                            doStamina(30);
                                                            endEvent(HillsHub);
                                                    }
                                                    endEvent(HillsHub);
                                                    break;
                                                case 3:
                                                    FAT = FAT + 150;
                                                    scene("The water slides down your throat like syrup, amazingly sweet. You blink in surprise, then cough. You weren\'t expecting THAT. " + "Then you feel a tectonic rumbling deep in your guts, and a deep, rolling BURRP escapes from you, echoing off the cave walls and making the well-water ripple. " + "The rumbling is replaced by a strange tingling, the cold water sitting in your stomach like ice. " + "You suddenly feel... so FULL... With another stuffed <i>belch</i> you put your hands to your stomach, only to feel it swelling in your grip! " + "Your eyes boggle as you grab and shake your middle, but it is definitely growing! And not just filling- you\'re gaining weight! " + "The tingling in the pit of your stomach seems to spread throughout your body, and as you stand there you feel ALL of you starting to put on weight- " + "arms, legs, back, neck, the lot! You have to widen your stance to accommodate your swelling belly and thickening thighs. " + "You lumber heavily to the well and stare at your reflection, and gawp as your features plump up before your very eyes. " + "\n\tFinally the cold tingling sensation subsides, and you stop growing. But you\'re been left a good " + sayWeight(150) + " fatter. " + "You\'re now downright " + fatness() + "! Whoever said that drinking water was good for you? " + "You poke at your sizably-expanded gut in disbelief, then slowly shake your head (feeling your cheeks wobble as you do so). " + "Turning, you waddle unsteadily down the tunnel, and emerge rather dazedly into the " + timeOfDay() + ". You REALLY weren\'t expecting THAT... ", false);
                                                    endEvent(HillsHub);
                                                    break;
                                                case 4:
                                                    scene("It tastes... WONDERFUL! You smack your lips, feeling a big, silly smile plaster itself across your face. It\'s the most divine thing you\'ve ever tasted! " + "It\'s... IRRESISTIBLE! You grab hold of the well wall with both hands and PLUNGE your face underwater, gulping it down like some kind of suction pump. " + "You feel your belly fill quickly with the cold water, then grow taut, but you don\'t care- you just HAVE to keep drinking! " + "You gulp down gallon after gallon, completely unable to stop yourself, your belly swelling bigger and bigger against the side of the well. " + "A couple of times you\'re forced up for air, but after a couple of ragged breathes you dive back down again, slurping and gulping for all that you\'re worth. " + "You guzzle well water until it HURTS! ", false);
                                                    doConsume(0, STO * 1.1, 0);
                                                    switch (alive()) {
                                                        case true:
                                                            scene("\n\tThe sloshing weight of your waterlogged stomach finally drags your face clear of the water- to an accompanying " + playerSpecies.angry + " of disappointment. " + "The supernatural compulsion you were under abruptly fades, and you let out a rolling BURRRRP that shakes the cave! " + "You totter back a couple of paces before falling onto your backside, moaning and weakly rubbing at your new waterballoon of a belly. " + "Oogh, you feel almost fit to burst! What came OVER you? With a stifled groan you manage to roll to your feet and stumble back down the tunnel to the outside world, " + "sloshing heavily with each lumbering step you take. Out in the fresh air you feel a little better, but you won\'t want another drink for a long, long time. ", false);
                                                            endEvent(HillsHub);
                                                            break;
                                                        case false:
                                                            scene("\n\tThe ache in your stomach grows stronger and stronger as you swell out like a balloon, actually rising up onto your belly as it fills, " + "until you\'re actually leaning down to keep in contact with the water. " + "Finally the weight of all that water drags your face clear, and you gasp with disappointment- " + "and then with agony as the supernatural compulsion gripping you abruptly fades. " + "You wheeze and let out a watery BURRRRP, your body rolling onto its back as it finds its new centre of gravity. " + "You lay there, pinned by your now enormous waterballoon belly, weighing down on you painfully, your vision going blurry at the edges as you try to breathe, " + "the pressure inside you increasing until it seems you\'re going to POP. Mercifully, before that happens you lose consciousness, and everything fades to black. ", false);
                                                            defeatEvent(overeating);
                                                    }
                                                    break;
                                                case 5:
                                                    scene("For a moment you swill it rather gingerly round your mouth to warm it, and then, reassured that it does just seem to be water, swallow it down. " + "It\'s only as you feel it go down your throat does it start to fizz and bubble angrily, but by then it\'s far, far too late, and you gulp heavily. " + "With a sense of foreboding you turn to look at the well, and the water in that is doing just same, roiling like a pan of boiling water! " + "Suddenly it glows as if powerfully lit from underneath, making your eyes ache. " + "\n\tThe water begins to spiral around, but rather than sinking down in the center it rises UP. " + "And up, and up, until you\'re staring at a figure made of glowing water, like the most delicately-made glass statue ever. " + "You realise with a jolt that it\'s a highly-idealised rendering of a " + playerGender.name + " " + playerSpecies.name + "- or, in other words, YOU. " + "And the spirit inhabiting it does not appear pleased with you. " + "\n\t\"Sacrilege!\" " + playerGender.he + " exclaims, rather waterily. " + capFirst(playerGender.he) + " extends an arm at you, and a jet of icy-cold water sprays forward, smacking straight into your gaping mouth. " + "The force of it knocks you back against the cave wall, spluttering as you gulp water, and gulp, and gulp, and gulp. " + "Your cheeks bulge out, continually swollen by the cateract of water swilling through them. " + "You try to get out from under the deluge, but two more jets pummel at your arms and shoulders, pinning you in place while your stomach swells visibly. " + "\n\t\"You dare to drink from my sacred waters,\" the spirit intones maliciously, \"so THAT shall be your punishment!\" " + "You struggle uselessly, feeling yourself ballooning bigger and bigger and bigger, stretching far more than a mortal body SHOULD be able to. " + "Pretty soon your stomach is resting on the cave floor and you feel your legs lifted uselessly into the air, " + "buoyed up by the pressure from your stomach and backside, while your arms have become swollen and stubby, useless. " + "You bob there, totally unrecognisable as a " + playerSpecies.name + ", a living waterballoon, " + "still being forced larger and larger by the unforgiving spirit, until you\'re filling nearly half the cave! " + "The spirit\'s avatar grows increasingly tall and massive as you expand, eye-to-eye with you as " + playerGender.he + " gushes water into you. " + "Your hide reaches the limits of whatever magical elasticity is maintaining it, and you feel yourself trembling from the tension, " + "the pressure inside you growing greater and greater and greater. " + "A deep, ominous, watery gurgling begins deep inside you, and you clench your eyes shut, " + "but even with them tightly closed as you feel yourself about to burst even the darkness behind your eyelids begins to turn to blinding light... ", false);
                                                    doConsumeQuiet(0, (STO + 250) * 4, 0);
                                                    defeatEvent(overeating);
                                                    break;
                                                case 6:
                                                    switch (Eaten > 0 || Drank > 0 || Inflated > 0 || FAT > 0) {
                                                        case true:
                                                            _loc1_ = weight();
                                                            Eaten = 0;
                                                            Drank = 0;
                                                            Inflated = 0;
                                                            if (FAT < 30) {
                                                                FAT = 0;
                                                            }
                                                            if (FAT >= 30) {
                                                                FAT = FAT - 30;
                                                            }
                                                            _loc1_ = _loc1_ - weight();
                                                            scene("BLEAURGH! It tastes bitter! You swallow it before you can stop yourself. You spit out what you can, feeling your cheeks suck in with distaste. " + "Oogh, that was horrible! You can even feel your insides clench as the cold water pools in your stomach. " + "You put your hands to your middle- then your eyes bulge as you feel your stomach shrinking! No word of a lie, you\'re getting thinner! " + "Your fingers close together as your " + waist() + " stomach reduces in your grip, the cold water chilling you to the bone. " + "By the time the feeling wears off, you must have lost " + sayWeight(_loc1_) + "! Talk about a diet plan. " + "\n\tStill queasy, you stagger down the tunnel and out into the fresh air, feeling disturbingly light on your feet and your stomach disturbingly empty. ", false);
                                                            endEvent(HillsHub);
                                                            break;
                                                        case false:
                                                            scene("It tastes... just like water. Apart from quenching your thirst, nothing even slightly supernatural happens. " + "With a rather guilty glance around you turn and hurriedly make your way back down the tunnel and out into the hills. ", false);
                                                            doConsume(0, 5, 0);
                                                            doStamina(30);
                                                            endEvent(HillsHub);
                                                    }
                                                    break;
                                                case 7:
                                                    switch (playerHeight >= 52) {
                                                        case true:
                                                            playerHeight = playerHeight - 12;
                                                            scene("Ick! That tastes HORRIBLE! You spray the water across the cave (and yourself), wiping at your mouth to get rid of the taste, then trying to pat your damp hide dry. " + "That\'s when you feel a strange tremor run through your body, and with a grunt of surprise your hold up one arm for your inspection, only to watch it... shrink. " + "Along with the rest of you. ", false);
                                                            if (TOP.Name != Shirtless.Name || BTM.Name != Pantsless.Name) {
                                                                scene("Your clothes start to rumple as you sink down into them. ", false);
                                                            }
                                                            scene("By the time whatever crazy curse this is has finished with you, you\'ve shrunk in height by about " + sayDistance(12) + "! " + "Suddenly the cave seems quite a bit taller, and then it echoes with unseen laughter. " + "You high-tail it out of there before anything else can happen, discovering on your way out that people with shorter legs have to walk more. ", false);
                                                            endEvent(HillsHub);
                                                            break;
                                                        case false:
                                                            scene("It tastes... just like water. Apart from quenching your thirst, nothing even slightly supernatural happens. " + "With a rather guilty glance around you turn and hurriedly make your way back down the tunnel and out into the hills. ", false);
                                                            doConsume(0, 5, 0);
                                                            doStamina(30);
                                                            endEvent(HillsHub);
                                                    }
                                            }
                                    }
                                };
                        }
                    };
            }
            switch (ID) {
                case this.dairyFarmCenterQuest:
                    tempQuestUncommonTaste = this.questArray[this.questFind(this.uncommonTaste)];
                    this.createNPC(1, tempQuestUncommonTaste.questNPC.species, tempQuestUncommonTaste.questNPC.gender);
                    switch (this.questStage(this.uncommonTaste)) {
                        case 0:
                            this.scene("\tFrom behind round, bloated cheeks, " + this.NPC1.gender.his + " eyes open, and " + this.NPC1.gender.he + " spots you staring at " + this.NPC1.gender.him + ". " + this.capFirst(this.NPC1.gender.he) + " smiles, face growing even rounder. \n\t\"Well hi there! Guess you\'re an adventurer, huh?\" " + this.capFirst(this.NPC1.gender.he) + " chuckles, causing " + this.NPC1.gender.his + " behemoth body to wobble. " + "\"Yeah, I used to be one myself, but... uh...\" " + this.NPC1.gender.he + " smiles sheepishly and slaps a hand as bloated as a baseball mitt against " + this.NPC1.gender.his + " deeply doughy side, a ripple travelling slowly through that ocean of belly-blubber, " + "\"...Guess success has kinda slowed me down. Not that I\'m complaining!\" " + this.capFirst(this.NPC1.gender.he) + " chuckles again, hand rubbing at " + this.NPC1.gender.his + " enormous gut contentedly. \"I was pretty famous back in the day, you ever heard of me?\" You\'ve never heard of " + this.NPC1.gender.him + ". " + this.capFirst(this.NPC1.gender.he) + " looks a little disappointed, but shrugs " + this.NPC1.gender.his + " bloated shoulders, shaking a couple of apples loose from the tree. " + this.capFirst(this.NPC1.gender.he) + " catches one expertly, without even looking. \"Well hey, never mind, I don\'t miss fame. I\'ve got it pretty good these days. " + "I\'m kind of a tourist attraction here on the farm. " + "All I got to do is sit around all day and I get all the fruit I can eat and all the milk I can drink!\" It shows, it really does. " + "At the mention of food, " + this.NPC1.gender.his + " stomach lets out a cavernous gurgle, and " + this.NPC1.gender.he + " absent-mindedly bites into the apple, nearly cutting it in half. " + "\n\t\"\'Course,\" " + this.NPC1.gender.he + " says with " + this.NPC1.gender.his + " mouth full, \"I do kinda miss city life. Especially some of the FOOD. I think about going sometimes, but...\" " + this.NPC1.gender.he + " swallows the rest of the apple whole and then you watch " + this.NPC1.gender.his + " attempts to stand, " + this.NPC1.gender.his + " huge butt lifting about foot off the ground, quivering, before plopping back down with a THUD that shakes MORE apples from the tree. " + "The big " + this.NPC1.gender.fella + " puffs and pants, grinning sheepishly, \"...it seems a whole lot further away these days.\" " + this.capFirst(this.NPC1.gender.his) + " eyes brighten. \"Say, you wouldn\'t do me a favour, would you? Only I\'ve got this real CRAVING for some " + tempQuestUncommonTaste.questTarget.Name + ".\" " + this.capFirst(this.NPC1.gender.he) + " winks and pats the sack by " + this.NPC1.gender.his + " side. \"I\'ll trade you what you want for it, don\'t worry. And no need to rush...\" " + this.NPC1.gender.he + " smiles again and sighs sleepily, settling back, a gigantic, increasingly immobile mountain of a horse \"I\'m not going anywhere in a hurry...\" ", true);
                            this.clearView();
                            this.appView(0);
                            this.yesView(1);
                            this.noView(3);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        tempQuestUncommonTaste.visible = true;
                                        questAdvance(uncommonTaste);
                                        locationUpdate(dairyFarmCenter);
                                        doEvent(dairyFarmCenter);
                                        scene("\tYour new friend\'s eyes brighten in anticipation behind " + NPC1.gender.his + " bloated cheeks, and " + NPC1.gender.his + " lips crease into a delighted smile. " + "\"You\'ll get me " + tempQuestUncommonTaste.questTarget.article + " " + tempQuestUncommonTaste.questTarget.Name + "? That\'s great!\" " + capFirst(NPC1.gender.his) + " stomach rumbles in agreement, shaking another apple from the tree, " + "which drops onto " + NPC1.gender.his + " stomach with a blubbery \'bong\'. " + capFirst(NPC1.gender.he) + " rubs " + NPC1.gender.his + " hands against the sides of " + NPC1.gender.his + " colossal middle and smiles \"If you do manage to find me some, you won\'t regret it! " + "I think I saw some stumpy fella growin\' them out in the grasslands somewhere. \" You set off back the way you came, and " + NPC1.gender.he + " waves sleepily, already settling back against the tree, which creaks rather ominously. You might want to hurry, before it gets uprooted. ", true);
                                        break;
                                    case 3:
                                        locationUpdate(dairyFarmCenter);
                                        doEvent(dairyFarmCenter);
                                        scene("\tThe gargantuan horse shrugs a little, good-naturedly. \"Fair enough, after all, you\'ve got plenty of adventure of your own to seek out there, " + "without being my errand-" + playerGender.boy + ". Besides,\" " + NPC1.gender.he + " bites off another huge hunk of apple, practically halving it, " + "\"it\'s not like I\'m gonna go hungry around here for long! Best of luck with your adventuring, and if you ever want advice from an old champ...\" " + NPC1.gender.he + " slaps " + NPC1.gender.his + " belly with a resounding GLOOP \"...you know where to find me!\" ", true);
                                }
                            };
                            break;
                        default:
                            this.scene("\tPeering over the curve of " + this.NPC1.gender.his + " hugely obese belly, " + this.NPC1.gender.his + " round face brightens as " + this.NPC1.gender.he + " catches sight of you. " + "\"Well hello again!\" " + this.NPC1.gender.he + " rumbles happily- or possibly that\'s just " + this.NPC1.gender.his + " appetite talking. " + "\"Did you manage to find me " + tempQuestUncommonTaste.questTarget.article + " " + tempQuestUncommonTaste.questTarget.Name + " yet?\" ", true);
                            this.clearView();
                            this.appView(0);
                            if (this.itemOwned(tempQuestUncommonTaste.questTarget)) {
                                this.yesView(1);
                            }
                            this.noView(3);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        scene("\t" + capFirst(NPC1.gender.his) + " fat face breaks into a big smile when you reply in the affirmative. " + "\"Oh boy, that\'s GREAT!\" That vast monster of a middle growls in anticipation, and you hurriedly hand over the " + tempQuestUncommonTaste.questTarget.article + " " + tempQuestUncommonTaste.questTarget.Name + ", your supersized friend grasping for it eagerly and immediately tucking in. " + "While " + NPC1.gender.he + " does so, you surreptitiously count your fingers to make sure you didn\'t lose any. " + "Almost before you know it your offering has been inhaled, and the gargantuan beast sinks back with a contented sigh, " + "one hand on a belly that seems bigger than ever. \"Man, that really hit the spot! I\'m not complaining, but an all-apple diet can get kind of dull.\" " + "Even as " + NPC1.gender.he + " says it, " + NPC1.gender.he + " reaches out and plucks another apple from the tree, chomping into it automatically. " + "\"So,\" " + NPC1.gender.he + " looks down at you with a smile, \"I guess I owe you one.\" " + "With laborious slowness " + NPC1.gender.he + " leans over and hauls a large brown sack up from " + NPC1.gender.his + " side, setting it onto " + NPC1.gender.his + " stomach. " + "\"This is the stuff I collected when I was famous. Now there\'s gotta be something in here that you\'d take as payment. Anything take your fancy?\" ", true);
                                        removeItem(invArray[itemFind(tempQuestUncommonTaste.questTarget)]);
                                        clearView();
                                        btntxt(1, "A warhammer");
                                        btntxt(2, "Splint Armor");
                                        btntxt(3, "Spectrum Gem");
                                        btntxt(4, "Book of Crystals");
                                        btntxt(5, "Light Lance");
                                        btntxt(6, "Box of donuts");
                                        listen = function ():void {
                                            switch (btnchc) {
                                                case 1:
                                                    tempQuestUncommonTaste.questItem = Warhammer;
                                                    break;
                                                case 2:
                                                    tempQuestUncommonTaste.questItem = SplintArmor;
                                                    break;
                                                case 3:
                                                    tempQuestUncommonTaste.questItem = SpectrumGem;
                                                    break;
                                                case 4:
                                                    tempQuestUncommonTaste.questItem = BookOfCrystals;
                                                    break;
                                                case 5:
                                                    tempQuestUncommonTaste.questItem = LightLance;
                                                    break;
                                                case 6:
                                                    tempQuestUncommonTaste.questItem = DonutsSmall;
                                            }
                                            questReward(uncommonTaste);
                                            locationUpdate(dairyFarmCenter);
                                            doEvent(dairyFarmCenter);
                                            scene("\t\"You want that? Sure thing!\" Your enormously fat friend chuckles, bulk quivering as " + NPC1.gender.he + " hands it over. " + "\"There’s a funny story that comes with that, it was when I-\" perhaps mercifully, " + NPC1.gender.his + " story is interrupted by a deafening, subterranean growl from " + NPC1.gender.his + " belly. " + capFirst(NPC1.gender.he) + " winces slightly, and looks at the sky. \"Oof! Sorry about that, but I guess it’s time for some chow- " + "all this jawing has really worked up an appetite! Best of luck, and make sure to look me up another time if you ever want to hear the rest of the story.\" " + "\n\tAnd with that the huge beast slowly hauls " + NPC1.gender.him + "self to " + NPC1.gender.his + " hooves, and with a wave " + NPC1.gender.he + " lumbers slowly towards the farmhouse, barnlike backside swaying in " + NPC1.gender.his + " wake. ", true);
                                        };
                                        break;
                                    case 3:
                                        locationUpdate(dairyFarmCenter);
                                        doEvent(dairyFarmCenter);
                                        scene("\t" + capFirst(NPC1.gender.he) + " looks a little disappointed when you shake your head apologetically, but " + NPC1.gender.he + " smiles all the same. " + "\"Heck, that\'s no problem, little " + playerGender.fella + ", I guess I can wait a little longer.\" " + "\n\tIf " + NPC1.gender.he + " \'weights\' much more " + NPC1.gender.he + " might burst before you\'ve found " + NPC1.gender.him + " " + NPC1.gender.his + " " + tempQuestUncommonTaste.questTarget.article + " " + tempQuestUncommonTaste.questTarget.Name + "- or " + NPC1.gender.he + " might wind up eating YOU! ", true);
                                }
                            };
                    }
                    break;
                case this.dairyFarmCenter:
                    if (!this.hasQuest(this.uncommonTaste)) {
                        this.getQuest(this.uncommonTaste);
                        this.createNPC(1, this.Horse, this.Male);
                        if (this.optionsMales == false) {
                            this.createNPC(1, this.Horse, this.Female);
                        }
                        tempHorseQuest = this.questArray[this.questFind(this.uncommonTaste)];
                        tempHorseQuest.questNPC = this.NPC1;
                        tempHorseQuest.visible = false;
                        switch (this.dXY(1, 7)) {
                            case 1:
                                tempHorseQuest.questTarget = ObjectUtil.copy(this.bloatedBlueberry) as Items;
                                break;
                            case 2:
                                tempHorseQuest.questTarget = ObjectUtil.copy(this.ampleApple) as Items;
                                break;
                            case 3:
                                tempHorseQuest.questTarget = ObjectUtil.copy(this.outrageousOrange) as Items;
                                break;
                            case 4:
                                tempHorseQuest.questTarget = ObjectUtil.copy(this.plentifulPeach) as Items;
                                break;
                            case 5:
                                tempHorseQuest.questTarget = ObjectUtil.copy(this.ridiculousRaspberry) as Items;
                                break;
                            case 6:
                                tempHorseQuest.questTarget = ObjectUtil.copy(this.sizableStrawberry) as Items;
                                break;
                            case 7:
                                tempHorseQuest.questTarget = ObjectUtil.copy(this.giganticGrape) as Items;
                        }
                        tempHorseQuest.questDescription = "Bring " + tempHorseQuest.questTarget.article + " " + tempHorseQuest.questTarget.Name + " to the ex-adventurer horse hanging out at the dairy farm. " + this.capFirst(tempHorseQuest.questNPC.gender.he) + " says " + tempHorseQuest.questNPC.gender.he + " saw someone growing them out in the grasslands. ";
                    }
                    switch (this.questCompleted(this.uncommonTaste)) {
                        case false:
                            switch (this.questStage(this.uncommonTaste)) {
                                case 0:
                                    this.scene("\tWalking through the gate, in the distance you spot something half-obscured in the dappled shade of the apple tree. " + "To start with you think it\'s a landmark of some kind, but as you approach you realise with a start that it\'s nothing of the kind- it\'s an animal! " + "It\'s hard to identify which species to start with, because whoever they are, they\'re one of the fattest thing you\'ve ever seen! " + "Their beige coat, clumpy hooves and mane lead you to guess that " + this.NPC1.gender.he + " a horse. " + "Nine feet tall while sitting down, " + this.NPC1.gender.he + " towers over you, but that\'s nothing compared to " + this.NPC1.gender.his + " girth! " + "A truly colossal stomach fills the space between " + this.NPC1.gender.his + " spread, hamlike legs, the front of it pushing just beyond " + this.NPC1.gender.his + " hooves, " + "while " + this.NPC1.gender.his + " backside is as broad as a barn, the trunk of the apple tree pressing between them, creaking under the strain as " + this.NPC1.gender.he + " dozes in the shade, " + "leaning back comfortably against it. " + "A pile of apple cores litters the ground next to " + this.NPC1.gender.him + ", and a large sack rests underneath a bulging brown lovehandle. " + "You can\'t tell if " + this.NPC1.gender.he + "\'s wearing anything on " + this.NPC1.gender.his + " humungous hindquarters, " + "but you realise that the silvery jacket stretched around " + this.NPC1.gender.his + " shoulders is actually chainmail armour that burst apart! " + "The links of metal tinkle against " + this.NPC1.gender.his + " mammoth, rolling chest as it slowly rises and falls. " + "You don\'t think this beast will even be able to stand! ", true);
                                    break;
                                case 1:
                                    this.scene("\tYou head towards the apple tree with the familiar landmark-sized figure beneath it. " + this.capFirst(this.NPC1.gender.he) + " seems to have grown even heavier in your absence- " + "that gut is definitely pushing past " + this.NPC1.gender.his + " hooves, now. The pile of apple cores and discarded milk bottles has grown distinctly. " + "As you approach the slumbering equine mountain, " + this.NPC1.gender.he + " wakes from " + this.NPC1.gender.his + " doze with a snort. ", true);
                            }
                            this.surroundingsArray[4] = this.dairyFarmCenterQuest;
                            this.explore();
                            break;
                        case true:
                            this.scene("\tYou\'re standing under a tall apple tree in the approximate center of the farm. A gentle breeze softly rustles through the tree. ", true);
                    }
                    break;
                case this.dairyFarmBarn:
                    if (this.questStage(this.eatingContest) != 1) {
                        this.scene("\tYou walk over to the large red barn. " + "You try to pull the large doors open, but they\'re locked from the other side. ", true);
                        this.endEvent(this.dairyFarmCenter);
                    }
                    if (this.questStage(this.eatingContest) == 1) {
                        if (this.specialEvent == 0) {
                            this.randomNPC(1);
                            this.randomNPC(2);
                            this.randomNPC(3);
                            this.scene("\tThe contest is packed not only full of competitors, but of onlookers too, all eager to see who can stuff themselves silly the most. " + "The excitement is buzzing around the place, milk and sweets are being passed around to the spectators and people lining up for bids on who\'d eat how much and what place they\'d get. " + "You look for your spot and take a seat on the supplied haystack. " + "\n\tWhile waiting, you look at those on either side of you. To your right, is a large " + this.NPC2.species.name + " and to your left, an even larger " + this.NPC3.species.name + ". " + "Both have stern looks on their faces, they\'re very serious. " + "You start to wonder if it was such a good idea to enter on behalf of what could be someone more experienced than you. " + "Your doubts are pushed aside when the announcer speaks up. " + "\n\t\"Welcome all ladies and gentlefurs. Today is a big day for us all and a bigger day for the contestants. Each round is larger than the one before, who will be the victor?!\" " + "As he finishes, he turns his ear to the spectators as if he\'s unable to hear them. " + "They shout their approval with yelling, various calls to the contestants and applause. " + "The announcer laughs, returning to his loud voice, \"It seems there\'s discordance between the spectators, so let\'s get this contest running!\" ", true);
                            this.nextView();
                            this.listen = function ():void {
                                if (btnchc == 12) {
                                    specialEvent = 1;
                                    doEvent(dairyFarmBarn);
                                }
                            };
                        }
                        if (this.specialEvent == 1) {
                            this.scene("\tThe announcer quickly rattles off all of the rules. " + "First is that no extra food may be brought except for milk and water to help wash down the food. " + "The second rule is to eat all the food per round. " + "Those who pass out will be brought to the hospital for medical treatment and disqualified. " + "Those who quit part way through the round are also disqualified. " + "In general your goal is to eat through each round completely using only milk or water in case you need a bit of refreshment. " + "With that, you feel you\'re ready to compete... unless you wish to give up now. ", true);
                            this.btntxt(1, "Continue");
                            this.btntxt(3, "Give Up");
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    scene("\tYou mentally steel yourself to prepare for the oncoming gastronomical onslaught. " + "As you wait for your food, several assistant " + NPC1.species.name + " each carry over a platter and puts it down in front of you and each other contestant. " + "The assistants lift off the covers and presenting a bread and dip \"appetizer\" for each of you. ", true);
                                    nextView();
                                    listen = function ():void {
                                        if (btnchc == 12) {
                                            specialEvent = 2;
                                            doEvent(dairyFarmBarn);
                                        }
                                    };
                                }
                                if (btnchc == 3) {
                                    scene("\tRealising that you\'re probably not up to eating in the upcoming round, you quietly stand up to leave your place. " + "Having completed 0 rounds, you earn 0 gold for getting that far. " + "You could have at least tried. ", true);
                                    endEvent(dairyFarmCenter);
                                }
                            };
                        }
                        if (this.specialEvent == 2) {
                            this.scene("\tOnce a large piece of bread, it has been cut open from the top and scooped out to allow for a thick soup dip to be poured in. " + "You find that the only way you\'re going to eat this soup is to break off the bread before scooping up the soup to eat. ", true);
                            this.btntxt(1, "Eat!");
                            this.btntxt(3, "Give up");
                            this.eHEA = 15;
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    doConsume(5, 0, 3);
                                    eHEA = eHEA - 5;
                                    if (eHEA == 10) {
                                        scene("\n\tYou tear off hunks of bread and scoop/soak up as much soup as possible before cramming the bread into your mouth. ", false);
                                    }
                                    if (eHEA == 5) {
                                        scene("\n\tYou continue tearing off hunks of bread, while being careful to not let any of the dip ooze out. " + "The bread bowl stays more or less structurally stable and you manage to stuff several savory mouthfuls down your throat, " + "only occasionaly dripping some of the dip onto your " + TOP.Name + ". ", false);
                                    }
                                    if (eHEA <= 0) {
                                        scene("\n\tYou\'ve reached the home stretch and are now tearing off soggy pieces of the dip soaked bottom of the bread bowl. ", false);
                                        if (HEA > 0) {
                                            scene("You pinch the last soaking bit of bread and drop it into your mouth before swallowing it down. " + "You belch loudly, indicating you\'ve finished this round and are ready to decide what to do when the next one comes up. ", false);
                                            clearView();
                                            btntxt(1, "Continue");
                                            btntxt(3, "Give up");
                                            listen = function ():void {
                                                if (btnchc == 1) {
                                                    switch (dXY(1, 3)) {
                                                        case 1:
                                                            scene("\n\tYou mentally steel yourself to prepare for the oncoming gastronomical onslaught. " + "As you wait for your food, several assistant " + NPC1.species.name + " each carry over a platter and puts it down in front of you and each other contestant. " + "The assistants lift off the covers and presenting a four-layer cheeseburger for each of you. ", false);
                                                            specialEvent = 21;
                                                            break;
                                                        case 2:
                                                            scene("\n\tYou mentally steel yourself to prepare for the oncoming gastronomical onslaught. " + "As you wait for your food, several assistant " + NPC1.species.name + " each carry over a platter and puts it down in front of you " + "and each other contestant after removing the remains of the previous round. " + "The assistants lift off the covers and present a pyramid of 10 hotdogs for each of you. ", false);
                                                            specialEvent = 22;
                                                            break;
                                                        default:
                                                            scene("\n\tYou mentally steel yourself to prepare for the oncoming gastronomical onslaught. " + "As you wait for your food, several assistant " + NPC1.species.name + " each carry over a platter " + "and puts it down in front of you and each other contestant after removing the remains of the previous round. " + "The assistants lift off the covers and present a large meat pie for each of you. ", false);
                                                            specialEvent = 23;
                                                    }
                                                    nextView();
                                                    listen = function ():void {
                                                        if (btnchc == 12) {
                                                            doEvent(dairyFarmBarn);
                                                        }
                                                    };
                                                }
                                                if (btnchc == 3) {
                                                    scene("\tRealising that you\'re probably not up to eating in the upcoming round, you quietly stand up to leave your place. " + "Having completed 1 round, you earn 20 gold for getting that far. " + "At least you tried. ", true);
                                                    questReward(eatingContest);
                                                    doXP(10);
                                                    doGold(20);
                                                    endEvent(dairyFarmCenter);
                                                }
                                            };
                                        }
                                    }
                                    if (HEA <= 0) {
                                        scene("\n\tYou take a breather from the last bite, feeling that you\'ve probably gone a little too far for even slightly feeling comfortable. " + "Shifting on your haystack uncomfortably, you look at the plate of cheeseburger and wonder if you can fit any more in before you pass out. " + "With a small talk to yourself, you work up the courage to eat just one more bite, but find yourself in immense pain. " + "Your stomach seems to want to fall off it\'s so full. " + "You try to stay conscious, the contest round still hasn\'t finished, but you\'re unable to bear the pain for much longer. " + "You remember reaching for one last bite before you fade into unconsciousness. ", false);
                                        questReward(eatingContest);
                                        defeatEvent(overeating);
                                    }
                                }
                                if (btnchc == 3) {
                                    scene("\tYou decide enough is enough, you are too full and feel that a humble defeat is better than an embarrassing loss. " + "You push your plate away, bowing out from the contest. " + "Because you didn\'t complete the whole round, you\'ve been disqualified. " + "While the loss seems to disappoint you, you feel slightly better that you can still walk away rather than having to be carted off to the hospital. ", true);
                                    questReward(eatingContest);
                                    endEvent(dairyFarmCenter);
                                }
                            };
                        }
                        if (this.specialEvent == 21) {
                            this.scene("\tLarger than an average cheeseburger in both height and width, this four-layered burger is a little bit bigger than your head. " + "Each layer has two beef patties, covered with two slices of melted cheese, ketchup and two pickles. " + "The burger sits on the plate, using up most of the room, just waiting to be eaten. ", true);
                            this.btntxt(1, "Eat!");
                            this.btntxt(3, "Give up");
                            this.eHEA = 21;
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    doConsume(7, 0, 4);
                                    eHEA = eHEA - 7;
                                    if (eHEA == 14) {
                                        scene("\n\tYou begin to attempt to dig into the first course, although after a few attempts it\'s clear a burger this large was not meant to be eaten by hand. " + "You look around and see most of the other contestants merely sticking their face into the burger and eating it that way. " + "You follow suit and begin swallowing down hunks of meat and cheese. ", false);
                                    }
                                    if (eHEA == 7) {
                                        scene("\n\tYou\'re making good progress, although it\'s getting harder and harder to actually keep things neat. " + "Your face and chest have several grease and ketchup stains. " + "You start grabbing errant bite sized hunks of burger in your hand and start eating those as well. ", false);
                                    }
                                    if (eHEA <= 0) {
                                        scene("\n\tYou\'ve reached the home stretch and are now scooping up the scattered remains of the burger and cramming them into your grease soaked face. ", false);
                                        if (alive()) {
                                            scene("You pop the last of the cheeseburger in your mouth, sighing contently as you swallow it down. " + "You belch loudly, indicating you\'ve finished this round and are ready to decide what to do when the next one comes up. ", false);
                                            clearView();
                                            btntxt(1, "Continue");
                                            btntxt(3, "Give up");
                                            listen = function ():void {
                                                if (btnchc == 1) {
                                                    if (dXY(1, 2) == 1) {
                                                        specialEvent = 31;
                                                        scene("\n\tYou mentally steel yourself to prepare for the oncoming gastronomical onslaught. " + "As you wait for your food, several assistant " + NPC1.species.name + " each carry over a platter " + "and puts it down in front of you and each other contestant after removing the remains of the previous round. " + "The assistants lift off the covers and present an enormous chocolate cheese cake for each of you. ", false);
                                                    }
                                                    else {
                                                        specialEvent = 32;
                                                        scene("\n\tYou mentally steel yourself to prepare for the oncoming gastronomical onslaught. " + "As you wait for your food, several assistant " + NPC1.species.name + " each carry over a platter " + "and puts it down in front of you and each other contestant after removing the remains of the previous round. " + "The assistants lift off the covers and present an enormous bowl of ice cream for each of you. ", false);
                                                    }
                                                    nextView();
                                                    listen = function ():void {
                                                        if (btnchc == 12) {
                                                            doEvent(dairyFarmBarn);
                                                        }
                                                    };
                                                }
                                                if (btnchc == 3) {
                                                    scene("\tRealising that you\'re probably not up to eating in the upcoming round, you quietly stand up to leave your place. " + "Having completed 2 round, you earn 40 gold for getting that far. " + "Pretty good for a new guy. ", true);
                                                    questReward(eatingContest);
                                                    doXP(20);
                                                    doGold(40);
                                                    endEvent(dairyFarmCenter);
                                                }
                                            };
                                        }
                                    }
                                    if (HEA <= 0) {
                                        scene("\n\tYou take a breather from the last bite, feeling that you\'ve probably gone a little too far for even slightly feeling comfortable. " + "Shifting on your haystack uncomfortably, you look at the plate of cheeseburger and wonder if you can fit any more in before you pass out. " + "With a small talk to yourself, you work up the courage to eat just one more bite, but find yourself in immense pain. " + "Your stomach seems to want to fall off it\'s so full. " + "You try to stay conscious, the contest round still hasn\'t finished, but you\'re unable to bear the pain for much longer. " + "You remember reaching for one last bite before you fade into unconsciousness. ", false);
                                        questReward(eatingContest);
                                        defeatEvent(overeating);
                                    }
                                }
                                if (btnchc == 3) {
                                    scene("\tYou decide enough is enough, you are too full and feel that a humble defeat is better than an embarrassing loss. " + "You push your plate away, bowing out from the contest. " + "Because you didn\'t complete the whole round, you\'ve been disqualified. " + "While the loss seems to disappoint you, you feel slightly better that you can still walk away rather than having to be carted off to the hospital. ", true);
                                    questReward(eatingContest);
                                    endEvent(dairyFarmCenter);
                                }
                            };
                        }
                        if (this.specialEvent == 22) {
                            this.scene("\tThe plate of hot dogs has been stacked upon each other, barely able to contain itself on the plate. " + "Each hot dog consists of a bun, one sausage, cheese, ketchup and mustard packed to the brim. ", true);
                            this.btntxt(1, "Eat!");
                            this.btntxt(3, "Give up");
                            this.eHEA = 21;
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    doConsume(7, 0, 4);
                                    eHEA = eHEA - 7;
                                    if (eHEA == 14) {
                                        scene("\n\tAs this course is much easier to devour, you manage to keep a much faster pace as you chomp down several hotdogs one after the other. ", false);
                                    }
                                    if (eHEA == 7) {
                                        scene("\n\tYou manage to keep up your pace as you swallow down each dog in two or three bites. " + "Greasy juices burst from each one as you bite into it, the juices dripping down your chin and congealing on your chest. ", false);
                                    }
                                    if (eHEA <= 0) {
                                        scene("\n\tYou\'ve reached the home stretch and pick up the last two hotdogs in each hand. " + "You gulp the first one down almost without chewing and pause for a second before you bite into the final hotdog. ", false);
                                        if (alive()) {
                                            scene("You toss the final bite into your mouth, sighing contently as you swallow it down. " + "You belch loudly, indicating you\'ve finished this round and are ready to decide what to do when the next one comes up. ", false);
                                            clearView();
                                            btntxt(1, "Continue");
                                            btntxt(3, "Give up");
                                            listen = function ():void {
                                                if (btnchc == 1) {
                                                    if (dXY(1, 2) == 1) {
                                                        specialEvent = 31;
                                                        scene("\n\tYou mentally steel yourself to prepare for the oncoming gastronomical onslaught. " + "As you wait for your food, several assistant " + NPC1.species.name + " each carry over a platter " + "and puts it down in front of you and each other contestant after removing the remains of the previous round. " + "The assistants lift off the covers and present an enormous chocolate cheese cake for each of you. ", false);
                                                    }
                                                    else {
                                                        specialEvent = 32;
                                                        scene("\n\tYou mentally steel yourself to prepare for the oncoming gastronomical onslaught. " + "As you wait for your food, several assistant " + NPC1.species.name + " each carry over a platter " + "and puts it down in front of you and each other contestant after removing the remains of the previous round. " + "The assistants lift off the covers and present an enormous bowl of ice cream for each of you. ", false);
                                                    }
                                                    nextView();
                                                    listen = function ():void {
                                                        if (btnchc == 12) {
                                                            doEvent(dairyFarmBarn);
                                                        }
                                                    };
                                                }
                                                if (btnchc == 3) {
                                                    scene("\tRealising that you\'re probably not up to eating in the upcoming round, you quietly stand up to leave your place. " + "Having completed 2 round, you earn 40 gold for getting that far. " + "Pretty good for a new guy. ", true);
                                                    questReward(eatingContest);
                                                    doXP(20);
                                                    doGold(40);
                                                    endEvent(dairyFarmCenter);
                                                }
                                            };
                                        }
                                    }
                                    if (!alive()) {
                                        scene("\n\tYou take a breather before the next bite, feeling that you\'ve probably gone a little too far for even slightly feeling comfortable. " + "Shifting on your haystack uncomfortably, you look at the remains of the hotdog pyramid and wonder if you can fit any more in before you pass out. " + "With a small talk to yourself, you work up the courage to eat just one more bite, but find yourself in immense pain. " + "Your stomach seems to want to fall off it\'s so full. " + "You try to stay conscious, the contest round still hasn\'t finished, but you\'re unable to bear the pain for much longer. " + "You remember reaching for one last bite before you fade into unconsciousness. ", false);
                                        questReward(eatingContest);
                                        defeatEvent(overeating);
                                    }
                                }
                                if (btnchc == 3) {
                                    scene("\tYou decide enough is enough, you are too full and feel that a humble defeat is better than an embarrassing loss. " + "You push your plate away, bowing out from the contest. " + "Because you didn\'t complete the whole round, you\'ve been disqualified. " + "While the loss seems to disappoint you, you feel slightly better that you can still walk away rather than having to be carted off to the hospital. ", true);
                                    questReward(eatingContest);
                                    endEvent(dairyFarmCenter);
                                }
                            };
                        }
                        if (this.specialEvent == 23) {
                            this.scene("\tThis meat pie is certainly not meant for one person, it\'s big, full and smells incredibly delicious. " + "The pastry of the pie is bulging incredibly, showing that the pie has been filled to the brim. " + "From the smell of it, it seems to be of packed with meat cooked to perfection with a hint of flavours from assorted ingredients. " + "Upon the top of the spherical crust is a healthy dollop of barbeque sauce, swirled around in a spiral. ", true);
                            this.btntxt(1, "Eat!");
                            this.btntxt(3, "Give up");
                            this.eHEA = 21;
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    doConsume(7, 0, 5);
                                    eHEA = eHEA - 7;
                                    if (eHEA == 14) {
                                        scene("\n\tThey were nice enough to provide you all with forks this time around. " + "You break through the golden crust and scoop out a forkfull of savory meat into your mouth. ", false);
                                    }
                                    if (eHEA == 7) {
                                        scene("\n\tYou continue to dig out hunks of rich pie filling into your mouth and shovel them into your mouth. ", false);
                                    }
                                    if (eHEA <= 0) {
                                        scene("\n\tYou\'ve reached the home stretch and scrape together the last bits of pie filling together. " + "You pile the last mounding bite of meat and crust onto your fork. ", false);
                                        if (alive()) {
                                            scene("You shove the final bite into your mouth, sighing contently as you swallow it down. " + "You belch loudly, indicating you\'ve finished this round and are ready to decide what to do when the next one comes up. ", false);
                                            clearView();
                                            btntxt(1, "Continue");
                                            btntxt(3, "Give up");
                                            listen = function ():void {
                                                if (btnchc == 1) {
                                                    if (dXY(1, 2) == 1) {
                                                        specialEvent = 31;
                                                        scene("\tYou mentally steel yourself to prepare for the oncoming gastronomical onslaught. " + "As you wait for your food, several assistant " + NPC1.species.name + " each carry over a platter " + "and puts it down in front of you and each other contestant after removing the remains of the previous round. " + "The assistants lift off the covers and present an enormous chocolate cheese cake for each of you. ", true);
                                                    }
                                                    else {
                                                        specialEvent = 32;
                                                        scene("\tYou mentally steel yourself to prepare for the oncoming gastronomical onslaught. " + "As you wait for your food, several assistant " + NPC1.species.name + " each carry over a platter " + "and puts it down in front of you and each other contestant after removing the remains of the previous round. " + "The assistants lift off the covers and present an enormous bowl of ice cream for each of you. ", true);
                                                    }
                                                    nextView();
                                                    listen = function ():void {
                                                        if (btnchc == 12) {
                                                            doEvent(dairyFarmBarn);
                                                        }
                                                    };
                                                }
                                                if (btnchc == 3) {
                                                    scene("\tRealising that you\'re probably not up to eating in the upcoming round, you quietly stand up to leave your place. " + "Having completed 2 round, you earn 40 gold for getting that far. " + "Pretty good for a new guy. ", true);
                                                    questReward(eatingContest);
                                                    doXP(20);
                                                    doGold(40);
                                                    endEvent(dairyFarmCenter);
                                                }
                                            };
                                        }
                                    }
                                    if (!alive()) {
                                        scene("\n\tYou take a breather before the next bite, feeling that you\'ve probably gone a little too far for even slightly feeling comfortable. " + "Shifting on your haystack uncomfortably, you look at the remains of the hotdog pyramid and wonder if you can fit any more in before you pass out. " + "With a small talk to yourself, you work up the courage to eat just one more bite, but find yourself in immense pain. " + "Your stomach seems to want to fall off it\'s so full. " + "You try to stay conscious, the contest round still hasn\'t finished, but you\'re unable to bear the pain for much longer. " + "You remember reaching for one last bite before you fade into unconsciousness. ", false);
                                        questReward(eatingContest);
                                        defeatEvent(overeating);
                                    }
                                }
                                if (btnchc == 3) {
                                    scene("\tYou decide enough is enough, you are too full and feel that a humble defeat is better than an embarrassing loss. " + "You push your plate away, bowing out from the contest. " + "Because you didn\'t complete the whole round, you\'ve been disqualified. " + "While the loss seems to disappoint you, you feel slightly better that you can still walk away rather than having to be carted off to the hospital. ", true);
                                    questReward(eatingContest);
                                    endEvent(dairyFarmCenter);
                                }
                            };
                        }
                        if (this.specialEvent == 31) {
                            this.scene("\tThreatening to overflow the plate, the double layered cheesecake is packed with sugar and other filling to the point where it looks about to burst. " + "One small slice has been cut out for you so that you can see the chocolate filling ooze out of the centre. " + "The whole appearance of the cake makes your mouth water. ", true);
                            this.btntxt(1, "Eat!");
                            this.btntxt(3, "Give up");
                            this.eHEA = 27;
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    doConsume(9, 0, 6);
                                    eHEA = eHEA - 9;
                                    if (eHEA == 18) {
                                        scene("\n\tYou\'re given a very large spoon to thankfully aid you in the dessert course of the contest. " + "You carve out heaping spoonfulls of chocolately cheescake and shoveling rich heavy mountfuls down. ", false);
                                    }
                                    if (eHEA == 9) {
                                        scene("\n\tYou rotate the plate around to get at the next section of cheesecake. " + "You attempt to scrape up any errant chocolate that\'s been oozing out as you gulp down more and more of the decadent dessert. ", false);
                                    }
                                    if (eHEA <= 0) {
                                        scene("\n\tYou spin the plate around to the final surviving side of the cheesecake. " + "What remains is starting to get warm and melty as you bring together sweet sloppy scoops to your mouth. ", false);
                                        if (alive()) {
                                            scene("You shove the final bite into your mouth, sighing contently as you swallow it down. " + "You belch loudly, indicating you\'ve finished this round and are ready to decide what to do when the next one comes up. ", false);
                                            clearView();
                                            btntxt(1, "Continue");
                                            btntxt(3, "Give up");
                                            listen = function ():void {
                                                if (btnchc == 1) {
                                                    specialEvent = 5;
                                                    doEvent(dairyFarmBarn);
                                                }
                                                if (btnchc == 3) {
                                                    scene("\tRealising that you\'re probably not up to eating in the upcoming round, you quietly stand up to leave your place. " + "Having completed 3 rounds, you earn 70 gold for getting that far. " + "A pretty good job for a beginner. ", true);
                                                    doXP(40);
                                                    doGold(70);
                                                    endEvent(dairyFarmCenter);
                                                    questReward(eatingContest);
                                                }
                                            };
                                        }
                                    }
                                    if (!alive()) {
                                        scene("\n\tYou take a breather before the next bite, feeling that you\'ve probably gone a little too far for even slightly feeling comfortable. " + "Shifting on your haystack uncomfortably, you look at the remains of the cheesecake and wonder if you can fit any more in before you pass out. " + "With a small talk to yourself, you work up the courage to eat just one more bite, but find yourself in immense pain. " + "Your stomach seems to want to fall off it\'s so full. " + "You try to stay conscious, the contest round still hasn\'t finished, but you\'re unable to bear the pain for much longer. " + "You remember reaching for one last bite before you fade into unconsciousness. ", false);
                                        questReward(eatingContest);
                                        defeatEvent(overeating);
                                    }
                                }
                                if (btnchc == 3) {
                                    scene("\tYou decide enough is enough, you are too full and feel that a humble defeat is better than an embarrassing loss. " + "You push your plate away, bowing out from the contest. " + "Because you didn\'t complete the whole round, you\'ve been disqualified. " + "While the loss seems to disappoint you, you feel slightly better that you can still walk away rather than having to be carted off to the hospital. ", true);
                                    questReward(eatingContest);
                                    endEvent(dairyFarmCenter);
                                }
                            };
                        }
                        if (this.specialEvent == 32) {
                            this.scene("\tSeveral large scoops of ice cream has been dropped onto the plate, still very cold and smelling absolutely delicious. " + "There are flavours of mint, strawberry, vanilla and chocolate all covered with a caramel topping which has hardened, give the appearance of frozen beauty. ", true);
                            this.btntxt(1, "Eat!");
                            this.btntxt(3, "Give up");
                            this.eHEA = 27;
                            this.listen = function ():void {
                                if (btnchc == 1) {
                                    doConsume(9, 0, 6);
                                    eHEA = eHEA - 9;
                                    if (eHEA == 18) {
                                        scene("\n\tA large metal spoon is wedged into the center of the ice cream mountain. " + "With a couple of tugs you manage to pull it free and start carving out large frozen hunks of ice cream and start devouring them before they get too melty. ", false);
                                    }
                                    if (eHEA == 9) {
                                        scene("\n\tYou start digging into the strawberry quadrant as you devour the quickly melty confection. " + "You occasionally have to take a break so as to avoid getting a massive case of brain freeze. ", false);
                                    }
                                    if (eHEA <= 0) {
                                        scene("\n\tYou\'re reaching the home stretch and most of the ice cream has melted into a soup. " + "You attempt to scoop up what remaining icebergs of ice cream are left and pour them into your mouth. ", false);
                                        if (alive()) {
                                            scene("You pick up the platter and draing the remaining melted ice cream down your gullet, sighing contently as you swallow it down. " + "You belch loudly, indicating you\'ve finished this round and are ready to decide what to do when the next one comes up. ", false);
                                            clearView();
                                            btntxt(1, "Continue");
                                            btntxt(3, "Give up");
                                            listen = function ():void {
                                                if (btnchc == 1) {
                                                    specialEvent = 5;
                                                    doEvent(dairyFarmBarn);
                                                }
                                                if (btnchc == 3) {
                                                    scene("\tRealising that you\'re probably not up to eating in the upcoming round, you quietly stand up to leave your place. " + "Having completed 3 rounds, you earn 70 gold for getting that far. " + "A pretty good job for a beginner. ", true);
                                                    questReward(eatingContest);
                                                    doXP(40);
                                                    doGold(70);
                                                    endEvent(dairyFarmCenter);
                                                }
                                            };
                                        }
                                    }
                                    if (!alive()) {
                                        scene("\n\tYou take a breather before the next gulp, feeling that you\'ve probably gone a little too far for even slightly feeling comfortable. " + "Shifting on your haystack uncomfortably, you look at the remains of the ice cream and wonder if you can fit any more in before you pass out. " + "With a small talk to yourself, you work up the courage to eat just one more bite, but find yourself in immense pain. " + "Your stomach seems to want to fall off it\'s so full. " + "You try to stay conscious, the contest round still hasn\'t finished, but you\'re unable to bear the pain for much longer. " + "You remember reaching for one last bite before you fade into unconsciousness. ", false);
                                        questReward(eatingContest);
                                        defeatEvent(overeating);
                                    }
                                }
                                if (btnchc == 3) {
                                    scene("\tYou decide enough is enough, you are too full and feel that a humble defeat is better than an embarrassing loss. " + "You push your plate away, bowing out from the contest. " + "Because you didn\'t complete the whole round, you\'ve been disqualified. " + "While the loss seems to disappoint you, you feel slightly better that you can still walk away rather than having to be carted off to the hospital. ", true);
                                    questReward(eatingContest);
                                    endEvent(dairyFarmCenter);
                                }
                            };
                        }
                        if (this.specialEvent == 5) {
                            this.scene("\tThe assistants come to take the dishes away, but leave no further courses. " + "The announcer comes back out and shouts \"Wow, lets have a great round of applause for our remaining contestants!\" " + "You look around and notice only 2 other contestants are still sitting at the table, their food stained bellies pushing hard into the table. " + "Strewn about on the ground are several other grease-stained furs groaning and rolling around in pain and indigestion. " + "Gold exchanges hands among the audience as bets on the winners/losers are resolved. " + "\n\t\"I\'d like to thank everyone for coming out tonight, now let\'s clear out of hear before the farmer realizes we\'re trashing his barn.\" " + "With that the audience and the contestants who can still walk leave from the back of the barn. " + "The remaining overstuffed competitors are heaved out by their friends and eventually the barn is left like a whirlwind had passed through. ", false);
                            this.questReward(this.eatingContest);
                            this.doXP(80);
                            this.doGold(125);
                            this.endEvent(this.dairyFarmCenter);
                        }
                    }
                    break;
                case this.dairyFarmHouse:
                    adventurerGenderQuest = this.questArray[this.questFind(this.uncommonTaste)];
                    this.createNPC(1, this.Horse, adventurerGenderQuest.questNPC.gender);
                    switch (this.questCompleted(this.horseQuestFreedom) || this.questCompleted(this.horseQuestRetire)) {
                        case true:
                            this.scene("\tYou walk up the creaky porch steps and knock on the front door, but there\'s no answer. You try the doorknob, but it\'s locked. ", true);
                            break;
                        case false:
                            questLine = 0;
                            if (this.hasQuest(this.horseQuestClothes)) {
                                questLine = 1;
                            }
                            if (this.hasQuest(this.horseQuestRetire)) {
                                questLine = 2;
                            }
                            switch (questLine) {
                                case 0:
                                    switch (this.questCompleted(this.uncommonTaste)) {
                                        case false:
                                            this.scene("\tYou walk up the creaky porch steps and knock on the front door, but there\'s no answer. You try the doorknob, but it\'s locked. ", true);
                                            break;
                                        case true:
                                            this.scene("\tWalking up the creaky porch steps, which have obviously been bent beneath a sizeable weight in the past, " + "you spot that the front door is slightly ajar, and you can hear sounds of a meal going on inside. ", true);
                                            this.clearView();
                                            this.btntxt(11, "Enter");
                                            this.leaveButton(13);
                                            this.listen = function ():void {
                                                switch (btnchc) {
                                                    case 11:
                                                        scene("\tThe door swings open at your push, and you step inside the farmhouse- " + "basically one large room with a bed at one end, a kitchen range at the other, and a big dining table in between. " + "\n\tSeated at the table, on a bench that\'s bending beneath " + NPC1.gender.his + " wrecking-ball weight, is the enormously fat equine ex-adventurer you met earlier. " + capFirst(NPC1.gender.he) + "\'s hungrily eating a meal, though ‘stuffing " + NPC1.gender.his + " face\' would be a more accurate description- the table is piled high with truly delicious-looking, succulent treats- " + "many of which are apple-based- that " + NPC1.gender.he + "\'s ploughing through unstoppably. " + "In a confined space " + NPC1.gender.he + " looks even more colossally chubby than " + NPC1.gender.he + " did outdoors, but you decide that " + NPC1.gender.he + " might just have got fatter since you last saw " + NPC1.gender.him + "- " + "that barn-sized backside of " + NPC1.gender.his + " is practically spilling over the rear of the bench, " + "while " + NPC1.gender.his + " stupendous stomach presses across the table whenever " + NPC1.gender.he + " leans forwards to grab another large mouthful. " + capFirst(NPC1.gender.he) + "\'s obviously enjoying " + NPC1.gender.his + " meal to the full, completely engrossed in the pleasures of the table. ", true);
                                                        clearView();
                                                        btntxt(11, "Talk");
                                                        btntxt(12, "Offer apple");
                                                        leaveButton(13);
                                                        listen = function ():void {
                                                            switch (btnchc) {
                                                                case 11:
                                                                    scene("\tYou try to attract the big fella\'s attention, but the sumo-sized " + NPC1.species.name + " is too engrossed in " + NPC1.gender.his + " meal to even notice your presence. " + "As you watch " + NPC1.gender.he + " picks up " + NPC1.gender.his + " next chubby handful of food and stuffs it between " + NPC1.gender.his + " plump lips. ", true);
                                                                    break;
                                                                case 12:
                                                                    switch (itemOwned(Apple)) {
                                                                        case false:
                                                                            scene("\tYou rummage frantically, but you find that you\'re just clean out of apples. ", true);
                                                                            break;
                                                                        case true:
                                                                            expendItem(invArray[itemFind(Apple)]);
                                                                            scene("\tYou pull out an apple, buff it rather self-consciously on your " + TOP.Name + ", and wave it within the horse\'s orbit. " + "Still chewing " + NPC1.gender.his + " last mouthful, like magic " + NPC1.gender.his + " eyes lock onto it from behind " + NPC1.gender.his + " bulging cheeks, " + "and for the first time " + NPC1.gender.his + " fat face swivels towards you, second chin wobbling. " + capFirst(NPC1.gender.he) + " gulps down the food in " + NPC1.gender.his + " mouth and a light seems to go on in " + NPC1.gender.his + " eyes as " + NPC1.gender.he + " recognises you. " + "\n\t\"Oh, hi there, li\'l " + playerGender.buddy + ". Thanks!\" " + capFirst(NPC1.gender.he) + " takes the apple in one bloated mitt and sinks " + NPC1.gender.his + " tombstone teeth into it as greedily as if " + NPC1.gender.he + " hadn\'t eaten in hours. " + "\"Mshh... Visiting the farm?\" " + capFirst(NPC1.gender.he) + " gulps down a chunk of apple, " + "\"Aww, shucks, I\'d have thought you\'d be far too busy adventuring to pay an old gone-to-seed horse like me a call like this. " + "Ain\'t much to do around here except eat- but that suits ME just fine! Still, it\'s sure swell to see you!\" " + "\n\t" + capFirst(NPC1.gender.he) + " takes another bite from the apple, practically halving it, but as " + NPC1.gender.he + " chews " + NPC1.gender.he + " frowns a little, " + "one fat hand reaching to press into the huge lower hemisphere of " + NPC1.gender.his + " belly. " + "\n\t\"Of course,\" " + NPC1.gender.he + " gulps down " + NPC1.gender.his + " mouthful, \"I guess there IS such a thing as overdoing it- maybe I AM getting kind of plump.\" " + "KIND OF? " + capFirst(NPC1.gender.he) + " takes a last bite out of the apple. \"Now in the Old Days, boy, I was the best-built adventurer there was! " + "Throw that giant boulder into the ocean from West Beach? I got that sucker clean across to Jurassic Isle!\" " + "a deep BELCH catches " + NPC1.gender.him + " by surprise, rattling the crockery, and " + NPC1.gender.he + " chuckles a little, jiggling " + NPC1.gender.his + " huge doughball of a belly. " + "\"Guess I\'m turning into something of a boulder myself...\"  ", true);
                                                                            nextButton();
                                                                            listen = function ():void {
                                                                                scene("\t" + capFirst(NPC1.gender.he) + " holds the apple core between a fat thumb and forefinger and looks at it speculatively, then looks down at you. " + "\n\t\"What do YOU think? Should I come out of retirement?\" " + "At that point " + NPC1.gender.his + " gut grumbles loudly enough for you to feel it through your " + playerSpecies.feet + ". " + "\" Hrrrmphh... On the other hand...\" " + NPC1.gender.he + " casts a rather wistful look down at the table groaning under the weight of so much food, " + "and of " + NPC1.gender.his + " overblown belly. \"... Turns out I really, really LOVE eating. " + "Should I give up all of THIS, just because I\'ve got a little... round?\" ", true);
                                                                                clearView();
                                                                                btntxt(11, "Come out of retirement!");
                                                                                btntxt(13, "I\'ll have to think about that one.");
                                                                                listen = function ():void {
                                                                                    switch (btnchc) {
                                                                                        case 11:
                                                                                            scene("\t\"You\'re RIGHT!\" your enormous new friend exclaims, " + NPC1.gender.his + " eyes gleaming. " + "Glancing at the apple core in " + NPC1.gender.his + " fat hand, " + NPC1.gender.he + " curls it into a fist, stretches " + NPC1.gender.his + " flabby arm back and FLINGS the core through the open window. " + "By the time you lose sight of it over the horizon it\'s still going upwards, whistling through the air. Woah, " + NPC1.gender.he + "\'s stronger than you thought! " + "\"Yeah! Look out, World! Sampson Shire the Mighty is back in town!\" " + "\n\tSampson the Mighty then looks down at " + NPC1.gender.him + "self, and adds, \"But I sure as sweet apples can\'t march into town like THIS!\" " + capFirst(NPC1.gender.he) + " grabs two handfuls of " + NPC1.gender.his + " vast stomach and heaves, hefting it before letting it BLOOMP back onto the table-top with a wobble. \"I\'ve gotta put on some PANTS, at least!\" " + capFirst(NPC1.gender.he) + " rummages in the brown sack stashed by " + NPC1.gender.his + " side, then proudly pulls out an old, voluminous, heavily-worn and much-stretched pair of pants. " + capFirst(NPC1.gender.he) + " " + capFirst(NPC1.gender.he) + "lds them up in front of " + NPC1.gender.him + ", and " + NPC1.gender.his + " wide smile slowly fades as " + NPC1.gender.he + " sees your expression. " + "\n\t\"Uhm... ok, I guess I HAVE put on a little weight since I last wore these...\" " + "Despite their tentlike quality, you don\'t think " + NPC1.gender.he + "\'ll even get one thigh through the waistband any more. " + capFirst(NPC1.gender.his) + " fat face brightens. \"You wouldn\'t be able to do me a favour, would you? Is that tailor still in town? " + "You couldn\'t take these along to " + NPC1.gender.him + " and get " + NPC1.gender.him + " to fix them up for me, could you? Just tell " + NPC1.gender.him + " to put it on \'ole Sampson\'s tab! " + "I\'d be really, REALLY grateful. I\'ll... uh...\" " + NPC1.gender.his + " eyes stray back towards the dining table, \"...Stay here and build up my strength...\" " + "\n\tYou think to take a few measurements before you go- you suspect that description alone is going to be wholly inadequate for this job. " + "Making those measurements it somewhat difficult, but with the aid of a coil of rope you\'re at least able to estimate " + NPC1.gender.his + " vital statistics before setting out for the city. ", true);
                                                                                            getItem(horsePantsBroke);
                                                                                            getQuest(horseQuestClothes);
                                                                                            endEvent(dairyFarmCenter);
                                                                                            break;
                                                                                        case 12:
                                                                                            getQuest(horseQuestRetire);
                                                                                            doEvent(dairyFarmHouse);
                                                                                            break;
                                                                                        case 13:
                                                                                            scene("\tThe enormous equine rumbles out a chuckle, making " + NPC1.gender.his + " whole huge body quiver like pudding. " + "\"Shucks, guess I can\'t say fairer than that. Heck, even I can\'t make up my mind! But...\" " + capFirst(NPC1.gender.he) + " flicks the apple core over one bulky shoulder and reaches for a slab of apple cake, biting deeply into it. " + "\"While I\'m deciding, it can\'t hurt to have a li\'l snack...\" " + "Once the jumbo-sized horse resumes " + NPC1.gender.his + " meal, you can\'t get much more than grunts out of " + NPC1.gender.him + " and so you decide to leave " + NPC1.gender.him + " to it. " + "You leave the farmhouse. ", true);
                                                                                            endEvent(dairyFarmCenter);
                                                                                    }
                                                                                };
                                                                            };
                                                                    }
                                                                    break;
                                                                case 13:
                                                                    scene("\tWith no sign of " + NPC1.gender.his + " stopping soon, you quietly tiptoe back out, leaving the enormous equine to " + NPC1.gender.his + " apparently endless meal. ", true);
                                                                    endEvent(dairyFarmCenter);
                                                            }
                                                        };
                                                        break;
                                                    case 13:
                                                        endEvent(dairyFarmCenter);
                                                }
                                            };
                                    }
                                    break;
                                case 1:
                                    horseQuestFightStage = "clothes";
                                    if (this.questActive(this.horseQuestArmor)) {
                                        horseQuestFightStage = "armor";
                                    }
                                    if (this.questActive(this.horseQuestWeapon)) {
                                        horseQuestFightStage = "weapon";
                                    }
                                    if (this.questActive(this.horseQuestStrength)) {
                                        horseQuestFightStage = "strength";
                                    }
                                    if (this.questActive(this.horseQuestFreedom)) {
                                        horseQuestFightStage = "freedom";
                                    }
                                    switch (horseQuestFightStage) {
                                        case "clothes":
                                            this.scene("\tWalking up the creaky porch steps, which have obviously been bent beneath a sizeable weight in the past, " + "you spot that the front door is slightly ajar, and you can hear sounds of a meal going on inside. " + "You enter the farmhouse to find Sampson still at the dining table, still eating. " + "It may be the same meal as when you last left, it could be that " + this.NPC1.gender.he + "\'s started on a whole new one. Regardless, " + this.NPC1.gender.he + " looks even bigger than when you were last here. " + "As you watch " + this.NPC1.gender.he + " grabs yet another hunk of food from the dwindling piles on the table and chomps down on it. ", true);
                                            this.clearView();
                                            this.btntxt(11, "Talk");
                                            this.btntxt(12, "Offer apple");
                                            this.leaveButton(13);
                                            this.listen = function ():void {
                                                switch (btnchc) {
                                                    case 11:
                                                        scene("\tYou try to attract the big fella\'s attention, but the sumo-sized " + NPC1.species.name + " is too engrossed in " + NPC1.gender.his + " meal to even notice your presence. " + "As you watch " + NPC1.gender.he + " picks up " + NPC1.gender.his + " next chubby handful of food and stuffs it between " + NPC1.gender.his + " plump lips. ", true);
                                                        break;
                                                    case 12:
                                                        switch (itemOwned(Apple)) {
                                                            case false:
                                                                scene("\tYou rummage frantically, but you find that you\'re just clean out of apples. ", true);
                                                                break;
                                                            case true:
                                                                expendItem(invArray[itemFind(Apple)]);
                                                                scene("\tYou find an apple on your person and wave it to attract Sampson\'s attention. " + "Still eating, " + NPC1.gender.his + " fat hand whips out and catches hold of the apple before " + NPC1.gender.he + "\'s even looked up. " + capFirst(NPC1.gender.he) + " blinks when " + NPC1.gender.he + " recognises you, and swallows " + NPC1.gender.his + " mouthful with a loud gulp. " + "\"Hrrmphhh... Sorry about that li\'l " + playerGender.buddy + ", just... umm... practicing my reflexes, and... uhh...\" " + NPC1.gender.he + " glances guiltily at the diminished piles of food on the table, \"...keeping my strength up.\" " + "If " + NPC1.gender.he + " gets much ‘stronger\' that bench will collapse underneath " + NPC1.gender.him + ". \"So,\" " + NPC1.gender.he + " smiles broadly, chomping into the apple with a loud CRUNCH. " + "\"Did you... mmsh... did you managshe to get my old pantsh fixshed up yet?\" ", true);
                                                                clearView();
                                                                if (questReady(horseQuestClothes)) {
                                                                    yesView(11);
                                                                }
                                                                noView(13);
                                                                listen = function ():void {
                                                                    switch (btnchc) {
                                                                        case 11:
                                                                            removeItem(horsePantsFixed);
                                                                            endEvent(dairyFarmCenter);
                                                                            scene("\tSampson\'s face lights up. \"That\'sh GREAT!\" " + NPC1.gender.he + " exclaims, spraying you with apple-bits. \"Aww, shucks, sorry about that,\" " + NPC1.gender.he + " says, hurriedly swallowing " + NPC1.gender.his + " mouthful, still grinning. " + "\n\tIt takes the sumo-sized Sampson quite some time to stand and try on the pants. " + capFirst(NPC1.gender.he) + " winces slightly at the gaudy patterns, but then shrugs. \"Kinda too fancy for my tastes, but it\'s not like I\'M gonna have to see them.\" " + capFirst(NPC1.gender.he) + " finally manages to wriggle into them, hauling the waistband up over " + NPC1.gender.his + " barn-sized backside. \"Guhh... kinda SNUG, but I guess they\'ll do for now. That darned tailor NEVER manages to make things fit me properly!\" " + "\n\tFinally \'decent\', Sampson sits right back down at the table and gives you a big, friendly smile as " + NPC1.gender.he + " reaches for another mouthful. \"Thanks li\'l " + playerGender.buddy + ", guess I owe you again! Reaching down with " + NPC1.gender.his + " free hand " + NPC1.gender.he + " pats " + NPC1.gender.his + " traveller\'s sack, stashed under the table. \"Anything in here you\'ll take as payment?\" ", true);
                                                                            questReward(horseQuestClothes);
                                                                            scene("\"Say, li\'l " + playerGender.buddy + ", I\'ve just thought of something- pants are all very well, but I guess out in the wilderness you still need armour these days.\" " + capFirst(NPC1.gender.he) + " shrugs, and smiles roundly. \"Good job I\'ve still got my... trusty...\" " + capFirst(NPC1.gender.his) + " eyes meet yours as " + NPC1.gender.he + " fingers the burst and ruined fringe of chainmail links framing " + NPC1.gender.his + " rolling, corpulent chest. " + "\n\t\"Aww... shucks.\" With a little help " + NPC1.gender.he + " squirms out of " + NPC1.gender.his + " thoroughly-burst armour and holds it up for inspection. \"Ok, so MAYBE it needs some work to get it back into fighting shape...\" It\'s not the ONLY thing around here that needs that. The enormous doughball equine plops slowly back down onto the bench with a wheeze, and glances at you hopefully. \"Another favour? Know any good armourers these days? Think you could, uhhh...?\" " + "\n\tYou nod, a little resignedly. Sampson looks relieved. That vast gut of " + NPC1.gender.his + " lets out another deep rumble, and " + NPC1.gender.he + " grabs another handful of food from the table without even seeming to notice. Whilst " + NPC1.gender.he + "\'s at the table eating you take measurements of " + NPC1.gender.his + " chest and torso, having to estimate a couple of times when the rope won\'t reach and adding on a bit more anyway to take account of \'growing room\'. " + "\n\t\"Shucks, I always DID have a big chest,\" Sampson comments cheerfully through a shower of crumbs. You refrain from mentioning that these days " + NPC1.gender.he + " has a big EVERYTHING. ", false);
                                                                            getItem(horseArmorBroke);
                                                                            getQuest(horseQuestArmor);
                                                                            break;
                                                                        case 13:
                                                                            scene("\t\"Hey, that\'sh no problem\" " + NPC1.gender.he + " says cheerfully, sitting back further on the bench, which groans beneath " + NPC1.gender.his + " blubbersome backside\'s. " + capFirst(NPC1.gender.his) + " eyes are already straying back to " + NPC1.gender.his + " meal, and " + NPC1.gender.he + " swallows the last of " + NPC1.gender.his + " apple. \"Ther\'sh... *gulp* No rush...\" " + "Rather unsurprisingly, " + NPC1.gender.he + " returns " + NPC1.gender.his + " attention to the tableful of food, and, not being able to get further conversation out of " + NPC1.gender.him + ", you head outside. ", true);
                                                                            endEvent(dairyFarmCenter);
                                                                    }
                                                                };
                                                        }
                                                        break;
                                                    case 13:
                                                        scene("With no sign of " + NPC1.gender.his + " stopping soon, you quietly tiptoe back out, leaving the enormous equine to " + NPC1.gender.his + " apparently endless meal. ", true);
                                                        endEvent(dairyFarmCenter);
                                                }
                                            };
                                            break;
                                        case "armor":
                                            this.scene("\tWalking up the creaky porch steps, which have obviously been bent beneath a sizeable weight in the past, " + "you spot that the front door is slightly ajar, and you can hear sounds of a meal going on inside. " + "You enter the farmhouse to find Sampson STILL at the dining table, and STILL eating. " + "Stuffed into " + this.NPC1.gender.his + " pants, if " + this.NPC1.gender.he + " grows much bigger " + this.NPC1.gender.his + " armour will need resizing before " + this.NPC1.gender.he + "\'s even worn it. " + "The bench is now bending heavily beneath " + this.NPC1.gender.his + " bulging backside, " + this.NPC1.gender.his + " tail firmly squashed between " + this.NPC1.gender.his + " cheeks. " + "As you watch, oblivious to your presence the overblown equine continues " + this.NPC1.gender.his + " stupendous intake of daily calories. ", true);
                                            this.clearView();
                                            this.btntxt(11, "Talk");
                                            this.btntxt(12, "Offer apple");
                                            this.leaveButton(13);
                                            this.listen = function ():void {
                                                switch (btnchc) {
                                                    case 11:
                                                        scene("\tYou try to attract the big " + NPC1.gender.fella + "\'s attention, but the sumo-sized " + NPC1.species.name + " is too engrossed in " + NPC1.gender.his + " meal to even notice your presence. " + "As you watch " + NPC1.gender.he + " picks up " + NPC1.gender.his + " next chubby handful of food and stuffs it between " + NPC1.gender.his + " plump lips. ", true);
                                                        break;
                                                    case 12:
                                                        switch (itemOwned(Apple)) {
                                                            case false:
                                                                scene("\tYou rummage frantically, but you find that you\'re just clean out of apples. ", true);
                                                                break;
                                                            case true:
                                                                expendItem(invArray[itemFind(Apple)]);
                                                                scene("\tYou find an apple on your person and hold it out towards the horse just as " + NPC1.gender.he + " munches into a pie larger than " + NPC1.gender.his + " head, eyes shut in bliss. " + "In the same motion " + NPC1.gender.his + " head swings around, eyes still closed, and CHOMPS into the apple as well, neatly slicing it in half with " + NPC1.gender.his + " huge teeth. " + "Only THEN does " + NPC1.gender.he + " open " + NPC1.gender.his + " eyes, to see you staring at the halved apple in your fingertips. " + "\n\t\"Whoops, ehe... shorry li\'l " + playerGender.buddy + ", guesh I jusht don\'tsh know my own shtrengsh shesh daysh....\" " + "he swallows " + NPC1.gender.his + " mouthful with a loud gulp and pats " + NPC1.gender.his + " enormous, soft stomach, now covering even more of the table\'s surface. " + "\"Hrrrmphhh... Anyway, did you manage to get my armour fixed up?\" ", true);
                                                                clearView();
                                                                if (questReady(horseQuestArmor)) {
                                                                    yesView(11);
                                                                }
                                                                noView(13);
                                                                listen = function ():void {
                                                                    switch (btnchc) {
                                                                        case 11:
                                                                            removeItem(horseArmorFixed);
                                                                            endEvent(dairyFarmCenter);
                                                                            scene("You produce the Stretch-Mail and Sampson looks delighted. " + capFirst(NPC1.gender.he) + "\'s so keen to try it on, " + NPC1.gender.he + " even puts down " + NPC1.gender.his + " current handful of food! " + "One of the biggest struggles is getting the mail over " + NPC1.gender.his + " head, as the neck-hole seems a tad tight, " + "but " + NPC1.gender.he + " finally manages to squeeze through and tug the mail over " + NPC1.gender.his + " chest and stomach. Well, SOME of the way, at least. " + "It does look rather like someone has armoured the top half of a dirigible balloon, but " + NPC1.gender.he + " seems happy enough with the results. " + "\n\t\"Thanks, little " + playerGender.buddy + "! Guess I owe you once again! Now, how can I repay you THIS time?\" " + "With something of a struggle, " + NPC1.gender.he + " manages to reach " + NPC1.gender.his + " bag and drag it out for you to investigate. " + "\"Anything you want in there, it\'s yours.\" ", true);
                                                                            questReward(horseQuestArmor);
                                                                            scene("\t\"Well, I think that\'s everything!\" Sampson says happily, wiping " + NPC1.gender.his + " lips and with obvious effort slowly hauling " + NPC1.gender.him + "self to " + NPC1.gender.his + " overburdened hooves. " + capFirst(NPC1.gender.his) + " huge belly hangs above the tabletop, casting the remains of " + NPC1.gender.his + " meal into shadow. " + "\"Pants, armour, my trusty weap... Aww... SHUCKS!\" Sampson plops back down onto the bench with a BOOMPH, making the wood bend alarmingly beneath " + NPC1.gender.his + " enormous bulk. " + "\"Hrrrmphh... I\'ve just remembered, I traded my weapon a Donkey\'s Age ago to this peddler who was selling the most AMAZING apple-filled doughnuts ...!\" " + "The swollen " + NPC1.species.name + "\'s mouth starts watering at the mere memory, and " + NPC1.gender.he + " absent-mindedly grabs a handful of food from the table and stuffs it into " + NPC1.gender.his + " mouth. " + "\"Mpsh... but I gotta have SOME kind of weapon to go out adventuring. " + "What kind of hero would I be if I didn\'t have a weapon? I mean,\" " + NPC1.gender.he + " swallows " + NPC1.gender.his + " mouthful and reaches for another, \"without a weapon I may as well just stay here eating!\" " + capFirst(NPC1.gender.his) + " eyes fall on you, and " + NPC1.gender.his + " fat features register hope, as well as some mutual embarrassment. " + "\n\t\"Uh, sorry li\'l " + playerGender.buddy + ", but I couldn\'t ask you for ANOTHER favour, could I?\" " + "Sampson pulls out a small money-pouch on a cord sandwiched between " + NPC1.gender.his + " meaty pecs. It makes a satisfying chink in your palm. " + "\"Go buy me a replacement? I don\'t need my EXACT old weapon back, no sir, but something big and heavy to swing would sure be appreciated. " + "An axe would be perfect but, uhh...\" " + NPC1.gender.he + " gestures down at " + NPC1.gender.his + " oversized body and shrugs, a gesture that causes " + NPC1.gender.his + " chest and stomach to ripple sluggishly. " + "\"They might be a little SMALL for me these days...\" ", false);
                                                                            doGold(50);
                                                                            getQuest(horseQuestWeapon);
                                                                            break;
                                                                        case 13:
                                                                            scene("\tSampson\'s fat face creases roundly as " + NPC1.gender.he + " smiles down at you. \"Aww, shucks. Well that\'s ok.\" " + "A fat hand reaches for another tasty treat, and " + NPC1.gender.he + " bites into it, cheeks bulging. \"It\'s not like I\'m going anywhere...\" ", true);
                                                                            endEvent(dairyFarmCenter);
                                                                    }
                                                                };
                                                        }
                                                        break;
                                                    case 13:
                                                        scene("\tWith no sign of " + NPC1.gender.his + " stopping soon, you quietly tiptoe back out, leaving the enormous equine to " + NPC1.gender.his + " apparently endless meal. ", true);
                                                        endEvent(dairyFarmCenter);
                                                }
                                            };
                                            break;
                                        case "weapon":
                                            this.scene("\tWalking up the creaky porch steps, which have obviously been bent beneath a sizeable weight in the past, " + "you spot that the front door is slightly ajar, and you can hear sounds of a meal going on inside. " + "You duck through the now familiar doorway and find... that Sampson Shire is still eating. " + "" + this.capFirst(this.NPC1.gender.his) + " pants and armour already look a size or two too small for " + this.NPC1.gender.him + ", and pretty soon you\'ll be surprised if " + this.NPC1.gender.he + " can even fit through the DOOR, let alone take up adventuring again. " + "The exceedingly obese equine doesn\'t notice your presence, too busy working " + this.NPC1.gender.his + " way through the remaining food on the farmhouse table. " + "As space is cleared of food, you notice that it very soon becomes re-filled with horseflesh. ", true);
                                            this.clearView();
                                            this.btntxt(11, "Talk");
                                            this.btntxt(12, "Offer apple");
                                            this.leaveButton(13);
                                            this.listen = function ():void {
                                                switch (btnchc) {
                                                    case 11:
                                                        scene("\tYou try to attract the big " + NPC1.gender.fella + "\'s attention, but the stupendously plump " + NPC1.species.name + " is too engrossed in " + NPC1.gender.his + " meal to even notice your presence. " + "As you watch " + NPC1.gender.he + " picks up " + NPC1.gender.his + " next chubby handful of food and stuffs it between " + NPC1.gender.his + " plump lips. ", true);
                                                        break;
                                                    case 12:
                                                        switch (itemOwned(Apple)) {
                                                            case false:
                                                                scene("\tYou rummage frantically, but you find that you\'re just clean out of apples. ", true);
                                                                break;
                                                            case true:
                                                                scene("\tYou produce an apple that you had handy and wave it at Sampson, but " + NPC1.gender.he + "\'s too busy eating to notice. " + "So instead you hold the apple up to your mouth and bite into it. The SCRUNCH cuts through the air like a knife and immediately Sampson\'s ears stiffen. " + capFirst(NPC1.gender.his) + " fat arm whips out to grab the apple and " + NPC1.gender.he + " spins around (well, turns a little, at any rate), a thunderous look on " + NPC1.gender.his + " fat face. " + "\n\t\"HEY, that\'s MI-! Oh...\" " + capFirst(NPC1.gender.he) + " sees who it is and stops, blushing slightly. " + "\"Shucks, sorry about that, li\'l " + playerGender.buddy + ", but for a second I thought some varmint was trying to STEAL some of MY food...\" " + capFirst(NPC1.gender.he) + " absent-mindedly keeps hold of your apple, though, then scrunches into it, juice running down " + NPC1.gender.his + " chin as " + NPC1.gender.he + " whinnies contentedly. " + "\"Hrrrmphh.... So did you manage to find me a weapon, then? Only if I don\'t get to adventuring soon, I won\'t be back in time for dinner.\" ", true);
                                                                clearView();
                                                                if (itemOwned(giantAxe) || itemOwned(Axe)) {
                                                                    yesView(11);
                                                                }
                                                                noView(13);
                                                                listen = function ():void {
                                                                    switch (btnchc) {
                                                                        case 11:
                                                                            switch (itemOwned(giantAxe)) {
                                                                                case true:
                                                                                    expendItem(invArray[itemFind(giantAxe)]);
                                                                                    scene("\tSampson\'s face brightens further as you produce an axe, your arms quaking under the oversized article\'s great weight. " + "\"Hey, an axe! That\'s great!\" " + capFirst(NPC1.gender.he) + " takes it from you, and holds it up to admire it, lifting it easily with one fat hand. \"Say, this is PERFECT!\" " + capFirst(NPC1.gender.he) + " takes it in both hands and gives a couple of experimental swings, the last of which accidentally cut through the cord holding up one of the lamps. " + "\"Whoops! Heh, guess I can\'t see over my shoulder as well as I used to!\" " + capFirst(NPC1.gender.he) + " cranes " + NPC1.gender.his + " bloated neck for a moment, thick rolls of flab bunching around it and " + NPC1.gender.his + " chunky shoulder. " + "\"But thanks li\'l " + playerGender.buddy + ", this is JUST what I need!\" " + "\n\tThe uber-hefty horse brings " + NPC1.gender.his + " new axe down blade first onto the table, cleaving a large apple pie in two with a furniture-juddering WHACK. " + "Grabbing one half " + NPC1.gender.he + " begins to munch on it happily. Already " + NPC1.gender.he + "\'s reaching down to haul out " + NPC1.gender.his + " travelling sack. \"I guess I owe you again.\" ", true);
                                                                                    questReward(horseQuestWeapon);
                                                                                    scene("\t\"Hrmmmphhhh... That\'s DEFINITELY everything, this time!\" " + "Sampson whickers, hurriedly gulping down " + NPC1.gender.his + " latest mouthful, and then shamelessly reaching for a couple more \'for the road\'. " + "\"Pants, armour, blade... Yep! Look out World! Here... hoof... Here I... gluh!...\" " + "You watch as the hugely hefty horse\'s thunderously fat thighs bulge and quiver, trying to haul " + NPC1.gender.his + " ponderous, pants-stretching butt into the air. " + "It rises by about an inch, underside still resting on the wooden bench beneath them. " + capFirst(NPC1.gender.he) + " grunts and redoubles " + NPC1.gender.his + " efforts, grimacing with exertion. " + "That big, soft backside begins to lift from its bench with tectonic slowness, jiggling slowly. " + "\n\t\"H-here I... gnhh!... World!... H-HERE... I... COME-urgghhhh...!\" Sampson sinks back right down again with a groan, sweating profusely. " + "The bench groooooans with " + NPC1.gender.him + " as " + NPC1.gender.his + " vast weight settles back down onto it, whilst " + NPC1.gender.his + " enormous stomach smooshes back across the tabletop. " + capFirst(NPC1.gender.he) + " puffs and pants, clapping a hand against that gigantic gut incredulously, as if seeing it for the first time. " + "Yup, It looks like Sampson Shire has, finally, grown too fat to stand. " + "\n\t\"Aww, SHUCKS! This... this is ridiculous!\" " + NPC1.gender.he + " puffs. \"I\'ve... I\'ve always been as strong as a HORSE! " + "I\'ve got to shift some of this poundage, and soon. Hrrmphhh....\" " + NPC1.gender.his + " hand pats again at the curving horizon of " + NPC1.gender.his + " middle, making it ripple slightly. " + "" + capFirst(NPC1.gender.his) + " eyes glaze over slightly. \"On... the OTHER hand...\" " + NPC1.gender.he + " says slowly, spare hand reaching to rub the other side of " + NPC1.gender.his + " stomach, " + "\"It\'d be a whole lot faster and just downright EASIER if I had a spectrum gem to hand! I figure one of THOSE\'d be enough to... uhh...\" " + NPC1.gender.he + " blushes slightly, \"get me back on my hooves.\" " + "The superfattened " + NPC1.species.name + " turns to look at you imploringly, has hand having already snagged a toffee-apple from the table. " + "\n\t\"One last favour, li\'l " + playerGender.buddy + "? The last one, I promise! C-could you get me a spectrum gem from somewhere? Just in case? " + "I\'ll... I\'ll probably not need it in the end, of course. Ain\'t no way Sampson Shire\'s too big a fat-ass to stand up! " + "I\'ve just gotta... catch my breath, that\'s all....\" As you leave you hear the loud \'scrunch\' of toffee being bitten into. ", false);
                                                                                    getQuest(horseQuestStrength);
                                                                                    endEvent(dairyFarmCenter);
                                                                                    break;
                                                                                case false:
                                                                                    scene("\tSampson\'s face brightens further as you produce an axe. \"Hey, an axe! That\'s great!\" " + "" + capFirst(NPC1.gender.he) + " takes it from you, but it sits in " + NPC1.gender.his + " large, fat hand like something out of a My Little Adventuring Warhorse play-set. " + "After a few unsuccessful attempts to grip it in more than thumb and forefinger " + NPC1.gender.he + " reluctantly hands it back, shrugging and letting out a disappointed whinny. " + "\n\t\"Hrrrrrmph... I\'m sorry, but I\'d feel like a complete idiot trying to swing THAT in a fight. " + "Shucks, it\'d be like poking someone with one of those toothpicks with a bit of pineapple on the end of it. " + "They sure make axes SMALLER than they did in my day.\"  ", true);
                                                                            }
                                                                            break;
                                                                        case 13:
                                                                            scene("\tThe humungous horse\'s full features fall slightly. " + "\"Aww, shucks. Well, I guess that\'s ok,\" " + NPC1.gender.he + " glances at the piles of food still left on the table, " + "having to crane " + NPC1.gender.his + " neck to see past " + NPC1.gender.his + " colossal chest and stomach. " + "\"I guess I can wait around until after my NEXT meal before setting out...\" ", true);
                                                                            endEvent(dairyFarmCenter);
                                                                    }
                                                                };
                                                        }
                                                        break;
                                                    case 13:
                                                        scene("\tWith no sign of " + NPC1.gender.his + " stopping soon, you quietly tiptoe back out, leaving the enormous equine to " + NPC1.gender.his + " apparently endless meal. ", true);
                                                        endEvent(dairyFarmCenter);
                                                }
                                            };
                                            break;
                                        case "strength":
                                            this.scene("\tWalking up the creaky porch steps, which have obviously been bent beneath a sizeable weight in the past, " + "you spot that the front door is slightly ajar, and you can hear sounds of a meal going on inside. " + "You enter the farmhouse, and find that Sampson Shire still hasn\'t managed to stand. " + "Though, from the way " + this.NPC1.gender.he + "\'s contentedly tucking into the remains of " + this.NPC1.gender.his + " meal, you suspect that " + this.NPC1.gender.he + "\'s been \'distracted\' for some little while. " + this.capFirst(this.NPC1.gender.he) + "\'s certainly absorbed in eating, paying no attention to you as " + this.NPC1.gender.he + " demolishes the last few snacks that have somehow survived " + this.NPC1.gender.his + " siege up until now. ", true);
                                            this.clearView();
                                            this.btntxt(11, "Talk");
                                            this.btntxt(12, "Offer apple");
                                            this.leaveButton(13);
                                            this.listen = function ():void {
                                                switch (btnchc) {
                                                    case 11:
                                                        scene("\tYou try to attract the big " + NPC1.gender.fella + "\'s attention, but the superchub " + NPC1.species.name + " is too engrossed in " + NPC1.gender.his + " meal to even notice your presence. " + "As you watch " + NPC1.gender.he + " picks up " + NPC1.gender.his + " next chubby handful of food and stuffs it between " + NPC1.gender.his + " plump lips. ", true);
                                                        break;
                                                    case 12:
                                                        switch (itemOwned(Apple)) {
                                                            case false:
                                                                scene("\tYou rummage frantically, but you find that you\'re just clean out of apples. ", true);
                                                                break;
                                                            case true:
                                                                expendItem(invArray[itemFind(Apple)]);
                                                                scene("\tYou\'re tempted to just bounce the apple off Sampson\'s stupendous stomach, " + "but instead you proffer it, holding it out rather gingerly for " + NPC1.gender.him + " to see from the corner of " + NPC1.gender.his + " eye. " + "Even with " + NPC1.gender.his + " cheeks jammed full of food, " + NPC1.gender.his + " fat face still swings towards it hungrily. " + "A light comes on behind " + NPC1.gender.his + " eyes and " + NPC1.gender.he + " focusses beyond the apple and onto you. " + "\"Well hi there, li\'l " + playerGender.buddy + "! That for me? Thanks!\" " + capFirst(NPC1.gender.he) + "\'s taken it and bitten into it before you can even respond. " + "\"Good thinking- s\'HEALTHY, right?\" " + NPC1.gender.he + " says around " + NPC1.gender.his + " bulging mouthful. " + "Much \'healthier\' and Sampson\'s going to pop. " + capFirst(NPC1.gender.he) + " swallows and says, \"So did you manage to get a Spectrum Gem yet?\" ", true);
                                                                noView(13);
                                                                if (itemOwned(SpectrumGem)) {
                                                                    yesView(11);
                                                                }
                                                                listen = function ():void {
                                                                    switch (btnchc) {
                                                                        case 11:
                                                                            expendItem(invArray[itemFind(SpectrumGem)]);
                                                                            scene("\t\"That\'s- URRP!- that\'s GREAT!\" the humungous horse huffs, grinning widely and holding out a fat mitt in expectation. " + "A little reluctantly, you hand it over. " + "\n\tAs Sampson\'s chubby fist clenches around the gem, it crackles with power, and you take a hurried step back as its energy is released into your expansive equine companion. " + capFirst(NPC1.gender.he) + " whinnies loudly and seems to luxuriate in the process as the bolts of light supercharge " + NPC1.gender.him + ", " + NPC1.gender.his + " body devouring energy as eagerly as it does food. " + capFirst(NPC1.gender.he) + " stretches and arches " + NPC1.gender.his + " back, " + NPC1.gender.his + " huge hamlike legs quivering, and " + NPC1.gender.his + " barn-sized backside slowly lifts from the bench, lightning still playing around " + NPC1.gender.him + ". " + "At the peak of " + NPC1.gender.his + " stretch the gem\'s power abruptly fades and the supersized " + NPC1.species.name + " grunts with satisfaction. " + capFirst(NPC1.gender.he) + " now stands a good " + sayDistance(180) + " tall, ears tickling the rafters as " + NPC1.gender.he + " smiles down at you. " + capFirst(NPC1.gender.he) + " looks easily as wide as " + NPC1.gender.he + " is tall, if not a little wider. " + "\n\t\"Shucks, guess this place is a little CRAMPED for the likes of me these days...\" " + capFirst(NPC1.gender.he) + " whickers a laugh and slaps a hand to " + NPC1.gender.his + " gargantuan belly. \"Hrrrmph... But that gem sure did the trick, huh? " + "And none of that boring \'dieting\' required!\" " + "\n\t" + capFirst(NPC1.gender.he) + " snorts, chuckling to " + NPC1.gender.him + "self, then bends down to haul " + NPC1.gender.his + " traveller\'s sack out from under the table. " + "\"Guess I should show my appreciation more tangibly. Anything in here that you\'ll take as payment?\" ", true);
                                                                            questReward(horseQuestStrength);
                                                                            nextView();
                                                                            listen = function ():void {
                                                                                doEvent(dairyFarmHouse);
                                                                                scene("\tFully-equipped, if nearly bursting out of " + NPC1.gender.his + " armour, the reinvigorated Sampson Shire snorts, hefts " + NPC1.gender.his + " giant axe and declares, " + "\"Look out world, here I come! And this time I won\'t let NOTHING stand in my way!\" " + "The hugely hefty horse nevertheless gives the remaining food on the table a lingering look. " + "\"Uhh, what d\'you say to my taking a SNACK for the road?\" " + "" + capFirst(NPC1.gender.his) + " resolve stiffening, " + NPC1.gender.he + " somewhat reluctantly turns and stomps out through the farmhouse door, " + NPC1.gender.his + " lumbering hoofsteps making the whole room shake. " + "\n\t\"OOF!\" The room shakes again, the walls creaking, and then silence falls, a little dust settling around you. " + "The farmhouse seems a little gloomy, all light from the doorway now being blocked by the gigantic gee-gee butt firmly jammed between the doorposts. " + "You hear a whinny from outside and that huge horse-hinder quivers, making the farmhouse shake again, but the doorframe keeps its vice-like grip. " + "It looks like Sampson\'s the Mighty\'s met " + NPC1.gender.his + " first new adventuring challenge! " + "\n\t\"Hrrmpphhh... You still in there, li\'l " + playerGender.buddy + "? Nghhh...!\" " + "You watch the doorframe creak and warp in its socket as the humungous horse HEAVES, but Sampson\'s enormously overfed backside remains completely wedged. " + "\"A-any chance of a SHOVE here?\" Oh dear, this is going to be a tall order! ", true);
                                                                                clrchc();
                                                                                getQuest(horseQuestFreedom);
                                                                                btntxt(11, "Push");
                                                                                leaveButton(13);
                                                                                listen = function ():void {
                                                                                    switch (btnchc) {
                                                                                        case 11:
                                                                                            switch (STR > 120 || weight() > 800) {
                                                                                                case true:
                                                                                                    scene("\tYou back up as far as you can to give yourself some sort of run-up, then with a count of 3 you shoulder-charge the jello-ball of a tuckus filling the doorway. " + "At least it\'s an easy target. You smack against Sampson\'s rotund rear-end with a blubbery BOOMPH (and an accompanying whinny from outside) and start to sink into the bloated blob of horseflesh, your legs still pedalling frantically. " + "You hear an alarming creeeeeeak from the doorframe, then feel it give an almighty CRACK, the shock transmitted through all that horseflesh to ripple against you. " + "There\'s a quivering shudder, then suddenly the immovable mass of blubber you\'re pressed against lurches forwards! " + "You stagger after it, and almost trip head first down the porch-steps, doing an alarmingly uncontrolled little dance down them as you try frantically to keep your balance. " + "When you finally draw to a stop, you find the supersized Sampson standing in front of you, glaring over " + NPC1.gender.his + " shoulder at " + NPC1.gender.his + " big ole\' back end, which still has the timber doorframe clamped around it like a vice. " + capFirst(NPC1.gender.he) + " catches your eye and snorts, starting to blush. " + "\n\t\"Shucks, why can\'t they just make doors sized for REALISTIC heroes?\" " + capFirst(NPC1.gender.he) + " whickers and flexes " + NPC1.gender.his + " backside- with a splintering CRACK the timbers burst apart, leaving Sampson free and standing in the fresh air of the farmyard. " + "Outside, " + NPC1.gender.he + " manages to look even bigger than indoors! \"Gee, I guess I owe you ANOTHER one, li\'l " + playerGender.buddy + "! " + "If you hadn\'t been around to help, I might have been stuck there!\" " + capFirst(NPC1.gender.he) + " hefts " + NPC1.gender.his + " travelling bag and holds it out to you. \"Anything you want in return?\" ", true);
                                                                                                    questReward(horseQuestFreedom);
                                                                                                    nextView();
                                                                                                    listen = function ():void {
                                                                                                        scene("\tSampson Shire the Mighty squares " + NPC1.gender.his + " plump shoulders beneath " + NPC1.gender.his + " extra-stretchy armour and grins at you. " + "\"Hrrrmph... Well, Adventure\'s calling! Thanks again for all your help, li\'l " + playerGender.buddy + ", I\'m sure I\'ll bump into you again sometime. " + "But, for now, I\'ve gotta get back on the road!\" " + "\n\t" + capFirst(NPC1.gender.he) + " turns and starts to lumber towards the farm gate. You watch that ponderous backside wobble and jiggle, stretching those new pants pretty fully. " + "But before " + NPC1.gender.he + "\'s even reached the gate, you spot that Sampson is slowing, and starting to sweat. " + "After a few more paces " + NPC1.gender.he + " stops, panting, and leans against a gatepost, " + NPC1.gender.his + " bulk threatening to uproot it. " + "\n\t\"Shucks... all this... is way more... EFFORT than I remember!\" The super-chubby horse grabs " + NPC1.gender.his + " belly and hefts it a couple of times. " + "\"Maybe I shouldn\'t have... weighed myself down!\" " + capFirst(NPC1.gender.he) + " looks up, and catches sight of the barn. \"Hrrmpph! I might... might just... have a NAP before setting out...\" " + "And you watch " + NPC1.gender.him + " stumble heavily for the barn- at least THESE doors " + NPC1.gender.he + " fits through. " + "There\'s an earth-shaking THUD from inside, and a few moments later you can just about detect a rumbling snore start up... " + "Obviously adventure will have to weight for another day... ", true);
                                                                                                        endEvent(dairyFarmCenter);
                                                                                                    };
                                                                                                    break;
                                                                                                case false:
                                                                                                    scene("\tYou back up as far as you can to give yourself some sort of run-up, then with a count of 3 you shoulder-charge the jello-ball of a tuckus filling the doorway. " + "At least it\'s an easy target. You smack against Sampson\'s rotund rear-end with a blubbery BOOMPH (and an accompanying whinny from outside) and start to sink into the bloated blob of horseflesh, your legs still pedalling frantically. " + "You hear a creeeeeeak from the doorframe, and for a moment it looks like you might manage it, but you then feel your forward motion slow to a stop, Sampson\'s hide quivering against you. " + "Then, you feel " + NPC1.gender.his + " flab starting to shove back! " + "Rather humiliatingly, you are ignominiously shoved back out, stumbling backwards a few paces until you regain your balance. " + "Sampson, meanwhile, hasn\'t moved forwards an inch. " + "You have, literally, been defeated by a horse\'s ass! ", true);
                                                                                            }
                                                                                            break;
                                                                                        case 13:
                                                                                            scene("\tThere is absolutely no chance of squeezing past Sampson through the door. " + "You might have been well and truly stuck, but fortunately you find a large window on the far side of the farmhouse. " + "Unbolting the shutters, you ", true);
                                                                                            if (weight() < 250) {
                                                                                                scene("slip out", false);
                                                                                            }
                                                                                            if (weight() < 600 && weight() >= 250) {
                                                                                                scene("wriggle out", false);
                                                                                            }
                                                                                            if (weight() >= 600) {
                                                                                                scene("squeeze", false);
                                                                                            }
                                                                                            scene(" through it and find yourself standing in the farmyard. ", false);
                                                                                            endEvent(dairyFarmCenter);
                                                                                    }
                                                                                };
                                                                            };
                                                                            break;
                                                                        case 13:
                                                                            scene("\t\"Aww, well hey, that\'s no problem,\" Sampson whickers confidently, wiping " + NPC1.gender.his + " lips clean " + "\"Hrmphhh... Now that I\'m nearly full, I feel stronger than ever! In fact, I think... maybe THIS time... NGHHH!\" " + "" + capFirst(NPC1.gender.his) + " entire frame wobbles with exertion as " + NPC1.gender.he + " strains to rise to " + NPC1.gender.his + " hooves, " + "but " + NPC1.gender.he + " finally sinks back again, red in the face and puffing, without " + NPC1.gender.his + " backside having risen a single inch this time. " + "\"Puff... puff... shucks, I think we ARE gonna need that Spectrum Gem after all...\" ", true);
                                                                            endEvent(dairyFarmCenter);
                                                                    }
                                                                };
                                                        }
                                                        break;
                                                    case 13:
                                                        scene("\tWith no sign of " + NPC1.gender.his + " stopping soon, you quietly tiptoe back out, leaving the enormous equine to " + NPC1.gender.his + " apparently endless meal. ", true);
                                                        endEvent(dairyFarmCenter);
                                                }
                                            };
                                            break;
                                        case "freedom":
                                            this.scene("\tAs you approach the farmhouse, you can make out a large figure blocking the doorway. " + "Sampson Shire is hanging half-in, half-out of the door, wedged tight! " + "" + this.capFirst(this.NPC1.gender.his) + " great big belly is jiggling inches above the floor, and the struggling " + this.NPC1.species.name + "\'s efforts to free " + this.NPC1.gender.him + "self have only succeeded in working up a sweat. " + "\n\tAs you walk up the steps, the larger-than-life adventurer catches sight of you and whinnies in greeting, trying not to blush. " + "\"Oh, hey there, li\'l " + this.playerGender.buddy + "! I t-think some old enemy of mine must have put a CURSE on this door! Nghhh! It... It\'s SHRUNK on me! I\'m stuck!\" " + this.capFirst(this.NPC1.gender.he) + " tries once again to HAUL " + this.NPC1.gender.him + "self forward, the doorframe bulging forwards under the pressure but resolutely refusing to release " + this.NPC1.gender.him + ". " + "Defeated, " + this.NPC1.gender.he + " sags slightly in the frame and holds out " + this.NPC1.gender.his + " fat arms to you helplessly. \"Shucks, any chance of a PULL?\" ", true);
                                            this.clearView();
                                            this.btntxt(11, "Pull");
                                            this.leaveButton(13);
                                            this.listen = function ():void {
                                                switch (btnchc) {
                                                    case 11:
                                                        switch (STR > 120 || weight() > 800) {
                                                            case true:
                                                                scene("\tTaking hold of the supersized " + NPC1.species.name + "\'s hefty hands, you lean back on your " + playerSpecies.feet + " and HEAVE with all your might. " + "Sampson grunts and winces as " + NPC1.gender.his + " chubby arms stretch in their sockets, the doorframe creaking loudly as you manage to drag the bulging beast a couple of inches further through... " + "and then with an ear-splitting CRACK and a shower of brick dust the doorframe sags slightly wider and " + NPC1.gender.he + " begins to slide forwards under " + NPC1.gender.his + " own weight! " + "\n\tYou stagger backwards, teetering unsteadily at the top of the porch steps, then glance back at the doorway, alerted by further rending, cracking sounds. " + "A rotund shadow falls over you as the porch begins to shake, and you hear the horse\'s deep voice bellow out, \"Hrrmphhh! Comin\' THROUGH...!\" " + "\n\tToo late! A vast, curved wall of equine blubber slams into you and you sail backwards with it, feeling yourself hang in the air a moment before the pair of you SLAM into the ground, with you, tragically, underneath! " + "Squashed beneath the mammoth equine at the bottom of the impact crater, your last woozy thought is \"Well, at least it\'s warm under here...\" ", true);
                                                                questReward(horseQuestFreedom);
                                                                setEnemy(ToughFur);
                                                                enemyt.article = "an";
                                                                enemyt.name = "incredibly fat equine adventurer";
                                                                defeatEvent(battle);
                                                                break;
                                                            case false:
                                                                scene("\tTaking hold of the supersized " + NPC1.species.name + "\'s hefty hands, you lean back on your " + playerSpecies.feet + " and HEAVE with all your might. " + "Sampson grunts and winces as " + NPC1.gender.his + " chubby arms stretch in their sockets, the doorframe creaking loudly as you manage to drag the bulging beast a couple of inches further through... " + "only for " + NPC1.gender.him + " to rebound with a mighty GLOOP! " + "You are hauled off your " + playerSpecies.feet + " and catapulted bodily against Sampson\'s rolling chest, eliciting a grunt from the overfed equine. " + "Staggering backwards, you find that, except for a few bruises on yourself, the pair of you are no further forward. ", true);
                                                        }
                                                        break;
                                                    case 13:
                                                        scene("\tWith an apology, you head off with the promise \'to go get help\'. You leave the gargantuanly chubby horse stuck in the doorway. " + "\n\t\"Hey, y-you can\'t just leave me like this!\" " + NPC1.gender.he + " calls out after you. \"At least leave me a SNACK or something!\" ", true);
                                                        endEvent(dairyFarmCenter);
                                                }
                                            };
                                            break;
                                        case 12:
                                            break;
                                        case 13:
                                            break;
                                        case 14:
                                    }
                                    break;
                                case 2:
                                    this.scene("\t", true);
                            }
                    }
                    break;
                case this.dairyFarmPasture:
                    this.scene("\tYou walk up to the pasture and lean on the wooden fence. Spread out in front of you is a large field several acres in size. " + "On the distant edge of the pasture you can just barely see the ", true);
                    if (this.dayTime()) {
                        this.scene("sunlight ", false);
                    }
                    else {
                        this.scene("moonlight ", false);
                    }
                    this.scene(" glinting off a large river. " + "\n\t" + this.dairyFarmPasture.Description, false);
                    break;
                case this.dairyFarmShed:
                    if (!this.questCompleted(this.madMilk) || this.questCompleted(this.madCheese)) {
                        this.scene("\tYou walk up to the milking shed. " + this.dairyFarmShed.Description, false);
                        this.endEvent(this.dairyFarmCenter);
                    }
                    if (!this.hasQuest(this.madCheese) && this.questCompleted(this.madMilk)) {
                        this.scene("\tYou walk up to the milking shed. A large water wheel behind the shed rotates as it\'s partially submerged in the river that curves around the farm. " + "You pull on the door, but it\'s locked shut. You can hear the quiet rhythmic sound of machinery from within. " + "Nailed to one of the doors is a large, freshly-painted notice which simply reads: \"BEWARE OF THE CHEESE\" ", false);
                        this.endEvent(this.dairyFarmCenter);
                    }
                    if (this.hasQuest(this.madCheese) && !this.questCompleted(this.madCheese)) {
                        this.scene("\tYou walk up to the milking shed. A large water wheel behind the shed rotates as it\'s partially submerged in the river that curves around the farm. " + "At the door you meet the obese bull, who produces a large key from the pocket of his overalls. " + "As the key rattles in the lock, over the sounds of machinery you hear a sudden thudding, as though something inside had been disturbed by the noise and was moving about. " + "Then you hear a strange noise from inside- something like a cross between a wolf-howl and a buffalo bellow, only somehow... cheesier. " + "The bull shudders, then puts his hands to his horns and shakes his head. \"I knew it was a mistake to experiment with predator milks. I should never have mixed curds like that.\" " + "He raises his hands to the sky, appealing to it. \"What has lactology DONE?\" " + "\n\tHe hurriedly finishes turning the key in the stout lock, and slides back the bolts securing the door. He catches your eye, looking rather nervous. " + "\"Oh, hey, look, there\'s uhh.. a customer over by the milk stand. I\'d better go see what they want, you can take this from here, right?\" " + "Without waiting for a reply he retreats into the distance, beefy backside bouncing with unaccustomed haste, leaving you to deal with a very different kind of \'customer\'. ", false);
                        this.btntxt(1, "Enter");
                        this.leaveButton(3);
                        this.listen = function ():void {
                            switch (btnchc) {
                                case 1:
                                    scene("\tTaking a deep breath, you haul one of the doors open, then slip inside, pulling it shut behind you. " + "Peering in the semi-gloom of the milking shed, you look around, but see nothing of particular interest. There is quite a strong, distinct smell hanging in the air, though. " + "Then you look down at the floor and see, sitting in the centre of the shed, a large cheese about the size of a cart-wheel. You\'ve never seen a cheese quite like this. " + "It looks hard and crumbly, with a reddish rind and swiss-cheese type holes. It seems to be quivering slightly, with steam rising off it. " + "It doesn\'t look too dangerous, although you can\'t help but notice a dagger sticking out of the top of it like a cheese-knife, and a number of other cut-marks in the rind. " + "You take a step towards it, then back up hurriedly as the rind cracks to reveal a kind of mouth set in a feral, hungry grin, strands of soft cheese hanging between the jaws. Yowsa! " + "You\'ve heard of over-ripe cheese trying to crawl off the plate, but this is ridiculous! ", true);
                                    locationUpdate(dairyFarmCenter);
                                    combatEvent(cheeseMonster);
                                    break;
                                case 3:
                                    scene("\n\tYou decide that this needs some more thinking about before you take action. Making sure that the doors are secured, you back away and hurriedly beat a strategic withdrawal. ", false);
                                    endEvent(dairyFarmCenter);
                            }
                        };
                    }
                    break;
                case this.dairyFarmStand:
                    if (this.hour >= 9 && this.hour <= 17) {
                        this.scene("\tYou walk up to the stand to find a tall anthro bull tending the stand. " + "He\'s wearing worn blue coveralls over his sizeable gut while foregoing any kind of shirt, exposing his beefy brown-furred arms. " + "His large curved horns look like they\'d make it hard for him to stand in there. " + "As you walk up he quickly slams down the bottle of milk he was chugging down and greets you as he wipes the milk moustache off his face. " + "\n\t\"Hello there! What can I do ya\' for?\" he says with a wide smile on his face. Hanging beside him is a sign that says: " + "\n\"Milk Bottle - 1 gold\"" + "\n\"Milk jug - 7 gold\"" + "\n", true);
                        this.clearView();
                        this.btntxt(1, "Milk Bottle");
                        this.buttonIcons(1, this.iconStore);
                        this.btntxt(3, "Milk Jug");
                        this.buttonIcons(3, this.iconStore);
                        if (!this.questCompleted(this.madCheese)) {
                            this.btntxt(7, "Quest");
                        }
                        this.leaveButton(9);
                        this.listen = function ():void {
                            var _loc1_:Items = null;
                            var _loc2_:Items = null;
                            switch (btnchc) {
                                case 1:
                                    doEvent(dairyFarmStand);
                                    if (GLD >= 1 && invArray.length < maxInv) {
                                        _loc1_ = ObjectUtil.copy(MilkBottle) as Items;
                                        invArray.push(_loc1_);
                                        scene("\n\"Thank you!\" he reaches behind the bar and sets a milk bottle down as you hand him a gold. ", false);
                                        doGold(-1);
                                    }
                                    else if (GLD < 1) {
                                        scene("\nYou pat yourself down looking for a single gold coin, but unfortunately you seem to be broke. ", false);
                                    }
                                    else {
                                        scene("\nYou\'d like to buy a bottle of milk but unfortunately you seem to be short on inventory space. ", false);
                                    }
                                    break;
                                case 3:
                                    doEvent(dairyFarmStand);
                                    if (GLD >= 7 && invArray.length < maxInv) {
                                        _loc2_ = ObjectUtil.copy(MilkJug) as Items;
                                        invArray.push(_loc2_);
                                        scene("\n\"Thank you!\" he reaches behind the bar and sets a heavy metal milk jug down with a thud as you hand him 7 gold. ", false);
                                        doGold(-7);
                                    }
                                    else if (GLD < 7) {
                                        scene("\nYou pat yourself down looking for 7 gold coins, but unfortunately you seem to be a bit short. ", false);
                                    }
                                    else {
                                        scene("\nYou\'d like to buy a jug of milk but unfortunately you seem to be short on inventory space. ", false);
                                    }
                                    break;
                                case 7:
                                    switch (hasQuest(defendingTheHerd)) {
                                        case false:
                                            scene("\t\"Well, now that you ask, I have been having problems with the local wildlife indulging themselves upon my livelihood. " + "Every morning I come out here and there\'s some fatass lion or cheetah stranded with a bellyful of one of my poor defenseless cows. " + "So far I\'ve just been rolling off into the river where they can float down stream and become somebody else\'s problem, " + "but I sure would appreciate it if you go out and rough a few of them up for me and try to scare them offa\' my land. " + "I\'ll pay you some gold if you do.\" ", true);
                                            getQuest(defendingTheHerd);
                                            break;
                                        default:
                                            switch (questCompleted(defendingTheHerd)) {
                                                case false:
                                                    if (questReady(defendingTheHerd) == false) {
                                                        scene("\t\"I\'d really appreciate it if you could take care of some of those darn predators out in the grasslands.\" ", true);
                                                    }
                                                    else {
                                                        scene("\t\"Did you finally show those dang predators what for? Thank you so much! " + "I\'d take care of them myself, but I\'ve been so busy keeping up with my gals\' milked as is that I don\'t have time any more. " + "I doubt they\'ll stay away for long, but hopefully it\'ll push them back a bit. Thank you!\" ", true);
                                                        questReward(defendingTheHerd);
                                                    }
                                                    break;
                                                default:
                                                    switch (hasQuest(madMilk)) {
                                                        case false:
                                                            scene("\t\"Since you\'ve been such a good help roughing up the wildlife so far, I was wondering if you could help me with a slightly more dangerous target.\" " + "He looks around furtively, making sure nobody\'s around to hear, before he leans in and speaks to you in hushed voice. " + "\"Between you and me I\'ve been having some... mechanical problems. " + "Namely, I had this large steam powered milking machine built to help me deal with my increased work load. " + "Unfortunately one day it just sort of went berserk, busted out of the milk shed, and has kind of been roaming the hills ever since. " + "Every night it comes back and milks my girls dry before rollin\' out to the hills to pump random passersby full of milk just to repeat the process over and over again. " + "It seems almost... maniacally driven to milk my cows as much as possible and to make room for more it " + "\"stores\" extra milk into whatever else it can get its claws on.\" He looks around again to make sure nobody\'s snooping around. " + "\n\t\"Obviously this puts me in a bit of a pickle as it\'s sorta my fault the mad machine is out there terrorizing our fair citizens " + "which is obviously bad for business. Not to mention it\'s basically robbing me of my livelihood and redistributin\' it for free! " + "Anyways, I\'d be glad if you could sorta\'... disable it and come back to tell me about it. I can haul it back here myself.\" ", true);
                                                            getQuest(madMilk);
                                                            break;
                                                        default:
                                                            switch (questCompleted(madMilk)) {
                                                                case false:
                                                                    if (questReady(madMilk) == false) {
                                                                        scene("\t\"I\'d really appreciate if you could take care of that crazed milk machine, before anybody else gets hurt.\" ", true);
                                                                    }
                                                                    else {
                                                                        scene("\t\"Did you finally disable that machine? Terrific! " + "I knew I probably shouldn\'t have rerouted it\'s milk storage into it\'s steam engine. " + "The \"Perpetually milk powered steam engine\" certainly seemed like a good idea at the time! " + "I won\'t soon be making that mistake again... although I still think I could make it work... " + "hmmmmmm... yess... heh... heh heh... ha ha ha!\" " + "He seems lost in devious thought for several moments. " + "\n\t\"Er, oh, oops! Sorry, anyway, here\'s your reward. Thank you so much for your help!\" ", true);
                                                                        questReward(madMilk);
                                                                        repDairyFarmer = 0;
                                                                    }
                                                                    break;
                                                                default:
                                                                    switch (hasQuest(madCheese)) {
                                                                        case false:
                                                                            scene("\t\"Oh, uhhhhh. I\'ve basically got everythin\' under control.\" he says nervously as he gives a sidelong glance towards the milking shed. " + "There\'s a freshly painted sign tacked accross the door saying \"BEWARE OF CHEESE\". " + "\n\t\"Uhh, oh, it\'s nothing. Nothing big. Ok, quite big. I\'m just having a little trouble with this one particular cheese.\" " + "Catching your sceptical look he adds, \"No, seriously, that thing is dangerous. I can\'t even go in there any more!\" Curiouser and curiouser. " + "The bulging bovine scratches his head, plainly embarrassed. \"Say, you\'re an adventurer, right? Used to dealing with tough situations? " + "Uhh... I\'d greatly appreciate it if you could help me out.\" He gives you a look that is plainly desperate. \"I\'d pay you plenty!\" ", true);
                                                                            getQuest(madCheese);
                                                                            break;
                                                                        case true:
                                                                            switch (questCompleted(madCheese)) {
                                                                                case false:
                                                                                    switch (questReady(madCheese)) {
                                                                                        case false:
                                                                                            scene("\t\"So uhh, any time you feel ready to deal with our little problem,\" " + "he looks towards the milk shed which takes that opportunity to emit a rumbling bellow, \"I\'d greatly appreciate it.\" ", true);
                                                                                            break;
                                                                                        default:
                                                                                            scene("\t\"You DID it?\" The bull looks at you incredulously, then hurriedly corrects himself. \"I mean... you DID it! Wow.\" " + "He beams at you and wipes his brow. \"Thanks for that " + playerGender.brother + ", I owe you one! " + "I thought I was never going to get my milking shed back.\" He chortles, hands on his bulging stomach. " + "\"Well, I\'ve learned my lesson this time! No more cheese-making for me! Instead I\'m gonna branch out into yoghurt and icecream. " + "Although... I\'ve got to ask...\" his expression becomes a little vacant, and he asks you wistfully, \"what did it TASTE like?\" ", true);
                                                                                            questReward(madCheese);
                                                                                    }
                                                                            }
                                                                    }
                                                            }
                                                    }
                                            }
                                    }
                                    break;
                                case 9:
                                    scene("\t\"I\'ll see you around!\" he says as he waves goodbye. As you turn to leave he reaches below the counter and picks up another bottle of milk and starts chugging it down. ", true);
                                    endEvent(dairyFarmCenter);
                            }
                        };
                    }
                    else {
                        this.scene("You walk up to the stand but find it bare. There\'s a sign hanging up with a little painting of brown bull saying, \"Be back at 9 AM\". ", true);
                        this.endEvent(this.dairyFarmCenter);
                    }
            }
            switch (ID) {
                case this.MountainHub:
                    this.scene("\tYou find a path through the hills into the gravely base of the easter mountains. ", false);
                    break;
                case this.MountainEvent:
                    switch (this.eventRandomization(this.mountainTravel)) {
                        case 1:
                            switch (this.eventRandomization(this.mountainTravelSpecial)) {
                                case 1:
                                    this.locationTravel(this.CabalCave);
                                    break;
                                case 2:
                                    this.locationTravel(this.WizardTower);
                                    break;
                                case 3:
                                    this.locationTravel(this.InsectHive);
                                    break;
                                case 4:
                                    this.locationTravel(this.WyvernCave);
                                    break;
                                case 5:
                                    switch (this.hasQuest(this.onGoodTermsExperiments)) {
                                        case true:
                                            this.locationTravel(this.ExperimentTown);
                                            break;
                                        default:
                                            this.locationTravel(this.ExperimentCave);
                                    }
                            }
                            break;
                        case 2:
                            switch (this.dXY(1, 10)) {
                                case 1:
                                    this.locationTravel(this.tigerFight);
                                    break;
                                default:
                                    this.combatEvent(this.MountainHub.enemies[this.dXY(0, this.MountainHub.enemies.length - 1)]);
                                    this.locationUpdate(this.MountainHub);
                                    if (this.enemyt.description == "") {
                                        this.scene("\tAs you adventure through the mountains, a " + this.enemyt.name + " leaps out from behind a rock! ", true);
                                    }
                                    if (this.enemyt.description != "") {
                                        this.scene("\t" + this.enemyt.description, true);
                                    }
                            }
                            break;
                        case 3:
                            this.scene("\tYou laboriously climb over the snow frosted stones of the eastern mountains and rewarded with merely more barren rockfaces. ", false);
                            this.endEvent(this.MountainHub);
                    }
                    break;
                case this.tigerFight:
                    this.randomNPC(1);
                    this.scene("\tAs you crest a hill, you find yourself looking down at a scene in progress a good hundred yards away. " + "A tiger of improbable musculature seems rather occupied with tying up a particularly fat " + this.NPC1.species.name + ". " + "From this distance, you gauge him to be about a good fifteen feet in height, but larger than him is what appears to be a sack, the size of a building, in black cloth and gold-thread embroidery. " + "The tiger hefts up the helpless " + this.NPC1.species.name + ", pulling open the mouth of the bag and stuffing " + this.NPC1.gender.him + " right in. " + "You suddenly realize that the entire bulging payload is filled to the brim with all manner of fattened captives. ", false);
                    this.btntxt(11, "Attack!");
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 11:
                                scene("\tYou let forth a shout and charge forward. The tiger tying his bag shut before turning to you, looking a bit surprised. As you draw close you can see just how built he is. " + "Clad in only a dark loincloth, he is all but drowning in his own muscle. " + "His head is all but buried between his chest and his back, and his biceps are easily larger than you were before the start of your journey. " + "His stripes cling to his bulges for dear life. He leers at you as you approach, before turning around and giving his overmuscled bubble-butt a taunting slap. " + "\"You wanna play? Let\'s play!\" ", true);
                                combatEvent(mountainousTiger);
                                locationUpdate(MountainHub);
                                break;
                            case 13:
                                scene("\tYou realize that if such a massive feline had no trouble catching that many people, he probably wouldn\'t have a problem forcing you to join them. " + "Turning tail, you scurry back down the hill you came up, hoping he didn\'t see you. ", true);
                                endEvent(MountainHub);
                        }
                    };
                    break;
                case this.cabalRogueBossFight:
                    this.locationUpdate(this.MountainHub);
                    this.combatEvent(this.cabalDragon);
                    break;
                case this.ExperimentTown:
                    switch (this.hasQuest(this.onGoodTermsExperiments)) {
                        case true:
                            this.scene("\tYou walk up to Snookums, who nods at you and grunts affirmatively. She walks with you as you head for the center of the make-shift cave town. ", false);
                            break;
                        default:
                            switch (this.hasQuest(this.onBadTermsExperiments)) {
                                case true:
                                    this.scene("\tSmarty sits back, letting out a relieved sigh. \"Good, you\'ve decided to be reasonable about things. So here\'s what\'s going on.\" " + "He clears his throat, then launches into an explanation. \"There\'s a wizard out there who\'s having folks delivered to him and experimenting on them. " + "Unfortunately, he\'s not very good at it, and all the people you see here and out wandering the mountains are the result. " + "Through a bit of a fluke, what he did actually worked without leaving me crippled with pain, so I\'ve been working on how to fix things up. " + "I\'ve gotten this far on my own, and those of us here at least have a way to channel our aggression safely and productively, " + "but if I want to have a chance to reverse things, I\'m going to need his notes.\" He stands up and leads you outside. Snookums is leaning against a wall closeby. " + "\"Snookums, be a love and help our guest find whatever " + this.playerGender.he + " needs. " + this.capFirst(this.playerGender.he) + "\'s going to help us now,\" he says to her. " + "She lets out a happy rumble and marches up to you. \"Snookums can show you to the farm, the smith, and back to me. " + "I\'ve got a few spells I\'ve scrounged up if you can use them, and the smith still has his wits and his skill, thank heavens. " + "Take a look around and get what you need; that dog has a nasty pet waiting for you, so you\'ll want to be prepared.\" " + "At that, he heads back inside, pouring over his books again. Snookums looks at you and rumbles, " + "\"Smarty\'s your friend now. You hurt Smarty, you get crushed.\" Despite the words, she doesn\'t look quite as angry as before. " + "You look around, and consider your options. ", false);
                                    this.questRemove(this.onBadTermsExperiments);
                                    this.getQuest(this.onGoodTermsExperiments);
                                    break;
                                default:
                                    this.scene("\t\"Glad to hear that,\" Smarty nods, then launches into an explanation. " + "\"There\'s a wizard out there who\'s having folks delivered to him and experimenting on them. " + "Unfortunately, he\'s not very good at it, and all the people you see here and out wandering the mountains are the result. " + "Through a bit of a fluke, what he did actually worked without leaving me crippled with pain, so I\'ve been working on how to fix things up. " + "I\'ve gotten this far on my own, and those of us here at least have a way to channel our aggression safely and productively, " + "but if I want to have a chance to reverse things, I\'m going to need his notes.\" He stands up and leads you outside. Snookums is leaning against a wall closeby. " + "\"Snookums, be a love and help our guest find whatever " + this.playerGender.he + " needs. " + this.capFirst(this.playerGender.he) + "\'s going to help us now,\" he says to her. " + "She lets out a happy rumble and marches up to you. " + "\"Snookums can show you to the farm, the smith, and back to me. I\'ve got a few spells I\'ve scrounged up if you can use them, " + "and the smith still has his wits and his skill, thank heavens. Take a look around and get what you need; that dog has a nasty pet waiting for you, " + "so you\'ll want to be prepared.\" At that, he heads back inside, pouring over his books again. Snookums looks at you and rumbles, " + "\"Smarty\'s your friend now. You hurt Smarty, you get crushed.\" Despite the words, she doesn\'t look quite as angry as before. " + "You look around, and consider your options. ", false);
                                    this.getQuest(this.onGoodTermsExperiments);
                            }
                    }
                    break;
                case this.ExperimentTownFarm:
                    this.scene("\tYou are lead to an expansive cavern that is well lit by an odd glowing orb near its peak. What is more odd, though, is that the cave floor appears to be sprouting plant life. " + "Several cows graze on grass, and a pen is occupied by several fat pigs. " + "Elsewhere, small fields of wheat, corn, and assorted vegetables grow just as vibrantly as they would in a calm, warm grassland. " + "Several extremely fat furs are seen harvesting plants, and one of the large ones is plowing. A thin male goat walks quickly up to you, chewing on a bag of grains absently. " + "\"Welcome to the farm. What can I get ya?\" he asks. ", false);
                    this.tradeButton(1);
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                enterStore(ClerkEarl);
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"Name\'s Earl. Used to run a farm a\'fore I got \'sperimented on. Now I do it here for these folks. They\'re good people, once ya get \'em calmed down.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"That light up there? Smarty\'s idea. Accordin\' to him, it\'s an ar-tee-fishul sun, and the brainy ones power it ta help \'em get rid \'a excess magic.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"Me n\' the other fast fellers do the cookin\' \'round here. Always got a lot a\' that ta be done, and keeps the hands busy.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"You seen my brother? Think he\'s with that wizard feller what made me all twitchy. I\'m sure he\'s fine, though. He\'s a tough one.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                endEvent(ExperimentTown);
                        }
                    };
                    break;
                case this.ExperimentTownForge:
                    this.scene("\tYou follow Snookums to a sizable, walled-off building. Here, an extremely large donkey is beating a hammer against an anvil, shaping out a piece of metal. " + "His tools are normal sized, and look almost comical in his huge hands. Snookums waves to get his attention, and he lets out a grunt when he turns and nods at you. ", false);
                    switch (this.questCompleted(this.wizardNotebook)) {
                        case true:
                            this.scene("\"Smarty says you helped,\" the smith rumbles, \"so you can buy special things.\" ", false);
                            break;
                        default:
                            this.scene("\"Tools and weapons,\" he rumbles out. \"What you need?\" ", false);
                    }
                    this.tradeButton(1);
                    this.btntxt(3, "Talk");
                    if (this.questStage(this.horseQuestArmor) == 0) {
                        this.btntxt(4, "Burst chainmail");
                    }
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                switch (questCompleted(wizardNotebook)) {
                                    case true:
                                        enterStore(ClerkSmithSpecial);
                                        break;
                                    case false:
                                        enterStore(ClerkSmithNormal);
                                }
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"Call me Smith. Job and name, good for both.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"Other big folk mine. Lots of metal in this mountain.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"Not sure what Snookums sees in Smarty.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"Talk, \'tis no good. But forge, very good.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 4:
                                scene("\t\"This armor magic, yes. Smith\'s work, no. Broken, yes. Fix it for you, no. Wrong magic. Try out West- hear of VERY good armourer on island somewhere. Maybe their work.\" ", true);
                                break;
                            case 13:
                                endEvent(ExperimentTown);
                        }
                    };
                    break;
                case this.ExperimentTownSmarty:
                    this.scene("\tYou are lead back to Smarty\'s shack. Snookums waves to him as he looks up from his reading. He smiles and waves back. \"What can I do for you?\" he asks you. ", false);
                    this.btntxt(1, "Learn Spells");
                    if (this.hasQuest(this.wizardNotebook) && !this.questCompleted(this.wizardNotebook)) {
                        this.btntxt(2, "Return Notes");
                    }
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                doTeaching(TeacherSmarty);
                                break;
                            case 2:
                                scene("\tYou place the wizard\'s notes in front of Smarty, and his brow immediately raises. \"You got it?! Fantastic! Wonderful!\" " + "He immediately sets to it, eagerly brushing all his other books onto the floor and slapping it open. " + "He flips through it steadily slower as he gets further into it, skimming over the pages and visibly growing less excited. " + "\"I suppose I should\'ve figured,\" he hums out, closing it turning back to you. \"It\'s a jumbled mess, but it\'s still a boon. " + "I won\'t be able to fix things overnight, but if I can make sense of it... Well, you\'ve been a great help.\" He stands up and walks toward the door, then turns to you again. " + "\"Now, your reward, like I promised. Would you say that... you\'re the strong type, the fast type, or the magic type?\" ", true);
                                clearView();
                                btntxt(11, "Strong");
                                btntxt(12, "Fast");
                                btntxt(13, "Magical");
                                listen = function ():void {
                                    switch (btnchc) {
                                        case 11:
                                            endEvent(ExperimentTown);
                                            scene("\tHe returns after a minute or two with a wheeled cart. \"These are some of the better results of my own experimenting. " + "Unlike some fools, I do my tests on inanimate objects first.\" He gestures towards it, and you take a closer look. " + "Inside is a set of decorated metal plate armor, golden in color and lined with silk. \"I enchanted the metal, and Smith shaped it,\" Smarty explains. " + "\"It\'ll improve your strength and protect you well. If you want any of the others, I\'ve told Smith to open his special stores to you, but you will have to pay for them. " + "Again, I can\'t thank you enough. Consider yourself welcome any time.\" ", true);
                                            questReward(wizardNotebook);
                                            getItem(enchantedKnightArmor);
                                            break;
                                        case 12:
                                            endEvent(ExperimentTown);
                                            scene("\tHe returns after a minute or two with what looks to be a set of armor in his arms, and lays them out on his table. " + "\"These are some of the better results of my own experimenting. Unlike some fools, I do my tests on inanimate objects first.\" He gestures towards it, and you take a closer look. " + "It appears to be a set of decorated light plates connected by a chain mesh backed with comfortable silk. \"I enchanted the metal, and Smith shaped it,\" Smarty explains. " + "\"This\'ll make you faster and protect you well. If you want any of the others, I\'ve told Smith to open his special stores to you, but you will have to pay for them. " + "Again, I can\'t thank you enough. Consider yourself welcome any time.\" ", true);
                                            questReward(wizardNotebook);
                                            getItem(enchantedFighterArmor);
                                            break;
                                        case 13:
                                            endEvent(ExperimentTown);
                                            scene("\tHe returns after a minute or two with some cloth in his arms, and lays it out on his table. \"These are some of the better results of my own experimenting. " + "Unlike some fools, I do my tests on inanimate objects first.\" He gestures towards it, and you take a closer look. " + "It appears to be a set of wizard\'s clothes of a royal purple coloration trimmed with gold and lined with runes. " + "As well, there appears to be metal plates set into the insides in key locations. \"I enchanted the silk and plates, and Smith shaped them,\" Smarty explains. " + "\"This\'ll make your magic more potent and protect you well. If you want any of the others, I\'ve told Smith to open his special stores to you, but you will have to pay for them. " + "Again, I can\'t thank you enough. Consider yourself welcome any time.\" ", true);
                                            questReward(wizardNotebook);
                                            getItem(enchantedWarmageArmor);
                                    }
                                };
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"Honestly, I\'m quite proud of having set this all up. It was quite a trick at first, having to find everybody new one by one. " + "Now they just seem to turn up at our door... Covered in bruises, usually.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"I swear, all those wizards that do the whole \'live by yourself to study uninterrupted\' nonsense are fools. " + "\'Oh, I won\'t go crazy if I hit a wall and have nobody to talk to about it!\' Bah. The guild exists for a reason.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"Snookums was the first one I found. Heh, I remember when we first met, she tried to crush me with a rock. " + "I had to hit her with lightning eight times before she\'d listen to me. Ah, memories.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"Have you seen those giant insects? They\'re venomous, all of \'em. You\'d best know some curative magic. " + "Strange thing, though, I\'m not sure they\'re the wizard\'s fault. They\'re too... competently made.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                endEvent(ExperimentTown);
                        }
                    };
                    break;
                case this.ExperimentCave:
                    switch (this.subEvent) {
                        case "":
                            this.clearView();
                            this.scene("\tWhile you explore the jagged mountains, you come across a cave. You can hear what sounds like crazed babbling coming from within. You\'ll need to go in to find out what\'s in there. ", false);
                            this.btntxt(11, "Enter");
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        scene("\tYou steel yourself and slowly march inside, cold stone echoing your footsteps as you enter. " + "As you enter, you can see various furs in different states of bodily extreme. Particularly thin ones and immensely fat ones can be seen eating non-stop, " + "while some holding their heads are visible sending crackling bolts of magic out against stone target dummies. " + "The one that guards the door, however, is a massively muscular brute of a squirrel, nearly half again as large as any of the others you can see, " + "and staring at you intently, a massive column of stone held tightly in one hand. ", true);
                                        btntxt(11, "Enter");
                                        leaveButton(13);
                                        listen = function ():void {
                                            switch (btnchc) {
                                                case 11:
                                                    switch (hasQuest(onBadTermsExperiments)) {
                                                        case true:
                                                            scene("\tYou approach the giant squirrel, who grits her teeth and lets out a growl, clamping down on her enormous stone mace. " + "\"YOU,\" she rumbles, taking a heavy step towards you. \"You going to talk to Smarty?\" she asks, her words dangerously pointed. ", true);
                                                            break;
                                                        default:
                                                            scene("\tAs you approach the enormous squirrel, she (and you can only tell that now) holds up one massive hand, and rumbles out, " + "\"You go talk to Smarty. Smarty talks to all new arrivals.\" You hesitate for a moment, and her grip tightens, the stone column crumbling a bit. " + "Looks like she\'s not very patient... ", true);
                                                    }
                                                    btntxt(11, "Comply");
                                                    btntxt(13, "Try to leave");
                                                    buttonIcons(3, iconLeave);
                                                    listen = function ():void {
                                                        switch (btnchc) {
                                                            case 11:
                                                                subEvent = "Talking to smarty";
                                                                doEvent(ExperimentCave);
                                                                break;
                                                            case 13:
                                                                scene("\tThe enormous squirrel growls at you, approaching angrily with her giant stone mace in tow! ", true);
                                                                getQuest(onBadTermsExperiments);
                                                                subEvent = "defeated snookums";
                                                                combatEvent(Snookums);
                                                                locationUpdate(MountainHub);
                                                        }
                                                    };
                                                    break;
                                                case 13:
                                                    scene("\tYou decide to avoid these abnormal furs, and head out to find somewhere else to explore instead. ", true);
                                                    endEvent(MountainHub);
                                            }
                                        };
                                        break;
                                    case 13:
                                        scene("\tYou decide to avoid these abnormal furs, and head out to find somewhere else to explore instead. ", true);
                                        endEvent(MountainHub);
                                }
                            };
                            break;
                        case "defeated snookums":
                            this.scene("\tThe giant squirrel lies panting on the ground, breathless and beaten. You turn to go out, when suddenly a male rabbit in tattered robes appears in front of you. " + "When he spots the squirrel, he cries out, \"Snookums!\" Turning to you, his face turns almost ferally furious. \"You think you can cause trouble in MY town and just get away with it?!\" " + "He pulls a wand out from his robe, and you\'re in another fight! ", false);
                            this.subEvent = "defeated smarty";
                            this.combatEvent(this.Smarty);
                            break;
                        case "defeated smarty":
                            this.scene("\tThe rabbit curses you from the ground, and inside, you can see every face turning to you. " + "Knowing that it is now time to beat feet, you head down off the mountain and as far away as you can get. ", false);
                            this.endEvent(this.MountainHub);
                            break;
                        case "Talking to smarty":
                            switch (this.hasQuest(this.onBadTermsExperiments)) {
                                case true:
                                    this.scene("\tYou follow the tremendous squirrel inside, going past small stone abodes in various states of dishevelment, " + "and into a somewhat-organized chamber, at the center of which is a male rabbit in slightly tattered robes, presumably Smarty. " + "He is rubbing his slightly large head with one hand as he goes over several books. Looking up, he furrows his brow as he spots you. " + "\"Oh. It\'s you,\" he says coldly. \"Are you going to stop causing trouble and listen to me?\" he asks. ", false);
                                    break;
                                default:
                                    this.scene("\tYou follow the tremendous squirrel inside, going past small stone abodes in various states of dishevelment, " + "and into a somewhat-organized chamber, at the center of which is a male rabbit dressed in somewhat tattered robes. " + "His head is slightly large, but unlike others that you saw with this trait, he is only rubbing it with one hand instead of both. " + "Apparently he\'s more fortunate than the other. He looks up from one of the many tomes spread in front of him, and greets you. " + "\"Ah, hello. You\'re a new arrival.\" He steps over to the gigantic squirrel and reaches up to touch her cheek. " + "\"Thank you, Snookums,\" he says to her in a sing-songy voice. \"Welcome, Smarty,\" she rumbles back, smiling. " + "She bends down a bit and they share a kiss before she heads back out, and Smarty returns his attention to you. " + "\"We\'ve all got a bit of a temper after what happened to us, but she\'s still a dear,\" he says off-handedly. " + "He clears his throat and adopts a more serious look. \"Anyways, welcome, traveller, to our refuge. " + "You might\'ve noticed that there\'s something of an excess of abnormal folks about lately, and sanity is in short supply about them. " + "Well, I\'m working to fix both of those things, and I could use an adventurer to help me out. You won\'t go unrewarded. Care to hear me out?\" ", false);
                            }
                            this.choiceButton();
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        locationUpdate(ExperimentTown);
                                        doEvent(ExperimentTown);
                                        break;
                                    case 13:
                                        switch (hasQuest(onBadTermsExperiments)) {
                                            case true:
                                                scene("\tHis mouth tightens into a sneering frown. \"Somehow, I didn\'t think so, but you\'re not in a good place to try this time,\" " + "he says, gesturing at you. You hear the giant squirrel growling behind you as you are lifted into the air by her. " + "She carries you back to the mouth of the cave and hurls you out, " + "sending you tumbling a good way down the mountain before you slide to a halt. " + "That didn\'t quite go as you\'d hoped, and you limp off to explore elsewhere. ", true);
                                                doHealth(-maxHEA * 0.25);
                                                if (HEA < 1) {
                                                    HEA = 1;
                                                }
                                                break;
                                            default:
                                                scene("\tSmarty\'s face twists into a VERY angry frown, and you think you can see the sides of his head throb a bit. " + "\"WELL then,\" he says firmly, \"I suppose we\'re DONE here.\" He turns his head a bit to look past you. " + "\"Snookums, could you show this " + playerGender.gentleman + " the door?\" he asks pointedly. " + "Without a word, the giant squirrel picks you up bodily over her head, walks you back to the cave\'s entrance, " + "and hurls you out quite physically. You dust yourself off and head somewhere else to let them cool down for a while. ", true);
                                                getQuest(onBadTermsExperiments);
                                        }
                                        endEvent(MountainHub);
                                }
                            };
                    }
                    break;
                case this.CabalCave:
                    switch (this.subEvent) {
                        case "":
                            this.scene("\tWhile you explore the jagged mountains, you come across a cave. " + "You can hear what sounds like ritual chanting just on the edge of hearing coming from within. You\'ll need to go in to find out what\'s in there. ", false);
                            this.btntxt(11, "Enter");
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        scene("\tYou steel yourself and slowly march inside, cold stone echoing your footsteps as you enter. " + "As you enter, you are greeted by the sight of robed figures of varying sizes. " + "Some are incredibly large, some are equally incredibly small. Given the glowing glyphs that decorate the place, it\'s obvious that this is some form of magical cabal. ", true);
                                        clearView();
                                        btntxt(1, "Approach the cabal");
                                        leaveButton(3);
                                        listen = function ():void {
                                            switch (btnchc) {
                                                case 1:
                                                    subEvent = "Approach the cabal";
                                                    doEvent(CabalCave);
                                                    break;
                                                case 3:
                                                    scene("\tYou decide that magic is the last thing you want to deal with right now, and head back out to find a different adventure. ", true);
                                                    endEvent(MountainHub);
                                            }
                                        };
                                        break;
                                    case 13:
                                        scene("\tYou decide that magic is the last thing you want to deal with right now, and head back out to find a different adventure. ", true);
                                        endEvent(MountainHub);
                                }
                            };
                            break;
                        case "Approach the cabal":
                            this.scene("\tAs you make your way inward, you are met by a pair of what are obviously guards flanking a very important looking, and very large, lion. " + "The guards are easily " + this.sayDistance(84) + " tall, and the lion is even taller than that. " + "As they get closer, you can see that the lion\'s earth-brown robes only barely contain his enormously muscular frame. " + "He approaches you and spreads his arms welcomingly, though the serious look on his face does not change. \"Welcome, stranger,\" he begins, his voice a deep rumble, " + "\"You\'ve come at an odd time. We are practicioners of the arts of body changing. We seek enlightenment through physical perfection, and utilize raw body mass as the means to alter our bodies. " + "While excess material has bee easy to come by in these curious days, our greatest asset has been lost to us.\" The lion shakes his head, lowering his arms. " + "\"If you wish to trade with us, we can change aspects of your body if you are willing to repay us with raw materials... That is to say, body fat. " + "We are also willing to trade it for coin, should you so desire.\" ", false);
                            if (this.itemOwned(this.LargeWyvernEgg)) {
                                this.scene("One of the guards seems to pause for a moment, then makes a furtive gesture to the lion. " + "He gives a nod, and says, \"My associate believes you have a wyvern\'s egg. Perhaps we could make you an offer, if you would be interested in trading it.\" ", false);
                                this.btntxt(4, "Wyvern egg");
                            }
                            if (this.STR > 60 || this.AGI > 60 || this.INT > 60) {
                                if (!this.hasQuest(this.cabalRogue) && !this.questCompleted(this.cabalRogue)) {
                                    this.scene("The lion gives you a looking over, seeming to appraise you, then says carefully, \"You know, if you felt yourself capable, you may be able to help us with a problem we have.\" " + "The way he phrases it makes it sound important, but ominous. ", false);
                                    this.btntxt(6, "Help cabal");
                                }
                            }
                            if (this.hasQuest(this.cabalRogue) && !this.questCompleted(this.cabalRogue)) {
                                this.btntxt(6, "Help cabal");
                            }
                            this.btntxt(1, "Change your Body");
                            this.btntxt(2, "Sell Fat");
                            this.btntxt(3, "Talk");
                            this.attemptsLeft = 0;
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        subEvent = "Change your Body";
                                        doEvent(CabalCave);
                                        break;
                                    case 2:
                                        subEvent = "Sell Fat";
                                        doEvent(CabalCave);
                                        break;
                                    case 3:
                                        switch (hasQuest(cabalRogue) && !questCompleted(cabalRogue)) {
                                            case true:
                                                switch (attemptsLeft) {
                                                    case 0:
                                                        scene("\n\t\"Our rogue member is a great grey-scaled dragon. He chose the path of physical might, but had a keen mind for magics just the same. " + "It is likely he has made himself quite the giant.\" ", false);
                                                        attemptsLeft++;
                                                        break;
                                                    case 1:
                                                        scene("\n\t\"The magics he practiced involved more and more dangerous methods of quelling an opponent by robbing them of strength. " + "I should have known when I saw, but I didn\'t recognize it before: He revels in cruelty and abasing the weak.\" ", false);
                                                        attemptsLeft++;
                                                        break;
                                                    case 2:
                                                        scene("\n\t\"I fear the oversized insects may be his doing. To what end, I cannot fathom, however. Perhaps he seeks to harvest of them when he feels he can elude us. " + "Perhaps he has already done so...\" ", false);
                                                        attemptsLeft++;
                                                        break;
                                                    case 3:
                                                        scene("\n\t\"Somehow, I doubt he acted alone, but what degree of assistance he has received, and from who, I simply do not know. " + "If you best him, endeavor to search his chambers for any hint of this.\" ", false);
                                                        attemptsLeft++;
                                                }
                                                break;
                                            case false:
                                                switch (attemptsLeft) {
                                                    case 0:
                                                        scene("\n\t\"We rarely get outsiders, for this place is obfuscated from the outside world, but travellers are always welcome to warm themselves here.\" ", false);
                                                        attemptsLeft++;
                                                        break;
                                                    case 1:
                                                        scene("\n\t\"I am the leader of this circle, though that distinction is only granted by my comrades. They trust me to lead them, and I am humbled by that trust.\" ", false);
                                                        attemptsLeft++;
                                                        break;
                                                    case 2:
                                                        scene("\n\t\"The guards have taken a vow of silence, only speaking when it is needed that they may better hear. Their noble devotion is appreciated.\" ", false);
                                                        attemptsLeft++;
                                                        break;
                                                    case 3:
                                                        scene("\n\t\"Physical perfection means different things to different people. " + "You will see those of great size and strength, those of small and swift nature, and those that seek the middle path. All views are considered correct here.\" ", false);
                                                        attemptsLeft++;
                                                }
                                        }
                                        break;
                                    case 4:
                                        scene("\tYou are led to what appears to be a stable that contains several feral creatures, including some wyverns. " + "The lion crosses his arms, and tells you, \"We\'re interested in that wyvern egg you have. Could I see it for a moment?\" " + "You take out the egg you got from the giant wyvern\'s nest, and he studies it carefully. \"Yes,\" he says slowly, \"This could be quite a noteworthy specimen.\" " + "Facing you again, he clasps his great hands. \"We would like to hatch that egg of yours, that we might study and experiment with the wyvern. " + "You would not go unrewarded for it, as we could offer to teach you some techniques in return. " + "And you need not worry about the well-being of the creature; our experiments are not painful, " + "and some of our greater successes in our trials have become intelligent enough to communicate. " + "At worst, it would lead a life of comfortable contentment. At best, it may become a wonderous step in attaining peace and knowledge.\" " + "He reaches out a hand to you and asks, \"So what say you?\" ", true);
                                        choiceButton();
                                        listen = function ():void {
                                            switch (btnchc) {
                                                case 11:
                                                    scene("\tYou hand over the egg, which is still surprisingly warm for how long it\'s been out in the cold. " + "The lion claps his hands together, a smile crossing his large face for the first time since you\'ve been here. \"Wonderful!\" he exclaims. " + "One of his guards takes the egg to a small, pillow-lined chamber and carefully sets it down. " + "The lion nods approvingly at this and turns back to you. \"While we cannot offer to teach our magics to an outsider, " + "we <i>can</i> assist you in training your body. What shall it be, then?\" ", true);
                                                    clearView();
                                                    btntxt(1, "Train strength");
                                                    btntxt(2, "Train agility");
                                                    btntxt(3, "Train endurance");
                                                    btntxt(4, "Train intelligence");
                                                    btntxt(5, "Train stomach");
                                                    listen = function ():void {
                                                        expendItem(invArray[itemFind(LargeWyvernEgg)]);
                                                        subEvent = "Approach the cabal";
                                                        switch (btnchc) {
                                                            case 1:
                                                                doEvent(CabalCave);
                                                                scene("You spend some time training with the Cabal. " + "It is an unusual course, more devoted to the understanding of what strength is, focusing on unusual parts of the body, but you do emerge stronger. ", true);
                                                                chgStats(4, 0, 0, 0, 0);
                                                                break;
                                                            case 2:
                                                                doEvent(CabalCave);
                                                                scene("You spend some time training with the Cabal. " + "The exercise seems to be more about the understanding of flexibility and time, focusing on stretches and meditation, but you do emerge faster. ", true);
                                                                chgStats(0, 4, 0, 0, 0);
                                                                break;
                                                            case 3:
                                                                doEvent(CabalCave);
                                                                scene("You spend some time training with the Cabal. The exercise involves repeating mantras while being hit in the stomach with sticks. " + "It\'s straightforward and hurts, but you do emerge tougher. ", true);
                                                                chgStats(0, 0, 4, 0, 0);
                                                                break;
                                                            case 4:
                                                                doEvent(CabalCave);
                                                                scene("You spend some time training with the Cabal. The course involves pondering the nature of the infinitely large and the infinitely small in meditation. " + "You become keenly aware of how little you truly know in the face of all that is, but the humbling knowledge does give you new insights. ", true);
                                                                chgStats(0, 0, 0, 4, 0);
                                                                break;
                                                            case 5:
                                                                doEvent(CabalCave);
                                                                scene("You spend some time training with some of the more \'robust\' members of the Cabal. " + "The course seems to be fairly new and experimental, involving unusual \'exercises\' with bellows, stomach massages and mantras of endurance. " + "You\'re left a little light-headed, but feel like you could eat more now. ", true);
                                                                chgStats(0, 0, 0, 0, 4);
                                                        }
                                                    };
                                                    break;
                                                case 13:
                                                    subEvent = "Approach the cabal";
                                                    doEvent(CabalCave);
                                                    scene("\tThe lion pulls his hand up to rub at his chin as you put the egg back with your belongings. " + "\"I understand. If you change your mind, the offer stands,\" he says humbly. You are led back to the main chamber. ", true);
                                            }
                                        };
                                        break;
                                    case 6:
                                        switch (hasQuest(cabalRogue)) {
                                            case false:
                                                getQuest(cabalRogue);
                                                scene("\tWhen you express an interest in helping the group, the lion nods and leads you to a small room. The guards stand outside as he gestures you towards a seat. " + "\"I\'m afraid our situation is most dire,\" he says, his face deathly serious. \"One of our number has gone rogue, and taken our most valuable artifact with him: " + "An enchanted cauldron that once stored all of the magical energies that we utilize to alter a body. The kind of power he has available to him...\" " + "The lion shakes his head, his brow furrowed, then continues. \"As well, I fear he is partially responsible for the oddities that have plagued these mountains. " + "Many creatures and even people bear marks that indicate our magic has been used on them, but wrongly. " + "I have little doubt that he has spread lies and half-truths of our magic to those that would seek it.\" " + "He hands you a map of the area, and a fairly distant mountain is circled on it. " + "\"We have tracked him to that point,\" the lion continues, \"but he has fortified the location, and his magic circles make even entering a risky proposition. " + "If you are to face him, know that he will be prepared to use the full force of his magical prowess against you. " + "Follow the map when you are ready to face him, but be aware: He will most certainly use your own body against you.\" " + "You pocket the map, and are lead back out to the main room. ", true);
                                                getItem(cabalMap);
                                                break;
                                            case true:
                                                switch (questReady(cabalRogue)) {
                                                    case true:
                                                        questReward(cabalRogue);
                                                        removeItem(cabalMap);
                                                        removeItem(cabalCauldron);
                                                        doEvent(CabalCave);
                                                        scene("\tYou present the cauldron to him. His face brightens with a relieved smile as he takes it from you. \"You\'ve done it!\" he exclaims. " + "\"It\'s almost too fortunate to be real. Please, wait here just a moment.\" " + "He heads back with the cauldron into his chamber, and returns a few moments later bearing a dark colored robe. " + "\"When we discovered what our rogue member had done, we searched his quarters and found this robe. " + "Apparently he did not have time to take it with him. It is enchanted with potent magics unlike any that we have ever seen. " + "While we had intended to study it and unlock its mysteries ourselves, it is clear to me that you would make better use of it. " + "Wear it well, honored outsider. You will always be welcome among us.\" ", true);
                                                        break;
                                                    case false:
                                                        scene("\t\"We have tracked him to that point,\" the lion says, \"but he has fortified the location, and his magic circles make even entering a risky proposition. " + "If you are to face him, know that he will be prepared to use the full force of his magical prowess against you. " + "Follow the map when you are ready to face him, but be aware: He will most certainly use your own body against you.\" ", true);
                                                }
                                        }
                                        break;
                                    case 13:
                                        scene("\n\tYou decide to take your leave of the cave and head back into the cold harsh winds of the mountains. ", false);
                                        endEvent(MountainHub);
                                }
                            };
                            break;
                        case "Change your Body":
                            this.scene("\tYou ask about how they might change your body, and the lion has one of the guards show you to what seems to be a magical laboratory, " + "if the sigils on the ground, books, and staves are any indication. There, you encounter a tall, thin rabbit lady wearing clean robes and trousers. " + "She is dutifully studying, waving a hand in arcane motions and holding a book in the other before looking up to see you. \"Ah, someone looking for my services, I take it?\" " + "She sets down her book and picks up a staff, motioning for you to stand in the sigil. \"Here\'s what I can do for you: " + "I can make you larger or smaller, change what species you are, or change your gender. You\'ll need to have a certain amount of mass for any of these, and I will take some as a fee, on top of it. " + "If that doesn\'t appeal to you, then you can head off as you wish. So what will it be?\" ", false);
                            this.btntxt(1, "Alter your Size");
                            this.btntxt(2, "Alter your Race");
                            this.btntxt(3, "Alter your Gender");
                            this.btntxt(5, "Talk");
                            this.attemptsLeft = 0;
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        subEvent = "Alter your Size";
                                        doEvent(CabalCave);
                                        break;
                                    case 2:
                                        subEvent = "Alter your Race";
                                        doEvent(CabalCave);
                                        break;
                                    case 3:
                                        subEvent = "Alter your Gender";
                                        doEvent(CabalCave);
                                        break;
                                    case 5:
                                        switch (attemptsLeft) {
                                            case 0:
                                                scene("\n\t\"I\'m tasked with helping outsiders. I volunteered, really; I like meeting new and interesting people, and making them even more interesting.\" ", false);
                                                attemptsLeft++;
                                                break;
                                            case 1:
                                                scene("\n\t\"Our leader speaks humbly, but the truth of the matter is that he\'s the best of all of us. Not that I won\'t do a great job with whatever you need, of course.\" ", false);
                                                attemptsLeft++;
                                                break;
                                            case 2:
                                                scene("\n\t\"You should talk to the owl that\'s working on sorting the magical energy. He could use someone to break his concentration.\" ", false);
                                                attemptsLeft++;
                                                break;
                                            case 3:
                                                scene("\n\t\"Names? Oh, we avoid using them around outsiders. Nothing personal; we abandon our old names and take up new ones just for our brothers and sisters in the circle. " + "We\'ve got a lot of fun, weird rules like that.\" ", false);
                                                attemptsLeft++;
                                        }
                                        break;
                                    case 13:
                                        subEvent = "Approach the cabal";
                                        doEvent(CabalCave);
                                        scene("\tYou head back to the main chamber. The lion and his guards are watching and waiting for you. ", true);
                                }
                            };
                            break;
                        case "Alter your Size":
                            this.scene("\t\"Alter your size, eh?\" the rabbit hums. \"We can do that. Making you larger will make you stronger, but more clumsy" + ". Making you smaller will make you faster, but weaker" + ". So which will it be?\" ", false);
                            this.btntxt(1, "Increase your Size");
                            this.btntxt(3, "Decrease your Size");
                            this.leaveButton(13);
                            this.listen = function ():void {
                                var _loc1_:int = 0;
                                var _loc2_:int = 0;
                                switch (btnchc) {
                                    case 1:
                                        switch (playerHeight < 144) {
                                            case true:
                                                if (playerHeight > playerSpecies.baseHeight) {
                                                    _loc1_ = Math.pow(Math.abs(playerSpecies.baseHeight - playerHeight), 1.5) * 10;
                                                }
                                                if (playerHeight <= playerSpecies.baseHeight) {
                                                    _loc1_ = Math.pow(Math.abs(playerSpecies.baseHeight - playerHeight), 1.1) * 10;
                                                }
                                                switch (_loc1_ <= FAT) {
                                                    case true:
                                                        FAT = FAT - _loc1_;
                                                        playerHeight = playerHeight + 1;
                                                        bSTR = bSTR * 1.01;
                                                        bAGI = bAGI / 1.01;
                                                        bSTO = bSTO * 1.01;
                                                        subEvent = "Change your Body";
                                                        doEvent(CabalCave);
                                                        scene("\t\"Alright then, hold still.\" At that, the rabbit begins to slowly wave her staff in odd patterns, chanting out arcane syllables carefully. " + "The magic circle you are standing in glows, and a hazy red tendril of energy begins to emanate from your " + fatness() + " midsection. " + "It splits into multiple smaller tendrils and flows back into your limbs, chest, neck, and spine, though one leads back to the rabbit and into her belly. " + "Your body slims steadily, and your feet begin to sink away from you. A quick examination of yourself shows you that your body is, surely enough, enlarging. " + "As you grow, her belly swells larger and larger. Eventually, the tendril ceases to flow out of you, leaving you standing " + sayDistance(playerHeight) + " tall, and the rabbit letting out a hum and patting at her bloated stomach. \"Mmm, well that was fun, wasn\'t it?\" she asks. ", true);
                                                        break;
                                                    default:
                                                        subEvent = "Change your Body";
                                                        doEvent(CabalCave);
                                                        scene("\tThe rabbit gives you a looking over, walking over to poke your " + waist() + " belly with her staff. She shakes her head, and says, " + "\"I\'m afraid you just don\'t have the mass to make you larger to a significant degree. " + "You\'ll just have to come back when you have about " + sayWeight(_loc1_) + " of fat you need to get rid of. " + "Perhaps there\'s something else I can do for you instead.\" ", true);
                                                }
                                                break;
                                            default:
                                                subEvent = "Change your Body";
                                                doEvent(CabalCave);
                                                scene("\t\"Woah there, big " + playerGender.boy + ". Unfortunately your height is a bit... out of my range. You\'re already as tall as I can make you without... dangerous consequences. " + "Sorry, but, cabal policies.\" ", true);
                                        }
                                        break;
                                    case 3:
                                        switch (playerHeight > 48) {
                                            case true:
                                                if (playerHeight <= playerSpecies.baseHeight) {
                                                    _loc2_ = Math.pow(Math.abs(playerSpecies.baseHeight - playerHeight), 1.5) * 8;
                                                }
                                                if (playerHeight > playerSpecies.baseHeight) {
                                                    _loc2_ = Math.pow(Math.abs(playerSpecies.baseHeight - playerHeight), 1.1) * 8;
                                                }
                                                switch (_loc2_ <= FAT) {
                                                    case true:
                                                        FAT = FAT - _loc2_;
                                                        playerHeight = playerHeight - 1;
                                                        bSTR = bSTR / 1.01;
                                                        bAGI = bAGI * 1.01;
                                                        bSTO = bSTO / 1.01;
                                                        subEvent = "Change your Body";
                                                        doEvent(CabalCave);
                                                        scene("\t\"Alright, stand right there.\" With that, the rabbit begins to wave her staff in spiralling patterns, carefully chanting out magic words. " + "The magic circle you are standing in responds, beginning to glow, and a hazy red tendril of magical energy begins to flow out of your " + fatness() + " midsection. " + "Several smaller tendrils snake off of it and flow back into your arms, legs, chest, spine, and neck, but one lazily floats toward the rabbit\'s belly. " + "The world seems to get bigger around you, but as you give yourself a closer look, you confirm that you are, indeed, getting smaller. " + "As you get smaller, her belly bulges bigger and bigger. " + "After a few more moments, the tendril ceases to flow out from you, leaving you " + sayDistance(playerHeight) + " tall, " + "and the rabbit gives a hum as she rubs at her swollen belly. \"Mmm, I love my job,\" she murmurs. ", true);
                                                        break;
                                                    default:
                                                        subEvent = "Change your Body";
                                                        doEvent(CabalCave);
                                                        scene("\tShe gives you a thorough looking over and shakes her head. " + "\"It\'d be dangerous to make you smaller without extra material to reshape what\'s left,\" she explains. " + "\"Please, come back when you\'ve got at least " + sayWeight(_loc1_) + " to throw around, so to speak.\" ", true);
                                                }
                                                break;
                                            default:
                                                subEvent = "Change your Body";
                                                doEvent(CabalCave);
                                                scene("\t\"Woah there, little " + playerGender.man + ". Unfortunately you\'re already a bit too... under my range. " + "You\'re already as short as I can make you without... dangerous consequences. Sorry, but, cabal policies.\" ", true);
                                        }
                                        break;
                                    case 13:
                                        subEvent = "Change your Body";
                                        doEvent(CabalCave);
                                }
                            };
                            break;
                        case "Alter your Race":
                            this.clearView();
                            switch (this.FAT >= 200) {
                                case true:
                                    this.scene("\t\"Altering your race won\'t take too much,\" she explains, \"But I will take some of your fat as a cost for doing it. So what would you like to be?\" ", false);
                                    this.speciesDropDown.visible = true;
                                    this.buttonIcons(11, this.iconNext);
                                    this.btntxt(11, "Next");
                                    this.btntxt(12, "Custom Species");
                                    break;
                                case false:
                                    this.scene("\tShe looks you over carefully, then walks over and pinches your belly\'s skin. " + "\"Not to be cruel,\" she starts, \"but you\'re short at least another " + this.sayWeight(200 - this.FAT) + " of fat for me to work with, let alone cover the fee I intended. " + "Maybe you should consider eating more?\" She shrugs. ", true);
                            }
                            this.returnView(13);
                            this.listen = function ():void {
                                var _loc1_:Species = null;
                                switch (btnchc) {
                                    case 11:
                                        if (speciesDropDown.selectedIndex != -1 && speciesDropDown.selectedItem.type.speciesName != playerSpecies.speciesName) {
                                            FAT = FAT - 200;
                                            _loc1_ = speciesDropDown.selectedItem.type;
                                            playerSpecies = ObjectUtil.copy(_loc1_) as Species;
                                            speciesDropDown.visible = false;
                                            switch (playerGender.name) {
                                                case Male.name:
                                                    if (playerSpecies.mName != null) {
                                                        playerSpecies.name = playerSpecies.mName;
                                                    }
                                                    else {
                                                        playerSpecies.name = playerSpecies.speciesName;
                                                    }
                                                    break;
                                                default:
                                                    if (playerSpecies.fName != null) {
                                                        playerSpecies.name = playerSpecies.fName;
                                                    }
                                                    else {
                                                        playerSpecies.name = playerSpecies.speciesName;
                                                    }
                                            }
                                            subEvent = "Change your Body";
                                            doEvent(CabalCave);
                                            scene("\t\"Alright then, hold still for a moment,\" she says as the circle you stand in begins to glow. " + "There is a surprisingly-painless series of shifts and pops in your bones, and your skin crawls as it changes consistency. " + "A small tendril of hazy red energy snakes its way out of you and into the rabbit\'s belly, making it almost imperceptibly larger before it dissipates. " + "In a few more moments, your body has changed, and you stand there feeling like a brand new " + playerSpecies.name + ". ", true);
                                        }
                                        break;
                                    case 12:
                                        speciesDropDown.visible = false;
                                        currentState = "customSpecies";
                                        break;
                                    case 13:
                                        speciesDropDown.visible = false;
                                        subEvent = "Change your Body";
                                        doEvent(CabalCave);
                                }
                            };
                            break;
                        case "Alter your Gender":
                            this.scene("\t\"So, want to see how the other half lives, eh? That\'s won\'t take much, but I will take a bit of your fat as a fee. Care to give me the go-ahead?\" ", false);
                            this.yesView(11);
                            this.noView(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        switch (FAT >= 200) {
                                            case true:
                                                FAT = FAT - 200;
                                                switch (playerGender.name) {
                                                    case Female.name:
                                                        if (playerSpecies.mName != null) {
                                                            playerSpecies.name = playerSpecies.mName;
                                                        }
                                                        else {
                                                            playerSpecies.name = playerSpecies.speciesName;
                                                        }
                                                        playerGender = ObjectUtil.copy(Male) as Gender;
                                                        break;
                                                    default:
                                                        if (playerSpecies.fName != null) {
                                                            playerSpecies.name = playerSpecies.fName;
                                                        }
                                                        else {
                                                            playerSpecies.name = playerSpecies.speciesName;
                                                        }
                                                        playerGender = ObjectUtil.copy(Female) as Gender;
                                                }
                                                subEvent = "Change your Body";
                                                doEvent(CabalCave);
                                                scene("\tShe raises her staff, mumbling certain arcane words as the magic circle glows, and subtle changes begin to take place in your body. " + "Your proportions change, organs twist and move, and fat deposits shift to change emphasis on your body\'s shape. " + "A small tendril of hazy red energy snakes its way out of you and into the rabbit\'s belly, making it almost imperceptibly larger before it dissipates. " + "Just like that, you\'ve changed into a new " + playerGender.man + ". ", true);
                                                break;
                                            default:
                                                subEvent = "Change your Body";
                                                doEvent(CabalCave);
                                                scene("\tShe looks you over carefully, then walks over and pinches your belly\'s skin. " + "\"Not to be cruel,\" she starts, \"but you don\'t have enough mass for me to work with, let alone cover the fee I intended. " + "You need at least " + sayWeight(200) + " of fat to spend first. Maybe you should consider eating more?\" She shrugs. ", true);
                                        }
                                        break;
                                    case 13:
                                        subEvent = "Change your Body";
                                        doEvent(CabalCave);
                                        scene("\t\"Suit yourself. Is there anything else I can help you with?\" ", true);
                                }
                            };
                            break;
                        case "Sell Fat":
                            this.scene("\tYou show interest in trading fat around, and are shown the way to a chamber that is in slight disarray, various pens containing chickens, pigs, even a couple of cows, " + "all in varying degrees of obesity, and all letting out subdued, yet cacophonous, noises. " + "A slightly frazzled looking male owl in a loose, sleeveless robe and plain pants is moving between the lot of them, " + "occasionally waving his arms and whispering a few arcane words to send a tendril of of magic from one to another. " + "He turns his head to look at you, back still to you, not stopping his rhythmic arm movements. \"Ah, hello. Things are still a bit disorganized, so pardon the mess.\" " + "Turning to work with a pig in your direction, he asks, \"I sort the mass here. Did you want sell us some?\" ", false);
                            this.btntxt(1, "10%");
                            this.btntxt(2, "25%");
                            this.btntxt(3, "50%");
                            this.btntxt(4, "75%");
                            this.btntxt(6, "100%");
                            this.btntxt(11, "Talk");
                            this.attemptsLeft = 0;
                            this.leaveButton(13);
                            this.listen = function ():void {
                                var _loc1_:int = 0;
                                switch (btnchc) {
                                    case 1:
                                        _loc1_ = FAT * 0.1;
                                        break;
                                    case 2:
                                        _loc1_ = FAT * 0.25;
                                        break;
                                    case 3:
                                        _loc1_ = FAT * 0.5;
                                        break;
                                    case 4:
                                        _loc1_ = FAT * 0.75;
                                        break;
                                    case 6:
                                        _loc1_ = FAT;
                                        break;
                                    case 11:
                                        switch (attemptsLeft) {
                                            case 0:
                                                scene("\n\t\"All this is the raw materials we work with here. What with recent times, we\'ve not been at a lack of it, but storing it all has been tricky.\" ", false);
                                                attemptsLeft++;
                                                break;
                                            case 1:
                                                scene("\n\t\"The art of transferring body mass is more complicated than it may seem. " + "You have to know the specifics so that you don\'t seriously hurt someone by taking something vital away from them.\" ", false);
                                                attemptsLeft++;
                                                break;
                                            case 2:
                                                scene("\n\t\"How do we get the gold? Well, a couple sources: With the excess of materials we have, we sell some of our livestock at a premium. " + "As well, a few of our number seek knowledge in the outside world, so they do some adventuring for coin at times.\" ", false);
                                                attemptsLeft++;
                                                break;
                                            case 3:
                                                scene("\n\t\"That rabbit girl that works with outsiders is a bit frustrating sometimes. " + "Takes everything we do as fun, rarely serious. But, well, it\'s hard not to like her for it, I\'ll admit.\" ", false);
                                                attemptsLeft++;
                                        }
                                        break;
                                    case 13:
                                        subEvent = "Approach the cabal";
                                        doEvent(CabalCave);
                                        scene("\tYou head back to the main chamber. The lion and his guards are watching and waiting for you. ", true);
                                }
                                if (btnchc < 10 && _loc1_ > 0) {
                                    FAT = FAT - _loc1_;
                                    subEvent = "Approach the cabal";
                                    doEvent(CabalCave);
                                    if (_loc1_ <= 10) {
                                        scene("\t\"Every little bit is appreciated,\" he says, then waves a hand at you. A whispy red tendril snakes out from you and into one of the chickens, making it look a little rounder. " + "You are slightly lighter, now " + fatness() + " in appearance. In the midst of his sorting, he hands you a handful of gold coins. ", true);
                                    }
                                    if (_loc1_ > 10 && _loc1_ <= 30) {
                                        scene("\t\"Your contribution is appreciated,\" he says sincerely, then waves both hands at you. " + "A few whispy red tendrils snake out of you, each making its way to a chicken, leaving them a bit rounder than before. " + "You feel a good bit lighter, and your body is " + fatness() + ". You are handed a small pouch of gold for your trouble. ", true);
                                    }
                                    if (_loc1_ > 30 && _loc1_ <= 60) {
                                        scene("\t\"Oh, that\'s rather a lot, thank you,\" he says, then points both hands at you. \"Hmm, going to have to find a place for some of this,\" " + "he mumbles, and three glowing red tendrils of magical energy seep out of you. " + "Two of them make their way to a pair of pigs, their rounded sides thickening with the addition of more fat, and the other snakes into the owl\'s belly, " + "making it bulge out like he\'d had quite a meal. You, on the other hand, feel lighter, and look " + fatness() + ". " + "He lets out a \"phew\" and hands you a pouch of gold, resuming his sorting. ", true);
                                    }
                                    if (_loc1_ > 61 && _loc1_ <= 200) {
                                        scene("\t\"Oh dear, going to have to find places to put all of this,\" he mumbles, then says louder, \"We appreciate your generosity.\" Focussing on you, he holds his hands out and beckons. " + "Bright tendrils of red magical energy issues forth from you, several gliding through the air and seeping into a cow\'s belly, " + "softening it up and sending it sinking noticably closer to the ground. Hemming and hawing, several more are redirected towards the owl\'s belly, where they seep into his body. " + "His belly swells, filling out his robe and causing him to let out a bit of a muffled grunt. " + "\"Th-thank you,\" he stammers, taking a breath and patting at his now large stomach before handing you a hefty pouch of gold. " + "You are left both lighter and richer, and your body is now " + fatness() + ". ", true);
                                    }
                                    if (_loc1_ > 200) {
                                        scene("\tThe owl takes a deep breath when he realizes just how much mass he\'s going to be throwing around. " + "\"Right, here goes, then,\" he says quietly, focussing on you and pointing both arms at you for a moment, then throwing them upwards in a ritualistic gesture. " + "A vibrant red tendril of magical energy issues forth from you, splitting off into numerous smaller ones that seep into the rounded bellies of every beast in the room, " + "all growing noticably fatter and more lethargic. Humming and harumphing, the owl directs the still-bright tendril from one end of the room to the other, " + "stuffing every beast in his path with your fat. \"Didn\'t care much for a thin figure anyways,\" he mumbles, and the tendril snakes through the air and towards his belly. " + "He starts taking deep breaths as his stomach stretches and swells. Stifling grunts and moans, his robe fills with his belly, then overfills, " + "pressing open and showing his feathers as it grows round, taut, and huge. It hangs out over the top of his pants, which he lowers slightly in response, " + "and still bulges further, and further, and further... A few moments later, the tendril finally fades entirely into his giant belly, " + "and he sinks to a seat, letting out an \"Oog.\" You feel significantly lighter, and looks " + fatness() + ", but the owl\'s not so fortunate. " + "\"Ah,\" he starts slowly, \"yeah, gonna have to... find a place for this.\" " + "He produces a sack of gold and holds it up in the air with one arm in your general direction, the other rubbing over his entirely too full stomach. " + "\"Here, this... take this for... oog...\" he mumbles. You decide that he\'s had enough for the moment and head back out. ", true);
                                    }
                                    doGold(_loc1_ / 3);
                                }
                            };
                    }
                    break;
                case this.InsectHive:
                    switch (this.subEvent) {
                        case "":
                            this.scene("\tWhile you explore the jagged mountains, you come across a cave. You can hear an odd buzzing, even from outside. You\'ll need to go in to find out what\'s in there. ", false);
                            this.btntxt(11, "Enter");
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        subEvent = "EnterCave";
                                        doEvent(InsectHive);
                                        break;
                                    case 13:
                                        scene("\tYou decide that you don\'t want to deal with something that buzzes quite that loud, and head back out to find a different adventure. ", true);
                                        endEvent(MountainHub);
                                }
                            };
                            break;
                        case "EnterCave":
                            this.scene("\tYou steel yourself and slowly march inside, cold stone echoing your footsteps as you enter. " + "Rounding a corner, you come upon a giant wax structure that fills the entirity of the cave. " + "It is now clear that you are standing outside of an unnaturally huge bee hive. " + "You spot insects easily the size of a person heading into and out of chambers along the walls and ceiling. " + "From the looks of it, this cavern expands rather extensively in all directions, though that\'s been filled with this chambered hive. " + "Curiously, it appears to be a mixture of ants, bees, and wasps of some description all working in unnatural harmony. " + "\n\tThere appears to be two primary directions you can get to, lacking the ability to fly as you do: " + "The left path leads to a chamber that ants with swollen abdomens enter and march out of again less engorged. " + "The right path appears to be guarded by a horrific wasp that\'s the size of a small house. You\'d most certainly have to fight to get through.", false);
                            this.clearView();
                            this.btntxt(1, "Left");
                            this.btntxt(3, "Right");
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        subEvent = "LarvaPit";
                                        doEvent(InsectHive);
                                        break;
                                    case 3:
                                        subEvent = "Queen\'sChambers";
                                        doEvent(InsectHive);
                                        break;
                                    case 13:
                                        scene("\n\tYou decide that you don\'t want to deal with something that buzzes quite that loud, and head back out to find a different adventure. ", false);
                                        endEvent(MountainHub);
                                }
                            };
                            break;
                        case "LarvaPit":
                            this.scene("\tYou sneak past the ants and into the chamber. " + "Looking around, you can see white larva wriggling about on the ground, only a few inches in length, " + "broken eggs being carted away by bees and ants that are less gigantic than others in here, most likely the worker subspecies. " + "One of the giant ant-like creatures with engorged thoraxes crawls into the middle of a group of larva, " + "turning its thorax to each in turn and exuding what appears to be extremely thick, dense honey into their mouths. " + "Surprisingly, the larva grow in size as they eat, rapidly redoubling in bulk before pulling away from the feeding insect. " + "You have just enough time to realize that whatever magic is involved in this honey is why the insects are giant before one of the antoids comes up to you, swollen thorax first. ", false);
                            this.btntxt(13, "Resist");
                            this.btntxt(11, "Submit");
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        subEvent = "Submit";
                                        doEvent(InsectHive);
                                        break;
                                    case 13:
                                        scene("\tYou step back and ready your " + WEA.Name + " as the ant draws closer. It\'s seems unwavered by your rebuke and continues forward in a more aggressive manner. " + "It seems to be unwilling to let you go without a fight. ", true);
                                        combatEvent(FeederAnt);
                                        locationUpdate(MountainHub);
                                }
                            };
                            break;
                        case "Submit":
                            this.scene("\tYou decide to throw caution to the wind and tilt your head up passively, opening your mouth and waiting. " + "The huge ant creature pushes the tip of its thorax into your mouth, and you are immediately overwhelmed by its sweet, gooey honey. " + "All you can do is hold on for dear life as you watch the ant\'s thorax slowly thin, your belly bulging fuller and tighter in response. " + "The sheer force of the extrusion of honey is forcing it down your throat, and given the hefty mass of the ant\'s body holding you in place now, you couldn\'t stop if you wanted to. ", false);
                            this.cram = this.dXY(400, 600);
                            this.doConsume(0, this.cram, this.cram * 0.6);
                            switch (this.alive()) {
                                case true:
                                    this.scene("\n\tAs you fill with the enchanted honey, you can feel yourself growing stronger. " + "Greedily, you reach up and squeeze the feeder ant\'s thorax, forcing the honey out of it and down your throat even faster. " + "After just a few more moments of this, the creature is left in your grasp, squirming a bit as the flow slows to a trickle, then stops. " + "You lick your lips, your face a dripping mess of sticky sweetness, before coming to realize that all the insects have stopped entirely. " + "It seems that they didn\'t expect this to happen and have completely locked up. " + "You decide to capitalize on the confusion, and use your new strength to haul your significantly greater mass back out of the cave. ", false);
                                    this.chgStats(30, 0, 0, 0, 0);
                                    this.endEvent(this.MountainHub);
                                    break;
                                default:
                                    this.scene("\n\tAnd after the first few gallons, you definitely want to. You rub at your belly as it swells and stretches, but the torrent just does not end. " + "You are filled well beyond your limits, left groaning on the ground, held up only by your " + this.waist() + " belly. " + "Its magic has certainly had an effect on you; your muscles feel significantly larger, but even with your increased strength, you don\'t have the will to move. ", false);
                                    this.chgTempStats("STR", -30);
                                    this.nextButton();
                                    submitNumber = 0;
                                    this.listen = function ():void {
                                        switch (submitNumber) {
                                            case 0:
                                                scene("\n\tWhich is unfortunate for you, because as the feeder ant walks away, another moves up to take its place. " + "You are helpless as your belly is made to swell to tremendous size by another... ", false);
                                                doConsume(0, 500, 300);
                                                chgTempStats("STR", -30);
                                                submitNumber++;
                                                break;
                                            case 1:
                                                scene("And another... ", false);
                                                doConsume(0, 500, 300);
                                                chgTempStats("STR", -30);
                                                submitNumber++;
                                                break;
                                            case 2:
                                                scene("And another... ", false);
                                                doConsume(0, 500, 300);
                                                chgTempStats("STR", -30);
                                                submitNumber++;
                                                break;
                                            case 3:
                                                scene("And another. By the time they\'re done, your massive gut is the size of the passageway you came down, and in spite of how enormous your muscles have become, " + "you can do little but flail your limbs about, unable to move the tremendous load of honey housed inside you. " + "You have little time to contemplate this before a pack of worker insects start to roll you towards what appears to be an offshoot of the chamber. " + "When you\'re inside it, however, it becomes apparent that you have been shoved into a hollowed out comb, as you feel the waxy walls all around you. " + "\n\tAs the insects finish jamming you into the chamber, a few of the bees begin to disgorge wax on you. " + "Where it makes contact with your " + playerSpecies.fur + ", there\'s an odd itching and stiffening that slowly spreads through you. " + "When it coats your limbs, you can only watch as you lose the ability to move, your body coming to match the wax\'s consistency. " + "The realization dawns on you that you are becoming a storage chamber for all the honey that was forced into you, " + "but before you have time to ponder the implications, the change is complete, and you lose all sense of being. ", false);
                                                doConsume(0, 500, 300);
                                                chgTempStats("STR", -30);
                                                defeatEvent(transformed);
                                        }
                                    };
                            }
                            break;
                        case "Queen\'sChambers":
                            this.scene("\tYou make for the guarded chamber, under scrutinous watch from the giant wasp. As you approach, its wings make a deep buzz. " + "It hovers in the air and points its stinger at you threateningly. " + "It does not attack immediately, and you get a fairly clear view of a grossly oversized insectoid, unable to move under its own girth. " + "It is tended to by smaller insects, shoving honey into its mouth and collecting eggs from behind its thorax. " + "If you want to approach it, you\'re going to have to go through its guard... ", false);
                            this.btntxt(11, "Attack");
                            this.buttonIcons(11, this.iconAttack);
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        scene("\tYou brandish your " + WEA.Name + " at the massive wasp who hovers over to you menacingly, evidently prepared to battle for it\'s Queen\'s honor. ", true);
                                        subEvent = "WaspDefeated";
                                        locationUpdate(MountainHub);
                                        combatEvent(RoyalGuardWasp);
                                        break;
                                    case 13:
                                        subEvent = "EnterCave";
                                        doEvent(InsectHive);
                                }
                            };
                            break;
                        case "WaspDefeated":
                            this.scene("\tLeaving behind the wrecked body of the guard wasp, you approach the giant, bloated beast of a queen. " + "As you do, the small servants scatter from you, already beginning to tend the guard. " + "The queen turns at you, its mandibles flexing in what might be a threatening manner, if it weren\'t so completely engorged as to be immobile. " + "It turns its gaze at one of the workers, which stops its frantic scattering and run to another room. After a moment, it appears in the doorway, holding a lump of something. " + "The queen has stopped attempted to look threatening and is merely staring at you. It seems to be offering you a bribe to leave it alone... ", false);
                            this.btntxt(11, "Accept Offer");
                            this.btntxt(13, "Slay it");
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        scene("\tYou accept the insect queen\'s offer, and follow the small worker as it leads you back out of the cave. " + "When you are out, it drops the lump of wax it was holding. On closer inspection, you can see that it is a thinly-coated lump of royal jelly, ready to eat whenever you want it. " + "Given the immense magic coming off it, it doesn\'t seem like a bad prize at all. You take it, and head off to continue exploring. ", true);
                                        endEvent(MountainHub);
                                        getItem(RoyalJelly);
                                        break;
                                    case 13:
                                        scene("\tThe worker carrying your bribe scurries off as you turn away from it and back towards the queen. " + "You have decided to destroy the monstrous thing, and a few swift attacks are enough to put it down. " + "As the massive insect slumps over and goes still, you spot something glinting at the end of its thorax. " + "Going down to take a look, you see the bee aspect of it has left this deceased creature with a very long stinger. " + "On top of that, it looks loose. You give it a few good yanks, and the stinger dislodges. " + "It is long enough, hard enough, and pointy enough to use as a long thrusting weapon, " + "and it even has a bit that as inside the queen that is thin enough to use as a hand hold... after you wash it off. " + "You take your new weapon and head back out to continue exploring. ", true);
                                        endEvent(MountainHub);
                                        getItem(QueensSting);
                                }
                            };
                    }
                    break;
                case this.WyvernCave:
                    switch (this.subEvent) {
                        case "":
                            this.scene("\tWhile you explore the jagged mountains, you come across a cave. You can hear an intermittant growling, even from outside. You\'ll need to go in to find out what\'s in there. ", false);
                            this.btntxt(11, "Enter");
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        scene("\tYou steel yourself and slowly march inside, cold stone echoing your footsteps as you enter. " + "Not too far in, you find what was making the sound you heard outside: An especially large wyvern guarding a nest. " + "You can see the nest has baby wyverns in it, and can also make out the glint of metal. " + "It\'s entirely possible that this nest has treasure in it, but if you want it, you\'re going to have to get past an angry mother. ", true);
                                        btntxt(11, "Approach the nest");
                                        leaveButton(13);
                                        listen = function ():void {
                                            switch (btnchc) {
                                                case 11:
                                                    scene("\tNot one to be deterred by adversity, you brace yourself for combat and make your way closer to the nest. " + "Sure enough, the wyvern guarding it comes marching at you, roaring in a fury! ", true);
                                                    subEvent = "Pillage the nest";
                                                    locationUpdate(MountainHub);
                                                    combatEvent(FatWyvern);
                                                    break;
                                                case 13:
                                                    scene("\tYou decide to stay away from things that growl that loudly, and head off to find a different place to explore. ", true);
                                                    endEvent(MountainHub);
                                            }
                                        };
                                        break;
                                    case 13:
                                        scene("\tYou decide to stay away from things that growl that loudly, and head off to find a different place to explore. ", true);
                                        endEvent(MountainHub);
                                }
                            };
                            break;
                        case "Pillage the nest":
                            this.scene("\tYou approach the nest, half a dozen small, reptillian faces turning up and squeaking at you. " + "While the glints of metal turned out to be nothing more than worthless scrap, the nest does contain an unhatched egg. " + "Given the size and strength of the wyvern that guarded it, there might be something magical about it, so you take it and head back to the mountains. ", false);
                            this.endEvent(this.MountainHub);
                            this.getItem(this.LargeWyvernEgg);
                    }
                    break;
                case this.WizardTower:
                    switch (this.subEvent) {
                        case "":
                            this.scene("\tAs you crest a particularly hard to reach mountaintop, you suddenly find yourself facing an odd, cylindrical tower that you didn\'t see on the way up. " + "Given the way that it shimmers and sparkles, you can assume that it was either invisible, or simply not here, before you got this close. " + "It is apparent that some sort of magic user lives here. ", false);
                            this.btntxt(11, "Enter");
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        subEvent = "GoInside";
                                        doEvent(WizardTower);
                                        break;
                                    case 13:
                                        scene("\tYou decide that you\'ve had your share of magic for the time being, and head back downward to find somewhere else to explore. As you do, the tower fades away again. ", true);
                                        endEvent(MountainHub);
                                }
                            };
                            break;
                        case "GoInside":
                            this.scene("\tYou locate the door (which is, itself, a bit of a trick) and step inside, finding yourself in something resembling a lobby, but it doesn\'t appear to exit into any other rooms. " + "After a few moments of looking at images of magical figures and bookstands, a voice rings out from nowhere in particular, \"Ah! I almost didn\'t notice you! One moment!\" " + "Before you can answer, the world blurs and you find yourself standing before a robed, wild-eyed dog who is smiling at you happily. " + "Your surroundings have changed from an open, decorated room to a small, cluttered laboratory, absolutely clogged with books, magical symbols, and arcane tools. " + "\"I take it you\'ve come to volunteer, yes?\" the dog asks eagerly. \"That is why you\'re here, yes?\" ", false);
                            this.choiceButton();
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        scene("\tYou give an affirmative, and the dog immediately reaches out and pats you on the shoulder, his smile getting even wider as he practically yells with excitement, " + "\"Excellent, excellent!\" Picking up his staff, he makes a gesture at you and says \"Just one moment while I take you to the proper facilities.\" " + "The world blurs again, and you find yourself in a sterile, well-lit chamber. " + "The only other thing in here is an extremely fat goat who is non-challantly chewing on grains, which he keeps pulling from a large bag beside him by the handful. ", true);
                                        nextView();
                                        subEvent = "Experiment";
                                        listen = function ():void {
                                            doEvent(WizardTower);
                                        };
                                        break;
                                    case 13:
                                        scene("\tYou respond with a simple \"No\" that seems to echo around the room for a moment, the dog wizard just staring at you in disbelief. " + "After an awkward silence, his disbelief turns into an angry snarl, and he bellows out, \"THEN WHY ARE YOU DISTURBING ME?!\" " + "Before you can stop him, he grabs his staff and angrily waves it at you. The world again blurs, and you find yourself in a dimly-lit, wide open chamber with a dirt floor. " + "The wizard\'s voice calls down from nowhere in particular, \"Perhaps a few rounds with my pet manticore will change your mind!\" " + "One of the walls slides open, and out trods an eagle-winged, lion-bodied, scorpion-tailed monstrosity that looks more than eager to change your mind. ", true);
                                        subEvent = "ManticoreDefeated";
                                        combatEvent(Manticore);
                                }
                            };
                            break;
                        case "Experiment":
                            if (this.HEA <= 0) {
                                this.Inflated = 0;
                                this.InflatedMass = 0;
                                this.statusBloatVenom = 0;
                                this.statusBloatVenomPower = 0;
                                this.fixFull();
                                this.HEA = 1;
                            }
                            this.scene("\tYou can hear the dog\'s voice from above, and look up to see that he is on a platform connected to nothing in particular over your head. ", false);
                            switch (this.dXY(1, 5)) {
                                case 1:
                                    this.scene("\"This time, we shall be performing a simple test of body mass transfer!\" he calls down. " + "\"Are you ready, my ample assistant?\" The goat raises his foodless hand to give a half-hearted thumbs-up to the wizard. " + "\"THEN WE SHALL BEGIN!\" the dog bellows overdramatically, raising his staff. " + "\n\tThe staff glows a cloudy grey with magic, and a thin tendril of whispy red energy begins to flow out from the goat\'s massive belly and towards yours. ", false);
                                    if (this.dXY(1, 3) == 1) {
                                        this.FAT = this.FAT + 100;
                                        this.scene("There is the slightest feeling of a pinprick, then an odd, almost electrical tingling shakes your skin. " + "As the spell progresses, the goat gets steadily thinner, and your own " + this.fatness() + " body begins to enlarge. " + "You can feel yourself getting heavier, warmer and softer as your fatty layer thickens. " + "The goat is nearly fatless before the whispy tendril ceases to emanate from him. " + "You, on the other hand, are left " + this.fatness() + " with the addition of his weight. " + "\n\tAbove, the wizard throws his hands over his head and yells \"Great success!\" " + "The goat, meanwhile, continues to chew on grains, a bored look on his face. " + "\"My thanks for your participation, " + this.playerGender.sir + "!\" the dog shouts down to you, \"you may leave now.\" " + "Before you can react, you find yourself back on the mountains, unable to spot the tower anymore. ", false);
                                        this.endEvent(this.MountainHub);
                                    }
                                    else {
                                        this.scene("There a stabbing pain for a moment, then an odd buzz seems to emanate deep inside your stomach. " + "The goat begins to thin, and you can feel your stomach getting fuller. " + "Your stomach swells, getting heavy and full as the goat thins, his fat being fed directly into your belly. ", false);
                                        this.doConsume(100, 0, 65);
                                        switch (this.HEA > 0) {
                                            case true:
                                                this.scene("He is nearly fatness when the tendril stops exuding from him, and when the last of it is absorbed, you are feeling " + this.hungry() + ", and left clutching your swollen belly. " + "Above, you can hear the dog wizard growl in frustration. \"Damn! Not right! ARGH!\" With a clatter, he throws down his staff. " + "There is a crackling like lightning, and you can hear a quiet \"Uh oh, not again.\" " + "It is followed by a brilliant flash, and when your vision returns, you are out on the mountains, and the tower is nowhere to be seen. ", false);
                                                this.endEvent(this.MountainHub);
                                                break;
                                            default:
                                                this.scene("Your stomach groans in protest as more and more of the goat\'s immense weight is forced directly into it. " + "You moan and rub at your belly, trying to soothe it, but it just keeps getting tighter and fuller. " + "By the time the tendril fades, the goat is nearly fatless, and your stomach simply cannot bear its load. " + "You lower yourself onto your back, breathing slowly and deeply to stave off the pain. " + "Above, the wizard quietly lets out an \"Oops...\" ", false);
                                                this.defeatEvent(this.overeating);
                                        }
                                    }
                                    break;
                                case 2:
                                    this.scene("\"Today, we shall be attempting to turn fat into muscle!\" he calls down. " + "\"Are you ready, my pudgy partner?\" The goat raises his foodless hand and gives the most half-hearted thumbs-up you\'ve ever seen. " + "\"THEN WE SHALL BEGIN!\" the dog bellows, going quite a ways over the top as he raises his staff. " + "\n\tThe staff glows a bright red, and a hazy red tendril begins to emanate from the goat\'s tremendous gut and towards you. ", false);
                                    if (this.dXY(1, 3) == 1) {
                                        this.scene("It splits into several smaller tendrils, and there\'s a momentary pinprick as they connect to your limbs, chest, neck and tail. " + "As energy flows outward, the goat thins, and you can feel the magic steadily building in your muscles, which swell and harden nicely. " + "The tendril stops flowing once the goat has thinned to a nearly fatless state, and you are left feeling significantly stronger. " + "Unfortunately, you can also feel the magic slowly leaving you. Above, the dog wizard hums, rubbing his chin for a moment. " + "\"Well,\" he finally starts, \"not quite perfect, but we shall call this a great success!\" " + "He suddenly throws his arms in the air victoriously. \"Enjoy that while it lasts, " + this.playerGender.sir + "!\" he calls down, waving his staff. " + "Before you can even react, the world blurs again, and you are back on the mountains, the tower nowhere in sight. ", false);
                                        this.statusSTRBuff = 180;
                                        this.statusSTRBuffPower = 30;
                                        this.endEvent(this.MountainHub);
                                    }
                                    else {
                                        this.scene("It splits into several smaller tendrils, and there\'s a momentary stabbing pain as they connect to your limbs, chest, neck and tail. " + "Energy flows outward from the goat and into you, causing him to thin, but you are definitely not feeling stronger. " + "Your muscles are expanding, but feel heavy and cumbersome more than strong and flexible. " + "The tendril stops flowing once the goat has thinned to a nearly fatless state, and you just look up to the wizard in confusion, " + "your muscles significantly larger, but soft and not stronger at all. " + "The dog wizard rubs his chin and hums for a moment, then calmly begins, \"Well, not quite as bad as the last few,\" then with exagerrated anger continues, " + "\"But I\'ll still call this a TOTAL FAILURE! CURSES!\" He throws down his staff in frustration, and it begins to glow brilliant white. " + "\"Oh dear, I did it again,\" he mumbles, just before the world vanishes in a white glare. " + "When you can see again, you are somewhere on the mountains, but the tower is nowhere in sight. ", false);
                                        this.statusAGIBuff = 180;
                                        this.statusAGIBuffPower = -30;
                                        this.endEvent(this.MountainHub);
                                    }
                                    break;
                                case 3:
                                    this.scene("\"This time, we shall attempt a most unusual change: Fatness into nimbleness!\" he calls down. " + "\"Are you ready, my corpulent companion?\" The goat doesn\'t even stop eating when he raises his free and to give an inattentive thumbs up. " + "\"THEN WE SHALL BEGIN!\" the dog bellows, raising his staff and failing to not look like a madman. " + "\n\tThe staff glows a bright yellow, and a transparent red tendril flows outward from the goat\'s massive belly, " + "snaking through the air towards you and splitting into several smaller tendrils when it approaches. " + "Each weaves its way to one of your joints, the biggest tendril going around behind you, and with a ", false);
                                    if (this.dXY(1, 3) == 1) {
                                        this.scene("slight pinprick, they poke into your major joints and spine. The goat steadily thins, and you can see the tendril send a stream of magical energy your way. " + "When it reaches you, you get the unusual sensation of your joints becoming looser, and your muscles tightening. " + "Somehow or another, this seems to be working, and your body feels lighter and faster. " + "Your pulse quickens, and you feel more keen all around. Somehow or another, you do feel faster, though the feeling is slowly fading. " + "Above, the wizard calls down, \"Well?\" To which the goat responds by throwing a few grains at you suddenly. " + "You catch them reflexively, and the dog throws his hands over his head and yells, \"Still not perfect, but still a great success! Thank you for your assistance, " + this.playerGender.sir + "!\" " + "With a wave of his staff, the world blurs again, and you are somewhere on the mountains, but the tower is nowhere in sight. ", false);
                                        this.statusAGIBuff = 180;
                                        this.statusAGIBuffPower = 30;
                                        this.endEvent(this.MountainHub);
                                    }
                                    else {
                                        this.scene("brief stabbing pain, they poke into your major joints and spine. The goat steadily thins, and you can see the tendril send a stream of magical energy your way. " + "As the energy flows into you, you feel your pulse pick up, and your breaths grow shallow. " + "By the time the flow stops, you are a jittery wreck, your " + this.playerSpecies.hands + " shaking like you\'ve had enough caffeine to keep a bear awake for a month. " + "The only good thing about it is that it seems to be very slowly fading. From above, the wizard calls down, \"Well?\" " + "The goat responds by tossing a few grains at you, which makes you flinch and cover your face as they harmlessly bounce off you. " + "\"Curses! Yet another failure!\" he bellows, then throws his staff down in frustration. " + "A brilliant white glow starts to build up, and you can hear him mutter, \"I\'ve really got to stop doing that,\" just in time for a white flash to erupt all around. " + "When your vision clears, you are somewhere on the mountains, but the tower is nowhere in sight. ", false);
                                        this.Calories = this.Calories * 0.5;
                                        this.endEvent(this.MountainHub);
                                    }
                                    break;
                                case 4:
                                    this.scene("\"In this experiment, we shall try to make that skin of yours a little thicker with the addition of some flab!\" he calls down. \"Are you ready, my flabby follower?\" " + "The goat raises his free hand, giving a nonchallant thumbs up without even ceasing his snacking. " + "\"THEN WE SHALL BEGIN!\" the dog bellows, raising his staff and failing to strike an impressive pose. " + "\n\tThe staff glows green with magic, and a tendril of hazy red energy begins to flow out of the obese goat\'s midsection and toward yours. It pokes into the flesh of your belly with a ", false);
                                    if (this.dXY(1, 3) == 1) {
                                        this.scene("light pinprick, and as the energy flows outward, the goat begins to thin. " + "Your body seems to thicken, and while it seems at first that you are simply getting fatter, as time passes, you can tell that your skin is getting tougher as well. " + "You start to feel a bit warmer as your fatty layer seems to grow more dense. " + "The tendril stops flowing when the goat has thinned to near-fatlessness, and when the last of the magical energy is absorbed, you are significantly more stout than you were before, " + "but the feeling is slowly fading. \"Well?\" the dog wizard yells down. " + "The goat responds by giving you a bit of a slap in your " + this.waist() + " belly, which barely even moves and certainly doesn\'t hurt. " + "The goat gives another nonchallant thumbs-up, never having stopped eating in this time, and the wizard bellows out, " + "\"Still don\'t have it down yet, but I shall call this a GREAT SUCCESS!\" while throwing his hands over his head. " + "\"Thank you for your assistance, " + this.playerGender.sir + "! Now allow me to show you out.\" " + "The world blurs again, and you are back on the mountains, but the tower is nowhere in sight. ", false);
                                        this.FAT = this.FAT + 20;
                                        this.statusENDBuff = 180;
                                        this.statusENDBuffPower = 30;
                                        this.endEvent(this.MountainHub);
                                    }
                                    else {
                                        this.scene("brief stabbing pain, and as the energy flows outward, the goat begins to thin. " + "You, on the other hand, seem to be bloating outward, your skin stretching as thick fat builds up under it. " + "You find yourself getting quite hot, and a bit cramped by the additional weight. " + "The tendril doesn\'t stop flowing into you until the goat is nearly fatless, and by that point, you\'ve become " + this.fatness() + " in a most unbalanced way, " + "your midsection disproportionate with your limbs. \"Well?\" the wizard calls down. " + "The goat gives you a poke, and your " + this.waist() + " stomach jiggles softly, to which the goat gives a nonchallant half-shrug, still eating with his other hand. " + "\"Then this is a TOTAL FAILURE! Blast it!\" the dog yells, throwing down his staff in frustration. " + "A bright white glow starts to shine above you, and you can hear the wizard mumble, \"I must remember not to do that.\" " + "The white glow becomes a brilliant flash, and when your vision clears, you are back on the mountains, but the tower is nowhere to be found. ", false);
                                        this.endEvent(this.MountainHub);
                                    }
                                    break;
                                case 5:
                                    this.scene("\"This one should be nice and tricky! I shall attempt... to make you SMARTER!\" he dramatically calls down. \"Are you ready, my stout subordinate?\" " + "The goat inattentively gives a thumbs up with his free hand, not even slowing down his meal. \"THEN WE SHALL BEGIN!\" the dog bellows, raising his staff dramatically. " + "\n\tThe staff glows blue with magic, and a tendril of misty red energy begins to flow out of the fat goat\'s body and towards your head. " + "It splits into two, which poke into the sides of your head with a ", false);
                                    temp1 = this.d100() + 1;
                                    temp2 = this.d100() + 1;
                                    if (this.dXY(1, 3) == 1) {
                                        this.scene("light pinprick. The goat thins as magical energy flows into you, and you can feel a bit of pressure inside your skull. " + "Your thoughts begin to come faster, and you start to notice a bit more of the finer details of the spell, " + "but the most obvious thing you can feel is your head getting very slightly larger. " + "When the goat is nearly fatless, the tendril ceases to emanate from him, and your head feels heavy, and slightly pained, with increased knowledge and mass. " + "It isn\'t terribly pleasant, but your mind is definitely working faster, though the effect is slowly fading. The wizard calls down, \"Quick, what\'s " + temp1 + " times " + temp2 + "?\" " + "Without thinking, you respond, \"" + temp1 * temp2 + "?\" The dog takes a moment, tracking numbers on his fingers, then pumps his fists in the air and yells, " + "\"Yes! Great success! Thank you for your time, " + this.playerGender.sir + "!\" " + "With a wave of his staff, the world blurs again, and you find yourself back on the mountains, though the tower is nowhere to be seen. ", false);
                                        this.statusINTBuff = 180;
                                        this.statusINTBuffPower = 30;
                                        this.endEvent(this.MountainHub);
                                    }
                                    else {
                                        this.scene("brief stabbing pain. The goat thins as magical energy flows into you, and you can feel pressure building inside your skull. " + "Your mind begins to race with thoughts, and the pressure builds into pain, which steadily grows more disorienting as the goat thins. " + "By the time he is nearly fatless, the pain is nearly blinding, and you are clutching your head in both hands, your thoughts a random, useless blur. " + "The wizard calls down, \"Quick, what\'s " + temp1 + " times " + temp2 + "?\" You open your mouth to respond, but all that comes out is a pained groan. " + "\"Another failure! Curses!\" he yells, throwing his staff to the floor. It begins to glow white, and he mumbles, \"Oh dear, not again.\" " + "There is a brilliant flash, and you are left with your headache on the mountains, the tower nowhere in sight. ", false);
                                        this.statusMANABuff = 180;
                                        this.statusMANABuffPower = -30;
                                        this.endEvent(this.MountainHub);
                                    }
                            }
                            break;
                        case "ManticoreDefeated":
                            this.scene("\tWith your foe defeated, you are momentarily left wondering how to get out of the featureless pit you are in, " + "but a sudden rush of magic sends the world blurring yet again, and you find yourself staring at the back of the robed dog, who is muttering to himself and bent over a notebook. " + "He lets out a curious hum before turning around, a look of confusion sticking on his face for a few seconds before he recognizes you. His eyes widen and he stammers, " + "\"Oh. I, er, I see you bested my, ah, my pet. The manticore.\" As you move, he flinches, throwing his hands up submissively. " + "\"Wait, wait, wait!\" he cries, \"This is just an unfortunate misunderstanding! Here, let me offer you something to help smooth this over, please.\" " + "He is practically begging as he makes you an offer. " + "\"I could let you use my library, surely there\'s something there that you could learn from. Or, or you could have my staff, you might find it useful to you.\" ", false);
                            this.btntxt(1, "Library");
                            this.btntxt(3, "Staff");
                            if (this.hasQuest(this.wizardNotebook) == false) {
                                this.scene("You look a bit past him at the notebook he was pouring over. He reflexively seems to cover it with a hand, but he\'s certainly not in a position to deny you anything at this point. ", false);
                                this.btntxt(7, "Notebook");
                            }
                            this.btntxt(9, "Eat him");
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 1:
                                        scene("\tYou accept his offer to peruse his library, and he eagerly waves his staff to send you there. " + "When you arrive, it becomes apparent that most of this tower consists of just the library, with books lining every surface, and even floating in a mass in some places. " + "Fortunately, there\'s a magical index that can bring any book you are interested in to you. You spend some time studying tomes of forgotten lore and magical theory. " + "By the time you\'re ready for a break, your head feels heavy with knowledge. " + "You set down what you\'re reading, but when you do, you find yourself magically transported back to the mountains, the tower nowhere in sight. " + "You weren\'t exactly a welcome guest, but that was still rather rude. ", true);
                                        chgStats(0, 0, 0, 5, 0);
                                        endEvent(MountainHub);
                                        break;
                                    case 3:
                                        scene("\tWithout a word, you snatch the wizard\'s staff away from him. He lets out a dejected \"Oh,\" and slouches sadly. " + "\"Very well,\" he grumbles, \"you can have my staff. Just point it at yourself and think of the mountains, and get out of here already.\" " + "You hesitate for a moment, then follow his instructions. Sure enough, you are out in the mountains, but the tower is nowhere to be seen. " + "The staff, however, is still in your hands, so it\'s not a total loss. ", true);
                                        endEvent(MountainHub);
                                        getItem(WizardStaff);
                                        break;
                                    case 7:
                                        scene("\tYou shove the wizard dog to the side and snap shut his notebook, pocketting it as he sputters out protests. " + "\"Wait--no--Come on now--Oh, curse you!\" he moans, \"Fine, fine, take it. Take it and go.\" He slumps over to a seat, one hand under his cheek. " + "He points his staff at you, and you find yourself back in the mountains, though the tower is gone. " + "You take a look at the notebook. While the first few pages are a sensible set of studious notes, the further it goes, the more jumbled and fragmented it gets. " + "It may prove useful to someone, though. ", true);
                                        endEvent(MountainHub);
                                        getQuest(wizardNotebook);
                                        break;
                                    case 9:
                                        scene("\tYou lick your teeth as you knock away the wizard\'s staff, backing him into a corner. \"W-wait,\" he stutters, \"what are you doing? Y-y-you can\'t mean to--\" " + "He cuts off as you grab his arms, pinning them to his sides. \"No no!\" he cries. " + "You open your mouth and lower it down upon his head, his protests becoming muffled yelps as you fit him into your maw. ", true);
                                        doConsume(125, 0, 70);
                                        switch (HEA > 0) {
                                            case true:
                                                scene("You lift him up, his legs flailing under his robes as you force him into your throat. As he descends to your stomach, he struggles, " + "but his less-than-impressive physical strength makes it nothing but an interesting internal massage to you and your " + waist() + " belly. " + "With a few more swallows, you gulp down his chest, his somewhat rounded midsection, then his legs, and soon he is nothing more than a crazed wizard bulge in your stomach. " + "Your belly jiggles a bit as he writhes inside you, and you give it a rubbing as it slowly calms and becomes still. " + "That\'s the only thing that stays calm and still, as the staff\'s bright white glow catches your eye just in time for it to become an overwhelming flash of light. " + "When it fades and your vision clears, you are somewhere in the mountains, and the tower is nowhere in sight. ", false);
                                                endEvent(MountainHub);
                                                break;
                                            default:
                                                scene("You slowly lift him upwards as you swallow him down, his legs flailing in the air as you push him into your throat. " + "Even as you pass his shoulders, you feel this might have been a mistake, your stomach already protesting as he slowly makes his way down to it. " + "His pushing isn\'t enough to free him, but is certainly enough to make you feel pain, " + "and you have no choice but to gulp the rest of him down into your overfilled, " + waist() + " stomach. " + "You let out a groan as it shakes and shudders with the dog\'s struggles, and lower yourself to the ground, rubbing at it to try to ease the pressure. " + "You\'re not able to do so just by will alone, unfortunately, and you soon drift off, your slow, deep breaths heralding an onset of unconsciousness. ", false);
                                                defeatEvent(overeating);
                                        }
                                }
                            };
                    }
            }
            switch (ID) {
                case this.DinosaurDocks:
                    this.scene("\tYou head away from the village and onto the dock. The brown bear fellow and his boat are waiting there. " + "Noticing you, he calls out, \"Hello again, " + this.playerGender.sir + "! You need a ride back to the mainland?\" ", false);
                    this.btntxt(1, "Travel");
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(9);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                endEvent(WestTownHub);
                                if (weight() > 600) {
                                    scene("\tYou step aboard onto the lightly swaying vessel. ", true);
                                }
                                if (weight() <= 600) {
                                    scene("\tYou cautiously step aboard the vessel, your heavy body causing it to sway deeply when you do so. " + "After a moment it settles back to a light sway. Fortunately, the bear doesn\'t seem bothered by this. ", true);
                                }
                                scene("\"The boat\'s loaded up and we\'re set to head off,\" he says chipperly. \"Take a load off, friend, and I\'ll get us under way!\" " + "He weighs the anchor and shoves off, and you\'re out onto the open sea again. ", false);
                                switch (dXY(1, 8)) {
                                    case 1:
                                        scene("You spend the trip fishing, but the captain takes what you catch as a fare. ", false);
                                        break;
                                    case 2:
                                        scene("The trip is spent singing progressively more outlandish songs about things that almost certainly never happened. ", false);
                                        break;
                                    case 3:
                                        scene("The captain spends the entire time regaling you with facts about fishing that you will never, ever use. ", false);
                                        break;
                                    case 4:
                                        scene("The captain talks about the dozens of ways you can prepare a fish. He never seems to run out. ", false);
                                        break;
                                    case 5:
                                        scene("The trip is a little worrying as the captain somehow takes a nap that lasts the duration. Fortunately, he wakes up in time to dock safely. ", false);
                                        break;
                                    case 6:
                                        scene("You manage to get a view of a pod of dolphins swimming by. One of them waves at you cheerfully. ", false);
                                        break;
                                    default:
                                        switch (dXY(1, 4)) {
                                            case 1:
                                                scene("The captain spends the trip weaving consecutively bigger lies about the loves he\'s had and lost. " + "You call him out around the time he tries to convince you he picked a flower from the moon to swoon some damsel or another. " + "The rest of the trip is spent with awkward silence and sheepish expressions from him. ", false);
                                                break;
                                            case 2:
                                                scene("The captain regales you with a certainly-false tale of his chance encounter with a bear-maid, a mystical creature with the upper body of a beautiful lady bear " + "and the lower body of a dolphin. He looks a bit dismayed when you just shake your head at his nonsense. ", false);
                                                break;
                                            case 3:
                                                scene("The captain spends the entire trip spinning tales of great sea monsters, claiming that a giant, three-headed sea snake is the reason why there aren\'t very many ships. " + "He seems put off when you bring up the point that there just isn\'t all that much else out there so far as anyone knows. ", false);
                                                break;
                                            case 4:
                                                scene("The captain spends a great deal of time telling you about a poem that he received from another sea farer in his travels. " + "Specifically, about the lengths he\'s gone to to try to understand it. " + "When you ask for a look, you can\'t make too much of it either, but it\'s got something to do with a poet eating lions. ", false);
                                        }
                                }
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"This island is inhabited mostly by the dinosaur folk, who I trade with. They\'ve got excellent steel here, and I\'m told it\'s thanks to their connection with the earth. " + "You ask me, that big volcano\'s got something to do with it, too.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"Be polite around the really important folks here. The leader\'s got a bit of a temper, but if you\'re smart, you can make friends pretty easy.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"I\'ve heard the jungle\'s getting worse thanks to some things going on around here. Me, I plan to stick with the sea anyways.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"The fish out here are just slightly different than those back by the mainland. A little more robust, a little more flavorful. Couldn\'t tell you why.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 9:
                                endEvent(DinosaurCenter);
                                scene("\tYou decide not to bother with boats at the moment and head back to the town. ", true);
                        }
                    };
                    break;
                case this.DinosaurCenter:
                    switch (this.dayTime()) {
                        case true:
                            this.scene("\tYou " + this.walk() + " through the village, various reptillian folk garbed in simple leathers decorated by feathers and colored leaves going about their daily business. ", false);
                            this.createNPC(1, this.randomDinosaur(), this.randomGender());
                            this.createNPC(2, this.randomDinosaur(), this.randomGender());
                            switch (this.dXY(1, 4)) {
                                case 1:
                                    this.scene(this.capFirst(this.NPC1.species.article) + " " + this.NPC1.species.name + " walks by carrying a bowl full of exotic fruits. ", false);
                                    break;
                                case 2:
                                    this.scene("You can see " + this.NPC1.species.article + " " + this.NPC1.species.name + " and " + this.NPC2.species.article + " " + this.NPC2.species.name + " wearing shamanistic garb having a discussion. ", false);
                                    break;
                                case 3:
                                    this.scene("You see what appears to be a warrior " + this.NPC1.species.name + " checking her heavy weapon and pleated armor before heading toward the jungle. ", false);
                                    break;
                                case 4:
                                    this.scene("You spot " + this.NPC1.species.article + " " + this.NPC1.species.name + " carrying an intricate magical totem. ", false);
                            }
                            break;
                        case false:
                            this.scene("\tThe village is quiet, lit by starlight and serenaded by nocturnal insects\' calls.", false);
                    }
                    break;
                case this.DinosaurSmith:
                    this.scene("\tYou head into the smithery, a small, cramped building with a hole in the center of the roof that allows the heat and smoke of the forge to escape. " + "A lightly-garbed, stocky triceratops lady is examining several odd looking ingots of metal carefully. " + "On noticing you, she looks up and says, \"Welcome, traveller. I have some stock you can buy, but most of my goods are made to order.\" ", false);
                    tempCompleted = 0;
                    if (this.questCompleted(this.spearQuest)) {
                        tempCompleted++;
                    }
                    if (this.questCompleted(this.hammerQuest)) {
                        tempCompleted++;
                    }
                    if (this.questCompleted(this.swordQuest)) {
                        tempCompleted++;
                    }
                    switch (tempCompleted) {
                        case 0:
                            this.scene("You can see three curious, intricately designed weapons hanging on a wall, but they appear to be broken. ", false);
                            break;
                        case 1:
                            this.scene("Two weapons still hang on the wall, incomplete. ", false);
                            break;
                        case 2:
                            this.scene("Only one more weapon hangs on the wall in disrepair. ", false);
                    }
                    this.tradeButton(1);
                    if (!this.questCompleted(this.spearQuest) || !this.questCompleted(this.hammerQuest) || !this.questCompleted(this.swordQuest)) {
                        this.btntxt(2, "Quest");
                    }
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    if (this.questStage(this.horseQuestArmor) == 0) {
                        this.btntxt(7, "Burst chainmail");
                    }
                    if (this.questStage(this.horseQuestArmor) == 1 || this.questStage(this.horseQuestArmor) == 2 || this.questStage(this.horseQuestArmor) == 3) {
                        if (this.itemOwned(this.ChainmailArmor)) {
                            this.btntxt(7, "Burst chainmail");
                        }
                    }
                    this.leaveButton(13);
                    this.listen = function ():void {
                        var _loc1_:Quests = null;
                        switch (btnchc) {
                            case 1:
                                if (!questCompleted(spearQuest) || !questCompleted(hammerQuest) || !questCompleted(swordQuest)) {
                                    enterStore(clerkDinoSmithNormal);
                                }
                                else {
                                    enterStore(clerkDinoSmithSpecial);
                                }
                                break;
                            case 2:
                                scene("\tYou ask about the broken weapons, and a frown creases her face as she launches into an explanation. " + "\"My master left those for me before disappearing to parts unknown. " + "Unfortunately, they all require different materials for the repairs to be complete, and the only thing they have in common is that they\'re hard to get. " + "I know of some locations that have what I need, but they\'re dangerous. If you can help me complete them, you can have them. " + "All I need from them is the experience of rebuilding them, you see.\" " + "She gestures at them and asks, \"Do you have one you\'d like to know more about?\" ", true);
                                if (!questCompleted(spearQuest)) {
                                    btntxt(4, "Ornate Spear Shaft");
                                }
                                if (!questCompleted(hammerQuest)) {
                                    btntxt(5, "Headless Giant Mace");
                                }
                                if (!questCompleted(swordQuest)) {
                                    btntxt(6, "Broken Greatsword");
                                }
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"My name is Kieras, and I run this smithery. Pleasure to meet you, adventurer.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"Weapons are the specialty of this shop, but I can assure you that I\'m no slouch when it comes to armors either. Can\'t fight when your bits are exposed, right?\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"I\'m afraid that I\'m not quite as good as my master was yet. She was famous throughout the island and made some truly superb weapons.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"My master disappeared some time ago. " + "I\'m not sure where she went, but she left me three broken weapons and a note saying that I\'ve learned all she can teach when I can make them whole.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 4:
                                switch (hasQuest(spearQuest)) {
                                    case true:
                                        switch (questReady(spearQuest)) {
                                            case true:
                                                endEvent(DinosaurCenter);
                                                scene("\tYou hand over the white gold you recovered, and she immediately sets to work, pumping the bellows to raise the furnace to something approaching an inferno. " + "You stand well clear and watch as she melts it down, casts it into a rough tip, and hammers it into a fine, shining blade. " + "With care, she binds the spearhead to the shaft, and as she does, it glows radiantly for a moment. " + "Somehow, the weapon not only looks whole, but invigorated and alive. With a nod, she hands the weapon to you. " + "\"I\'ve learned from this,\" she says, bowing her head humbly, \"and I thank you. May this weapon serve you well.\" ", true);
                                                questReward(spearQuest);
                                                removeItem(spearMap);
                                                removeItem(whiteGoldChunk);
                                                if (questCompleted(spearQuest) && questCompleted(hammerQuest) && questCompleted(swordQuest)) {
                                                    scene("\n\t\"I believe I\'ve learned the lessons my master wanted me to, adventurer, and I thank you for your assistance. " + "I\'m going to begin work on some new items using all that I\'ve learned.\" ", false);
                                                }
                                                break;
                                            case false:
                                                scene("\t\"According to my master\'s notes, that spear once had the power of lightning in its golden point. " + "Unfortunately, as you can see, the spear\'s head is no more. I believe I can rebuild it, but I will need you to find a deposit of \'white gold.\' " + "There is one in the jungle, but it\'s within the domain of a particularly dangerous serpent.\" ", true);
                                        }
                                        break;
                                    case false:
                                        scene("\t\"According to my master\'s notes, that spear once had the power of lightning in its golden point. " + "Unfortunately, as you can see, the spear\'s head is no more. I believe I can rebuild it, but I will need you to find a deposit of \'white gold.\' " + "There is one in the jungle, but it\'s within the domain of a particularly dangerous serpent. I can give you a map to the location for when you\'re ready.\" ", true);
                                        getQuest(spearQuest);
                                        getItem(spearMap);
                                }
                                break;
                            case 5:
                                switch (hasQuest(hammerQuest)) {
                                    case true:
                                        switch (questReady(hammerQuest)) {
                                            case true:
                                                endEvent(DinosaurCenter);
                                                scene("\tYou set down the huge hunk of star metal with a thud, and she gives it a looking over before nodding approvingly. " + "Taking it to the forge, she carefully heats it, the metal glowing but not melting. " + "Using tongs, she removes a small piece that looks to be where it broke free from the shaft, then sets to work reforging the hilt itself. " + "While the pieces of metal are still glowing hot, she fits the shaft into the fallen star, hammering it home a few times before dousing it in water. " + "With a violent hiss, a great gout of steam rushes up through the air and out of the building. After a few more moments, she removes it and presents it to you. " + "\"This has taught me much, and I thank you,\" she says, bowing her head humbly. \"May this weapon serve you well.\" ", true);
                                                questReward(hammerQuest);
                                                removeItem(hammerMap);
                                                removeItem(fallenStar);
                                                if (questCompleted(spearQuest) && questCompleted(hammerQuest) && questCompleted(swordQuest)) {
                                                    scene("\n\t\"I believe I\'ve learned the lessons my master wanted me to, adventurer, and I thank you for your assistance. " + "I\'m going to begin work on some new items using all that I\'ve learned.\" ", false);
                                                }
                                                break;
                                            case false:
                                                scene("\t\"This great mace once used a massive chunk of star metal as its head. " + "However, the last one to wield this was lost in the jungle, and I am told that the head has since been found. " + "Unfortunately, it was found by one of the rebelling shaman, who now uses it as a potent focus for his magics. " + "He\'s not being very subtle about his location, so if you follow the map I gave you, you are sure to find him. Please be careful.\" ", true);
                                        }
                                        break;
                                    case false:
                                        scene("\t\"This great mace once used a massive chunk of star metal as its head. However, the last one to wield this was lost in the jungle, and I am told that the head has since been found. " + "Unfortunately, it was found by one of the rebelling shaman, who now uses it as a potent focus for his magics. " + "He\'s not being very subtle about his location, so if you follow this map, you are sure to find him. Please be careful.\" ", true);
                                        getQuest(hammerQuest);
                                        getItem(hammerMap);
                                }
                                break;
                            case 6:
                                switch (hasQuest(swordQuest)) {
                                    case true:
                                        switch (questReady(swordQuest)) {
                                            case true:
                                                endEvent(DinosaurCenter);
                                                scene("\tYou place a sample of the magical obsidian you found before her, and she examines it thoroughly, nodding slowly. " + "Carefully, she wraps the fractured sword in cloth and brings it over, setting the pieces directly onto the hot coals. " + "Placing the obsidian you brought on top of the pile, she grabs a small knife and makes a small cut on her palm, " + "not even wincing before dripping some of her blood onto the fire. " + "The flames suddenly roar to immense size, and she quickly rushes over and grabs a totem, placing it before the forge. " + "She yells a phrase in a language you can\'t understand and the totem begins to glow as she repeats it again and again. " + "Slowly, the fires die down, and when its blinding light fades, in place of fragmented obsidian is an enormous black blade. " + "She lifts it out with tongs, places a hand near it, then hesitantly offers it to you. " + "\"This wicked sword is remade. Though I fear I curse you with it, it is yours to wield. Be safe, adventurer.\" " + "As you take it, the sword isn\'t even hot from the inferno it made. ", true);
                                                questReward(swordQuest);
                                                removeItem(swordMap);
                                                removeItem(magicalObsidian);
                                                if (questCompleted(spearQuest) && questCompleted(hammerQuest) && questCompleted(swordQuest)) {
                                                    scene("\n\t\"I believe I\'ve learned the lessons my master wanted me to, adventurer, and I thank you for your assistance. " + "I\'m going to begin work on some new items using all that I\'ve learned.\" ", false);
                                                }
                                                break;
                                            case false:
                                                scene("\t\"Ah, the sword. That weapon, honestly, frightens me somewhat. " + "According to my master\'s notes, she did not actually forge this weapon, merely found and repaired it herself long ago. " + "The weapon is a single piece of obsidian, and even shattered, it is home to a powerful, angry spirit. " + "If I am to make it whole, I will need a sample of the obsidian near the volcano. A great power dwells there, and may be enough to reform this weapon. " + "Follow the map I gave you if you wish, but I won\'t be upset if you don\'t.\" ", true);
                                        }
                                        break;
                                    case false:
                                        scene("\t\"Ah, the sword. That weapon, honestly, frightens me somewhat. " + "According to my master\'s notes, she did not actually forge this weapon, merely found and repaired it herself long ago. " + "The weapon is a single piece of obsidian, and even shattered, it is home to a powerful, angry spirit. " + "If I am to make it whole, I will need a sample of the obsidian near the volcano. A great power dwells there, and may be enough to reform this weapon. " + "Follow this map if you wish, but I won\'t be upset if you don\'t.\" ", true);
                                        getQuest(swordQuest);
                                        getItem(swordMap);
                                }
                                break;
                            case 7:
                                switch (questStage(horseQuestArmor)) {
                                    case 0:
                                        questAdvance(horseQuestArmor);
                                        _loc1_ = ObjectUtil.copy(questArray[questFind(horseQuestArmor)]) as Quests;
                                        _loc1_.questDescription = "Get Sampson the horse\'s chainmail resized to fit him! You need to get three sets of chainmail to Kieras the Smithie. ";
                                        questArray.splice(questFind(horseQuestArmor), 1, _loc1_);
                                        doEvent(DinosaurSmith);
                                        scene("\tYou proffer the ruined set of chainmail, and a strange, reverent expression crosses Kieras\' face even before she takes it from you. She holds it up to the light, and sighs. " + "\"Yes, this is the work of my Master, no doubt- I never saw her make such armour, but she spoke to me of it once- Myst Mail. " + "She said the links were spun from an unbroken strand of metal, and so unbreakable- from without, at least- " + "and were also imbued with the charging spirit of swiftness itself to speed the wearer in combat. " + "The enchantment is no more, its secret is gone with my Master, but I believe I can reforge these links for you, almost as strong as they ever were.\" " + "\n\tWhen you explain that you wish for her Master\'s creation to be resized \'for its current owner\', and hand over the measurements, " + "Kieras at first looks as though she suspects a bad joke, but then smiles. " + "\n\t\"In that case perhaps I should enchant this armour with the spirit of the Giant Python, to stretch around the wearer regardless of their... hearty appetite.\" Good idea! " + "\"You will need to fetch three vials of sand-snake venom, and then you will need to travel deep into the sacred volcano " + "and fight with the Fire Serpant therein to bring me one of her eggs before it- I am joking with you\" she says patiently as she sees your mortified expression. " + "\"If you can bring me, say... three sets of ordinary chain mail, " + "I should be able to weave them with my Master\'s well enough to produce one whole set of the size your friend now requires, " + "with almost as much strength as it had before, and perhaps more... elasticity. But from the sound of it any supernatural swiftness is now... irrelevant.\" " + "You are forced to agree with a wry smile. ", true);
                                        break;
                                    case 1:
                                        expendItem(invArray[itemFind(ChainmailArmor)]);
                                        questAdvance(horseQuestArmor);
                                        doEvent(DinosaurSmith);
                                        scene("\t\"Thank you. This will be very helpful, but I will still need two more sets.\" ", true);
                                        break;
                                    case 2:
                                        expendItem(invArray[itemFind(ChainmailArmor)]);
                                        questAdvance(horseQuestArmor);
                                        doEvent(DinosaurSmith);
                                        scene("\t\"Thank you. This will be very helpful, but I will still need one more set.\" ", true);
                                        break;
                                    case 3:
                                        expendItem(invArray[itemFind(ChainmailArmor)]);
                                        questAdvance(horseQuestArmor);
                                        doEvent(DinosaurSmith);
                                        scene("\tKieras smiles as you hand over the third and final set of chain-mail, and places it alongside the others on the forge, either side of the ruined Myst-Mail. " + "\n\t\"Excellent. I am purified in mind and body for this task, and can begin straight away. But I cannot say how long this will take.\" " + "You elect to wait, although outside, given the heat of the forge and the constant, near-deafening hammering, not to mention the bouts of ritual chanting. " + "\n\tMore quickly than you were expecting the noise ceases, and Kieras appears in the doorway to beckon you back in. " + "Folded over the anvil is an exceptionally large set of silvery chainmail, looking like the sail from some metal ship. " + "It\'s still quite hot to the touch, so you pick it up by two corners. " + "You find that it is lighter, and- you give it an experimental tug- far stretchier than most chain-mail, in your experience. Kieras smiles at your surprise. " + "\n\t\"I shall call it Stretch Mail: I suspect that it may become quite popular when people hear of it. " + "There is no charge- I am grateful to have been allowed to see my Master\'s work again, and for the knowledge I was able to gain by studying it. " + "And I now have a secret technique that is my OWN invention. Do call again- I will work on that snake enchantment, I promise.\" " + "You notice that she has even managed to re-assemble the gold horse emblem on the chest- though somehow the process has resulted in a far chunkier-looking beast being portrayed. ", true);
                                        removeItem(horseArmorBroke);
                                        getItem(horseArmorFixed);
                                }
                                break;
                            case 13:
                                endEvent(DinosaurCenter);
                        }
                    };
                    break;
                case this.DinosaurInn:
                    this.scene("\tYou " + this.walk() + " into a cozy looking inn warmed by an open fire pit that several reptillian folks are gathered around, chatting amiably as they cook meats over it. " + "A raptor fellow ornamented in brightly colored garb waves at you from a seat nearby. " + "It seems that the beds in the back are open to any who need them. ", false);
                    this.btntxt(1, "Save");
                    this.btntxt(2, "Sleep");
                    this.buttonIcons(2, this.iconRest);
                    this.btntxt(3, "Talk");
                    this.attemptsLeft = 0;
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                trySave();
                                break;
                            case 2:
                                scene("You take one of the empty beds for your own and drift off to sleep, the fire keeping you warm and the bed keeping you cozy. ", false);
                                doSleep();
                                break;
                            case 3:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"Greetings, traveller. Name is Ostrom. This is the hunter\'s hut, but you are welcome to use a bed.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"Careful out in the jungle. With the ferals and the cult, hunting is not safe anymore.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"Get a good weapon from Kieras in the smithery before you go. She is humble, but better than she says she is.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"Do excuse me, I am better with island language than mainland. Chief tells us all to learn, though, so we are not mute off the island.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 13:
                                endEvent(DinosaurCenter);
                                scene("\tYou head back out to the village.", true);
                        }
                    };
                    break;
                case this.DinosaurChief:
                    this.scene("\tYou head into a building decorated with bright plants and a couple small, intricate totems that glow with a soft light. " + "Inside, you see a large tyrannosaurus dressed in an intricate, feathered robe and wearing a crown of feathers and gemstones. " + "She is slouching in an ornate stone seat and deep in thought before perking up at your presence. \"Outsider,\" she rumbles, \"I am the leader of these people. State your business.\" ", false);
                    this.btntxt(1, "Talk");
                    this.attemptsLeft = 0;
                    if (!this.questCompleted(this.defeatShaman)) {
                        this.btntxt(2, "Quest");
                    }
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"My name is Sudaentarsus. Outsiders tend to have trouble with that, so you can call me Sue.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"You might notice, outsider, that the people here have not fallen entirely to gluttony. That is because those that have did so quite vocally, and have left this place. " + "They believe that the changes to the world mark a change in spiritual balance that is to be followed, not opposed.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"We are dealing with handling this conflict, but outside assistance would not be refused. If you are strong of arm and brave of heart, you might be of use to us.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"I swear, the next one of you mainlanders that calls me \'Rex\' is getting eaten. I don\'t even care.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 2:
                                switch (hasQuest(defeatShaman)) {
                                    case false:
                                        scene("\tYou inquire about how you might help, and she leans back, crossing her short arms over her chest. " + "\"If you\'ve got the stomach, I\'d like to ask you for your help in dealing with our problem directly,\" she growls out. " + "\"This whole mess started when several shaman started trying to convince everyone that the oddities happening in the world were a result of shifting spiritual power,\" she explains. " + "\"Declaring that the spirits had spoken and that we should listen, they took offense when I tried to get them to listen to reason.\" " + "A snarl crosses her face as she gets visibly angry. \"A shaman\'s job is to maintain balance, not mindlessly follow the spirits!\" she nearly roars, then pauses to compose herself. " + "\"Go. Out into the jungle. Find them. Beat the sense back into them. Then return to me. You will be rewarded.\" ", true);
                                        getQuest(defeatShaman);
                                        break;
                                    default:
                                        switch (questReady(defeatShaman)) {
                                            case false:
                                                if (eventText.htmlText.match("I can tell just by looking at you that ") == null) {
                                                    scene("\n\t\"I can tell just by looking at you that you haven\'t beaten enough of the shaman yet. " + "What exactly are you waiting for?\" Her mouth curls up slightly, exposing teeth in a barely-subdued snarl. ", false);
                                                }
                                                break;
                                            default:
                                                questReward(defeatShaman);
                                                doEvent(DinosaurChief);
                                                scene("\tYou report that you have bested several of the shaman, at which the chief nods approvingly. \"That simplifies things a little,\" she grumbles. " + "\"You\'ve made this at least a bit easier on us, adventurer, so as I promised, I shall make this worth your while.\" " + "She tosses a heavy sack of gold at your feet, which makes a lovely clattering thud. ", true);
                                        }
                                }
                                break;
                            case 13:
                                endEvent(DinosaurCenter);
                                scene("\tYou bow respectfully before heading back outside. ", true);
                        }
                    };
                    break;
                case this.DinosaurShaman:
                    this.scene("\tYou " + this.walk() + " into a building decorated by many different totems that run the gamut from almost imperceptibly glowing to radiating magic visibly. " + "Within, a pterodactyl garbed in wildly colored, feathered robes busies himself before a totem. " + "He mutters quietly in a language you don\'t understand before turning about to face you, at which point the oddity of his action becomes clear, as both his eyes are white with blindness. " + "\"You have the adventurer\'s spirit,\" he intones. \"What can this friend of spirits do for you?\" ", false);
                    this.btntxt(1, "Talk");
                    this.attemptsLeft = 0;
                    this.btntxt(2, "Spell");
                    this.btntxt(3, "Study");
                    this.leaveButton(13);
                    this.listen = function ():void {
                        switch (btnchc) {
                            case 1:
                                switch (attemptsLeft) {
                                    case 0:
                                        scene("\n\t\"My name is Aktulos, and it is my duty to create the wards that keep this place safe, as well as train those interested in calling upon the spirits.\"", false);
                                        attemptsLeft++;
                                        break;
                                    case 1:
                                        scene("\n\t\"It pains me that so many of my students have left the path of balance, but I do understand their confusion. " + "The spirits are in turmoil, and the ethereal world groans with the pain of this shifting.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 2:
                                        scene("\n\t\"Our leader is temperamental, true, but her anger is only for that which would do harm to us all. " + "She has our best interests at heart, though I do still strive to help her calm her inner fires, lest she get burned.\" ", false);
                                        attemptsLeft++;
                                        break;
                                    case 3:
                                        scene("\n\t\"My eyes? I traded my vision of this world for true sight long ago... Though perhaps it is more accurate to say that gaining such sight was a cost more than a trade. " + "Tread lightly around powerful spirits, adventurer.\" ", false);
                                        attemptsLeft++;
                                }
                                break;
                            case 2:
                                doTeaching(TeacherDinosaur);
                                break;
                            case 3:
                                doTime(30);
                                if (FAT > 3) {
                                    doFat(-5);
                                    chgStats(0, 0, 0, 0.5, 0);
                                    scene("\tYou spend some time under the tutelage of the head shaman. You feel wiser in the ways of the natural world, but the study has taken its toll on your body. ", true);
                                }
                                else {
                                    scene("\tYou spend some time under the tutelage of the head shaman, but can\'t quite get into the mindset to learn in your current state. ", true);
                                }
                                break;
                            case 13:
                                endEvent(DinosaurCenter);
                                scene("\tYou bow respectfully before heading back outside, although you\'re not quite sure if the shaman noticed. ", true);
                        }
                    };
            }
            switch (ID) {
                case this.JungleEvent:
                    switch (this.dXY(1, 6)) {
                        case 1:
                            this.scene("\tYou find a clearing ahead. As you approach closer you find it is one of the roads through the jungle! Do you want to leave? ", true);
                            this.choiceButton();
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        endEvent(DinosaurCenter);
                                        scene("\tYou emerge from the jungle and find yourself in the town of dinosaurs. ", true);
                                        break;
                                    case 13:
                                        endEvent(JungleHub);
                                        scene("\tYou decide to stay in the jungle for a while longer. ", true);
                                }
                            };
                            break;
                        case 2:
                            this.locationTravel(this.cultistVillage);
                            break;
                        case 3:
                            this.locationTravel(this.pitcherPlant);
                            break;
                        case 4:
                            this.endEvent(this.JungleHub);
                            this.scene("\tAs you\'re " + this.walking() + " through the jungle, you come across a peculiar little bush. Stooping down, you find what appears to be a small blueberry bush. " + "But rather than the normal covering of blueberries, it merely has one gigantic one larger than your fist nestled in the center. " + "You pluck the oddly out of place blueberry and notice it seems to be a bit of a weird color as well. No sense complaining about a free meal though. ", false);
                            this.getItem(this.WeirdBerry);
                            break;
                        default:
                            this.setEnemy(this.JungleHub.enemies[this.dXY(0, this.JungleHub.enemies.length - 1)]);
                            this.scene("\t" + this.enemyt.introduction, false);
                            this.locationUpdate(this.JungleHub);
                            this.startFight();
                    }
                    break;
                case this.pitcherPlant:
                    switch (this.subEvent) {
                        case "":
                            this.eHEA = 200;
                            this.scene("\tYou are making your way through the jungle when you chance upon a huge plant with tubular green leaves nearly fifteen feet tall tinged with dark red at the top of a bud-like protrusion. " + "On closer inspection, you can see that it leaks a honey-like nectar from these buds, and that the tubular leaves have deep pools of this nectar. " + "Just looking at it makes you want to try some, but there\'s no easy way to get to it: You\'d have to climb up it and drink directly from the bud in a precarious position. ", true);
                            this.btntxt(11, "Go for it");
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 13:
                                        scene("\tYou decide not to bother with the plant\'s nectar and continue your exploration through the jungle. ", true);
                                        endEvent(JungleHub);
                                        break;
                                    case 11:
                                        switch (d100() <= 60) {
                                            case true:
                                                subEvent = "trapped";
                                                doEvent(pitcherPlant);
                                                scene("\tYou carefully climb up the plant, its rough surface providing surprisingly good traction as you make your way to the oozing bud. " + "It is just within your reach, but the moment you touch it, the bud suddenly rolls up on top of you, " + "sending you slipping into the tubular leaf and splashing into the pooled nectar below. " + "The sun\'s light is soon filtered through the closed top of the leaf, leaving you stuck in a dark, sweet trap! " + "\n\tYou\'ve fallen into the pitcher plant\'s leaf, and are floating in its nectar, which is starting to sting a little bit. " + "A quick testing proves that this plant is quite resilient from the inside, so cutting your way out isn\'t an option. " + "You might be able to brute force the top of the leaf back open if you can reach it, " + "and if push comes to shove, you\'re certain you\'ll be out of trouble if you can drink down all the nectar. ", true);
                                                break;
                                            case false:
                                                subEvent = "drinking";
                                                doEvent(pitcherPlant);
                                        }
                                }
                            };
                            break;
                        case "trapped":
                            this.btntxt(11, "Drink the nectar");
                            this.btntxt(13, "Force your way out");
                            this.listen = function ():void {
                                var _loc1_:int = 0;
                                switch (btnchc) {
                                    case 11:
                                        _loc1_ = dXY(15, 25);
                                        doConsume(0, _loc1_, _loc1_ * 0.75);
                                        eHEA = eHEA - _loc1_;
                                        scene("\tYou dip your head under the pool and take a several gulps of the nectar. ", true);
                                        if (eHEA > 150) {
                                            scene("There\'s still a whole lot of nectar left to drink, and you\'re feeling " + hungry() + ". ", false);
                                        }
                                        if (eHEA > 100 && eHEA <= 150) {
                                            scene("You\'ve drunk a sizable amount of the nectar, and are feeling " + hungry() + ". ", false);
                                        }
                                        if (eHEA > 50 && eHEA <= 100) {
                                            scene("Most of the nectar is now in your " + waist() + " belly, and you are feeling " + hungry() + ". ", false);
                                        }
                                        if (eHEA > 0 && eHEA <= 50) {
                                            scene("You\'re almost there, the bottom of the plant is under your feet, though most of the space is now taken up by your " + waist() + " stomach, " + "which is quite full of nectar and making you feel " + hungry() + ". ", false);
                                        }
                                        if (eHEA <= 0 && alive()) {
                                            scene("Scooping up the last few handfuls of nectar and gulping them down, you suddenly find yourself in a dry, empty tubular leaf. " + "Apparently confused by this, the plant unrolls, giving you a clear way to get out. " + "Your " + waist() + " belly sloshing, you take the opportunity and scramble out (as much as you can, at least) and back down to the forest floor. " + "Still soaked with nectar, you head off to clean up a bit before continuing your exploration. ", false);
                                            endEvent(JungleHub);
                                        }
                                        if (!alive()) {
                                            scene("Your desperate drinking slows to a stop as your " + waist() + " belly begins to protest, stretched past its limits as you float in the pool of nectar. " + "You let out a groan, rubbing your overstuffed belly tenderly as you slowly float onto your back. Between the tightness in your stomach and the dim lighting, " + "you find yourself unable to keep struggling and slowly drift to unconsciousness in the belly of a plant, of all things. ", false);
                                            defeatEvent(devoured);
                                        }
                                        break;
                                    case 13:
                                        switch (testSkill(AGI + STR, 90)) {
                                            case true:
                                                scene("\tWith no small amount of effort, you manage to force your way up the smooth, slick sides of the plant and to the rolled up top. " + "Despite a lack of leverage, you easily push the plant open, making an opening wide enough for you to slip out of. " + "A dripping mess, you slide out of the plant and back to the jungle floor, heading off to clean yourself up before continuing your exploration. ", true);
                                                endEvent(JungleHub);
                                                break;
                                            case false:
                                                switch (AGI < STR) {
                                                    case true:
                                                        scene("\tYou try to climb up the sides from within, but the nectar has slickened the smooth insides of the plant, " + "and you fail to get more than a few inches up out of the pool. ", true);
                                                        break;
                                                    default:
                                                        scene("\tYou make it up to the rolled top of the leaf, scrabbling up the slick insides of the plant, " + "but your leverage doesn\'t allow you to force it open wide enough to climb out before you\'re sent sliding back down into the pool below. ", true);
                                                }
                                        }
                                }
                            };
                            break;
                        case "drinking":
                            this.scene("\tYou carefully climb up the plant, its rough surface providing surprisingly good traction as you make your way to the oozing bud. " + "It\'s almost too easy when you put your mouth to it and start gulping down its nectar, which is somewhat thin and slightly acidic, but quite sweet. ", true);
                            this.doConsume(0, this.dXY(8, 16), this.dXY(6, 12));
                            switch (this.alive()) {
                                case false:
                                    this.scene("The last couple of swallows prove to be too much for your overfull stomach, however, and you groan, clutching at your " + this.waist() + " belly. " + "As if on cue, the bud rolls down, sending you sliding into the tubular leaf and splashing into the nectar pooled within. " + "The light from above fades as you find yourself floating and trapped inside, the sticky liquid leaving you floating on your back, belly up in the air. " + "Too full to fight your way out, you opt to rub your overstuffed belly and drift off to sleep, barely even feeling it when the plant begins to digest you. ", false);
                                    this.defeatEvent(this.devoured);
                                    break;
                                case true:
                                    this.btntxt(11, "Drink more");
                                    this.leaveButton(13);
                                    this.listen = function ():void {
                                        switch (btnchc) {
                                            case 13:
                                                scene("\tYou decide not to bother with the plant\'s nectar and continue your exploration through the jungle. ", true);
                                                endEvent(JungleHub);
                                                break;
                                            case 11:
                                                switch (d100() < 25) {
                                                    case true:
                                                        subEvent = "trapped";
                                                        doEvent(pitcherPlant);
                                                        scene("\tAfter your last few swallows, the bud suddenly rolls down on you, sending you slipping into the tubular leaf and splashing into the pooled nectar below. " + "It grows somewhat dark as the " + saySun() + "\'s light is soon filtered through the closed top of the leaf. " + "\n\tYou\'ve fallen into the pitcher plant\'s leaf, and are floating in its nectar, which is starting to sting a little bit. " + "A quick testing proves that this plant is quite resilient from the inside, so cutting your way out isn\'t an option. " + "You might be able to brute force the top of the leaf back open if you can reach it, " + "and if push comes to shove, you\'re certain you\'ll be out of trouble if you can drink down all the nectar. ", true);
                                                        break;
                                                    case false:
                                                        scene("You gulp down several more mouthfuls of nectar, the tangy sweetness almost addictive as it fills out your " + waist() + " stomach. ", false);
                                                        doConsume(0, dXY(8, 16), dXY(6, 12));
                                                        if (!alive()) {
                                                            scene("\n\tThe last couple of swallows prove to be too much for your overfull stomach, however, and you groan, clutching at your " + waist() + " belly. " + "As if on cue, the bud rolls down, sending you sliding into the tubular leaf and splashing into the nectar pooled within. " + "The light from above fades as you find yourself floating and trapped inside, the sticky liquid leaving you floating on your back, belly up in the air. " + "Too full to fight your way out, you opt to rub your overstuffed belly and drift off to sleep, barely even feeling it when the plant begins to digest you. ", false);
                                                            defeatEvent(devoured);
                                                        }
                                                }
                                        }
                                    };
                            }
                    }
                    break;
                case this.cultistVillage:
                    switch (this.subEvent) {
                        case "":
                            this.setEnemy(this.GluttonSeparatistBoss);
                            this.scene("\tAs you work your way through the jungle, you come across a small, fortified settlement. " + "A fat " + this.enemyt.species.name + " can be seen looking about as " + this.enemyt.gender.he + "  patrols back and forth in front of the open gate. " + "Judging by the banner being flown, this looks like a hostile stronghold. " + "You haven\'t been spotted yet, and so you might just be able to get in without raising suspicion of you\'re fast and smart about it. All else fails, you can force your way through. ", false);
                            this.btntxt(11, "Sneak in");
                            this.btntxt(12, "Fight through");
                            this.leaveButton(13);
                            this.listen = function ():void {
                                switch (btnchc) {
                                    case 11:
                                        scene("\tYou do your best to quietly approach the gate, hoping to get around the guard while " + enemyt.gender.his + " back is turned. ", true);
                                        switch (testSkill(AGI + INT, 120)) {
                                            case true:
                                                switch (dXY(1, 10) == 10) {
                                                    case true:
                                                        scene("You walk up to the guard and exclaim, \"Look behind you, a Three-Headed Monkey!\" When a look of confusion crosses " + enemyt.gender.his + " face, " + "you smash your fist into the side of " + enemyt.gender.his + " head, knocking " + enemyt.gender.him + " out cold. ", false);
                                                        break;
                                                    case false:
                                                        switch (dXY(1, 3)) {
                                                            case 1:
                                                                scene("With a thrown pebble as a distraction, " + "you quietly dash around and inside as the " + enemyt.species.name + " turns " + enemyt.gender.his + " head for a moment to locate the sound. ", false);
                                                                break;
                                                            case 2:
                                                                scene("The guard heaves with a sigh and a yawn, " + "giving you the opportunity to simply sneak right by " + enemyt.gender.him + " while " + enemyt.gender.his + " eyes are closed. ", false);
                                                                break;
                                                            case 3:
                                                                scene("You spot a good foothold in the wall around the gate, and with a fortunate change of plans, " + "climb right over the top while the guard\'s attention is elsewhere. ", false);
                                                        }
                                                }
                                                nextView();
                                                listen = function ():void {
                                                    subEvent = "got inside";
                                                    doEvent(cultistVillage);
                                                };
                                                break;
                                            case false:
                                                switch (dXY(1, 10) == 10) {
                                                    case true:
                                                        scene("You walk up to the guard and say, \"I\'m selling these fine leather jackets.\" " + capFirst(enemyt.gender.his) + " face twists into a snarl; " + "guess " + enemyt.gender.he + " prefers cotton. ", false);
                                                        break;
                                                    case false:
                                                        switch (dXY(1, 3)) {
                                                            case 1:
                                                                scene("You try to throw a pebble to misdirect " + enemyt.gender.his + " attention. " + "It works for about half a second, then " + enemyt.gender.he + " looks right back at you, catching you in mid-sneak. ", false);
                                                                break;
                                                            case 2:
                                                                scene("The guard heaves with a sigh and a yawn, closing " + enemyt.gender.his + " eyes for a moment, " + "but your attempt to quietly rush past goes south as you step on foliage that crunches under your feet. ", false);
                                                                break;
                                                            case 3:
                                                                scene("You think you spot a good foothold in the wall around the gate and try to climb over it to avoid the guard altogether, " + "but can\'t quite manage to get up over it so easily. The guard spots you mid-climb and comes rushing toward you. ", false);
                                                        }
                                                }
                                                startFight();
                                        }
                                        break;
                                    case 12:
                                        scene("\tYou throw caution to the wind and run straight for the guard, " + WEA.Name + " raised for a fight. From the looks of " + enemyt.gender.him + ", that\'s exactly what you\'re going to get! ", true);
                                        subEvent = "got inside";
                                        startFight();
                                        break;
                                    case 13:
                                        scene("\tYou take advantage of the fact that you haven\'t been seen yet to remain that way, staying far from the stronghold to go explore elsewhere. ", true);
                                        endEvent(JungleHub);
                                }
                            };
                            break;
                        case "got inside":
                            this.scene("\tInside the fortifications, there are several hastily-built huts surrounding an unusual looking totem atop a stone shrine. " + "Before it, a shaman in feathered robes dances and chants in a language you don\'t understand. ", true);
                            if (this.hasQuest(this.defeatShaman) && !this.questCompleted(this.defeatShaman)) {
                                this.scene("The chief asked you to beat some sense back into some shaman, and it looks like this one will do just fine. ", false);
                            }
                            this.scene("As you approach, the Shaman seems to sense you, stopping and turning to face you, pointing accusingly and shouting threateningly. " + "Several of the residents give a wide berth, watching to see what will happen next. ", false);
                            this.subEvent = "shaman defeated";
                            this.combatEvent(this.shamanBossNormal);
                            break;
                        case "shaman defeated":
                            this.scene("\tWith the shaman bested, the onlookers are left astonished and mouths agape. ", true);
                            if (this.hasQuest(this.defeatShaman) && !this.questCompleted(this.defeatShaman)) {
                                if (this.questStage(this.defeatShaman) < this.defeatShaman.questGoal) {
                                    this.scene("The chief still wants you to find " + int(this.defeatShaman.questGoal - this.questStage(this.defeatShaman)) + " more shaman, but this is good progress. ", false);
                                }
                                else {
                                    this.scene("That was the last shaman the chief wanted you to take care of. Job well done. ", false);
                                }
                            }
                            this.scene("You " + this.walk() + " out of the stronghold, having bested the leader, and head back out to the jungle unopposed. ", false);
                            this.endEvent(this.JungleHub);
                    }
                    break;
                case this.shamanBossFight:
                    this.locationUpdate(this.JungleHub);
                    this.combatEvent(this.shamanBoss);
                    break;
                case this.golemBossFight:
                    this.locationUpdate(this.JungleHub);
                    this.combatEvent(this.golemBoss);
                    break;
                case this.anacondaBossFight:
                    this.locationUpdate(this.JungleHub);
                    this.combatEvent(this.anacondaBoss);
            }
            if (ID == this.CentralSquare || ID == this.WesternSquare || ID == this.EasternSquare || ID == this.SouthernSquare) {
                if (this.dayTime()) {
                    this.randomNPC(1);
                    this.ambientTravelScene(ID);
                    this.general();
                }
                else {
                    switch (this.dXY(1, 5)) {
                        case 1:
                            switch (this.LVL < 5 || this.dXY(1, 2) == 1) {
                                case true:
                                    switch (this.dXY(1, 2)) {
                                        case 1:
                                            this.combatEvent(this.Drunk);
                                            this.scene("\tAs you wander through the city streets, you happen to run into a " + this.enemyt.species.name + " stumbling down the street towards you. " + "He barely manages to stumble up to you as he\'s clearly had a bit too much to drink. " + "And by clearly too much, he appears to have drained an entire keg judging by the size of his swollen gut, which has long since burst through his shirt. " + "As he drunkenly wobbles his way up to you, his gut sloshes back and forth with each step, doing no favors for his poor sense of balance. " + "\n\t\"Hey you! *hic* Gimme a goldsssh. I need ta get backsh to the bar before lasht call! *hic*\" He stumbles into you and nearly knocks you to the ground. " + "\n\t\"Oh! Sos its a fight you wantsh eh! *hic* Well puts \'em up!\" He raises his fists in a drunken stance. " + "You weren\'t necessarily looking for a fight before, but apparently you\'re in one now. ", true);
                                            break;
                                        case 2:
                                            this.combatEvent(this.Thief);
                                            this.scene("\tYou " + this.walk() + " down a city street and help but get the feeling you\'re being watched. " + "You hear the quiet but unmistakable soud of footsteps behind you. " + "You whirl around to see a pudgy " + this.enemyt.species.name + " dressed in dark ill-fitting clothing standing right behind you and wielding a dagger. " + "\n\t\"Your money or your life!\" " + this.enemyt.gender.he + " says. You bring up your " + this.WEA.Name + " and prepare for a fight. ", true);
                                    }
                                    break;
                                default:
                                    this.combatEvent(this.takeoutTerror);
                                    this.scene("\t" + this.enemyt.description, true);
                            }
                            break;
                        default:
                            this.randomNPC(1);
                            this.ambientTravelScene(ID);
                            this.general();
                    }
                }
            }
            else if (ID.type == this.store && ID.locationVendor != null) {
                this.enterStore(ID.locationVendor);
            }
            if (this.eventText.htmlText == "") {
                if (ID.Description == "") {
                    this.scene("You traveled to " + ID.Name, true);
                }
                else {
                    this.scene("\t" + ID.Description, true);
                }
            }
        }

        private function _Main_Items126_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "an";
            _loc1_.Name = "aero pearl";
            _loc1_.Value = 20;
            _loc1_.Useable = true;
            _loc1_.Consume = true;
            _loc1_.Special = true;
            _loc1_.type = "gem";
            this.AeroPearl = _loc1_;
            BindingManager.executeBindings(this, "AeroPearl", this.AeroPearl);
            return _loc1_;
        }

        private function _Main_Items119_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "an";
            _loc1_.Name = "amulet";
            _loc1_.Value = 20;
            _loc1_.Useable = true;
            _loc1_.type = "gem";
            _loc1_.Description = "A shiny red amulet. ";
            _loc1_.itemUse = "You gaze deeply into the amulet. For a moment you think it\'s hypnotizing you, but you realize you\'re just unnaturally attracted to shiny objects and put it away. ";
            this.Amulet = _loc1_;
            BindingManager.executeBindings(this, "Amulet", this.Amulet);
            return _loc1_;
        }

        private function _Main_Enemies25_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "massive anaconda";
            _loc1_.voreable = true;
            _loc1_.weight = 650;
            _loc1_.playerEscape = "You manage to find the end of the snake\'s lengthy body and run around it, not stopping until you\'re far off into the distance and well away. ";
            _loc1_.grappleEscapeFail = "You pry at the snake\'s heavy body, but can\'t manage to loosen it at all! ";
            _loc1_.grappleEscapeSucceed = "You pry at the snake\'s heavy body and just manage to wriggle out of its grip! ";
            _loc1_.victory = "With your last attack, the anaconda lets out a gasping hiss, its long body writhing for a moment before slowing to a near stop. ";
            _loc1_.STR = 40;
            _loc1_.AGI = 35;
            _loc1_.INT = 17;
            _loc1_.DEF = 5;
            _loc1_.maxHEA = 200;
            _loc1_.level = 9;
            _loc1_.GLD = 25;
            _loc1_.XP = 55;
            this.Anaconda = _loc1_;
            BindingManager.executeBindings(this, "Anaconda", this.Anaconda);
            return _loc1_;
        }

        private function _Main_Spells21_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "cure";
            _loc1_.iconType = "white";
            _loc1_.level = 1;
            _loc1_.manaCost = 10;
            _loc1_.Value = 35;
            _loc1_.requirementINT = 30;
            _loc1_.spellType = "other";
            _loc1_.castableOOC = true;
            _loc1_.description = "Cures you of most temporary status effects, whether positive or negative. ";
            _loc1_.descriptionCast = "You\'re bathed in a soft blue light as you begin to feel more like your normal self. ";
            this.Antidote1 = _loc1_;
            BindingManager.executeBindings(this, "Antidote1", this.Antidote1);
            return _loc1_;
        }

        private function _Main_Items1_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "an";
            _loc1_.Name = "apple";
            _loc1_.Value = 2;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A red juicy apple. ";
            _loc1_.itemUse = "You chomp the juicy apple down in just a few bites. ";
            _loc1_.eat = 2;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 1;
            _loc1_.Heal = 6;
            this.Apple = _loc1_;
            BindingManager.executeBindings(this, "Apple", this.Apple);
            return _loc1_;
        }

        private function _Main_DamageType8_i():DamageType {
            var _loc1_:DamageType = null;
            _loc1_ = new DamageType();
            _loc1_.name = "arcane";
            this.ArcaneDamage = _loc1_;
            BindingManager.executeBindings(this, "ArcaneDamage", this.ArcaneDamage);
            return _loc1_;
        }

        private function _Main_Items87_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "unarmored";
            _loc1_.Value = 0;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "You\'re wearing no armor. ";
            _loc1_.Defense = 0;
            this.Armorless = _loc1_;
            BindingManager.executeBindings(this, "Armorless", this.Armorless);
            return _loc1_;
        }

        private function _Main_Items61_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "axe";
            _loc1_.Value = 21;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A small one-handed iron metal axe. ";
            _loc1_.itemUse = "You heft the solid axe in your hand. It looks more like it was meant for chopping wood than fighting foes, but it\'s pointy enough to probably not matter. ";
            _loc1_.attackDescription = "You whack your enemy, ";
            _loc1_.WEAd = 2;
            _loc1_.WEAr = 6;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.3;
            this.Axe = _loc1_;
            BindingManager.executeBindings(this, "Axe", this.Axe);
            return _loc1_;
        }

        private function _Main_Species39_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "badger";
            _loc1_.baseHeight = 66;
            _loc1_.furBack = "black";
            _loc1_.furBelly = "black";
            _loc1_.furHead = "black and white";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.Badger = _loc1_;
            BindingManager.executeBindings(this, "Badger", this.Badger);
            return _loc1_;
        }

        private function _Main_Items34_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "bag of candy";
            _loc1_.Value = 1;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A bag of candy coated chocolates that won\'t melt all over your hands. How convenient. ";
            _loc1_.itemUse = "You start out eating one or two pieces at a time, but eventually give in and cram handfulls of them into your mouth at once. ";
            _loc1_.eat = 2;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 1.5;
            _loc1_.Heal = 3;
            this.Bagofcandy = _loc1_;
            BindingManager.executeBindings(this, "Bagofcandy", this.Bagofcandy);
            return _loc1_;
        }

        private function _Main_DamageType1_i():DamageType {
            var _loc1_:DamageType = null;
            _loc1_ = new DamageType();
            _loc1_.name = "bashing";
            this.BashingDamage = _loc1_;
            BindingManager.executeBindings(this, "BashingDamage", this.BashingDamage);
            return _loc1_;
        }

        private function _Main_Species50_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "bat";
            _loc1_.baseHeight = 64;
            _loc1_.furBack = "brown";
            _loc1_.furBelly = "brown";
            _loc1_.furHead = "brown";
            _loc1_.hand = "wing";
            _loc1_.hands = "wings";
            _loc1_.tail = "stubby";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.Bat = _loc1_;
            BindingManager.executeBindings(this, "Bat", this.Bat);
            return _loc1_;
        }

        private function _Main_Items96_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "battlemage\'s garb";
            _loc1_.Value = 100;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "This set of robes has inlaid plating, making it more defensive in combat, but slightly dampening its magical enchantments. ";
            _loc1_.itemUse = "You wrap the heavy robes around yourself and fasten the ties. Despite it\'s simple appearance, you feel very well defended. ";
            _loc1_.Defense = 4;
            _loc1_.manaBuff = 10;
            this.BattlemagesGarb = _loc1_;
            BindingManager.executeBindings(this, "BattlemagesGarb", this.BattlemagesGarb);
            return _loc1_;
        }

        private function _Main_Locations30_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "beach";
            this.BeachEntrance = _loc1_;
            BindingManager.executeBindings(this, "BeachEntrance", this.BeachEntrance);
            return _loc1_;
        }

        private function _Main_Locations81_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "beach";
            this.BeachEvent = _loc1_;
            BindingManager.executeBindings(this, "BeachEvent", this.BeachEvent);
            return _loc1_;
        }

        private function _Main_Locations80_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "beach";
            this.BeachHub = _loc1_;
            BindingManager.executeBindings(this, "BeachHub", this.BeachHub);
            return _loc1_;
        }

        private function _Main_Items80_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "beastclaw bracers";
            _loc1_.Value = 750;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.itemUse = "You don the bracers, and your hands shudder as your claws grow harder, longer, and sharper. ";
            _loc1_.attackDescription = "You maul your enemy with your claws, ";
            _loc1_.WEAd = 1;
            _loc1_.WEAr = 4;
            _loc1_.damageStat = "AGI";
            _loc1_.damageScaling = 1;
            this.BeastclawBracers = _loc1_;
            BindingManager.executeBindings(this, "BeastclawBracers", this.BeastclawBracers);
            return _loc1_;
        }

        private function _Main_Items103_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "belly shirt";
            _loc1_.Value = 5;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Top = true;
            _loc1_.Expand = 18;
            _loc1_.type = "shirt";
            _loc1_.Toosmall = "You slide the \"shirt\" over you head, but you can barely get it under your armpits due to the size of your belly. ";
            _loc1_.itemUse = "You slide the \"shirt\" over you head and push it down under your armpits. You adjust it so it fits well around your chest. Lookin\' sexy! ";
            _loc1_.PoppedDescription = "More of a cloth tube you wear around your chest than a shirt, it shows of the wearers belly, for better or for worse. ";
            _loc1_.Description = "More of a cloth tube you wear around your chest than a shirt, it shows of the wearers belly, for better or for worse. ";
            this.BellyShirt = _loc1_;
            BindingManager.executeBindings(this, "BellyShirt", this.BellyShirt);
            return _loc1_;
        }

        private function _Main_Items70_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "black sword";
            _loc1_.Value = 850;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A cursed obsidian greatsword that has gone by many names throughout history, just holding this life-draining sword fills your mind with dark thoughts. ";
            _loc1_.itemUse = "You take up the great black blade, and find yourself excited at the thought of hurting something with it. ";
            _loc1_.attackDescription = "You slash your enemy with your bloodthirsty blade, ";
            _loc1_.WEAd = 6;
            _loc1_.WEAr = 12;
            _loc1_.attackProc = "drain";
            _loc1_.attackProcChance = 25;
            _loc1_.attackProcPower = 20;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.75;
            this.BlackSword = _loc1_;
            BindingManager.executeBindings(this, "BlackSword", this.BlackSword);
            return _loc1_;
        }

        private function _Main_Enemies8_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "bloat Bees";
            _loc1_.playerEscape = "You start running away from the swarm of bees. You can hear the loud ominous buzzing fade away and eventually become silent.  ";
            _loc1_.victory = "The last bee falls and the sound of buzzing disappears. You\'ve won! ";
            _loc1_.STR = 4;
            _loc1_.AGI = 15;
            _loc1_.INT = 5;
            _loc1_.DEF = 1;
            _loc1_.maxHEA = 100;
            _loc1_.level = 3;
            _loc1_.GLD = 6;
            _loc1_.XP = 15;
            this.BloatBees = _loc1_;
            BindingManager.executeBindings(this, "BloatBees", this.BloatBees);
            return _loc1_;
        }

        private function _Main_Enemies4_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "Bloated Lion";
            _loc1_.voreable = true;
            _loc1_.weight = 140;
            _loc1_.playerEscape = "You flee from the battle. The lion waddles after you, but the weight in his stomach slows him down and decides he\'s too stuffed and lazy to chase anything down. ";
            _loc1_.victory = "The bloated lion heaves out a sigh and collapses to the ground, too weakened by the fight to hold up his heavy stomach. He rolls on his side and passes out. ";
            _loc1_.STR = 10;
            _loc1_.AGI = 15;
            _loc1_.INT = 10;
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 60;
            _loc1_.level = 2;
            _loc1_.GLD = 4;
            _loc1_.XP = 8;
            this.BloatedLion = _loc1_;
            BindingManager.executeBindings(this, "BloatedLion", this.BloatedLion);
            return _loc1_;
        }

        private function _Main_Species4_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "blue jay";
            _loc1_.baseHeight = 59;
            _loc1_.furBack = "blue";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "blue";
            _loc1_.foot = "foot";
            _loc1_.feet = "feet";
            _loc1_.hand = "wing";
            _loc1_.hands = "wings";
            _loc1_.mouth = "beak";
            _loc1_.teeth = "beak";
            _loc1_.fur = "feathers";
            _loc1_.furred = "feathered";
            _loc1_.furry = "feathery";
            this.BlueJay = _loc1_;
            BindingManager.executeBindings(this, "BlueJay", this.BlueJay);
            return _loc1_;
        }

        private function _Main_Items112_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "blue swim trunks";
            _loc1_.Value = 5;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Bottom = true;
            _loc1_.Expand = 20;
            _loc1_.type = "pants";
            _loc1_.itemUse = "You stick your legs through the leg holes and pull the swim trunks up around your waist, tightening the elastic band in the waist so it properly stay on. ";
            _loc1_.PoppedDescription = "Despite your best efforts, the worn elastic swim trunks can only awkwardly cling to your thighs, making walking extremely awkward. ";
            _loc1_.Description = "A blue pair of stretchy elastic blue swim trunks designed for most normal sized furs. ";
            _loc1_.article = "a pair of";
            this.BlueSwimTrunks = _loc1_;
            BindingManager.executeBindings(this, "BlueSwimTrunks", this.BlueSwimTrunks);
            return _loc1_;
        }

        private function _Main_Enemies14_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "blueberry Slime";
            _loc1_.description = "Your opponent is a huge gelatinous cube about 4 feet long on each side. The translucent blue blob smells strongly of blueberries! ";
            _loc1_.playerEscape = "You flee from the battle. The slime chases after you in a weird jumping/sloshing motion, like an ocean wave on land, but it can\'t manage to keep up with you. ";
            _loc1_.STR = 15;
            _loc1_.AGI = 20;
            _loc1_.INT = 10;
            _loc1_.DEF = 5;
            _loc1_.maxHEA = 220;
            _loc1_.level = 4;
            _loc1_.GLD = 8;
            _loc1_.XP = 16;
            this.BlueberrySlime = _loc1_;
            BindingManager.executeBindings(this, "BlueberrySlime", this.BlueberrySlime);
            return _loc1_;
        }

        private function _Main_Items113_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "blue jeans";
            _loc1_.Value = 6;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Bottom = true;
            _loc1_.Expand = 10;
            _loc1_.type = "pants";
            _loc1_.Popoff = "With a sudden and forceful \"pop!\", your jeans button pops off as you swollen gut expands outward, undoing your zipper as it goes. ";
            _loc1_.itemUse = "You slide your legs into your pants, zip them up and close the button. Not very stylish, but at least they\'re durable. ";
            _loc1_.PoppedDescription = "A plain dark blue pair of denim pants. The top button has popped off allowing your gut to sag down and making it quite hard to hold these pants up. ";
            _loc1_.Description = "A plain dark blue pair of denim pants. ";
            _loc1_.article = "a pair of";
            this.Bluejeans = _loc1_;
            BindingManager.executeBindings(this, "Bluejeans", this.Bluejeans);
            return _loc1_;
        }

        private function _Main_Items129_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "book of crystals";
            _loc1_.Value = 75;
            _loc1_.Useable = true;
            _loc1_.combatUseable = false;
            _loc1_.Special = true;
            _loc1_.type = "book";
            _loc1_.Consume = false;
            _loc1_.itemUse = "";
            this.BookOfCrystals = _loc1_;
            BindingManager.executeBindings(this, "BookOfCrystals", this.BookOfCrystals);
            return _loc1_;
        }

        private function _Main_Spells18_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "hunter\'s swiftness";
            _loc1_.iconType = "grey";
            _loc1_.level = 1;
            _loc1_.manaCost = 4;
            _loc1_.Value = 22;
            _loc1_.requirementINT = 30;
            _loc1_.buffStat = "AGI";
            _loc1_.buffAmount = 10;
            _loc1_.spellType = "buff";
            _loc1_.description = "Call upon the power of nature to increase your speed. ";
            _loc1_.descriptionCast = "You focus on your opponent, touching one hand to the ground in a crouch as you feel the subtle energies of the earth flow through your fingers, ";
            this.BoostAgility1 = _loc1_;
            BindingManager.executeBindings(this, "BoostAgility1", this.BoostAgility1);
            return _loc1_;
        }

        private function _Main_Spells19_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "bark skin";
            _loc1_.iconType = "grey";
            _loc1_.level = 1;
            _loc1_.manaCost = 9;
            _loc1_.Value = 55;
            _loc1_.requirementINT = 40;
            _loc1_.buffStat = "DEF";
            _loc1_.buffAmount = 3;
            _loc1_.spellType = "buff";
            _loc1_.description = "Improve your your toughness by channelling the spirit of a mighty tree. ";
            _loc1_.descriptionCast = "You hold out your hands, then slap the sides of your stomach. Your skin hardens, ";
            this.BoostDefense1 = _loc1_;
            BindingManager.executeBindings(this, "BoostDefense1", this.BoostDefense1);
            return _loc1_;
        }

        private function _Main_Spells20_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "dancing wind";
            _loc1_.iconType = "grey";
            _loc1_.level = 1;
            _loc1_.manaCost = 8;
            _loc1_.Value = 65;
            _loc1_.requirementINT = 45;
            _loc1_.buffStat = "DODGE";
            _loc1_.buffAmount = 10;
            _loc1_.spellType = "buff";
            _loc1_.description = "Aid your movement with the power of wind to become more difficult to hit. ";
            _loc1_.descriptionCast = "You swipe your hands in front of yourself, kicking up a tailwind that makes your movement easier, ";
            this.BoostDodge1 = _loc1_;
            BindingManager.executeBindings(this, "BoostDodge1", this.BoostDodge1);
            return _loc1_;
        }

        private function _Main_Spells17_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "strength boost";
            _loc1_.iconType = "grey";
            _loc1_.level = 1;
            _loc1_.manaCost = 4;
            _loc1_.Value = 22;
            _loc1_.requirementINT = 30;
            _loc1_.buffStat = "STR";
            _loc1_.buffAmount = 10;
            _loc1_.spellType = "buff";
            _loc1_.description = "Slightly increases your strength in combat for a short time. Multiple casts will only increase your strength once. ";
            _loc1_.descriptionCast = "You are enveloped in a swirl of red light, ";
            this.BoostStrength1 = _loc1_;
            BindingManager.executeBindings(this, "BoostStrength1", this.BoostStrength1);
            return _loc1_;
        }

        private function _Main_Items101_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "brute\'s harness";
            _loc1_.Value = 350;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "A set of leather and metal armor emphasizing mobility over protection, this harness has been enchanted with the spirit of a hulking predator. ";
            _loc1_.itemUse = "You don the harness, and feel ready to smash the next thing that looks at you funny. ";
            _loc1_.Defense = 2;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.1;
            this.BrutesHarness = _loc1_;
            BindingManager.executeBindings(this, "BrutesHarness", this.BrutesHarness);
            return _loc1_;
        }

        private function _Main_Enemies19_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "bubble orca";
            _loc1_.voreable = true;
            _loc1_.weight = 220;
            _loc1_.STR = 20;
            _loc1_.AGI = 18;
            _loc1_.INT = 12;
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 120;
            _loc1_.level = 5;
            _loc1_.GLD = 15;
            _loc1_.XP = 30;
            this.BubbleOrca = _loc1_;
            BindingManager.executeBindings(this, "BubbleOrca", this.BubbleOrca);
            return _loc1_;
        }

        private function _Main_Locations87_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "buried treasure";
            this.BuriedTreasure = _loc1_;
            BindingManager.executeBindings(this, "BuriedTreasure", this.BuriedTreasure);
            return _loc1_;
        }

        private function _Main_Items106_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "button down shirt";
            _loc1_.Value = 6;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Top = true;
            _loc1_.Expand = 8;
            _loc1_.type = "shirt";
            _loc1_.Popoff = "With several sudden \"pings!\" the buttons of your shirt pop off one by one as your belly busts out of it\'s restricting confines and slowly sags outward. ";
            _loc1_.itemUse = "You slide your arms through the sleeves and button it down the front. Looking fancy! ";
            _loc1_.PoppedDescription = "A shirt with all the buttons popped off, leaving your belly hanging out. ";
            _loc1_.Description = "A shirt with buttons down the front. ";
            this.ButtonDownShirt = _loc1_;
            BindingManager.executeBindings(this, "ButtonDownShirt", this.ButtonDownShirt);
            return _loc1_;
        }

        private function _Main_Locations67_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "cabal cave";
            this.CabalCave = _loc1_;
            BindingManager.executeBindings(this, "CabalCave", this.CabalCave);
            return _loc1_;
        }

        private function _Main_Items35_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "slice of cake";
            _loc1_.Value = 2;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A sweet vanilla cake. ";
            _loc1_.itemUse = "You take your time enjoying each bite of moist delicious cake. ";
            _loc1_.eat = 4;
            _loc1_.StackLimit = 6;
            _loc1_.Calories = 3;
            _loc1_.Charges = 6;
            _loc1_.Heal = 6;
            this.Cake = _loc1_;
            BindingManager.executeBindings(this, "Cake", this.Cake);
            return _loc1_;
        }

        private function _Main_Locations77_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Captured!";
            this.CapturedByWildlings = _loc1_;
            BindingManager.executeBindings(this, "CapturedByWildlings", this.CapturedByWildlings);
            return _loc1_;
        }

        private function _Main_Species33_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "cattle";
            _loc1_.mName = "bull";
            _loc1_.fName = "cow";
            _loc1_.baseHeight = 76;
            _loc1_.foot = "hoof";
            _loc1_.feet = "hooves";
            _loc1_.hand = "hand";
            _loc1_.hands = "hands";
            _loc1_.furBack = "black and white";
            _loc1_.furBelly = "black and white";
            _loc1_.furHead = "black";
            this.Cattle = _loc1_;
            BindingManager.executeBindings(this, "Cattle", this.Cattle);
            return _loc1_;
        }

        private function _Main_Locations5_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "central square";
            this.CentralSquare = _loc1_;
            BindingManager.executeBindings(this, "CentralSquare", this.CentralSquare);
            return _loc1_;
        }

        private function _Main_Items89_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a set of";
            _loc1_.Name = "chainmail armor";
            _loc1_.Value = 30;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "A set of chain mail that covers your upper body. ";
            _loc1_.itemUse = "You slide the heavy set of interconnected metal rings over your head and let it fall over your body. ";
            _loc1_.Defense = 2;
            this.ChainmailArmor = _loc1_;
            BindingManager.executeBindings(this, "ChainmailArmor", this.ChainmailArmor);
            return _loc1_;
        }

        private function _Main_Items86_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "charred wand";
            _loc1_.Value = 130;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.attackDescription = "A bolt of red arcane light arcs towards your opponent, ";
            _loc1_.WEAd = 1;
            _loc1_.WEAr = 10;
            _loc1_.healthBuff = -50;
            _loc1_.damageStat = "INT";
            _loc1_.damageScaling = 1;
            this.CharredWand = _loc1_;
            BindingManager.executeBindings(this, "CharredWand", this.CharredWand);
            return _loc1_;
        }

        private function _Main_Items20_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "cheese burger";
            _loc1_.Value = 3;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A cheese burger sopping with grease. ";
            _loc1_.itemUse = "You pick up the mouthwateringly greasy cheeseburger and devour it in several large bites, taking a moment to lick the grease of your fingers afterwards. ";
            _loc1_.eat = 4;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 3;
            _loc1_.Heal = 8;
            this.Cheeseburger = _loc1_;
            BindingManager.executeBindings(this, "Cheeseburger", this.Cheeseburger);
            return _loc1_;
        }

        private function _Main_Species27_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "cheetah";
            _loc1_.baseHeight = 66;
            _loc1_.furBack = "spotted black and gold";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "spotted";
            this.Cheetah = _loc1_;
            BindingManager.executeBindings(this, "Cheetah", this.Cheetah);
            return _loc1_;
        }

        private function _Main_Locations18_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Church";
            this.Church = _loc1_;
            BindingManager.executeBindings(this, "Church", this.Church);
            return _loc1_;
        }

        private function _Main_Vendors3_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Selling = "\"Oh, you have something for me? Let me take a look.\" ";
            this.ClerkClothes = _loc1_;
            BindingManager.executeBindings(this, "ClerkClothes", this.ClerkClothes);
            return _loc1_;
        }

        private function _Main_Vendors10_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "\"Got plenty for ev\'ryone. What\'s yer pleasure?\" ";
            this.ClerkEarl = _loc1_;
            BindingManager.executeBindings(this, "ClerkEarl", this.ClerkEarl);
            return _loc1_;
        }

        private function _Main_Vendors1_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "\"Here\'s what I have in stock. Take a look and see what you like.\" ";
            _loc1_.Selling = "\"What might you be looking to trade with me?\" ";
            this.ClerkEquipment = _loc1_;
            BindingManager.executeBindings(this, "ClerkEquipment", this.ClerkEquipment);
            return _loc1_;
        }

        private function _Main_Vendors4_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Leaving = "A pudgy rat fellow in slightly dirty clothes sits behind a counter that is, itself, piled high with assorted goods that he is inspecting. ";
            this.ClerkGeneral = _loc1_;
            BindingManager.executeBindings(this, "ClerkGeneral", this.ClerkGeneral);
            return _loc1_;
        }

        private function _Main_Vendors2_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "\"Let me know if you see anything you\'re hankering for.\" ";
            this.ClerkGrocery = _loc1_;
            BindingManager.executeBindings(this, "ClerkGrocery", this.ClerkGrocery);
            return _loc1_;
        }

        private function _Main_Vendors5_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            this.ClerkHospital = _loc1_;
            BindingManager.executeBindings(this, "ClerkHospital", this.ClerkHospital);
            return _loc1_;
        }

        private function _Main_Vendors12_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            this.ClerkLizard = _loc1_;
            BindingManager.executeBindings(this, "ClerkLizard", this.ClerkLizard);
            return _loc1_;
        }

        private function _Main_Vendors7_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Leaving = "A rotund ferret lounges about behind a counter, garbed in a hideous yellow robe that no longer contains his long, bulging belly.  ";
            this.ClerkMagesGuild = _loc1_;
            BindingManager.executeBindings(this, "ClerkMagesGuild", this.ClerkMagesGuild);
            return _loc1_;
        }

        private function _Main_Vendors8_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "\"The smith gestures to a lineup of his wares with a grunt.\" ";
            _loc1_.Leaving = "An extremely large donkey is beating a hammer against an anvil, shaping out a piece of metal. His tools are normal sized, and look almost comical in his huge hands. ";
            this.ClerkSmithNormal = _loc1_;
            BindingManager.executeBindings(this, "ClerkSmithNormal", this.ClerkSmithNormal);
            return _loc1_;
        }

        private function _Main_Vendors9_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "\"The smith pushes aside an enormous stone slab, revealing magical goods to you.\" ";
            _loc1_.Leaving = "An extremely large donkey is beating a hammer against an anvil, shaping out a piece of metal. His tools are normal sized, and look almost comical in his huge hands. ";
            this.ClerkSmithSpecial = _loc1_;
            BindingManager.executeBindings(this, "ClerkSmithSpecial", this.ClerkSmithSpecial);
            return _loc1_;
        }

        private function _Main_Vendors6_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            this.ClerkWestTown = _loc1_;
            BindingManager.executeBindings(this, "ClerkWestTown", this.ClerkWestTown);
            return _loc1_;
        }

        private function _Main_Locations24_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Clothing store";
            this.ClothesStore = _loc1_;
            BindingManager.executeBindings(this, "ClothesStore", this.ClothesStore);
            return _loc1_;
        }

        private function _Main_Items8_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "coconut";
            _loc1_.Value = 4;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A rather large, ripe coconut, which seems to be the favourite food of the snakes that dwell under the sand of the beach. ";
            _loc1_.itemUse = "You crack open the coconut on the nearest hard object, drinking the thick milk from it before gnawing the white, hard, fruity flesh away from the shell. ";
            _loc1_.eat = 3;
            _loc1_.drink = 2;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 3;
            _loc1_.Heal = 9;
            _loc1_.Stamina = 6;
            this.Coconut = _loc1_;
            BindingManager.executeBindings(this, "Coconut", this.Coconut);
            return _loc1_;
        }

        private function _Main_Locations83_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "coconut tree";
            this.CoconutTree = _loc1_;
            BindingManager.executeBindings(this, "CoconutTree", this.CoconutTree);
            return _loc1_;
        }

        private function _Main_Items36_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "cookie";
            _loc1_.Value = 1;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A chocolate chip cookie. ";
            _loc1_.eat = 2;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 1.5;
            _loc1_.Heal = 3;
            this.Cookies = _loc1_;
            BindingManager.executeBindings(this, "Cookies", this.Cookies);
            return _loc1_;
        }

        private function _Main_Species28_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "cougar";
            _loc1_.baseHeight = 67;
            _loc1_.furBack = "gold";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "gold";
            this.Cougar = _loc1_;
            BindingManager.executeBindings(this, "Cougar", this.Cougar);
            return _loc1_;
        }

        private function _Main_Species11_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "coyote";
            _loc1_.baseHeight = 60;
            _loc1_.furBack = "grey-brown";
            _loc1_.furBelly = "light grey";
            _loc1_.furHead = "grey";
            this.Coyote = _loc1_;
            BindingManager.executeBindings(this, "Coyote", this.Coyote);
            return _loc1_;
        }

        private function _Main_Items37_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "cupcake";
            _loc1_.Value = 1;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A tiny little handheld cake topped with icing and sparkly little sprinkles. How cute! ";
            _loc1_.eat = 2;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 1.5;
            _loc1_.Heal = 3;
            this.Cupcake = _loc1_;
            BindingManager.executeBindings(this, "Cupcake", this.Cupcake);
            return _loc1_;
        }

        private function _Main_Items72_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "dagger";
            _loc1_.Value = 27;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A razor sharp iron metal dagger. ";
            _loc1_.itemUse = "You prick your finger on the point of your dagger. This thing\'s sharp! ";
            _loc1_.attackDescription = "You jab your enemy, ";
            _loc1_.WEAd = 1;
            _loc1_.WEAr = 10;
            _loc1_.damageStat = "AGI";
            _loc1_.damageScaling = 0.4;
            this.Dagger = _loc1_;
            BindingManager.executeBindings(this, "Dagger", this.Dagger);
            return _loc1_;
        }

        private function _Main_DamageType10_i():DamageType {
            var _loc1_:DamageType = null;
            _loc1_ = new DamageType();
            _loc1_.name = "death";
            this.DeathDamage = _loc1_;
            BindingManager.executeBindings(this, "DeathDamage", this.DeathDamage);
            return _loc1_;
        }

        private function _Main_Species34_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "deer";
            _loc1_.baseHeight = 67;
            _loc1_.foot = "hoof";
            _loc1_.feet = "hooves";
            _loc1_.hand = "hand";
            _loc1_.hands = "hands";
            _loc1_.furBack = "brown";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "brown";
            this.Deer = _loc1_;
            BindingManager.executeBindings(this, "Deer", this.Deer);
            return _loc1_;
        }

        private function _Main_Items125_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "dense topaz";
            _loc1_.Value = 20;
            _loc1_.Useable = true;
            _loc1_.Consume = true;
            _loc1_.Special = true;
            _loc1_.type = "gem";
            this.DenseTopaz = _loc1_;
            BindingManager.executeBindings(this, "DenseTopaz", this.DenseTopaz);
            return _loc1_;
        }

        private function _Main_Locations90_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Island town";
            this.DinosaurCenter = _loc1_;
            BindingManager.executeBindings(this, "DinosaurCenter", this.DinosaurCenter);
            return _loc1_;
        }

        private function _Main_Locations94_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Chief";
            this.DinosaurChief = _loc1_;
            BindingManager.executeBindings(this, "DinosaurChief", this.DinosaurChief);
            return _loc1_;
        }

        private function _Main_Locations95_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Docks";
            this.DinosaurDocks = _loc1_;
            BindingManager.executeBindings(this, "DinosaurDocks", this.DinosaurDocks);
            return _loc1_;
        }

        private function _Main_Locations92_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Inn";
            this.DinosaurInn = _loc1_;
            BindingManager.executeBindings(this, "DinosaurInn", this.DinosaurInn);
            return _loc1_;
        }

        private function _Main_Enemies30_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "dinosaur rider";
            _loc1_.voreable = true;
            _loc1_.weight = 250;
            _loc1_.STR = 53;
            _loc1_.AGI = 20;
            _loc1_.INT = 14;
            _loc1_.DEF = 5;
            _loc1_.maxHEA = 275;
            _loc1_.level = 10;
            _loc1_.GLD = 40;
            _loc1_.XP = 80;
            this.DinosaurRider = _loc1_;
            BindingManager.executeBindings(this, "DinosaurRider", this.DinosaurRider);
            return _loc1_;
        }

        private function _Main_Locations93_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Shaman";
            this.DinosaurShaman = _loc1_;
            BindingManager.executeBindings(this, "DinosaurShaman", this.DinosaurShaman);
            return _loc1_;
        }

        private function _Main_Locations91_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Smithee";
            this.DinosaurSmith = _loc1_;
            BindingManager.executeBindings(this, "DinosaurSmith", this.DinosaurSmith);
            return _loc1_;
        }

        private function _Main_Locations29_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "docks";
            this.Docks = _loc1_;
            BindingManager.executeBindings(this, "Docks", this.Docks);
            return _loc1_;
        }

        private function _Main_Species12_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "dog";
            _loc1_.baseHeight = 68;
            _loc1_.furBack = "black";
            _loc1_.furBelly = "brown";
            _loc1_.furHead = "brown";
            this.Dog = _loc1_;
            BindingManager.executeBindings(this, "Dog", this.Dog);
            return _loc1_;
        }

        private function _Main_Species1_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "dolphin";
            _loc1_.baseHeight = 68;
            _loc1_.furBack = "grey";
            _loc1_.furBelly = "light grey";
            _loc1_.furHead = "grey";
            _loc1_.hand = "fin";
            _loc1_.hands = "fins";
            _loc1_.fur = "skin";
            _loc1_.furred = "skinned";
            _loc1_.furry = "skinned";
            this.Dolphin = _loc1_;
            BindingManager.executeBindings(this, "Dolphin", this.Dolphin);
            return _loc1_;
        }

        private function _Main_Species35_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "donkey";
            _loc1_.baseHeight = 70;
            _loc1_.foot = "hoof";
            _loc1_.feet = "hooves";
            _loc1_.hand = "hand";
            _loc1_.hands = "hands";
            _loc1_.furBack = "brown";
            _loc1_.furBelly = "brown";
            _loc1_.furHead = "brown";
            _loc1_.hair = "mane";
            this.Donkey = _loc1_;
            BindingManager.executeBindings(this, "Donkey", this.Donkey);
            return _loc1_;
        }

        private function _Main_Items38_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "donut";
            _loc1_.Value = 0.75;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A small box of warm, shiny glazed donuts! ";
            _loc1_.eat = 2;
            _loc1_.Charges = 6;
            _loc1_.StackLimit = 12;
            _loc1_.Calories = 1.5;
            _loc1_.Heal = 3;
            this.DonutsSmall = _loc1_;
            BindingManager.executeBindings(this, "DonutsSmall", this.DonutsSmall);
            return _loc1_;
        }

        private function _Main_Items110_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "dress gown";
            _loc1_.Expand = 5;
            _loc1_.Value = 10;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Top = true;
            _loc1_.type = "shirt";
            _loc1_.Popoff = "With a soft ripping sound, your dress gown splits open, unable to contain your swelling belly! ";
            _loc1_.Toosmall = "You try to don the delicate garment, but the buttons refuse to meet in your back. Disappointed, you take it back off. ";
            _loc1_.itemUse = "You don the delicate garment, buttoning up the back. You feel quite good in the luxurious silk. ";
            _loc1_.PoppedDescription = "A formerly-lovely vibrant silk dress\'s top. There is a giant rip in the midsection. ";
            _loc1_.Description = "A lovely and vibrant silk dress\'s top, silky smooth and glittering in the light. ";
            this.DressGown = _loc1_;
            BindingManager.executeBindings(this, "DressGown", this.DressGown);
            return _loc1_;
        }

        private function _Main_Items118_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "dress skirt";
            _loc1_.Expand = 8;
            _loc1_.Value = 10;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Bottom = true;
            _loc1_.type = "pants";
            _loc1_.Popoff = "There is the sound of thread snapping, and your dress skirt tears itself apart, unable to withstand the pressure of your growing belly! ";
            _loc1_.Toosmall = "You try to put on the skirt, but the glistening fabric won\'t stretch around your thighs. Disappointed, you take it back off. ";
            _loc1_.itemUse = "You put on the skirt. It clings nicely to your hips and glistens as you move about. ";
            _loc1_.PoppedDescription = "A formerly-lovely silk dress\'s skirt. Several seams have been torn and it is now an unwearable piece of attractive fabric. ";
            _loc1_.Description = "A lovely and vibrant silk dress\'s skirt, silky smooth and glittering in the light. ";
            this.DressSkirt = _loc1_;
            BindingManager.executeBindings(this, "DressSkirt", this.DressSkirt);
            return _loc1_;
        }

        private function _Main_Enemies5_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "drunk";
            _loc1_.voreable = true;
            _loc1_.weight = 125;
            _loc1_.STR = 15;
            _loc1_.AGI = 5;
            _loc1_.INT = 10;
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 60;
            _loc1_.level = 2;
            _loc1_.GLD = 3;
            _loc1_.XP = 8;
            this.Drunk = _loc1_;
            BindingManager.executeBindings(this, "Drunk", this.Drunk);
            return _loc1_;
        }

        private function _Main_Locations11_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "east city gates";
            _loc1_.Description = "You\'re standing under the gates out of the eastern side of the city. ";
            this.EastCityGates = _loc1_;
            BindingManager.executeBindings(this, "EastCityGates", this.EastCityGates);
            return _loc1_;
        }

        private function _Main_Locations41_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Eastern Road";
            this.EastRoad = _loc1_;
            BindingManager.executeBindings(this, "EastRoad", this.EastRoad);
            return _loc1_;
        }

        private function _Main_Locations7_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "eastern square";
            this.EasternSquare = _loc1_;
            BindingManager.executeBindings(this, "EasternSquare", this.EasternSquare);
            return _loc1_;
        }

        private function _Main_Locations21_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "The armory";
            this.EquipmentStore = _loc1_;
            BindingManager.executeBindings(this, "EquipmentStore", this.EquipmentStore);
            return _loc1_;
        }

        private function _Main_Enemies16_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.article = "an";
            _loc1_.name = "expanded elephant";
            _loc1_.voreable = true;
            _loc1_.weight = 2000;
            _loc1_.STR = 20;
            _loc1_.AGI = 8;
            _loc1_.INT = 13;
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 80;
            _loc1_.level = 4;
            _loc1_.GLD = 11;
            _loc1_.XP = 16;
            this.ExpandedElephant = _loc1_;
            BindingManager.executeBindings(this, "ExpandedElephant", this.ExpandedElephant);
            return _loc1_;
        }

        private function _Main_Locations68_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "cave of failed experiments";
            this.ExperimentCave = _loc1_;
            BindingManager.executeBindings(this, "ExperimentCave", this.ExperimentCave);
            return _loc1_;
        }

        private function _Main_Locations71_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "group of experiments";
            this.ExperimentTown = _loc1_;
            BindingManager.executeBindings(this, "ExperimentTown", this.ExperimentTown);
            return _loc1_;
        }

        private function _Main_Locations72_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Earl\'s farm";
            this.ExperimentTownFarm = _loc1_;
            BindingManager.executeBindings(this, "ExperimentTownFarm", this.ExperimentTownFarm);
            return _loc1_;
        }

        private function _Main_Locations73_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Smith\'s forge";
            this.ExperimentTownForge = _loc1_;
            BindingManager.executeBindings(this, "ExperimentTownForge", this.ExperimentTownForge);
            return _loc1_;
        }

        private function _Main_Locations74_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Smarty\'s library";
            this.ExperimentTownSmarty = _loc1_;
            BindingManager.executeBindings(this, "ExperimentTownSmarty", this.ExperimentTownSmarty);
            return _loc1_;
        }

        private function _Main_Enemies26_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "fat jaguar";
            _loc1_.voreable = true;
            _loc1_.weight = 350;
            _loc1_.grappleEscapeFail = "You try to shove it off of you, but it\'s too determined for you to move! ";
            _loc1_.grappleEscapeSucceed = "With a solid shove, you force the jaguar off of you, escaping being the big cat\'s next meal! ";
            _loc1_.victory = "With a groaning growl, the jaguar staggers for a moment, then flops onto its side, chest gently heaving with deep, pained breaths. ";
            _loc1_.STR = 25;
            _loc1_.AGI = 50;
            _loc1_.INT = 20;
            _loc1_.attackStat = "AGI";
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 190;
            _loc1_.level = 9;
            _loc1_.GLD = 25;
            _loc1_.XP = 55;
            this.FatJaguar = _loc1_;
            BindingManager.executeBindings(this, "FatJaguar", this.FatJaguar);
            return _loc1_;
        }

        private function _Main_Enemies1_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "Fat Wolf";
            _loc1_.voreable = true;
            _loc1_.weight = 120;
            _loc1_.STR = 10;
            _loc1_.AGI = 10;
            _loc1_.INT = 7;
            _loc1_.DEF = 1;
            _loc1_.maxHEA = 40;
            _loc1_.level = 1;
            _loc1_.GLD = 4;
            _loc1_.XP = 8;
            this.FatWolf = _loc1_;
            BindingManager.executeBindings(this, "FatWolf", this.FatWolf);
            return _loc1_;
        }

        private function _Main_Enemies39_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "fat wyvern";
            _loc1_.voreable = true;
            _loc1_.weight = 600;
            _loc1_.STR = 45;
            _loc1_.AGI = 30;
            _loc1_.INT = 15;
            _loc1_.DEF = 6;
            _loc1_.maxHEA = 275;
            _loc1_.level = 14;
            _loc1_.GLD = 60;
            _loc1_.XP = 115;
            this.FatWyvern = _loc1_;
            BindingManager.executeBindings(this, "FatWyvern", this.FatWyvern);
            return _loc1_;
        }

        private function _Main_Enemies36_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "feeder ant";
            _loc1_.grappleEscapeFail = "You push at the massively swollen thorax, but simply cannot muster the strength to actually move the enormous thing. ";
            _loc1_.grappleEscapeSucceed = "Using your immense strength, you force the tremendous, squishy ant torso off of you, shoving it away and scrambling back to your feet. ";
            _loc1_.itemFound = "Thinking quickly and creatively, you grab an empty, dried eggshell and scoop some of the honey into it to take with you, then quickly show yourself out. ";
            _loc1_.STR = 30;
            _loc1_.AGI = 20;
            _loc1_.INT = 15;
            _loc1_.DEF = 5;
            _loc1_.maxHEA = 350;
            _loc1_.level = 12;
            _loc1_.GLD = 70;
            _loc1_.XP = 90;
            _loc1_.itemChance = 100;
            this.FeederAnt = _loc1_;
            BindingManager.executeBindings(this, "FeederAnt", this.FeederAnt);
            return _loc1_;
        }

        private function _Main_Gender2_i():Gender {
            var _loc1_:Gender = null;
            _loc1_ = new Gender();
            _loc1_.name = "female";
            _loc1_.man = "woman";
            _loc1_.boy = "girl";
            _loc1_.sir = "ma\'am";
            _loc1_.mister = "miss";
            _loc1_.brother = "sister";
            _loc1_.guy = "lady";
            _loc1_.fella = "missy";
            _loc1_.buddy = "missy";
            _loc1_.gentleman = "lady";
            _loc1_.lad = "lass";
            _loc1_.laddie = "lassie";
            _loc1_.sport = "sugar";
            _loc1_.he = "she";
            _loc1_.him = "her";
            _loc1_.himself = "herself";
            _loc1_.his = "her";
            this.Female = _loc1_;
            BindingManager.executeBindings(this, "Female", this.Female);
            return _loc1_;
        }

        private function _Main_Locations3_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Fence";
            this.Fence = _loc1_;
            BindingManager.executeBindings(this, "Fence", this.Fence);
            return _loc1_;
        }

        private function _Main_Species40_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "ferret";
            _loc1_.baseHeight = 56;
            _loc1_.furBack = "brown";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "brown";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.Ferret = _loc1_;
            BindingManager.executeBindings(this, "Ferret", this.Ferret);
            return _loc1_;
        }

        private function _Main_DamageType4_i():DamageType {
            var _loc1_:DamageType = null;
            _loc1_ = new DamageType();
            _loc1_.name = "fire";
            this.FireDamage = _loc1_;
            BindingManager.executeBindings(this, "FireDamage", this.FireDamage);
            return _loc1_;
        }

        private function _Main_Items84_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "fire wand";
            _loc1_.Value = 50;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A short gnarled wooden rod, burnt black and smelling distinctly of ash. Occasionaly a small burning ember flakes off and burns away. ";
            _loc1_.itemUse = "You swish and flick the wand around in a small flourish and manage to only slightly burn yourself. ";
            _loc1_.attackDescription = "A small ball of fire arcs towards your enemy, ";
            _loc1_.WEAd = 3;
            _loc1_.WEAr = 4;
            _loc1_.damageStat = "INT";
            _loc1_.damageScaling = 0.6;
            this.FireWand = _loc1_;
            BindingManager.executeBindings(this, "FireWand", this.FireWand);
            return _loc1_;
        }

        private function _Main_Spells1_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "fireball";
            _loc1_.iconType = "black";
            _loc1_.level = 1;
            _loc1_.manaCost = 5;
            _loc1_.Value = 10;
            _loc1_.requirementINT = 30;
            _loc1_.statusEffect = "burn";
            _loc1_.statusTime = 3;
            _loc1_.damage = 4;
            _loc1_.damageRange = 4;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Fling a ball of fire at your enemy. ";
            _loc1_.descriptionCast = "You hurl a ball of fire at your opponent, ";
            this.Fireball1 = _loc1_;
            BindingManager.executeBindings(this, "Fireball1", this.Fireball1);
            return _loc1_;
        }

        private function _Main_Spells2_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "fire serpent";
            _loc1_.iconType = "black";
            _loc1_.level = 3;
            _loc1_.manaCost = 15;
            _loc1_.Value = 40;
            _loc1_.requirementINT = 50;
            _loc1_.statusEffect = "burn";
            _loc1_.statusTime = 3;
            _loc1_.damage = 6;
            _loc1_.damageRange = 8;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Create a serpent of flame to bite your foe with flaming teeth. ";
            _loc1_.descriptionCast = "You thrust your hand forth, launching a burning serpent at your opponent. It crashes fangs-first into your foe and splashes out in a gout of fire, ";
            this.Fireball3 = _loc1_;
            BindingManager.executeBindings(this, "Fireball3", this.Fireball3);
            return _loc1_;
        }

        private function _Main_Spells3_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "flame leviathan";
            _loc1_.iconType = "black";
            _loc1_.level = 5;
            _loc1_.manaCost = 30;
            _loc1_.Value = 80;
            _loc1_.requirementINT = 70;
            _loc1_.statusEffect = "burn";
            _loc1_.statusTime = 5;
            _loc1_.damage = 10;
            _loc1_.damageRange = 12;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Create a great wyrm of flame to engulf your opponent. ";
            this.Fireball5 = _loc1_;
            BindingManager.executeBindings(this, "Fireball5", this.Fireball5);
            return _loc1_;
        }

        private function _Main_Locations53_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Deep forest";
            this.ForestEvent = _loc1_;
            BindingManager.executeBindings(this, "ForestEvent", this.ForestEvent);
            return _loc1_;
        }

        private function _Main_Locations54_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Mysterious feast";
            this.ForestFeast = _loc1_;
            BindingManager.executeBindings(this, "ForestFeast", this.ForestFeast);
            return _loc1_;
        }

        private function _Main_Locations52_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Forest";
            this.ForestHub = _loc1_;
            BindingManager.executeBindings(this, "ForestHub", this.ForestHub);
            return _loc1_;
        }

        private function _Main_Species13_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "fox";
            _loc1_.baseHeight = 60;
            _loc1_.furBack = "red";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "red";
            this.Fox = _loc1_;
            BindingManager.executeBindings(this, "Fox", this.Fox);
            return _loc1_;
        }

        private function _Main_Locations78_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Strange Farm";
            this.FruitFarm = _loc1_;
            BindingManager.executeBindings(this, "FruitFarm", this.FruitFarm);
            return _loc1_;
        }

        private function _Main_Locations23_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "General store";
            this.GeneralStore = _loc1_;
            BindingManager.executeBindings(this, "GeneralStore", this.GeneralStore);
            return _loc1_;
        }

        private function _Main_Locations56_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Gingerbread House";
            _loc1_.Description = "Defying all logic a family sized cottage made entirely out of gingerbread and various confecions has been built in a hidden corner of the forest. ";
            this.GingerbreadHouse = _loc1_;
            BindingManager.executeBindings(this, "GingerbreadHouse", this.GingerbreadHouse);
            return _loc1_;
        }

        private function _Main_Enemies46_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "witch";
            _loc1_.description = "Your opponent is a hunched over witch with an evil grin and a cackling laugh. She\'s wielding a gnarled stick at you in a menacing manner. ";
            _loc1_.STR = 5;
            _loc1_.AGI = 15;
            _loc1_.INT = 25;
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 120;
            _loc1_.level = 4;
            _loc1_.GLD = 25;
            _loc1_.XP = 20;
            this.GingerbreadWitch = _loc1_;
            BindingManager.executeBindings(this, "GingerbreadWitch", this.GingerbreadWitch);
            return _loc1_;
        }

        private function _Main_Enemies27_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "glutton separatist";
            _loc1_.voreable = true;
            _loc1_.weight = 250;
            _loc1_.STR = 45;
            _loc1_.AGI = 15;
            _loc1_.INT = 15;
            _loc1_.DEF = 4;
            _loc1_.maxHEA = 250;
            _loc1_.level = 9;
            _loc1_.GLD = 35;
            _loc1_.XP = 70;
            this.GluttonSeparatist = _loc1_;
            BindingManager.executeBindings(this, "GluttonSeparatist", this.GluttonSeparatist);
            return _loc1_;
        }

        private function _Main_Enemies48_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "glutton separatist";
            _loc1_.voreable = true;
            _loc1_.weight = 250;
            _loc1_.STR = 45;
            _loc1_.AGI = 15;
            _loc1_.INT = 15;
            _loc1_.DEF = 4;
            _loc1_.maxHEA = 250;
            _loc1_.level = 9;
            _loc1_.GLD = 35;
            _loc1_.XP = 70;
            this.GluttonSeparatistBoss = _loc1_;
            BindingManager.executeBindings(this, "GluttonSeparatistBoss", this.GluttonSeparatistBoss);
            return _loc1_;
        }

        private function _Main_Species36_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "goat";
            _loc1_.baseHeight = 63;
            _loc1_.foot = "hoof";
            _loc1_.feet = "hooves";
            _loc1_.hand = "hand";
            _loc1_.hands = "hands";
            _loc1_.furBack = "white";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "white";
            this.Goat = _loc1_;
            BindingManager.executeBindings(this, "Goat", this.Goat);
            return _loc1_;
        }

        private function _Main_Enemies7_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "Gorged Cheetah";
            _loc1_.voreable = true;
            _loc1_.weight = 120;
            _loc1_.STR = 7;
            _loc1_.AGI = 18;
            _loc1_.INT = 10;
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 60;
            _loc1_.level = 2;
            _loc1_.GLD = 3;
            _loc1_.XP = 6;
            this.GorgedCheetah = _loc1_;
            BindingManager.executeBindings(this, "GorgedCheetah", this.GorgedCheetah);
            return _loc1_;
        }

        private function _Main_Items4_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "bunch of grapes";
            _loc1_.Value = 2;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A bunch of large green grapes. ";
            _loc1_.itemUse = "You pull off grapes bigger than your thumb and practice tossing them in the air and catching them in your mouth. You even catch most of them! ";
            _loc1_.eat = 2;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 1;
            _loc1_.Heal = 6;
            this.Grapes = _loc1_;
            BindingManager.executeBindings(this, "Grapes", this.Grapes);
            return _loc1_;
        }

        private function _Main_Locations76_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Grasslands";
            this.GrasslandsEvent = _loc1_;
            BindingManager.executeBindings(this, "GrasslandsEvent", this.GrasslandsEvent);
            return _loc1_;
        }

        private function _Main_Items66_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "great club";
            _loc1_.Value = 15;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "This huge pillar of wood has a long, narrow end that could, hypothetically, allow it to be wielded as a club. You\'d just have to be extremely strong to manage to actually use it. ";
            _loc1_.itemUse = "You take the massive club up, resting it on one of your broad shoulders. You feel like you could level a building with this thing. ";
            _loc1_.attackDescription = "You smash your enemy, ";
            _loc1_.WEAd = 4;
            _loc1_.WEAr = 12;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.6;
            this.GreatClub = _loc1_;
            BindingManager.executeBindings(this, "GreatClub", this.GreatClub);
            return _loc1_;
        }

        private function _Main_Species41_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "grey kangaroo";
            _loc1_.baseHeight = 65;
            _loc1_.furBack = "grey";
            _loc1_.furBelly = "grey";
            _loc1_.furHead = "grey";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.GreyKangaroo = _loc1_;
            BindingManager.executeBindings(this, "GreyKangaroo", this.GreyKangaroo);
            return _loc1_;
        }

        private function _Main_Locations22_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Grocery store";
            this.GroceryStore = _loc1_;
            BindingManager.executeBindings(this, "GroceryStore", this.GroceryStore);
            return _loc1_;
        }

        private function _Main_Items21_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "ham sandwich";
            _loc1_.Value = 3;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A thick ham sandwich complete with lettuce, cheese, and tomato. ";
            _loc1_.itemUse = "You pull out the thick ham sandwich, and after figuring out how to get it to fit in your mouth, you chow down on it. ";
            _loc1_.eat = 4;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 3;
            _loc1_.Heal = 8;
            this.HamSandwich = _loc1_;
            BindingManager.executeBindings(this, "HamSandwich", this.HamSandwich);
            return _loc1_;
        }

        private function _Main_Species5_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "hawk";
            _loc1_.baseHeight = 64;
            _loc1_.furBack = "brown";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "brown";
            _loc1_.foot = "talon";
            _loc1_.feet = "talons";
            _loc1_.hand = "wing";
            _loc1_.hands = "wings";
            _loc1_.mouth = "beak";
            _loc1_.teeth = "beak";
            _loc1_.fur = "feathers";
            _loc1_.furred = "feathered";
            _loc1_.furry = "feathery";
            this.Hawk = _loc1_;
            BindingManager.executeBindings(this, "Hawk", this.Hawk);
            return _loc1_;
        }

        private function _Main_Spells14_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "lesser heal";
            _loc1_.iconType = "white";
            _loc1_.level = 1;
            _loc1_.manaCost = 5;
            _loc1_.Value = 25;
            _loc1_.requirementINT = 20;
            _loc1_.damage = 1;
            _loc1_.damageRange = 4;
            _loc1_.spellType = "heal";
            _loc1_.castableOOC = true;
            _loc1_.description = "Restore a small number of your injuries. ";
            _loc1_.descriptionCast = "You are enveloped in a swirl of green light, ";
            this.Heal1 = _loc1_;
            BindingManager.executeBindings(this, "Heal1", this.Heal1);
            return _loc1_;
        }

        private function _Main_Spells15_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "heal";
            _loc1_.iconType = "white";
            _loc1_.level = 2;
            _loc1_.manaCost = 23;
            _loc1_.Value = 43;
            _loc1_.requirementINT = 40;
            _loc1_.damage = 4;
            _loc1_.damageRange = 4;
            _loc1_.spellType = "heal";
            _loc1_.castableOOC = true;
            _loc1_.description = "Restore a moderate number of your injuries. ";
            _loc1_.descriptionCast = "You are enveloped in a swirling miasma of green light, ";
            this.Heal2 = _loc1_;
            BindingManager.executeBindings(this, "Heal2", this.Heal2);
            return _loc1_;
        }

        private function _Main_Items59_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "heavy club";
            _loc1_.Value = 16;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A very hefty hunk of wood with a rudimentary handle carved out of the smaller end and metal banding at the business end. ";
            _loc1_.itemUse = "You smack the heavy club into the palm of your hand. What it lacks in finesse it makes up for in menace. ";
            _loc1_.attackDescription = "You bash your enemy with a very meaty *thwack*, ";
            _loc1_.WEAd = 1;
            _loc1_.WEAr = 8;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.3;
            this.HeavyClub = _loc1_;
            BindingManager.executeBindings(this, "HeavyClub", this.HeavyClub);
            return _loc1_;
        }

        private function _Main_Items65_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "heavy lance";
            _loc1_.Value = 49;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "Basically a long wooden spear that slowly tapers to a metal capped point. It\'s quite heavy, feeling very reliable. ";
            _loc1_.itemUse = "You lift the heavy lance up in both your hands. It\'s heavy and study design make you feel very powerful wielding it, even if it\'s a bit impractical to use. ";
            _loc1_.attackDescription = "You jab your enemy, ";
            _loc1_.WEAd = 2;
            _loc1_.WEAr = 12;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.4;
            this.HeavyLance = _loc1_;
            BindingManager.executeBindings(this, "HeavyLance", this.HeavyLance);
            return _loc1_;
        }

        private function _Main_Locations59_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Hills";
            this.HillsEvent = _loc1_;
            BindingManager.executeBindings(this, "HillsEvent", this.HillsEvent);
            return _loc1_;
        }

        private function _Main_Locations58_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Hills";
            this.HillsHub = _loc1_;
            BindingManager.executeBindings(this, "HillsHub", this.HillsHub);
            return _loc1_;
        }

        private function _Main_Species56_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "hippo";
            _loc1_.baseHeight = 79;
            _loc1_.furBack = "reddish brown";
            _loc1_.furBelly = "brownish pink";
            _loc1_.furHead = "reddish brown";
            _loc1_.fur = "skin";
            _loc1_.furred = "skinned";
            _loc1_.furry = "skinned";
            _loc1_.foot = "foot";
            _loc1_.feet = "feet";
            this.Hippo = _loc1_;
            BindingManager.executeBindings(this, "Hippo", this.Hippo);
            return _loc1_;
        }

        private function _Main_Enemies15_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "honey Slime";
            _loc1_.playerEscapeFail = "You cannot seem to escape the sticky clutches of the honey slime as it lumbers towards you in resolution! ";
            _loc1_.playerEscape = "Your trudging, amorphous sweetie cannot catch up with you. ";
            _loc1_.grappleEscapeFail = "However you wriggle, the sticky honey seems to grasp you firmly. ";
            _loc1_.grappleEscapeSucceed = "You tear yourself from the sticky honey and roll away to get some distance. ";
            _loc1_.victory = "The enfeebled slime begins quivering and slowly dissolves into an innocuous honey pool! ";
            _loc1_.STR = 15;
            _loc1_.AGI = 10;
            _loc1_.INT = 15;
            _loc1_.DEF = 1;
            _loc1_.maxHEA = 250;
            _loc1_.level = 4;
            _loc1_.itemChance = 7;
            _loc1_.itemFound = "You find a wooden honey dipper in the honey lumps! ";
            _loc1_.GLD = 6;
            _loc1_.XP = 16;
            this.HoneySlime = _loc1_;
            BindingManager.executeBindings(this, "HoneySlime", this.HoneySlime);
            return _loc1_;
        }

        private function _Main_Species37_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "horse";
            _loc1_.baseHeight = 76;
            _loc1_.foot = "hoof";
            _loc1_.feet = "hooves";
            _loc1_.hand = "hand";
            _loc1_.hands = "hands";
            _loc1_.furBack = "beige";
            _loc1_.furBelly = "beige";
            _loc1_.furHead = "beige";
            _loc1_.hair = "mane";
            this.Horse = _loc1_;
            BindingManager.executeBindings(this, "Horse", this.Horse);
            return _loc1_;
        }

        private function _Main_Locations14_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Hospital";
            this.Hospital = _loc1_;
            BindingManager.executeBindings(this, "Hospital", this.Hospital);
            return _loc1_;
        }

        private function _Main_Locations15_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "reception desk";
            this.HospitalDesk = _loc1_;
            BindingManager.executeBindings(this, "HospitalDesk", this.HospitalDesk);
            return _loc1_;
        }

        private function _Main_Locations16_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "infirmary";
            this.HospitalInfirmary = _loc1_;
            BindingManager.executeBindings(this, "HospitalInfirmary", this.HospitalInfirmary);
            return _loc1_;
        }

        private function _Main_Locations17_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Doctor\'s office";
            this.HospitalOffice = _loc1_;
            BindingManager.executeBindings(this, "HospitalOffice", this.HospitalOffice);
            return _loc1_;
        }

        private function _Main_Items99_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "hunter\'s garb";
            _loc1_.Value = 350;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "A dark, feathered set of leathers designed to blend into the jungle environment, this garb has been blessed with the spirit of a skulking predator. ";
            _loc1_.itemUse = "You don the garb, and get the strange urge to stalk small animals from the shadows. ";
            _loc1_.Defense = 2;
            _loc1_.damageStat = "AGI";
            _loc1_.damageScaling = 0.1;
            this.HuntersGarb = _loc1_;
            BindingManager.executeBindings(this, "HuntersGarb", this.HuntersGarb);
            return _loc1_;
        }

        private function _Main_Enemies42_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "hydra";
            _loc1_.STR = 60;
            _loc1_.AGI = 40;
            _loc1_.INT = 20;
            _loc1_.DEF = 5;
            _loc1_.maxHEA = 400;
            _loc1_.level = 15;
            _loc1_.GLD = 150;
            _loc1_.XP = 300;
            this.Hydra = _loc1_;
            BindingManager.executeBindings(this, "Hydra", this.Hydra);
            return _loc1_;
        }

        private function _Main_Locations84_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "gathered crowd";
            this.HydraEvent = _loc1_;
            BindingManager.executeBindings(this, "HydraEvent", this.HydraEvent);
            return _loc1_;
        }

        private function _Main_DamageType5_i():DamageType {
            var _loc1_:DamageType = null;
            _loc1_ = new DamageType();
            _loc1_.name = "ice";
            this.IceDamage = _loc1_;
            BindingManager.executeBindings(this, "IceDamage", this.IceDamage);
            return _loc1_;
        }

        private function _Main_Items83_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "an";
            _loc1_.Name = "ice wand";
            _loc1_.Value = 62;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A short straight metal rod, freezing cold to the touch and surrounded by a cloud of frozen mist. ";
            _loc1_.itemUse = "You grip the wand in your hand and after a furtive look around. For a brief panicked moment your tongue sticks to the rod before you manage to pull yourself free. ";
            _loc1_.attackDescription = "A small shard of ice arcs towards your enemy, ";
            _loc1_.WEAd = 2;
            _loc1_.WEAr = 4;
            _loc1_.damageStat = "INT";
            _loc1_.damageScaling = 0.75;
            this.IceWand = _loc1_;
            BindingManager.executeBindings(this, "IceWand", this.IceWand);
            return _loc1_;
        }

        private function _Main_Locations64_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "insect hive";
            this.InsectHive = _loc1_;
            BindingManager.executeBindings(this, "InsectHive", this.InsectHive);
            return _loc1_;
        }

        private function _Main_Items71_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "ironfist pebbles";
            _loc1_.Value = 750;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A pair of small pebbled enchanted with an earthen spirit. Holding them in clenched fists makes the bearer\'s hands turn hard as steel. ";
            _loc1_.itemUse = "You clench the pebbles in your hands, and feel them stiffen as they turn a more metalic shade. ";
            _loc1_.attackDescription = "You bash your enemy with your iron fists, ";
            _loc1_.WEAd = 1;
            _loc1_.WEAr = 4;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 1;
            this.IronfistPebbles = _loc1_;
            BindingManager.executeBindings(this, "IronfistPebbles", this.IronfistPebbles);
            return _loc1_;
        }

        private function _Main_Locations97_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Jungle";
            this.JungleEvent = _loc1_;
            BindingManager.executeBindings(this, "JungleEvent", this.JungleEvent);
            return _loc1_;
        }

        private function _Main_Locations96_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Jungle";
            this.JungleHub = _loc1_;
            BindingManager.executeBindings(this, "JungleHub", this.JungleHub);
            return _loc1_;
        }

        private function _Main_Items46_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "L. health potion";
            _loc1_.Value = 15;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "health potion";
            _loc1_.Description = "A small jug of red liquid. ";
            _loc1_.itemUse = "You chug down the thick red liquid and start feeling much better already. Watermelon flavored! ";
            _loc1_.drink = 2;
            _loc1_.StackLimit = 5;
            _loc1_.Heal = 75;
            this.LargeHealthPotion = _loc1_;
            BindingManager.executeBindings(this, "LargeHealthPotion", this.LargeHealthPotion);
            return _loc1_;
        }

        private function _Main_Items49_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "L. mana potion";
            _loc1_.Value = 30;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "mana potion";
            _loc1_.Description = "A small jug of blue liquid. ";
            _loc1_.itemUse = "You chug down the thick blueish liquid and start feeling much more energized already. Plum flavored? ";
            _loc1_.drink = 2;
            _loc1_.StackLimit = 5;
            _loc1_.Mana = 60;
            this.LargeManaPotion = _loc1_;
            BindingManager.executeBindings(this, "LargeManaPotion", this.LargeManaPotion);
            return _loc1_;
        }

        private function _Main_Items56_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "large wyvern egg";
            _loc1_.Value = 30;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "other";
            _loc1_.Status = true;
            _loc1_.StatusTime = 300;
            _loc1_.Description = "An impressively large mottled grey egg that you got from a particularly large wyvern\'s nest. It could be a good meal, but someone might want it. ";
            _loc1_.itemUse = "You crack open the egg shell and gulp down the egg, chewing as you get to the large, thick yolk. It was definitely magical, and you feel healthy and hardy. ";
            _loc1_.drink = 15;
            _loc1_.Calories = 10;
            _loc1_.Heal = 70;
            _loc1_.Stamina = 30;
            this.LargeWyvernEgg = _loc1_;
            BindingManager.executeBindings(this, "LargeWyvernEgg", this.LargeWyvernEgg);
            return _loc1_;
        }

        private function _Main_Items88_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "some";
            _loc1_.Name = "leather armor";
            _loc1_.Value = 12;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "A set of ragged leather armor. ";
            _loc1_.itemUse = "You slip into the leather armor and adjust the straps appropriately. Doesn\'t seem very effective, but it\'s better than nothing. ";
            _loc1_.Defense = 1;
            this.LeatherArmor = _loc1_;
            BindingManager.executeBindings(this, "LeatherArmor", this.LeatherArmor);
            return _loc1_;
        }

        private function _Main_Enemies2_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "Lemon Slime";
            _loc1_.description = "Your opponent is a large gelatinous cube about 3 feet long on each side. The translucent yellow blob smells deliciously lemony! ";
            _loc1_.playerEscape = "You flee from the battle. The slime chases after you in a weird jumping/sloshing motion, like an ocean wave on land, but it can\'t manage to keep up with you. ";
            _loc1_.STR = 5;
            _loc1_.AGI = 10;
            _loc1_.INT = 10;
            _loc1_.DEF = 4;
            _loc1_.maxHEA = 70;
            _loc1_.level = 1;
            _loc1_.GLD = 4;
            _loc1_.XP = 8;
            this.LemonSlime = _loc1_;
            BindingManager.executeBindings(this, "LemonSlime", this.LemonSlime);
            return _loc1_;
        }

        private function _Main_Species29_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "leopard";
            _loc1_.baseHeight = 68;
            _loc1_.furBack = "black and gold rossetted";
            _loc1_.furBelly = "black-white";
            _loc1_.furHead = "black-gold";
            this.Leopard = _loc1_;
            BindingManager.executeBindings(this, "Leopard", this.Leopard);
            return _loc1_;
        }

        private function _Main_DamageType9_i():DamageType {
            var _loc1_:DamageType = null;
            _loc1_ = new DamageType();
            _loc1_.name = "life";
            this.LifeDamage = _loc1_;
            BindingManager.executeBindings(this, "LifeDamage", this.LifeDamage);
            return _loc1_;
        }

        private function _Main_Items58_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "light club";
            _loc1_.Value = 10;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A rather hefty hunk of wood with a rudimentary handle carved out of the smaller end. It\'s not very fancy, but it looks menacing enough. ";
            _loc1_.itemUse = "You smack the club into the palm of your hand, making a satisfying and threatening meaty *thwack* sound. ";
            _loc1_.attackDescription = "You bash your enemy with a meaty *thwack*, ";
            _loc1_.WEAd = 2;
            _loc1_.WEAr = 4;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.2;
            this.LightClub = _loc1_;
            BindingManager.executeBindings(this, "LightClub", this.LightClub);
            return _loc1_;
        }

        private function _Main_Items75_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "light lance";
            _loc1_.Value = 49;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "Basically a long wooden spear that slowly tapers to a metal capped point. While it\'s technically light for a lance, it\'s still pretty damn heavy. ";
            _loc1_.attackDescription = "You jab your enemy, ";
            _loc1_.WEAd = 2;
            _loc1_.WEAr = 12;
            _loc1_.damageStat = "AGI";
            _loc1_.damageScaling = 0.4;
            this.LightLance = _loc1_;
            BindingManager.executeBindings(this, "LightLance", this.LightLance);
            return _loc1_;
        }

        private function _Main_Spells4_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "lightning bolt";
            _loc1_.iconType = "black";
            _loc1_.level = 1;
            _loc1_.manaCost = 7;
            _loc1_.Value = 13;
            _loc1_.requirementINT = 30;
            _loc1_.statusEffect = "stun";
            _loc1_.statusTime = 2;
            _loc1_.damage = 3;
            _loc1_.damageRange = 8;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Strikes your enemy with a bolt of lightning. ";
            _loc1_.descriptionCast = "A bolt of lightning fires from your fingertips towards your enemy, ";
            this.LightningBolt1 = _loc1_;
            BindingManager.executeBindings(this, "LightningBolt1", this.LightningBolt1);
            return _loc1_;
        }

        private function _Main_Spells5_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "lightning cage";
            _loc1_.iconType = "black";
            _loc1_.level = 3;
            _loc1_.manaCost = 21;
            _loc1_.Value = 40;
            _loc1_.requirementINT = 50;
            _loc1_.statusEffect = "stun";
            _loc1_.statusTime = 2;
            _loc1_.damage = 2;
            _loc1_.damageRange = 25;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Surround your foe then strike them with crackling lightning. ";
            _loc1_.descriptionCast = "You raise your hand up, then swing it down. Four pillars of lightning strike the ground, then let off a blinding shower of sparks as lightning strikes inwards at your foe, ";
            this.LightningBolt3 = _loc1_;
            BindingManager.executeBindings(this, "LightningBolt3", this.LightningBolt3);
            return _loc1_;
        }

        private function _Main_Spells6_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "heaven\'s lightning";
            _loc1_.iconType = "black";
            _loc1_.level = 5;
            _loc1_.manaCost = 50;
            _loc1_.Value = 80;
            _loc1_.requirementINT = 70;
            _loc1_.statusEffect = "stun";
            _loc1_.statusTime = 3;
            _loc1_.damage = 15;
            _loc1_.damageRange = 10;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Strike your opponent with the thunder of the gods. ";
            this.LightningBolt5 = _loc1_;
            BindingManager.executeBindings(this, "LightningBolt5", this.LightningBolt5);
            return _loc1_;
        }

        private function _Main_DamageType6_i():DamageType {
            var _loc1_:DamageType = null;
            _loc1_ = new DamageType();
            _loc1_.name = "lightning";
            this.LightningDamage = _loc1_;
            BindingManager.executeBindings(this, "LightningDamage", this.LightningDamage);
            return _loc1_;
        }

        private function _Main_Items82_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "lightning wand";
            _loc1_.Value = 92;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A short gnarled wooden wand with veins of dark metal that occasional arcs off electricity. ";
            _loc1_.itemUse = "You swish and flick the wand around in a small flourish and manage to only slightly electrocute yourself. ";
            _loc1_.attackDescription = "A thin bolt of lightning arcs towards your enemy, ";
            _loc1_.WEAd = 1;
            _loc1_.WEAr = 4;
            _loc1_.damageStat = "INT";
            _loc1_.damageScaling = 0.8;
            this.LightningWand = _loc1_;
            BindingManager.executeBindings(this, "LightningWand", this.LightningWand);
            return _loc1_;
        }

        private function _Main_Species30_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "lion";
            _loc1_.fName = "lioness";
            _loc1_.baseHeight = 71;
            _loc1_.furBack = "golden";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "brown";
            _loc1_.hair = "mane";
            this.Lion = _loc1_;
            BindingManager.executeBindings(this, "Lion", this.Lion);
            return _loc1_;
        }

        private function _Main_Items94_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "some";
            _loc1_.Name = "mage apprentice robes";
            _loc1_.Value = 15;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "A set of mage\'s robes designed for a learning magic user. Made of comfortable cloth and imbued with a slight magical enchantment. ";
            _loc1_.itemUse = "You drape the robes down your body. You look rather silly but you can immediately feel the slightest tinge of power surging through you. ";
            _loc1_.Defense = 0;
            _loc1_.manaBuff = 15;
            this.MageApprenticeRobe = _loc1_;
            BindingManager.executeBindings(this, "MageApprenticeRobe", this.MageApprenticeRobe);
            return _loc1_;
        }

        private function _Main_Locations32_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "mage\'s guild";
            this.MageGuild = _loc1_;
            BindingManager.executeBindings(this, "MageGuild", this.MageGuild);
            return _loc1_;
        }

        private function _Main_Locations37_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "altertarium";
            this.MageGuildAlteration = _loc1_;
            BindingManager.executeBindings(this, "MageGuildAlteration", this.MageGuildAlteration);
            return _loc1_;
        }

        private function _Main_Locations36_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "destructatorium";
            this.MageGuildDestruction = _loc1_;
            BindingManager.executeBindings(this, "MageGuildDestruction", this.MageGuildDestruction);
            return _loc1_;
        }

        private function _Main_Locations35_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "study hall";
            this.MageGuildHall = _loc1_;
            BindingManager.executeBindings(this, "MageGuildHall", this.MageGuildHall);
            return _loc1_;
        }

        private function _Main_Locations33_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "library";
            this.MageGuildLibrary = _loc1_;
            BindingManager.executeBindings(this, "MageGuildLibrary", this.MageGuildLibrary);
            return _loc1_;
        }

        private function _Main_Locations38_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "restoratorium";
            this.MageGuildRestoration = _loc1_;
            BindingManager.executeBindings(this, "MageGuildRestoration", this.MageGuildRestoration);
            return _loc1_;
        }

        private function _Main_Locations34_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "apothecary";
            this.MageGuildStore = _loc1_;
            BindingManager.executeBindings(this, "MageGuildStore", this.MageGuildStore);
            return _loc1_;
        }

        private function _Main_Enemies31_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.voreable = true;
            _loc1_.weight = 120;
            _loc1_.itemFound = "The ugly wand is still in as good a shape as could be expected. ";
            _loc1_.STR = 10;
            _loc1_.AGI = 25;
            _loc1_.INT = 65;
            _loc1_.attackStat = "INT";
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 250;
            _loc1_.level = 10;
            _loc1_.GLD = 40;
            _loc1_.XP = 75;
            _loc1_.itemChance = 15;
            this.MagicalFur = _loc1_;
            BindingManager.executeBindings(this, "MagicalFur", this.MagicalFur);
            return _loc1_;
        }

        private function _Main_Items54_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "magical honey";
            _loc1_.Value = 30;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "other";
            _loc1_.Status = true;
            _loc1_.StatusTime = 300;
            _loc1_.Description = "A bit of honey you stole from a feeder ant and stowed in an egg shell. It\'s heavy for its size, and is quite magical. ";
            _loc1_.drink = 15;
            _loc1_.Calories = 9;
            this.MagicalHoney = _loc1_;
            BindingManager.executeBindings(this, "MagicalHoney", this.MagicalHoney);
            return _loc1_;
        }

        private function _Main_Species10_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "magpie";
            _loc1_.baseHeight = 58;
            _loc1_.furBack = "black";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "black";
            _loc1_.foot = "foot";
            _loc1_.feet = "feet";
            _loc1_.hand = "wing";
            _loc1_.hands = "wings";
            _loc1_.mouth = "beak";
            _loc1_.teeth = "beak";
            _loc1_.fur = "feathers";
            _loc1_.furred = "feathered";
            _loc1_.furry = "feathery";
            this.Magpie = _loc1_;
            BindingManager.executeBindings(this, "Magpie", this.Magpie);
            return _loc1_;
        }

        private function _Main_Gender1_i():Gender {
            var _loc1_:Gender = null;
            _loc1_ = new Gender();
            _loc1_.name = "male";
            _loc1_.man = "man";
            _loc1_.boy = "boy";
            _loc1_.sir = "sir";
            _loc1_.mister = "mister";
            _loc1_.brother = "brother";
            _loc1_.guy = "guy";
            _loc1_.fella = "fella";
            _loc1_.buddy = "buddy";
            _loc1_.gentleman = "gentleman";
            _loc1_.lad = "lad";
            _loc1_.laddie = "laddie";
            _loc1_.sport = "sport";
            _loc1_.he = "he";
            _loc1_.him = "him";
            _loc1_.himself = "himself";
            _loc1_.his = "his";
            this.Male = _loc1_;
            BindingManager.executeBindings(this, "Male", this.Male);
            return _loc1_;
        }

        private function _Main_Enemies37_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "manticore";
            _loc1_.voreable = true;
            _loc1_.weight = 650;
            _loc1_.victory = "With your last attack, the beast lets out a moan of pain, then collapses onto its side, its heavy chest rising and falling in panting breaths. ";
            _loc1_.STR = 50;
            _loc1_.AGI = 40;
            _loc1_.INT = 30;
            _loc1_.DEF = 6;
            _loc1_.maxHEA = 400;
            _loc1_.level = 13;
            _loc1_.GLD = 70;
            _loc1_.XP = 100;
            this.Manticore = _loc1_;
            BindingManager.executeBindings(this, "Manticore", this.Manticore);
            return _loc1_;
        }

        private function _Main_Locations9_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "market square";
            this.MarketSquare = _loc1_;
            BindingManager.executeBindings(this, "MarketSquare", this.MarketSquare);
            return _loc1_;
        }

        private function _Main_Enemies9_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "meat monster man";
            _loc1_.description = "Your opponent appears to be a six foot tall semi-sentient animated golem made of several different types of cooked meat. ";
            _loc1_.victory = "Your final attack causes what remains of the meat monster man to fall to the ground, apparently becoming nothing more than a pile of regular meat... it seems. ";
            _loc1_.STR = 15;
            _loc1_.AGI = 10;
            _loc1_.INT = 5;
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 130;
            _loc1_.level = 3;
            _loc1_.GLD = 8;
            _loc1_.XP = 10;
            _loc1_.itemChance = 30;
            this.MeatMonster = _loc1_;
            BindingManager.executeBindings(this, "MeatMonster", this.MeatMonster);
            return _loc1_;
        }

        private function _Main_Items22_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "meatball sub";
            _loc1_.Value = 3;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A foot long submarine sandwich full of meatballs and dripping with marinara sauce. You always wondered what a submarine was though. ";
            _loc1_.itemUse = "You grab the foot long sub sandwich and start eating it from end to end, smearing marinara sauce all over your face and spilling some on the ground. ";
            _loc1_.eat = 4;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 3;
            _loc1_.Heal = 8;
            this.MeatballSub = _loc1_;
            BindingManager.executeBindings(this, "MeatballSub", this.MeatballSub);
            return _loc1_;
        }

        private function _Main_Items45_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "M. health potion";
            _loc1_.Value = 7;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "health potion";
            _loc1_.Description = "A vial of red liquid. ";
            _loc1_.itemUse = "You chug down the thick red liquid and start feeling better already. Strawberry flavored! ";
            _loc1_.drink = 1;
            _loc1_.StackLimit = 5;
            _loc1_.Heal = 50;
            this.MediumHealthPotion = _loc1_;
            BindingManager.executeBindings(this, "MediumHealthPotion", this.MediumHealthPotion);
            return _loc1_;
        }

        private function _Main_Items48_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "M. mana potion";
            _loc1_.Value = 14;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "mana potion";
            _loc1_.Description = "A vial of blue liquid. ";
            _loc1_.itemUse = "You chug down the thick blueish liquid and start feeling more energized already. Blueberry flavored! ";
            _loc1_.drink = 1;
            _loc1_.StackLimit = 5;
            _loc1_.Mana = 40;
            this.MediumManaPotion = _loc1_;
            BindingManager.executeBindings(this, "MediumManaPotion", this.MediumManaPotion);
            return _loc1_;
        }

        private function _Main_Items42_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "milk bottle";
            _loc1_.Value = 2;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "drink";
            _loc1_.Description = "A glass bottle filled with milk. How it manages to stay cool despite lack of refrigeration is a bit of a mystery. ";
            _loc1_.itemUse = "You swallow several mouthfuls of cool refreshing milk. ";
            _loc1_.drink = 3;
            _loc1_.Calories = 1.5;
            _loc1_.Stamina = 25;
            _loc1_.Heal = 3;
            this.MilkBottle = _loc1_;
            BindingManager.executeBindings(this, "MilkBottle", this.MilkBottle);
            return _loc1_;
        }

        private function _Main_Items43_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "milk jug";
            _loc1_.Value = 1.75;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "drink";
            _loc1_.Description = "A metal jug filled with milk. How it manages to stay cool despite lack of refrigeration is a bit of a mystery. ";
            _loc1_.itemUse = "You swallow several mouthfuls of cool refreshing milk. ";
            _loc1_.drink = 3;
            _loc1_.Charges = 5;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 1.5;
            _loc1_.Stamina = 25;
            _loc1_.Heal = 3;
            this.MilkJug = _loc1_;
            BindingManager.executeBindings(this, "MilkJug", this.MilkJug);
            return _loc1_;
        }

        private function _Main_Enemies17_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "malevolent milk machine";
            _loc1_.playerEscape = "You turn to flee from the mechanical monstrosity and manage to outrun it as it slowly trundles after you, spitting out steam and angrily flailing it\'s arms all the while. ";
            _loc1_.victory = "The large machine squeals and hisses as its mechanical arms flail about until, with a final crunching, grinding, exploding noise, it falls still. ";
            _loc1_.itemFound = "With one last cough and sputter, a single milk bottle falls out of a hatch on the side of the machine and rolls towards you. ";
            _loc1_.STR = 30;
            _loc1_.AGI = 5;
            _loc1_.INT = 5;
            _loc1_.DEF = 8;
            _loc1_.maxHEA = 150;
            _loc1_.level = 4;
            _loc1_.GLD = 15;
            _loc1_.XP = 35;
            _loc1_.itemChance = 60;
            this.MilkMachine = _loc1_;
            BindingManager.executeBindings(this, "MilkMachine", this.MilkMachine);
            return _loc1_;
        }

        private function _Main_Locations63_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "mountain";
            this.MountainEvent = _loc1_;
            BindingManager.executeBindings(this, "MountainEvent", this.MountainEvent);
            return _loc1_;
        }

        private function _Main_Locations62_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "mountain";
            this.MountainHub = _loc1_;
            BindingManager.executeBindings(this, "MountainHub", this.MountainHub);
            return _loc1_;
        }

        private function _Main_Species46_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "mouse";
            _loc1_.baseHeight = 58;
            _loc1_.furBack = "white";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "white";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.Mouse = _loc1_;
            BindingManager.executeBindings(this, "Mouse", this.Mouse);
            return _loc1_;
        }

        private function _Main_Enemies32_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.voreable = true;
            _loc1_.weight = 250;
            _loc1_.itemFound = "Looks like that gigantic club is still in usable condition, too. You take it with you. ";
            _loc1_.STR = 55;
            _loc1_.AGI = 15;
            _loc1_.INT = 5;
            _loc1_.DEF = 4;
            _loc1_.maxHEA = 250;
            _loc1_.level = 10;
            _loc1_.GLD = 40;
            _loc1_.XP = 75;
            _loc1_.itemChance = 15;
            this.MuscleFur = _loc1_;
            BindingManager.executeBindings(this, "MuscleFur", this.MuscleFur);
            return _loc1_;
        }

        private function _Main_Items77_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "nasty dagger";
            _loc1_.Value = 45;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "This curved dagger has jagged bits of pointy metal on its reverse side. It looks vicious, and is viciously sharp. ";
            _loc1_.itemUse = "You give the dagger a few experimental sweeps, causing it to whistle in the air, then keep it at the ready. ";
            _loc1_.attackDescription = "You jab your enemy, ";
            _loc1_.WEAd = 1;
            _loc1_.WEAr = 10;
            _loc1_.damageStat = "AGI";
            _loc1_.damageScaling = 0.5;
            this.NastyDagger = _loc1_;
            BindingManager.executeBindings(this, "NastyDagger", this.NastyDagger);
            return _loc1_;
        }

        private function _Main_Gender3_i():Gender {
            var _loc1_:Gender = null;
            _loc1_ = new Gender();
            _loc1_.name = "thing";
            _loc1_.man = "thing";
            _loc1_.boy = "thing";
            _loc1_.sir = "...sir";
            _loc1_.mister = "...mister";
            _loc1_.brother = "...brother";
            _loc1_.guy = "thing";
            _loc1_.fella = "thing";
            _loc1_.lad = "thing";
            _loc1_.he = "it";
            _loc1_.him = "it";
            _loc1_.himself = "itself";
            _loc1_.his = "its";
            this.Neutral = _loc1_;
            BindingManager.executeBindings(this, "Neutral", this.Neutral);
            return _loc1_;
        }

        private function _Main_Items6_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "bag of oats";
            _loc1_.Value = 2;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A small bag full of oats. ";
            _loc1_.itemUse = "Although bags of oats are usually meant for work animals, you decide to cram you face into the bag of oats and start chompin\' them down anyway. ";
            _loc1_.eat = 3;
            _loc1_.Charges = 5;
            _loc1_.Calories = 2;
            _loc1_.Heal = 9;
            this.Oats = _loc1_;
            BindingManager.executeBindings(this, "Oats", this.Oats);
            return _loc1_;
        }

        private function _Main_Enemies10_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.article = "an";
            _loc1_.name = "obese Bear";
            _loc1_.voreable = true;
            _loc1_.weight = 160;
            _loc1_.victory = "The obese bear is too weak to continue fight and collapses to the ground with a tremendous thud that nearly shakes you off your feet. ";
            _loc1_.STR = 15;
            _loc1_.AGI = 13;
            _loc1_.INT = 12;
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 70;
            _loc1_.level = 3;
            _loc1_.GLD = 8;
            _loc1_.XP = 15;
            this.ObeseBear = _loc1_;
            BindingManager.executeBindings(this, "ObeseBear", this.ObeseBear);
            return _loc1_;
        }

        private function _Main_Items78_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "an";
            _loc1_.Name = "obsidian tipped spear";
            _loc1_.Value = 65;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "The tip of this wooden spear is a black piece of chipped obsidian. While not exactly a technological marvel, its sharpness is undeniable. ";
            _loc1_.itemUse = "You pick up the spear, and while it\'s not very well made, it\'s obsidian tip is spectacularly sharp and dangerous looking. ";
            _loc1_.attackDescription = "You jab your enemy, ";
            _loc1_.WEAd = 3;
            _loc1_.WEAr = 6;
            _loc1_.damageStat = "AGI";
            _loc1_.damageScaling = 0.5;
            this.ObsidianSpear = _loc1_;
            BindingManager.executeBindings(this, "ObsidianSpear", this.ObsidianSpear);
            return _loc1_;
        }

        private function _Main_Locations86_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "ocean";
            this.OceanEvent = _loc1_;
            BindingManager.executeBindings(this, "OceanEvent", this.OceanEvent);
            return _loc1_;
        }

        private function _Main_Locations85_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "ocean";
            this.OceanHub = _loc1_;
            BindingManager.executeBindings(this, "OceanHub", this.OceanHub);
            return _loc1_;
        }

        private function _Main_Items121_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "an";
            _loc1_.Name = "odd cookie";
            _loc1_.Value = 5;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Special = true;
            _loc1_.type = "food";
            _loc1_.Description = "A small diamond shaped biscuit with white frosting. It looks moist and tempting. ";
            _loc1_.StackLimit = 9;
            this.OddCookie = _loc1_;
            BindingManager.executeBindings(this, "OddCookie", this.OddCookie);
            return _loc1_;
        }

        private function _Main_Species2_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.article = "an";
            _loc1_.speciesName = "orca";
            _loc1_.baseHeight = 76;
            _loc1_.furBack = "black";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "black";
            _loc1_.hand = "fin";
            _loc1_.hands = "fins";
            _loc1_.fur = "skin";
            _loc1_.furred = "skinned";
            _loc1_.furry = "skinned";
            this.Orca = _loc1_;
            BindingManager.executeBindings(this, "Orca", this.Orca);
            return _loc1_;
        }

        private function _Main_Species43_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.article = "an";
            _loc1_.speciesName = "otter";
            _loc1_.baseHeight = 63;
            _loc1_.furBack = "dark brown";
            _loc1_.furBelly = "light brown";
            _loc1_.furHead = "brown";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.Otter = _loc1_;
            BindingManager.executeBindings(this, "Otter", this.Otter);
            return _loc1_;
        }

        private function _Main_Species6_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.article = "an";
            _loc1_.speciesName = "owl";
            _loc1_.baseHeight = 63;
            _loc1_.furBack = "grey";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "grey";
            _loc1_.foot = "talon";
            _loc1_.feet = "talons";
            _loc1_.hand = "wing";
            _loc1_.hands = "wings";
            _loc1_.mouth = "beak";
            _loc1_.teeth = "beak";
            _loc1_.fur = "feathers";
            _loc1_.furred = "feathered";
            _loc1_.furry = "feathery";
            this.Owl = _loc1_;
            BindingManager.executeBindings(this, "Owl", this.Owl);
            return _loc1_;
        }

        private function _Main_Species14_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "painted dog";
            _loc1_.baseHeight = 66;
            _loc1_.furBack = "brown-black-white splotched";
            _loc1_.furBelly = "brown-black-white splotched";
            _loc1_.furHead = "brown-black";
            this.PaintedDog = _loc1_;
            BindingManager.executeBindings(this, "PaintedDog", this.PaintedDog);
            return _loc1_;
        }

        private function _Main_Species53_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "panda";
            _loc1_.baseHeight = 75;
            _loc1_.furBack = "black";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "black";
            this.Panda = _loc1_;
            BindingManager.executeBindings(this, "Panda", this.Panda);
            return _loc1_;
        }

        private function _Main_Species31_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "panther";
            _loc1_.baseHeight = 68;
            _loc1_.furBack = "black";
            _loc1_.furBelly = "black";
            _loc1_.furHead = "black";
            this.Panther = _loc1_;
            BindingManager.executeBindings(this, "Panther", this.Panther);
            return _loc1_;
        }

        private function _Main_Items111_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "naked legs";
            _loc1_.Value = 0;
            _loc1_.Bottom = true;
            _loc1_.type = "pants";
            _loc1_.PoppedDescription = "You\'re nude from the waist down. ";
            _loc1_.Description = "You\'re nude from the waist down. ";
            this.Pantsless = _loc1_;
            BindingManager.executeBindings(this, "Pantsless", this.Pantsless);
            return _loc1_;
        }

        private function _Main_Species7_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "penguin";
            _loc1_.baseHeight = 66;
            _loc1_.furBack = "black";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "black";
            _loc1_.foot = "foot";
            _loc1_.feet = "feet";
            _loc1_.hand = "wing";
            _loc1_.hands = "wings";
            _loc1_.mouth = "beak";
            _loc1_.teeth = "beak";
            _loc1_.fur = "feathers";
            _loc1_.furred = "feathered";
            _loc1_.furry = "feathery";
            this.Penguin = _loc1_;
            BindingManager.executeBindings(this, "Penguin", this.Penguin);
            return _loc1_;
        }

        private function _Main_DamageType2_i():DamageType {
            var _loc1_:DamageType = null;
            _loc1_ = new DamageType();
            _loc1_.name = "piercing";
            this.PiercingDamage = _loc1_;
            BindingManager.executeBindings(this, "PiercingDamage", this.PiercingDamage);
            return _loc1_;
        }

        private function _Main_Species38_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "pig";
            _loc1_.baseHeight = 67;
            _loc1_.foot = "hoof";
            _loc1_.feet = "hooves";
            _loc1_.furBack = "pink";
            _loc1_.furBelly = "pink";
            _loc1_.furHead = "pink";
            _loc1_.fur = "skin";
            _loc1_.furred = "skinned";
            _loc1_.furry = "skinned";
            this.Pig = _loc1_;
            BindingManager.executeBindings(this, "Pig", this.Pig);
            return _loc1_;
        }

        private function _Main_Items92_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a set of";
            _loc1_.Name = "platemail armor";
            _loc1_.Value = 187;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "A set of interconnected metal plates that cover your entire body. ";
            _loc1_.itemUse = "You take quite a while to put on the heavy pieces of plate mail and tighten all the straps as best you can. ";
            _loc1_.Defense = 5;
            this.PlatemailArmor = _loc1_;
            BindingManager.executeBindings(this, "PlatemailArmor", this.PlatemailArmor);
            return _loc1_;
        }

        private function _Main_Items76_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "queen\'s sting";
            _loc1_.Value = 150;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.attackDescription = "You jab your enemy, ";
            _loc1_.attackProc = "stun";
            _loc1_.attackProcChance = 33;
            _loc1_.attackProcPower = 1;
            _loc1_.WEAd = 2;
            _loc1_.WEAr = 4;
            _loc1_.damageStat = "AGI";
            _loc1_.damageScaling = 0.6;
            this.QueensSting = _loc1_;
            BindingManager.executeBindings(this, "QueensSting", this.QueensSting);
            return _loc1_;
        }

        private function _Main_Species47_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "rabbit";
            _loc1_.baseHeight = 63;
            _loc1_.furBack = "grey-brown";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "grey-brown";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.Rabbit = _loc1_;
            BindingManager.executeBindings(this, "Rabbit", this.Rabbit);
            return _loc1_;
        }

        private function _Main_Species44_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "raccoon";
            _loc1_.baseHeight = 63;
            _loc1_.furBack = "grey";
            _loc1_.furBelly = "grey";
            _loc1_.furHead = "grey";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.Raccoon = _loc1_;
            BindingManager.executeBindings(this, "Raccoon", this.Raccoon);
            return _loc1_;
        }

        private function _Main_Items73_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "rapier";
            _loc1_.Value = 37;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A plain iron metal sword. ";
            _loc1_.itemUse = "You give your trusty sword a few flashy swings and almost hurt yourself before deciding to stop showing off. ";
            _loc1_.attackDescription = "You jab your enemy, ";
            _loc1_.WEAd = 2;
            _loc1_.WEAr = 4;
            _loc1_.damageStat = "AGI";
            _loc1_.damageScaling = 0.5;
            this.Rapier = _loc1_;
            BindingManager.executeBindings(this, "Rapier", this.Rapier);
            return _loc1_;
        }

        private function _Main_Species48_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "rat";
            _loc1_.baseHeight = 65;
            _loc1_.furBack = "black";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "black";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.Rat = _loc1_;
            BindingManager.executeBindings(this, "Rat", this.Rat);
            return _loc1_;
        }

        private function _Main_Species8_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "raven";
            _loc1_.baseHeight = 61;
            _loc1_.furBack = "black";
            _loc1_.furBelly = "black";
            _loc1_.furHead = "black";
            _loc1_.foot = "foot";
            _loc1_.feet = "feet";
            _loc1_.hand = "wing";
            _loc1_.hands = "wings";
            _loc1_.mouth = "beak";
            _loc1_.teeth = "beak";
            _loc1_.fur = "feathers";
            _loc1_.furred = "feathered";
            _loc1_.furry = "feathery";
            this.Raven = _loc1_;
            BindingManager.executeBindings(this, "Raven", this.Raven);
            return _loc1_;
        }

        private function _Main_Species42_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "red kangaroo";
            _loc1_.baseHeight = 72;
            _loc1_.furBack = "russet";
            _loc1_.furBelly = "beige";
            _loc1_.furHead = "russet";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.RedKangaroo = _loc1_;
            BindingManager.executeBindings(this, "RedKangaroo", this.RedKangaroo);
            return _loc1_;
        }

        private function _Main_Items105_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "red swim shirt";
            _loc1_.Value = 5;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Top = true;
            _loc1_.Expand = 18;
            _loc1_.type = "shirt";
            this.RedSwimShirt = _loc1_;
            BindingManager.executeBindings(this, "RedSwimShirt", this.RedSwimShirt);
            return _loc1_;
        }

        private function _Main_Spells16_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "healing flow";
            _loc1_.iconType = "white";
            _loc1_.level = 1;
            _loc1_.manaCost = 18;
            _loc1_.Value = 35;
            _loc1_.requirementINT = 35;
            _loc1_.damage = 1;
            _loc1_.damageRange = 4;
            _loc1_.buffAmount = 5;
            _loc1_.buffStat = "REGEN";
            _loc1_.spellType = "buff";
            _loc1_.castableOOC = true;
            _loc1_.description = "Call upon a healing stream to restore yourself gradually. ";
            this.Regenerate2 = _loc1_;
            BindingManager.executeBindings(this, "Regenerate2", this.Regenerate2);
            return _loc1_;
        }

        private function _Main_Locations19_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Restaurant";
            this.Restaurant = _loc1_;
            BindingManager.executeBindings(this, "Restaurant", this.Restaurant);
            return _loc1_;
        }

        private function _Main_Species55_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "rhino";
            _loc1_.baseHeight = 77;
            _loc1_.furBack = "grey";
            _loc1_.furBelly = "grey";
            _loc1_.furHead = "grey";
            _loc1_.fur = "skin";
            _loc1_.furred = "skinned";
            _loc1_.furry = "skinned";
            _loc1_.foot = "foot";
            _loc1_.feet = "feet";
            this.Rhino = _loc1_;
            BindingManager.executeBindings(this, "Rhino", this.Rhino);
            return _loc1_;
        }

        private function _Main_Species9_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "robin";
            _loc1_.baseHeight = 59;
            _loc1_.furBack = "grey";
            _loc1_.furBelly = "red";
            _loc1_.furHead = "black";
            _loc1_.foot = "foot";
            _loc1_.feet = "feet";
            _loc1_.hand = "wing";
            _loc1_.hands = "wings";
            _loc1_.mouth = "beak";
            _loc1_.teeth = "beak";
            _loc1_.fur = "feathers";
            _loc1_.furred = "feathered";
            _loc1_.furry = "feathery";
            this.Robin = _loc1_;
            BindingManager.executeBindings(this, "Robin", this.Robin);
            return _loc1_;
        }

        private function _Main_Enemies40_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "royal guard wasp";
            _loc1_.STR = 60;
            _loc1_.AGI = 50;
            _loc1_.INT = 20;
            _loc1_.DEF = 6;
            _loc1_.maxHEA = 500;
            _loc1_.level = 14;
            _loc1_.GLD = 120;
            _loc1_.XP = 120;
            this.RoyalGuardWasp = _loc1_;
            BindingManager.executeBindings(this, "RoyalGuardWasp", this.RoyalGuardWasp);
            return _loc1_;
        }

        private function _Main_Items55_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "royal jelly";
            _loc1_.Value = 55;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "other";
            _loc1_.Special = true;
            _loc1_.itemUse = "You peel back the wax and find you have to eat this jelatinous honey in bites. Its curious magic flows through you, and you can feel your muscles get bigger and harder. ";
            _loc1_.drink = 40;
            _loc1_.Calories = 24;
            this.RoyalJelly = _loc1_;
            BindingManager.executeBindings(this, "RoyalJelly", this.RoyalJelly);
            return _loc1_;
        }

        private function _Main_Locations82_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "sand mound";
            _loc1_.Description = "A suspicious mound of sand rises out of a sand dune. A tantalizingly suspicious mound! ";
            this.SandMound = _loc1_;
            BindingManager.executeBindings(this, "SandMound", this.SandMound);
            return _loc1_;
        }

        private function _Main_Enemies20_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "sand snake";
            _loc1_.voreable = true;
            _loc1_.weight = 200;
            _loc1_.victory = "Your final hit knocks the serpent back. It rocks back and forth in a stunned daze, before flopping over onto the ground, unconscious. ";
            _loc1_.STR = 18;
            _loc1_.AGI = 18;
            _loc1_.INT = 14;
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 120;
            _loc1_.level = 5;
            _loc1_.GLD = 15;
            _loc1_.XP = 30;
            _loc1_.itemChance = 40;
            this.SandSnake = _loc1_;
            BindingManager.executeBindings(this, "SandSnake", this.SandSnake);
            return _loc1_;
        }

        private function _Main_Items131_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "sandy box";
            _loc1_.Value = 8;
            _loc1_.Useable = true;
            _loc1_.combatUseable = false;
            _loc1_.Consume = true;
            _loc1_.Special = true;
            _loc1_.type = "box";
            _loc1_.Description = "A small box you dug up from the beach. It still leaks a bit of sand when you move it around. Maybe there’s something inside? ";
            _loc1_.itemUse = "Inside the box you find ";
            this.SandyBox = _loc1_;
            BindingManager.executeBindings(this, "SandyBox", this.SandyBox);
            return _loc1_;
        }

        private function _Main_Items23_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "sausage";
            _loc1_.Value = 3;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A greasy smoked sausage. ";
            _loc1_.itemUse = "You toss the juicy sausage up in the air and catch it in your mouth, swallowing it in one bite. ";
            _loc1_.eat = 3;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 1.5;
            _loc1_.Heal = 9;
            this.Sausage = _loc1_;
            BindingManager.executeBindings(this, "Sausage", this.Sausage);
            return _loc1_;
        }

        private function _Main_Items91_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a set of";
            _loc1_.Name = "segmentata armor";
            _loc1_.Value = 125;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "A set of overlapping metal plates for your chest and shoulders, with a thick leather skirt to protect your lower body. ";
            _loc1_.itemUse = "You strap the armor to your chest and straighten the leather skirting to cover your legs. ";
            _loc1_.Defense = 4;
            this.SegmentataArmor = _loc1_;
            BindingManager.executeBindings(this, "SegmentataArmor", this.SegmentataArmor);
            return _loc1_;
        }

        private function _Main_Species3_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "shark";
            _loc1_.baseHeight = 72;
            _loc1_.furBack = "dark grey";
            _loc1_.furBelly = "light grey";
            _loc1_.furHead = "light grey";
            _loc1_.hand = "fin";
            _loc1_.hands = "fins";
            _loc1_.fur = "skin";
            _loc1_.furred = "skinned";
            _loc1_.furry = "skinned";
            this.Shark = _loc1_;
            BindingManager.executeBindings(this, "Shark", this.Shark);
            return _loc1_;
        }

        private function _Main_Items102_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "naked chest";
            _loc1_.Value = 0;
            _loc1_.Top = true;
            _loc1_.type = "shirt";
            _loc1_.PoppedDescription = "You\'re nude from the waist up. ";
            _loc1_.Description = "You\'re nude from the waist up. ";
            this.Shirtless = _loc1_;
            BindingManager.executeBindings(this, "Shirtless", this.Shirtless);
            return _loc1_;
        }

        private function _Main_Items60_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "short sword";
            _loc1_.Value = 19;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A plain iron metal sword.  ";
            _loc1_.itemUse = "You give your trusty sword a few flashy swings and almost hurt yourself before deciding to stop showing off. ";
            _loc1_.attackDescription = "You slash your enemy, ";
            _loc1_.WEAd = 3;
            _loc1_.WEAr = 3;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.3;
            this.ShortSword = _loc1_;
            BindingManager.executeBindings(this, "ShortSword", this.ShortSword);
            return _loc1_;
        }

        private function _Main_Locations89_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "sirens";
            this.SirensEvent = _loc1_;
            BindingManager.executeBindings(this, "SirensEvent", this.SirensEvent);
            return _loc1_;
        }

        private function _Main_Items114_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "skirt";
            _loc1_.Value = 6;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Bottom = true;
            _loc1_.Expand = 10;
            _loc1_.type = "pants";
            _loc1_.Popoff = "With a short, high-pitched \"rrrrrip!\" sound, several seams break loose on your skirt as your expanding gut proves to much for it to handle. ";
            _loc1_.itemUse = "You pull the skirt up around your waist and adjust it a bit. You do a little twirl because it seems like the thing to do. ";
            _loc1_.PoppedDescription = "A short satin skirt with several broken seams that make it very hard to keep your skirt on. ";
            _loc1_.Description = "A short satin skirt. ";
            this.Skirt = _loc1_;
            BindingManager.executeBindings(this, "Skirt", this.Skirt);
            return _loc1_;
        }

        private function _Main_Species45_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "skunk";
            _loc1_.baseHeight = 62;
            _loc1_.furBack = "black and white";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "black";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.Skunk = _loc1_;
            BindingManager.executeBindings(this, "Skunk", this.Skunk);
            return _loc1_;
        }

        private function _Main_DamageType3_i():DamageType {
            var _loc1_:DamageType = null;
            _loc1_ = new DamageType();
            _loc1_.name = "slashing";
            this.SlashingDamage = _loc1_;
            BindingManager.executeBindings(this, "SlashingDamage", this.SlashingDamage);
            return _loc1_;
        }

        private function _Main_Items44_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "S. health potion";
            _loc1_.Value = 3;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "health potion";
            _loc1_.Description = "A small vial of red liquid. ";
            _loc1_.itemUse = "You chug down the thick red liquid and start feeling a little better already. Cherry flavored! ";
            _loc1_.drink = 1;
            _loc1_.StackLimit = 5;
            _loc1_.Heal = 25;
            this.SmallHealthPotion = _loc1_;
            BindingManager.executeBindings(this, "SmallHealthPotion", this.SmallHealthPotion);
            return _loc1_;
        }

        private function _Main_Items47_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "S. mana potion";
            _loc1_.Value = 6;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "mana potion";
            _loc1_.Description = "A small vial of blue liquid. ";
            _loc1_.itemUse = "You chug down the thick blueish liquid and start feeling a little more energized already. Grape flavored! ";
            _loc1_.drink = 1;
            _loc1_.StackLimit = 5;
            _loc1_.Mana = 20;
            this.SmallManaPotion = _loc1_;
            BindingManager.executeBindings(this, "SmallManaPotion", this.SmallManaPotion);
            return _loc1_;
        }

        private function _Main_Enemies41_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "Smarty";
            _loc1_.victory = "Smarty falls to his knees, a look of disbelief on his face. \"How...\" he starts, then collapses to the ground, groaning in pain. ";
            _loc1_.STR = 10;
            _loc1_.AGI = 25;
            _loc1_.INT = 80;
            _loc1_.attackStat = "INT";
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 260;
            _loc1_.level = 14;
            _loc1_.GLD = 50;
            _loc1_.XP = 100;
            this.Smarty = _loc1_;
            BindingManager.executeBindings(this, "Smarty", this.Smarty);
            return _loc1_;
        }

        private function _Main_Items128_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "snake venom";
            _loc1_.Value = 7;
            _loc1_.Useable = true;
            _loc1_.Consume = true;
            _loc1_.Special = true;
            _loc1_.type = "gem";
            _loc1_.Description = "A vial of deep orange liquid, taken from the fangs of a sand snake. All the fun of fighting one of them with none of the bitemarks! ";
            this.SnakeVenom = _loc1_;
            BindingManager.executeBindings(this, "SnakeVenom", this.SnakeVenom);
            return _loc1_;
        }

        private function _Main_Enemies38_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "Snookums";
            _loc1_.grappleEscapeFail = "You push with all your might, but just can\'t manage to budge the monstrous squirrel\'s powerful arms. ";
            _loc1_.victory = "With your last attack, she doubles over, groaning in pain, and grunts out \"Smarty\" before collapsing to the ground. ";
            _loc1_.STR = 40;
            _loc1_.AGI = 17;
            _loc1_.INT = 13;
            _loc1_.DEF = 6;
            _loc1_.maxHEA = 320;
            _loc1_.level = 13;
            _loc1_.GLD = 50;
            _loc1_.XP = 90;
            this.Snookums = _loc1_;
            BindingManager.executeBindings(this, "Snookums", this.Snookums);
            return _loc1_;
        }

        private function _Main_Enemies33_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "soldier ants";
            _loc1_.itemFound = "Fortunately, you manage to grab some before they all escape you! ";
            _loc1_.STR = 20;
            _loc1_.AGI = 15;
            _loc1_.INT = 10;
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 250;
            _loc1_.level = 10;
            _loc1_.GLD = 60;
            _loc1_.XP = 70;
            _loc1_.itemChance = 100;
            this.SoldierAnt = _loc1_;
            BindingManager.executeBindings(this, "SoldierAnt", this.SoldierAnt);
            return _loc1_;
        }

        private function _Main_Locations12_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "south city gates";
            _loc1_.Description = "You\'re standing under the gates out of the southern side of the city. ";
            this.SouthCityGates = _loc1_;
            BindingManager.executeBindings(this, "SouthCityGates", this.SouthCityGates);
            return _loc1_;
        }

        private function _Main_Locations42_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Southern Road";
            this.SouthRoad = _loc1_;
            BindingManager.executeBindings(this, "SouthRoad", this.SouthRoad);
            return _loc1_;
        }

        private function _Main_Locations8_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "southern square";
            this.SouthernSquare = _loc1_;
            BindingManager.executeBindings(this, "SouthernSquare", this.SouthernSquare);
            return _loc1_;
        }

        private function _Main_Items74_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "spear";
            _loc1_.Value = 19;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A long hefty wooden shaft with a sharpened metal tip. ";
            _loc1_.itemUse = "You twirl around the well balanced spear in your hands in a fashion that\'s not very combat effective, but it at least looks impressive. ";
            _loc1_.attackDescription = "You jab your enemy, ";
            _loc1_.WEAd = 1;
            _loc1_.WEAr = 12;
            _loc1_.damageStat = "AGI";
            _loc1_.damageScaling = 0.3;
            this.Spear = _loc1_;
            BindingManager.executeBindings(this, "Spear", this.Spear);
            return _loc1_;
        }

        private function _Main_Items127_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "spectrum gem";
            _loc1_.Value = 100;
            _loc1_.Useable = true;
            _loc1_.Consume = true;
            _loc1_.Special = true;
            _loc1_.type = "gem";
            _loc1_.Description = "This gem is exceedingly rare, and vibrates with an ancient power. Clasping it in your hand will do wonders for your entire being, or you could sell it. ";
            this.SpectrumGem = _loc1_;
            BindingManager.executeBindings(this, "SpectrumGem", this.SpectrumGem);
            return _loc1_;
        }

        private function _Main_Enemies21_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "spherical shark";
            _loc1_.voreable = true;
            _loc1_.weight = 240;
            _loc1_.STR = 20;
            _loc1_.AGI = 18;
            _loc1_.INT = 12;
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 120;
            _loc1_.level = 5;
            _loc1_.GLD = 15;
            _loc1_.XP = 30;
            this.SphericalShark = _loc1_;
            BindingManager.executeBindings(this, "SphericalShark", this.SphericalShark);
            return _loc1_;
        }

        private function _Main_Items90_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a set of";
            _loc1_.Name = "splint armor";
            _loc1_.Value = 75;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "A set of armor made from strips of metal sewn to leather backing. ";
            _loc1_.itemUse = "You take a while to put on all the pieces of armor and tighten all the straps as best as you can. ";
            _loc1_.Defense = 3;
            this.SplintArmor = _loc1_;
            BindingManager.executeBindings(this, "SplintArmor", this.SplintArmor);
            return _loc1_;
        }

        private function _Main_Species49_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "squirrel";
            _loc1_.baseHeight = 59;
            _loc1_.furBack = "grey";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "grey";
            _loc1_.fur = "fur";
            _loc1_.furred = "furred";
            _loc1_.furry = "furry";
            this.Squirrel = _loc1_;
            BindingManager.executeBindings(this, "Squirrel", this.Squirrel);
            return _loc1_;
        }

        private function _Main_Items69_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "star hammer";
            _loc1_.Value = 800;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "An enormous mace made using a massive head made of star metal. Legend has it the star fell from the sky to smite a demonic tyrant. ";
            _loc1_.itemUse = "You lift the giant hammer onto one shoulder, ready to smash something with the boulder of iron on a stick. ";
            _loc1_.attackDescription = "You smash your enemy with your enormous hammer, ";
            _loc1_.WEAd = 4;
            _loc1_.WEAr = 20;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.8;
            this.StarHammer = _loc1_;
            BindingManager.executeBindings(this, "StarHammer", this.StarHammer);
            return _loc1_;
        }

        private function _Main_Items24_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "steak";
            _loc1_.Value = 4;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A juicy rare steak. ";
            _loc1_.itemUse = "Unafraid to eat with your hands, you tear apart your juicy steak like a savage animal. ";
            _loc1_.eat = 6;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 4.5;
            _loc1_.Heal = 12;
            this.Steak = _loc1_;
            BindingManager.executeBindings(this, "Steak", this.Steak);
            return _loc1_;
        }

        private function _Main_Locations55_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Forest Store Room";
            _loc1_.Description = "A large store room is sitting in a small clearing in the forest. ";
            this.StoreRoom = _loc1_;
            BindingManager.executeBindings(this, "StoreRoom", this.StoreRoom);
            return _loc1_;
        }

        private function _Main_Enemies45_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.article = "an";
            _loc1_.name = "angry local";
            _loc1_.description = "Your opponent is presumably the storeroom owner, and he seems none to happy with you breaking into his storeroom and helping yourself. ";
            _loc1_.victory = "Your opponent stumbles and falls to his knees! ";
            _loc1_.STR = 15;
            _loc1_.AGI = 10;
            _loc1_.INT = 10;
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 150;
            _loc1_.level = 3;
            _loc1_.GLD = 25;
            _loc1_.XP = 16;
            this.StoreRoomOwner = _loc1_;
            BindingManager.executeBindings(this, "StoreRoomOwner", this.StoreRoomOwner);
            return _loc1_;
        }

        private function _Main_Items5_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "strawberries";
            _loc1_.Value = 2;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A bunch of large bright red strawberries. ";
            _loc1_.itemUse = "You grab a strawberry half the size of your fist and chomp it down in two juicy bites. ";
            _loc1_.eat = 2;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 1;
            _loc1_.Heal = 6;
            this.Strawberries = _loc1_;
            BindingManager.executeBindings(this, "Strawberries", this.Strawberries);
            return _loc1_;
        }

        private function _Main_Items51_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "stretchy fruit";
            _loc1_.Value = 6;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.type = "other";
            _loc1_.Status = true;
            _loc1_.StatusTime = 300;
            _loc1_.Description = "A smallish blue fruit that is bizzarely stretchy. ";
            _loc1_.StackLimit = 5;
            this.StretchyFruit = _loc1_;
            BindingManager.executeBindings(this, "StretchyFruit", this.StretchyFruit);
            return _loc1_;
        }

        private function _Main_Items52_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "stretchy seaweed";
            _loc1_.Value = 12;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.type = "other";
            _loc1_.Status = true;
            _loc1_.StatusTime = 300;
            _loc1_.Description = "A handful of seaweed. The greenish-brown fronds are slippery but surprisingly rubbery. ";
            _loc1_.StackLimit = 5;
            this.StretchySeaweed = _loc1_;
            BindingManager.executeBindings(this, "StretchySeaweed", this.StretchySeaweed);
            return _loc1_;
        }

        private function _Main_Enemies3_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "Syrup Vine";
            _loc1_.description = "Your opponent is a mass of deep amber colored vines. There are several vines that taper off and ooze some kind of sweet smelling syrup. ";
            _loc1_.STR = 8;
            _loc1_.AGI = 15;
            _loc1_.INT = 4;
            _loc1_.DEF = 1;
            _loc1_.maxHEA = 55;
            _loc1_.level = 1;
            _loc1_.eaten = 100;
            _loc1_.GLD = 5;
            _loc1_.XP = 10;
            this.SyrupVine = _loc1_;
            BindingManager.executeBindings(this, "SyrupVine", this.SyrupVine);
            return _loc1_;
        }

        private function _Main_Locations25_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Tailor";
            this.Tailor = _loc1_;
            BindingManager.executeBindings(this, "Tailor", this.Tailor);
            return _loc1_;
        }

        private function _Main_Vendors17_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "You walk into the alerterrarium. ";
            this.TeacherAlteration = _loc1_;
            BindingManager.executeBindings(this, "TeacherAlteration", this.TeacherAlteration);
            return _loc1_;
        }

        private function _Main_Vendors15_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "You walk into the destructatorium. ";
            _loc1_.Leaving = "A professional looking blue dragon in an armored black robe is walking up and down a line of students as they hurl fireballs and lightning bolts at insulated target dummies. ";
            this.TeacherDestruction = _loc1_;
            BindingManager.executeBindings(this, "TeacherDestruction", this.TeacherDestruction);
            return _loc1_;
        }

        private function _Main_Vendors19_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "\"Ours is the magic of the earth, water, sky and life. If you seek to become harmonious with the world, I may yet have spells to teach you.\" ";
            _loc1_.allKnown = "\"You have learned all that I can teach you. To advance further would require you to embrace the earth, which is a path you must walk yourself. Be well, my student.\" ";
            this.TeacherDinosaur = _loc1_;
            BindingManager.executeBindings(this, "TeacherDinosaur", this.TeacherDinosaur);
            return _loc1_;
        }

        private function _Main_Vendors16_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "You walk into the restoratorium. ";
            this.TeacherRestoration = _loc1_;
            BindingManager.executeBindings(this, "TeacherRestoration", this.TeacherRestoration);
            return _loc1_;
        }

        private function _Main_Vendors18_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "\"Want to learn some spells, do you? I\'ll give you fair warning, these aren\'t exactly easy to handle.\" ";
            _loc1_.Leaving = "You are lead back to Smarty\'s shack. Snookums waves to him as he looks up from his reading. He smiles and waves back. \"What can I do for you?\" he asks you. ";
            this.TeacherSmarty = _loc1_;
            BindingManager.executeBindings(this, "TeacherSmarty", this.TeacherSmarty);
            return _loc1_;
        }

        private function _Main_Locations13_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Fat loss button";
            this.TestArea = _loc1_;
            BindingManager.executeBindings(this, "TestArea", this.TestArea);
            return _loc1_;
        }

        private function _Main_Enemies52_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "Test";
            this.TestEnemy = _loc1_;
            BindingManager.executeBindings(this, "TestEnemy", this.TestEnemy);
            return _loc1_;
        }

        private function _Main_Enemies11_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "thief";
            _loc1_.voreable = true;
            _loc1_.weight = 120;
            _loc1_.playerEscape = "You find an opportunity to flee and take advantage of it. The thief, not one for heroics, runs off also. ";
            _loc1_.victory = "The fat thief stumbles and kneels to the ground. \"I just needed money... for another... dozen doughnuts!\" he sighs before collapsing unconcious. ";
            _loc1_.STR = 10;
            _loc1_.AGI = 15;
            _loc1_.INT = 15;
            _loc1_.attackStat = "AGI";
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 70;
            _loc1_.level = 3;
            _loc1_.GLD = 0;
            _loc1_.XP = 12;
            this.Thief = _loc1_;
            BindingManager.executeBindings(this, "Thief", this.Thief);
            return _loc1_;
        }

        private function _Main_Enemies34_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.voreable = true;
            _loc1_.weight = 98;
            _loc1_.itemFound = "One of the daggers appears to still be in decent shape. ";
            _loc1_.STR = 20;
            _loc1_.AGI = 60;
            _loc1_.INT = 10;
            _loc1_.attackStat = "AGI";
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 175;
            _loc1_.level = 10;
            _loc1_.GLD = 40;
            _loc1_.XP = 75;
            _loc1_.itemChance = 15;
            this.ThinFur = _loc1_;
            BindingManager.executeBindings(this, "ThinFur", this.ThinFur);
            return _loc1_;
        }

        private function _Main_Items81_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "thunderbolt spear";
            _loc1_.Value = 800;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A masterfully made spear struck by lightning after its creation, it crackles with electricity when thrust at an opponent. ";
            _loc1_.itemUse = "You take up the spear, its golden point raining down sparks for a moment. ";
            _loc1_.attackDescription = "Your spear cracks with lightning as you jab your opponent, ";
            _loc1_.WEAd = 5;
            _loc1_.WEAr = 10;
            _loc1_.damageStat = "AGI";
            _loc1_.damageScaling = 0.75;
            this.ThunderboltSpear = _loc1_;
            BindingManager.executeBindings(this, "ThunderboltSpear", this.ThunderboltSpear);
            return _loc1_;
        }

        private function _Main_Species32_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "tiger";
            _loc1_.fName = "tigress";
            _loc1_.baseHeight = 72;
            _loc1_.furBack = "striped black and orange";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "striped";
            this.Tiger = _loc1_;
            BindingManager.executeBindings(this, "Tiger", this.Tiger);
            return _loc1_;
        }

        private function _Main_Enemies35_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.voreable = true;
            _loc1_.weight = 350;
            _loc1_.STR = 35;
            _loc1_.AGI = 15;
            _loc1_.INT = 10;
            _loc1_.DEF = 5;
            _loc1_.maxHEA = 300;
            _loc1_.level = 10;
            _loc1_.GLD = 40;
            _loc1_.XP = 75;
            _loc1_.itemChance = 15;
            this.ToughFur = _loc1_;
            BindingManager.executeBindings(this, "ToughFur", this.ToughFur);
            return _loc1_;
        }

        private function _Main_Locations20_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Training grounds";
            this.TrainingGrounds = _loc1_;
            BindingManager.executeBindings(this, "TrainingGrounds", this.TrainingGrounds);
            return _loc1_;
        }

        private function _Main_Items130_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "treasure chest";
            _loc1_.Value = 15;
            _loc1_.Useable = true;
            _loc1_.combatUseable = false;
            _loc1_.Consume = true;
            _loc1_.Special = true;
            _loc1_.type = "box";
            _loc1_.Description = "A rather ornate chest you found in the sand of the beach. You can hear something rattling around inside. ";
            _loc1_.itemUse = "You pry the chest open and inside you find ";
            this.TreasureChest = _loc1_;
            BindingManager.executeBindings(this, "TreasureChest", this.TreasureChest);
            return _loc1_;
        }

        private function _Main_Items63_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "trident";
            _loc1_.Value = 33;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A sharp 3-pronged metal pole. Normally meant for spear fishing, this trident is specifically designed for combat. ";
            _loc1_.itemUse = "You twirl the heavy trident around in your hands and almost end up stabbing yourself in the foot before you stop showing off. ";
            _loc1_.attackDescription = "You jab your enemy, ";
            _loc1_.WEAd = 3;
            _loc1_.WEAr = 4;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.4;
            this.Trident = _loc1_;
            BindingManager.executeBindings(this, "Trident", this.Trident);
            return _loc1_;
        }

        private function _Main_Items117_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "trousers";
            _loc1_.Expand = 5;
            _loc1_.Value = 6;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Bottom = true;
            _loc1_.type = "pants";
            _loc1_.Popoff = "As your belly grow, the button snaps off your trousers, leaving them hanging loosely on your legs! ";
            _loc1_.Toosmall = "You try to put the pants on, but you get as far as your huge thighs before being forced to give up. ";
            _loc1_.itemUse = "You pull the pants up about your legs. Simple and stylish. ";
            _loc1_.PoppedDescription = "Comfortable and flexible pants that have been ruined; the button is broken clean off. ";
            _loc1_.Description = "Timeless pants for any occasion. Comfortable and flexible. ";
            this.Trousers = _loc1_;
            BindingManager.executeBindings(this, "Trousers", this.Trousers);
            return _loc1_;
        }

        private function _Main_Items107_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "tunic";
            _loc1_.Value = 6;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Top = true;
            _loc1_.Expand = 8;
            _loc1_.type = "shirt";
            _loc1_.Popoff = "You hear a small tearing sound that slowly turns into a loud ripping as you gut finally tears free from your confining tunic, having grown too large to be held back anymore. ";
            _loc1_.itemUse = "You slide the tunic over your head and put your arms through the short sleeve. You fiddle with the laces at the neck of the shirt, but they appear to be purely decorative. ";
            _loc1_.PoppedDescription = "A plain old white tunic with a large tear down the front, leaving your belly exposed. ";
            _loc1_.Description = "A plain old white tunic. Mostly worn by the common folk. ";
            this.Tunic = _loc1_;
            BindingManager.executeBindings(this, "Tunic", this.Tunic);
            return _loc1_;
        }

        private function _Main_Items108_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "tuxedo jacket";
            _loc1_.Value = 10;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Top = true;
            _loc1_.Expand = 7;
            _loc1_.type = "shirt";
            _loc1_.itemUse = "You slide on the tuxedo shirt and do up all the buttons before sliding on the jacket. You adjust your cuffs and attach your clip-on tie. ";
            _loc1_.PoppedDescription = "A bright white tuxedo shirt with all the buttons popped off and a matching pitch black tuxedo jacket. You don\'t look vary fancy with your belly hanging out for all to see. ";
            _loc1_.Description = "A bright white tuxedo shirt with matching pitch black tuxedo jacket. It even comes with a clip-on bow tie. Extremely fancy looking! ";
            this.TuxedoJacket = _loc1_;
            BindingManager.executeBindings(this, "TuxedoJacket", this.TuxedoJacket);
            return _loc1_;
        }

        private function _Main_Items115_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a pair of";
            _loc1_.Name = "tuxedo pants";
            _loc1_.Expand = 8;
            _loc1_.Value = 10;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Bottom = true;
            _loc1_.type = "pants";
            _loc1_.Popoff = "With several small \"pop pop pop\'s\" the buttons of your fancy tuxedo pants pop off one by one, unable to hold back the tide of your growing belly. ";
            _loc1_.itemUse = "You slide your legs into your tuxedo pants and do up the discreetly hidden buttons on the front. ";
            _loc1_.PoppedDescription = "A pitch black pair of tuxedo pants with all the fancy buttons popped off, allowing your gut to sag outward freely. Not very classy. ";
            _loc1_.Description = "A pitch black pair of tuxedo pants. Very classy. ";
            this.TuxedoPants = _loc1_;
            BindingManager.executeBindings(this, "TuxedoPants", this.TuxedoPants);
            return _loc1_;
        }

        private function _Main_Items123_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "an";
            _loc1_.Name = "unidentified gem";
            _loc1_.Value = 20;
            _loc1_.Useable = true;
            _loc1_.Special = true;
            _loc1_.type = "gem";
            _loc1_.Description = "A strange, shimmering gemstone. You can tell it has some sort of magical power in it, but you can’t tell how it works in its current state. You could probably sell it, however. ";
            this.UnidentifiedGem = _loc1_;
            BindingManager.executeBindings(this, "UnidentifiedGem", this.UnidentifiedGem);
            return _loc1_;
        }

        private function _Main_Items109_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "vest";
            _loc1_.Expand = 6;
            _loc1_.Value = 5;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Top = true;
            _loc1_.type = "shirt";
            _loc1_.Popoff = "Your vest\'s buttons pop off one by one as you outgrow the tight bit of fabric! ";
            _loc1_.Toosmall = "You try to put on the vest, but the sides can\'t get around you all the way, let alone the buttons meeting. You take it back off in dismay. ";
            _loc1_.itemUse = "You don the vest. Bare arms never looked better. ";
            _loc1_.PoppedDescription = "You are wearing a sleeveless vest. All the buttons have popped off, so it hangs loosely off your chest.";
            _loc1_.Description = "A button-up sleeveless vest as stylish as it is armless. ";
            this.Vest = _loc1_;
            BindingManager.executeBindings(this, "Vest", this.Vest);
            return _loc1_;
        }

        private function _Main_Items124_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "void onyx";
            _loc1_.Value = 20;
            _loc1_.Useable = true;
            _loc1_.Consume = true;
            _loc1_.Special = true;
            _loc1_.type = "gem";
            this.VoidOnyx = _loc1_;
            BindingManager.executeBindings(this, "VoidOnyx", this.VoidOnyx);
            return _loc1_;
        }

        private function _Main_Locations2_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Wall";
            this.Wall = _loc1_;
            BindingManager.executeBindings(this, "Wall", this.Wall);
            return _loc1_;
        }

        private function _Main_Items64_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "warhammer";
            _loc1_.Value = 50;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A heavy wooden hammer with a solid metal head. Clearly meant for destructive purposes rather than constructive purposes compared to its more puny bretheren. ";
            _loc1_.itemUse = "You heft the heavy hammer in your hands. You can\'t help but feel the strong urge to smash stuff. ";
            _loc1_.attackDescription = "You smash your enemy, ";
            _loc1_.WEAd = 2;
            _loc1_.WEAr = 8;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.5;
            this.Warhammer = _loc1_;
            BindingManager.executeBindings(this, "Warhammer", this.Warhammer);
            return _loc1_;
        }

        private function _Main_Enemies18_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "water elemental";
            _loc1_.playerEscape = "You quickly turn and flee, the creature unable to keep up with you as it staggers in pursuit. Within a minute it\'s totally out of sight. ";
            _loc1_.victory = "With your last attack, the elemental splashes violently apart, sinking into the ground. Nothing remains except a large puddle. ";
            _loc1_.STR = 18;
            _loc1_.AGI = 18;
            _loc1_.INT = 14;
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 260;
            _loc1_.level = 4;
            _loc1_.GLD = 12;
            _loc1_.XP = 16;
            _loc1_.itemChance = 35;
            this.WaterElemental = _loc1_;
            BindingManager.executeBindings(this, "WaterElemental", this.WaterElemental);
            return _loc1_;
        }

        private function _Main_Items39_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "water flask";
            _loc1_.Value = 1;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "drink";
            _loc1_.Description = "A flask filled with water. ";
            _loc1_.itemUse = "You swallow several mouthfuls of cool refreshing spring water. ";
            _loc1_.drink = 3;
            _loc1_.Stamina = 30;
            this.WaterFlask = _loc1_;
            BindingManager.executeBindings(this, "WaterFlask", this.WaterFlask);
            return _loc1_;
        }

        private function _Main_Items40_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "water jug";
            _loc1_.Value = 1;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "drink";
            _loc1_.Description = "A jug filled with water. ";
            _loc1_.itemUse = "You swallow several mouthfuls of cool refreshing spring water. ";
            _loc1_.Stamina = 30;
            _loc1_.Charges = 5;
            _loc1_.drink = 3;
            this.WaterJug = _loc1_;
            BindingManager.executeBindings(this, "WaterJug", this.WaterJug);
            return _loc1_;
        }

        private function _Main_Items7_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "watermelon";
            _loc1_.Value = 3;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A big \'ol watermelon. Bigger than your head! ";
            _loc1_.itemUse = "You crack the watermelon open over your knee and start chewing out the red, dripping wet insides. You finish feeling quite refreshed, and covered in watermelon juice. ";
            _loc1_.eat = 6;
            _loc1_.drink = 2;
            _loc1_.Calories = 3;
            _loc1_.Stamina = 6;
            _loc1_.Heal = 15;
            this.Watermelon = _loc1_;
            BindingManager.executeBindings(this, "Watermelon", this.Watermelon);
            return _loc1_;
        }

        private function _Main_Items57_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "fists";
            _loc1_.Value = 0;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "You only have your bare fists to fight with. ";
            _loc1_.attackDescription = "You punch your enemy,  ";
            _loc1_.WEAd = 1;
            _loc1_.WEAr = 4;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.2;
            this.Weaponless = _loc1_;
            BindingManager.executeBindings(this, "Weaponless", this.Weaponless);
            return _loc1_;
        }

        private function _Main_Items50_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "weird berry";
            _loc1_.Value = 16;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.type = "other";
            _loc1_.Status = true;
            _loc1_.StatusTime = 300;
            _loc1_.Description = "It looks like a bloated blueberry, but the color is strangely off... ";
            _loc1_.itemUse = "You take a test bite out of the berry. It tastes tangy, and a little sweet. ";
            _loc1_.StackLimit = 9;
            this.WeirdBerry = _loc1_;
            BindingManager.executeBindings(this, "WeirdBerry", this.WeirdBerry);
            return _loc1_;
        }

        private function _Main_Locations10_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "west city gates";
            _loc1_.Description = "You\'re standing under the gates out of the western side of the city. ";
            this.WestCityGates = _loc1_;
            BindingManager.executeBindings(this, "WestCityGates", this.WestCityGates);
            return _loc1_;
        }

        private function _Main_Locations40_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Western Road";
            this.WestRoad = _loc1_;
            BindingManager.executeBindings(this, "WestRoad", this.WestRoad);
            return _loc1_;
        }

        private function _Main_Locations28_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "west town gates";
            this.WestTownGates = _loc1_;
            BindingManager.executeBindings(this, "WestTownGates", this.WestTownGates);
            return _loc1_;
        }

        private function _Main_Locations27_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "West town";
            _loc1_.Description = "You\'re standing in the center of the small western port town. ";
            this.WestTownHub = _loc1_;
            BindingManager.executeBindings(this, "WestTownHub", this.WestTownHub);
            return _loc1_;
        }

        private function _Main_Locations31_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "inn";
            this.WestTownInn = _loc1_;
            BindingManager.executeBindings(this, "WestTownInn", this.WestTownInn);
            return _loc1_;
        }

        private function _Main_Locations39_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "store";
            this.WestTownStore = _loc1_;
            BindingManager.executeBindings(this, "WestTownStore", this.WestTownStore);
            return _loc1_;
        }

        private function _Main_Locations6_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "western square";
            this.WesternSquare = _loc1_;
            BindingManager.executeBindings(this, "WesternSquare", this.WesternSquare);
            return _loc1_;
        }

        private function _Main_Enemies12_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "wildling";
            _loc1_.STR = 15;
            _loc1_.AGI = 15;
            _loc1_.INT = 10;
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 80;
            _loc1_.level = 3;
            _loc1_.GLD = 5;
            _loc1_.XP = 14;
            this.Wildling = _loc1_;
            BindingManager.executeBindings(this, "Wildling", this.Wildling);
            return _loc1_;
        }

        private function _Main_Enemies13_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "wildling ritualist";
            _loc1_.introduction = "A splash of color is brought to your attention when a wildling jumps in front of you, a bag of food behind them at their disposal. ";
            _loc1_.itemFound = "Fortunately your able to at least catch that final cupcake before it hits the ground. ";
            _loc1_.STR = 10;
            _loc1_.AGI = 17;
            _loc1_.INT = 20;
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 80;
            _loc1_.maxMANA = 50;
            _loc1_.level = 3;
            _loc1_.GLD = 5;
            _loc1_.XP = 14;
            this.WildlingRitualist = _loc1_;
            BindingManager.executeBindings(this, "WildlingRitualist", this.WildlingRitualist);
            return _loc1_;
        }

        private function _Main_Items85_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "wizard staff";
            _loc1_.Value = 155;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "This staff isn\'t impressive as a weapon, but its ability to channel magical spells is quite potent. ";
            _loc1_.attackDescription = "A flash of arcane light sears towards your enemy, ";
            _loc1_.WEAd = 1;
            _loc1_.WEAr = 4;
            _loc1_.manaBuff = 30;
            _loc1_.damageStat = "INT";
            _loc1_.damageScaling = 1.1;
            this.WizardStaff = _loc1_;
            BindingManager.executeBindings(this, "WizardStaff", this.WizardStaff);
            return _loc1_;
        }

        private function _Main_Locations65_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "wizard tower";
            this.WizardTower = _loc1_;
            BindingManager.executeBindings(this, "WizardTower", this.WizardTower);
            return _loc1_;
        }

        private function _Main_Items95_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "some";
            _loc1_.Name = "wizard\'s robes";
            _loc1_.Value = 65;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "An intricate and only fairly garishly colored robe that signifies one as a wizard. It is imbued with magical enchantments to make it more protective. ";
            _loc1_.itemUse = "You tie the thick robe around your waist, immediately feeling a tingling surge of power seeping from the robes into your body. ";
            _loc1_.Defense = 2;
            _loc1_.manaBuff = 25;
            this.WizardsRobes = _loc1_;
            BindingManager.executeBindings(this, "WizardsRobes", this.WizardsRobes);
            return _loc1_;
        }

        private function _Main_Species15_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "wolf";
            _loc1_.baseHeight = 68;
            _loc1_.furBack = "grey";
            _loc1_.furBelly = "light grey";
            _loc1_.furHead = "grey";
            this.Wolf = _loc1_;
            BindingManager.executeBindings(this, "Wolf", this.Wolf);
            return _loc1_;
        }

        private function _Main_Locations66_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "wyvern cave";
            this.WyvernCave = _loc1_;
            BindingManager.executeBindings(this, "WyvernCave", this.WyvernCave);
            return _loc1_;
        }

        private function _Main_Locations4_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Your House";
            _loc1_.Description = "You\'re standing in the main room of your house. It\'s not a very nice house, but it\'s home. ";
            this.YourHouse = _loc1_;
            BindingManager.executeBindings(this, "YourHouse", this.YourHouse);
            return _loc1_;
        }

        private function _Main_Locations57_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Wolf Pack";
            _loc1_.Description = "A large pack of very large wolves has carved a path with their enormous weight through the forest, knocking over small trees and underbrush as they go past. ";
            this.alphaWolf = _loc1_;
            BindingManager.executeBindings(this, "alphaWolf", this.alphaWolf);
            return _loc1_;
        }

        private function _Main_Items9_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "ample apple";
            _loc1_.Value = 3;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "This is an enormous apple, easily the size of your head. It\'s shiny red, clean and delicious-looking thanks to a little imbued magic. ";
            _loc1_.itemUse = "You take a few bites from the enormous apple. It is crisp, sweet, very slightly acidic, and big. Very big. ";
            _loc1_.eat = 3;
            _loc1_.Charges = 9;
            _loc1_.Calories = 1;
            _loc1_.Heal = 9;
            this.ampleApple = _loc1_;
            BindingManager.executeBindings(this, "ampleApple", this.ampleApple);
            return _loc1_;
        }

        private function _Main_Enemies49_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "giant anaconda";
            _loc1_.voreable = true;
            _loc1_.weight = 1500;
            _loc1_.escapable = false;
            _loc1_.playerEscape = "You try to get away, but as far as you go, you only find more giant snake barring your path! ";
            _loc1_.grappleEscapeSucceed = "You pry at the snake\'s tremendous body and just manage to wriggle out of its grip! ";
            _loc1_.grappleEscapeFail = "You pry at the snake\'s tremendous body, but can\'t manage to loosen it! ";
            _loc1_.STR = 50;
            _loc1_.AGI = 30;
            _loc1_.INT = 20;
            _loc1_.DEF = 7;
            _loc1_.maxHEA = 450;
            _loc1_.level = 15;
            _loc1_.GLD = 60;
            _loc1_.XP = 110;
            _loc1_.itemChance = 100;
            this.anacondaBoss = _loc1_;
            BindingManager.executeBindings(this, "anacondaBoss", this.anacondaBoss);
            return _loc1_;
        }

        private function _Main_Locations100_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "serpent\'s lair";
            this.anacondaBossFight = _loc1_;
            BindingManager.executeBindings(this, "anacondaBossFight", this.anacondaBossFight);
            return _loc1_;
        }

        private function _Main_Items122_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "an";
            _loc1_.Name = "antidote";
            _loc1_.Value = 10;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Special = true;
            _loc1_.type = "health potion";
            _loc1_.Description = "A flask of completely colourless liquid- for all you know, this could just be funny-smelling water. ";
            _loc1_.StackLimit = 9;
            this.antidotePotion = _loc1_;
            BindingManager.executeBindings(this, "antidotePotion", this.antidotePotion);
            return _loc1_;
        }

        private function _Main_Species20_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "apatosaurus";
            _loc1_.baseHeight = 84;
            _loc1_.furBack = "grey";
            _loc1_.furBelly = "grey";
            _loc1_.furHead = "grey";
            _loc1_.fur = "scales";
            _loc1_.furred = "scaled";
            _loc1_.furry = "scaly";
            this.apatosaurus = _loc1_;
            BindingManager.executeBindings(this, "apatosaurus", this.apatosaurus);
            return _loc1_;
        }

        private function _Main_Defeats4_i():Defeats {
            var _loc1_:Defeats = null;
            _loc1_ = new Defeats();
            this.battle = _loc1_;
            BindingManager.executeBindings(this, "battle", this.battle);
            return _loc1_;
        }

        private function _Main_Zones6_i():Zones {
            var _loc1_:Zones = null;
            _loc1_ = new Zones();
            this.beach = _loc1_;
            BindingManager.executeBindings(this, "beach", this.beach);
            return _loc1_;
        }

        private function _Main_Items28_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "beefStew";
            _loc1_.Value = 8;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A mix of beef chunks and assorted vegetables in a thickened broth, put into a jug to allow it to be eaten anywhere. ";
            _loc1_.itemUse = "You open the jug and guzzle down the stew. The meat is tender, and the vegetables are soft enough to cut with a spoon. ";
            _loc1_.eat = 12;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 8;
            _loc1_.Heal = 40;
            this.beefStew = _loc1_;
            BindingManager.executeBindings(this, "beefStew", this.beefStew);
            return _loc1_;
        }

        private function _Main_Items27_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "big steak";
            _loc1_.Value = 8;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "Medium-rare and slathered with sauce before being put in a pouch for the diner on the go. ";
            _loc1_.itemUse = "You eat the steak, chewy and delicious, then lick your fingers clean of the tangy sauce. ";
            _loc1_.overfilled = "You force down the steak, and even as your stomach is hurting from being too full, you\'re licking your fingers clean of sauce... ";
            _loc1_.eat = 12;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 10;
            _loc1_.Heal = 30;
            this.bigSteak = _loc1_;
            BindingManager.executeBindings(this, "bigSteak", this.bigSteak);
            return _loc1_;
        }

        private function _Main_Species51_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "black bear";
            _loc1_.baseHeight = 77;
            _loc1_.furBack = "black";
            _loc1_.furBelly = "black";
            _loc1_.furHead = "black";
            this.blackBear = _loc1_;
            BindingManager.executeBindings(this, "blackBear", this.blackBear);
            return _loc1_;
        }

        private function _Main_Species22_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "black dragon";
            _loc1_.baseHeight = 74;
            _loc1_.furBack = "black";
            _loc1_.furBelly = "gold";
            _loc1_.furHead = "black";
            _loc1_.fur = "scales";
            _loc1_.furred = "scaled";
            _loc1_.furry = "scaly";
            this.blackDragon = _loc1_;
            BindingManager.executeBindings(this, "blackDragon", this.blackDragon);
            return _loc1_;
        }

        private function _Main_Locations1_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "";
            this.blank = _loc1_;
            BindingManager.executeBindings(this, "blank", this.blank);
            return _loc1_;
        }

        private function _Main_Items13_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "bloated blueberry";
            _loc1_.Value = 2;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "This blueberry is huge. You could use it as a caestus if you felt like doing some very messy fisticuffs, but that would be a waste. ";
            _loc1_.itemUse = "You bite into the tremendous blueberry, the juice immediately turning everything it touches the shade of blue associated with sweetness. ";
            _loc1_.eat = 2;
            _loc1_.Charges = 9;
            _loc1_.Calories = 1;
            _loc1_.Heal = 6;
            this.bloatedBlueberry = _loc1_;
            BindingManager.executeBindings(this, "bloatedBlueberry", this.bloatedBlueberry);
            return _loc1_;
        }

        private function _Main_Species23_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "blue dragon";
            _loc1_.baseHeight = 73;
            _loc1_.furBack = "blue";
            _loc1_.furBelly = "gold";
            _loc1_.furHead = "blue";
            _loc1_.fur = "scales";
            _loc1_.furred = "scaled";
            _loc1_.furry = "scaly";
            this.blueDragon = _loc1_;
            BindingManager.executeBindings(this, "blueDragon", this.blueDragon);
            return _loc1_;
        }

        private function _Main_Items143_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "captured blueberry slime";
            _loc1_.Quest = true;
            this.blueSlimeItem = _loc1_;
            BindingManager.executeBindings(this, "blueSlimeItem", this.blueSlimeItem);
            return _loc1_;
        }

        private function _Main_Items19_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "bread loaf";
            _loc1_.Value = 8;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A thick loaf of soft wheat bread. Subtly tasty, and surprisingly heavy. ";
            _loc1_.itemUse = "You bite into the loaf of bread, the taste of grains is subtle, but present. ";
            _loc1_.overfilled = "You choke down the loaf of bread, but are left with the distinct impression that it was too much...";
            _loc1_.eat = 4;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 2;
            _loc1_.Heal = 12;
            this.breadLoaf = _loc1_;
            BindingManager.executeBindings(this, "breadLoaf", this.breadLoaf);
            return _loc1_;
        }

        private function _Main_Species52_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "brown bear";
            _loc1_.baseHeight = 76;
            _loc1_.furBack = "brown";
            _loc1_.furBelly = "brown";
            _loc1_.furHead = "brown";
            this.brownBear = _loc1_;
            BindingManager.executeBindings(this, "brownBear", this.brownBear);
            return _loc1_;
        }

        private function _Main_Items134_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "the";
            _loc1_.Name = "cabal cauldron";
            _loc1_.Quest = true;
            this.cabalCauldron = _loc1_;
            BindingManager.executeBindings(this, "cabalCauldron", this.cabalCauldron);
            return _loc1_;
        }

        private function _Main_Enemies44_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "rogue cabal dragon";
            _loc1_.escapable = false;
            _loc1_.playerEscapeFail = "You try to get away, but a magical barrier is barring the only path out of this chamber! ";
            _loc1_.grappleEscapeFail = "You struggle against the massive dragon\'s hold, but are unable to free yourself, his grip on you just too strong! ";
            _loc1_.grappleEscapeSucceed = "You summon all your strength and force yourself out of the massive dragon\'s grasp, prying his huge limbs off of you! ";
            _loc1_.attackCounterA = 1;
            _loc1_.STR = 60;
            _loc1_.AGI = 30;
            _loc1_.INT = 50;
            _loc1_.DEF = 8;
            _loc1_.maxHEA = 400;
            _loc1_.level = 21;
            _loc1_.GLD = 300;
            _loc1_.XP = 425;
            this.cabalDragon = _loc1_;
            BindingManager.executeBindings(this, "cabalDragon", this.cabalDragon);
            return _loc1_;
        }

        private function _Main_Items97_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "the";
            _loc1_.Name = "dragon robes";
            _loc1_.Value = 1000;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.itemUse = "You don the enchanted robes, and are almost overwhelmed as you sense the power of the robe seeping into every fiber of your being, making you feel almost megalomaniacally powerful! ";
            _loc1_.Defense = 5;
            _loc1_.manaBuff = 50;
            _loc1_.intBuff = 20;
            _loc1_.agiBuff = 20;
            _loc1_.strBuff = 20;
            _loc1_.endBuff = 20;
            this.cabalDragonRobe = _loc1_;
            BindingManager.executeBindings(this, "cabalDragonRobe", this.cabalDragonRobe);
            return _loc1_;
        }

        private function _Main_Items133_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "the";
            _loc1_.Name = "map to Cabal Rogue";
            _loc1_.Quest = true;
            _loc1_.Useable = true;
            this.cabalMap = _loc1_;
            BindingManager.executeBindings(this, "cabalMap", this.cabalMap);
            return _loc1_;
        }

        private function _Main_Quests22_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Rogue cabal member";
            _loc1_.questGiver = "repMountainWizard";
            _loc1_.questGoal = 1;
            this.cabalRogue = _loc1_;
            BindingManager.executeBindings(this, "cabalRogue", this.cabalRogue);
            return _loc1_;
        }

        private function _Main_Locations70_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "rogue Cabal dragon\'s cave";
            this.cabalRogueBossFight = _loc1_;
            BindingManager.executeBindings(this, "cabalRogueBossFight", this.cabalRogueBossFight);
            return _loc1_;
        }

        private function _Main_Items132_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "the";
            _loc1_.Name = "map to the Cabal";
            _loc1_.Quest = true;
            _loc1_.Useable = true;
            _loc1_.Description = "A map of the mountains that leads to the entrance to the cabal\'s cave. ";
            this.cabalTownMap = _loc1_;
            BindingManager.executeBindings(this, "cabalTownMap", this.cabalTownMap);
            return _loc1_;
        }

        private function _Main_Items31_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "calamari";
            _loc1_.Value = 30;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.eat = 35;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 19;
            _loc1_.Heal = 65;
            this.calamari = _loc1_;
            BindingManager.executeBindings(this, "calamari", this.calamari);
            return _loc1_;
        }

        private function _Main_Items3_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "cheese";
            _loc1_.Value = 5;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A sizable wedge of sharp cheddar, coated with wax. Good as it is, or melted onto something. ";
            _loc1_.itemUse = "You peel off the wax and bite into the cheese. It\'s chewy, and the flavor is strong. ";
            _loc1_.eat = 7;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 4;
            _loc1_.Heal = 10;
            this.cheese = _loc1_;
            BindingManager.executeBindings(this, "cheese", this.cheese);
            return _loc1_;
        }

        private function _Main_Enemies29_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "monster cheese";
            _loc1_.voreable = true;
            _loc1_.weight = 12;
            _loc1_.STR = 35;
            _loc1_.AGI = 15;
            _loc1_.INT = 10;
            _loc1_.DEF = 6;
            _loc1_.maxHEA = 300;
            _loc1_.level = 10;
            _loc1_.GLD = 0;
            _loc1_.XP = 0;
            this.cheeseMonster = _loc1_;
            BindingManager.executeBindings(this, "cheeseMonster", this.cheeseMonster);
            return _loc1_;
        }

        private function _Main_Items29_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "chili";
            _loc1_.Value = 7;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A spicy mixture of beef and seasonings in tomato sauce, bottled into a jug for portability. This variety has beans in it to lend it extra weight. ";
            _loc1_.itemUse = "You open the jug and gulp down some chili. You can feel your entire face heat up as the spiciness gets to you. ";
            _loc1_.overfilled = "You open the jug and slowly guzzle down the chili. You are left feeling hot from the spice, and far too full for comfort... ";
            _loc1_.eat = 11;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 7;
            _loc1_.Heal = 35;
            this.chili = _loc1_;
            BindingManager.executeBindings(this, "chili", this.chili);
            return _loc1_;
        }

        private function _Main_Zones2_i():Zones {
            var _loc1_:Zones = null;
            _loc1_ = new Zones();
            this.city = _loc1_;
            BindingManager.executeBindings(this, "city", this.city);
            return _loc1_;
        }

        private function _Main_Vendors13_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "\"I don\'t have too much on hand, but if any of these are to your liking, let me know.\" ";
            _loc1_.Selling = "\"Let me take a look, I\'ll see if I can make you a deal.\" ";
            this.clerkDinoSmithNormal = _loc1_;
            BindingManager.executeBindings(this, "clerkDinoSmithNormal", this.clerkDinoSmithNormal);
            return _loc1_;
        }

        private function _Main_Vendors14_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Buying = "\"I\'ve been wanting to try making some new things for you. Here\'s what I can offer you now.\" ";
            _loc1_.Selling = "\"Let me take a look, I\'ll see if I can make you a deal.\" ";
            this.clerkDinoSmithSpecial = _loc1_;
            BindingManager.executeBindings(this, "clerkDinoSmithSpecial", this.clerkDinoSmithSpecial);
            return _loc1_;
        }

        private function _Main_Vendors11_i():Vendors {
            var _loc1_:Vendors = null;
            _loc1_ = new Vendors();
            _loc1_.Leaving = "\"See ya \'round!\" He gives a curt half-bow as you depart, leaning back and starting to munch down on a few of his own treats. ";
            this.clerkRaccoon = _loc1_;
            BindingManager.executeBindings(this, "clerkRaccoon", this.clerkRaccoon);
            return _loc1_;
        }

        private function _Main_Quests4_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Chef";
            _loc1_.questDescription = "You helped cook food for the restaurant today. Come back tomorrow and see if they need more help. ";
            this.cookedFood = _loc1_;
            BindingManager.executeBindings(this, "cookedFood", this.cookedFood);
            return _loc1_;
        }

        private function _Main_Locations101_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "cultist village";
            this.cultistVillage = _loc1_;
            BindingManager.executeBindings(this, "cultistVillage", this.cultistVillage);
            return _loc1_;
        }

        private function _Main_Locations47_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Barn";
            _loc1_.Description = "The two-story red barn stands several furs tall and goes far enough back to be larger than most peoples house. The area smells very strongly of hay. ";
            this.dairyFarmBarn = _loc1_;
            BindingManager.executeBindings(this, "dairyFarmBarn", this.dairyFarmBarn);
            return _loc1_;
        }

        private function _Main_Locations45_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Apple Tree";
            this.dairyFarmCenter = _loc1_;
            BindingManager.executeBindings(this, "dairyFarmCenter", this.dairyFarmCenter);
            return _loc1_;
        }

        private function _Main_Locations46_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Greet adventurer";
            this.dairyFarmCenterQuest = _loc1_;
            BindingManager.executeBindings(this, "dairyFarmCenterQuest", this.dairyFarmCenterQuest);
            return _loc1_;
        }

        private function _Main_Locations44_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Farm Gates";
            this.dairyFarmGates = _loc1_;
            BindingManager.executeBindings(this, "dairyFarmGates", this.dairyFarmGates);
            return _loc1_;
        }

        private function _Main_Locations51_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Farm House";
            _loc1_.Description = "You\'re standing in front of a modest rustic farm house. ";
            this.dairyFarmHouse = _loc1_;
            BindingManager.executeBindings(this, "dairyFarmHouse", this.dairyFarmHouse);
            return _loc1_;
        }

        private function _Main_Locations49_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Pasture";
            this.dairyFarmPasture = _loc1_;
            BindingManager.executeBindings(this, "dairyFarmPasture", this.dairyFarmPasture);
            return _loc1_;
        }

        private function _Main_Locations43_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Dairy Farm Road";
            _loc1_.Description = "You are standing on a well worn dirt road that meanders it\'s way up to a sprawling farm in the distance. ";
            this.dairyFarmRoad = _loc1_;
            BindingManager.executeBindings(this, "dairyFarmRoad", this.dairyFarmRoad);
            return _loc1_;
        }

        private function _Main_Locations50_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Milking Shed";
            this.dairyFarmShed = _loc1_;
            BindingManager.executeBindings(this, "dairyFarmShed", this.dairyFarmShed);
            return _loc1_;
        }

        private function _Main_Locations48_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Milk Stand";
            _loc1_.Description = "The stand is a small, rough, but solidly built wooden red shack. A white-washed sign hanging from the roof has the words \"Milk Stand\" spelled out in black paint. ";
            this.dairyFarmStand = _loc1_;
            BindingManager.executeBindings(this, "dairyFarmStand", this.dairyFarmStand);
            return _loc1_;
        }

        private function _Main_NPCs1_i():NPCs {
            var _loc1_:NPCs = null;
            _loc1_ = new NPCs();
            _loc1_.name = "Unnamed ";
            this.defaultNPC = _loc1_;
            BindingManager.executeBindings(this, "defaultNPC", this.defaultNPC);
            return _loc1_;
        }

        private function _Main_Quests26_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Beating some sense";
            _loc1_.questGoal = 3;
            _loc1_.questGold = 500;
            _loc1_.questXP = 350;
            this.defeatShaman = _loc1_;
            BindingManager.executeBindings(this, "defeatShaman", this.defeatShaman);
            return _loc1_;
        }

        private function _Main_Quests6_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Defending the herd";
            _loc1_.questGiver = "repDairyFarmer";
            _loc1_.questDescription = "Defeat any combination of 6 lions and/or cheetahs in the grasslands. ";
            _loc1_.questGoal = 6;
            _loc1_.questGold = 100;
            _loc1_.questXP = 100;
            _loc1_.reputationReward = 1;
            this.defendingTheHerd = _loc1_;
            BindingManager.executeBindings(this, "defendingTheHerd", this.defendingTheHerd);
            return _loc1_;
        }

        private function _Main_Locations61_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "tiny town";
            this.dessertVillage = _loc1_;
            BindingManager.executeBindings(this, "dessertVillage", this.dessertVillage);
            return _loc1_;
        }

        private function _Main_Defeats1_i():Defeats {
            var _loc1_:Defeats = null;
            _loc1_ = new Defeats();
            this.devoured = _loc1_;
            BindingManager.executeBindings(this, "devoured", this.devoured);
            return _loc1_;
        }

        private function _Main_Items53_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "diet pill";
            _loc1_.Value = 10;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.type = "other";
            _loc1_.Status = true;
            _loc1_.StatusTime = 240;
            _loc1_.Description = "A packet of 3 pills, labelled \'Wunda-Slim\'. ";
            _loc1_.Charges = 3;
            this.dietPill = _loc1_;
            BindingManager.executeBindings(this, "dietPill", this.dietPill);
            return _loc1_;
        }

        private function _Main_Locations26_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Donut Shoppe?";
            this.donutShop = _loc1_;
            BindingManager.executeBindings(this, "donutShop", this.donutShop);
            return _loc1_;
        }

        private function _Main_Spells10_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "rock pelt";
            _loc1_.iconType = "black";
            _loc1_.level = 1;
            _loc1_.manaCost = 6;
            _loc1_.Value = 13;
            _loc1_.requirementINT = 30;
            _loc1_.damage = 5;
            _loc1_.damageRange = 4;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Command the earth to leap at an opponent. ";
            _loc1_.descriptionCast = "You swipe a hand at your opponent, and small hunks of the ground fly at them, ";
            this.earth1 = _loc1_;
            BindingManager.executeBindings(this, "earth1", this.earth1);
            return _loc1_;
        }

        private function _Main_Spells11_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "boulder smash";
            _loc1_.iconType = "black";
            _loc1_.level = 3;
            _loc1_.manaCost = 18;
            _loc1_.Value = 40;
            _loc1_.requirementINT = 50;
            _loc1_.damage = 10;
            _loc1_.damageRange = 4;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Command the earth to bury an opponent. ";
            _loc1_.descriptionCast = "You raise a hand and clench it into a fist, and the ground around your opponent launches itself in dozens of chunks at them, ";
            this.earth3 = _loc1_;
            BindingManager.executeBindings(this, "earth3", this.earth3);
            return _loc1_;
        }

        private function _Main_Quests9_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Eating Contest";
            _loc1_.questGiver = "repEatingContest";
            _loc1_.questDescription = "1) Get the admission ticket for the eating contest from the patient in the hospital infirmary. 2) Attend the eating contest held in the barn at the dairy farm. ";
            _loc1_.questGoal = 2;
            _loc1_.reputationReward = 1;
            this.eatingContest = _loc1_;
            BindingManager.executeBindings(this, "eatingContest", this.eatingContest);
            return _loc1_;
        }

        private function _Main_Items98_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a set of";
            _loc1_.Name = "enchanted fighter\'s armor";
            _loc1_.Value = 500;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "A mixture of light plates and chainmail, this high-quality armor has been given an enchantment, increasing your speed and allowing you to stay flexible. ";
            _loc1_.itemUse = "You pull the armor on, piece by piece. The chain stretches over your joints, and the plates don\'t hinder you at all. When you have it all on, you feel significantly faster. ";
            _loc1_.Defense = 4;
            _loc1_.agiBuff = 13;
            this.enchantedFighterArmor = _loc1_;
            BindingManager.executeBindings(this, "enchantedFighterArmor", this.enchantedFighterArmor);
            return _loc1_;
        }

        private function _Main_Items100_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a set of";
            _loc1_.Name = "enchanted knight\'s armor";
            _loc1_.Value = 500;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "This gold-colored set of decorated armor will cover you from head to toe in magically enchanted interlocking plates, protecting you well and increasing your strength.";
            _loc1_.itemUse = "You strap on the armor piece by piece, covering your limbs, head, neck, and tail. When you finish, you feel safe and stronger. ";
            _loc1_.Defense = 6;
            _loc1_.strBuff = 10;
            this.enchantedKnightArmor = _loc1_;
            BindingManager.executeBindings(this, "enchantedKnightArmor", this.enchantedKnightArmor);
            return _loc1_;
        }

        private function _Main_Items93_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a set of";
            _loc1_.Name = "enchanted warmage\'s armor";
            _loc1_.Value = 500;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Armor = true;
            _loc1_.type = "armor";
            _loc1_.Description = "A rune-covered royal purple hooded robe and trousers trimmed with gold and sewn with light, protective plates in places. Its enchantment will improve your magical abilities.";
            _loc1_.Defense = 3;
            _loc1_.intBuff = 10;
            _loc1_.manaBuff = 30;
            this.enchantedWarmageArmor = _loc1_;
            BindingManager.executeBindings(this, "enchantedWarmageArmor", this.enchantedWarmageArmor);
            return _loc1_;
        }

        private function _Main_LocationType3_i():LocationType {
            var _loc1_:LocationType = null;
            _loc1_ = new LocationType();
            this.event = _loc1_;
            BindingManager.executeBindings(this, "event", this.event);
            return _loc1_;
        }

        private function _Main_Defeats3_i():Defeats {
            var _loc1_:Defeats = null;
            _loc1_ = new Defeats();
            this.exploded = _loc1_;
            BindingManager.executeBindings(this, "exploded", this.exploded);
            return _loc1_;
        }

        private function _Main_Items139_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "the";
            _loc1_.Name = "fallen star";
            _loc1_.Quest = true;
            _loc1_.Description = "A large chunk of star metal, still spherical but for a broken chunk of what must\'ve been the broken mace\'s handle back at the East Island Village Smith\'s. ";
            this.fallenStar = _loc1_;
            BindingManager.executeBindings(this, "fallenStar", this.fallenStar);
            return _loc1_;
        }

        private function _Main_Defeats5_i():Defeats {
            var _loc1_:Defeats = null;
            _loc1_ = new Defeats();
            this.floating = _loc1_;
            BindingManager.executeBindings(this, "floating", this.floating);
            return _loc1_;
        }

        private function _Main_Zones4_i():Zones {
            var _loc1_:Zones = null;
            _loc1_ = new Zones();
            this.forest = _loc1_;
            BindingManager.executeBindings(this, "forest", this.forest);
            return _loc1_;
        }

        private function _Main_Quests2_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Enchanted thread bracelet";
            _loc1_.visible = false;
            _loc1_.questGoal = 5;
            this.foundGoldThread = _loc1_;
            BindingManager.executeBindings(this, "foundGoldThread", this.foundGoldThread);
            return _loc1_;
        }

        private function _Main_Items25_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "fried chicken";
            _loc1_.Value = 6;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "An entire chicken, battered and cooked. The meat is tender, and ready to eat right off the bone. ";
            _loc1_.itemUse = "You bite into the chicken, the battered skin crunching before giving way to the soft meat. ";
            _loc1_.eat = 7;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 5;
            _loc1_.Heal = 10;
            this.friedChicken = _loc1_;
            BindingManager.executeBindings(this, "friedChicken", this.friedChicken);
            return _loc1_;
        }

        private function _Main_Enemies6_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "fruit dryad";
            _loc1_.itemFound = "However, it does look like the dryad dropped something during her escape. ";
            _loc1_.STR = 4;
            _loc1_.AGI = 7;
            _loc1_.INT = 17;
            _loc1_.DEF = 0;
            _loc1_.maxHEA = 60;
            _loc1_.level = 2;
            _loc1_.GLD = 7;
            _loc1_.XP = 12;
            _loc1_.itemChance = 25;
            this.fruitDryad = _loc1_;
            BindingManager.executeBindings(this, "fruitDryad", this.fruitDryad);
            return _loc1_;
        }

        private function _Main_Items68_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "giant axe";
            _loc1_.Value = 73;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "This mass of steel has a curved cutting edge backed by enormous weight. Smith\'s signature can be seen on the flat of it. ";
            _loc1_.itemUse = "You haul the heavy axe up onto a shoulder, more than equipped to take on the biggest tree you can find. ";
            _loc1_.attackDescription = "You swing you\'re mighty axe, ";
            _loc1_.WEAd = 3;
            _loc1_.WEAr = 15;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.6;
            this.giantAxe = _loc1_;
            BindingManager.executeBindings(this, "giantAxe", this.giantAxe);
            return _loc1_;
        }

        private function _Main_Items17_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "gigantic grape";
            _loc1_.Value = 2;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "This one grape could make enough wine to keep any drunkard happy for a night. Alternatively, you could use it as a meal or two. ";
            _loc1_.itemUse = "You bite into the enormous grape, slurping at its juice as you chow down on its fruity flesh. ";
            _loc1_.eat = 2;
            _loc1_.Charges = 9;
            _loc1_.Calories = 1;
            _loc1_.Heal = 6;
            this.giganticGrape = _loc1_;
            BindingManager.executeBindings(this, "giganticGrape", this.giganticGrape);
            return _loc1_;
        }

        private function _Main_Items79_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "glaive";
            _loc1_.Value = 70;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A long pole with a curved blade housed on the end for slicing. The length gives it leverage, all you have to do is give it speed. ";
            _loc1_.itemUse = "You give the long weapon a test swing. It swishes through the air with a satisfying sound, and you keep it at the readies. ";
            _loc1_.attackDescription = "You swing your glaive, ";
            _loc1_.WEAd = 3;
            _loc1_.WEAr = 10;
            _loc1_.damageStat = "AGI";
            _loc1_.damageScaling = 0.6;
            this.glaive = _loc1_;
            BindingManager.executeBindings(this, "glaive", this.glaive);
            return _loc1_;
        }

        private function _Main_Items120_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "gold thread";
            _loc1_.Value = 20;
            _loc1_.type = "other";
            this.goldThread = _loc1_;
            BindingManager.executeBindings(this, "goldThread", this.goldThread);
            return _loc1_;
        }

        private function _Main_Enemies51_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.article = "an";
            _loc1_.name = "obsidian golem";
            _loc1_.escapable = false;
            _loc1_.playerEscapeFail = "You try to escape, but the magical barrier has you completely encircled! ";
            _loc1_.victory = "The golem\'s body groans, shudders violently, and finally collapses into a pile of rocks. Victorious, you take one of the chunks with you. ";
            _loc1_.STR = 70;
            _loc1_.AGI = 10;
            _loc1_.INT = 20;
            _loc1_.DEF = 10;
            _loc1_.maxHEA = 450;
            _loc1_.level = 15;
            _loc1_.GLD = 60;
            _loc1_.XP = 110;
            _loc1_.itemChance = 100;
            this.golemBoss = _loc1_;
            BindingManager.executeBindings(this, "golemBoss", this.golemBoss);
            return _loc1_;
        }

        private function _Main_Locations99_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "volcano side";
            this.golemBossFight = _loc1_;
            BindingManager.executeBindings(this, "golemBossFight", this.golemBossFight);
            return _loc1_;
        }

        private function _Main_Zones3_i():Zones {
            var _loc1_:Zones = null;
            _loc1_ = new Zones();
            this.grasslands = _loc1_;
            BindingManager.executeBindings(this, "grasslands", this.grasslands);
            return _loc1_;
        }

        private function _Main_Locations75_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Deep grasslands";
            this.grasslandsHub = _loc1_;
            BindingManager.executeBindings(this, "grasslandsHub", this.grasslandsHub);
            return _loc1_;
        }

        private function _Main_Items67_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "great sword";
            _loc1_.Value = 75;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A huge, heavy, double-edged sword made by Smith. One side of the grip is grooved for use with two normal sized hands, and the other is grooved for one very large one. ";
            _loc1_.itemUse = "You heft the enormous blade onto one shoulder, ready to cut something clear in half. ";
            _loc1_.attackDescription = "You swing your mighty sword, ";
            _loc1_.WEAd = 8;
            _loc1_.WEAr = 5;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.6;
            this.greatSword = _loc1_;
            BindingManager.executeBindings(this, "greatSword", this.greatSword);
            return _loc1_;
        }

        private function _Main_Species24_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "green dragon";
            _loc1_.baseHeight = 76;
            _loc1_.furBack = "green";
            _loc1_.furBelly = "gold";
            _loc1_.furHead = "green";
            _loc1_.fur = "scales";
            _loc1_.furred = "scaled";
            _loc1_.furry = "scaly";
            this.greenDragon = _loc1_;
            BindingManager.executeBindings(this, "greenDragon", this.greenDragon);
            return _loc1_;
        }

        private function _Main_Items26_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "ham hock";
            _loc1_.Value = 7;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A big chunk of cooked ham glazed with brown sugar, giving it a nice, dark coating. ";
            _loc1_.itemUse = "You tear into the ham, the salty meat proving filling and delicious. ";
            _loc1_.overfilled = "You eat the ham, and manage to finish off the salty meat before your stomach starts to tell you it\'s had too much... ";
            _loc1_.eat = 10;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 6;
            _loc1_.Heal = 20;
            this.hamHock = _loc1_;
            BindingManager.executeBindings(this, "hamHock", this.hamHock);
            return _loc1_;
        }

        private function _Main_Items136_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "the";
            _loc1_.Name = "map to shaman\'s stronghold";
            _loc1_.Quest = true;
            _loc1_.Useable = true;
            _loc1_.Description = "A map marked with the location of the shaman that has stolen the fallen star. You are certain you could get there following this map. ";
            this.hammerMap = _loc1_;
            BindingManager.executeBindings(this, "hammerMap", this.hammerMap);
            return _loc1_;
        }

        private function _Main_Quests28_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Quest for the Hammer";
            _loc1_.questGoal = 1;
            _loc1_.questXP = 400;
            this.hammerQuest = _loc1_;
            BindingManager.executeBindings(this, "hammerQuest", this.hammerQuest);
            return _loc1_;
        }

        private function _Main_Zones5_i():Zones {
            var _loc1_:Zones = null;
            _loc1_ = new Zones();
            this.hills = _loc1_;
            BindingManager.executeBindings(this, "hills", this.hills);
            return _loc1_;
        }

        private function _Main_Items62_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "honey dipper";
            _loc1_.Value = 25;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Weapon = true;
            _loc1_.type = "weapon";
            _loc1_.Description = "A diminutive mallet that isn\'t good for much besides collecting honey. ";
            _loc1_.itemUse = "You casually toss the honey dipper up, as to examine its balance. Revolving once around its head, the honey dipper lands into your hand with a satisfactory splat. ";
            _loc1_.attackDescription = "You bash your enemy, ";
            _loc1_.WEAd = 1;
            _loc1_.WEAr = 6;
            _loc1_.damageStat = "STR";
            _loc1_.damageScaling = 0.4;
            this.honeyDipper = _loc1_;
            BindingManager.executeBindings(this, "honeyDipper", this.honeyDipper);
            return _loc1_;
        }

        private function _Main_Items146_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a set of";
            _loc1_.Name = "burst chainmail";
            _loc1_.Quest = true;
            this.horseArmorBroke = _loc1_;
            BindingManager.executeBindings(this, "horseArmorBroke", this.horseArmorBroke);
            return _loc1_;
        }

        private function _Main_Items147_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a set of";
            _loc1_.Name = "Myst chainmail";
            _loc1_.Quest = true;
            this.horseArmorFixed = _loc1_;
            BindingManager.executeBindings(this, "horseArmorFixed", this.horseArmorFixed);
            return _loc1_;
        }

        private function _Main_Items144_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a pair of";
            _loc1_.Name = "old, worn pants";
            _loc1_.Quest = true;
            this.horsePantsBroke = _loc1_;
            BindingManager.executeBindings(this, "horsePantsBroke", this.horsePantsBroke);
            return _loc1_;
        }

        private function _Main_Items145_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "a pair of";
            _loc1_.Name = "extremely large magical pants";
            _loc1_.Quest = true;
            this.horsePantsFixed = _loc1_;
            BindingManager.executeBindings(this, "horsePantsFixed", this.horsePantsFixed);
            return _loc1_;
        }

        private function _Main_Quests13_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "On the Chain Gang";
            _loc1_.questDescription = "Get Sampson the horse’s chainmail resized to fit him! ";
            _loc1_.questGoal = 4;
            _loc1_.questXP = 80;
            _loc1_.questGold = 125;
            this.horseQuestArmor = _loc1_;
            BindingManager.executeBindings(this, "horseQuestArmor", this.horseQuestArmor);
            return _loc1_;
        }

        private function _Main_Quests12_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "The Adventurer\'s New Clothes";
            _loc1_.questDescription = "Get Sampson Shire\'s pants tailored to better fit him. ";
            _loc1_.questGoal = 2;
            _loc1_.questXP = 50;
            _loc1_.questGold = 75;
            this.horseQuestClothes = _loc1_;
            BindingManager.executeBindings(this, "horseQuestClothes", this.horseQuestClothes);
            return _loc1_;
        }

        private function _Main_Quests16_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Just Desserts";
            _loc1_.questDescription = "Sampson Shire has got himself wedged in the farmhouse door! Can you free him?";
            _loc1_.questXP = 75;
            _loc1_.questGold = 50;
            this.horseQuestFreedom = _loc1_;
            BindingManager.executeBindings(this, "horseQuestFreedom", this.horseQuestFreedom);
            return _loc1_;
        }

        private function _Main_Quests11_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Horse quest";
            this.horseQuestRetire = _loc1_;
            BindingManager.executeBindings(this, "horseQuestRetire", this.horseQuestRetire);
            return _loc1_;
        }

        private function _Main_Quests15_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Give Me Strength";
            _loc1_.questDescription = "Find a spectrum gem to get Sampson Shire standing again. ";
            _loc1_.questXP = 175;
            _loc1_.questGold = 200;
            this.horseQuestStrength = _loc1_;
            BindingManager.executeBindings(this, "horseQuestStrength", this.horseQuestStrength);
            return _loc1_;
        }

        private function _Main_Quests14_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Axing a Favour";
            _loc1_.questDescription = "Find a weapon for Sampson Shire to take adventuring. ";
            _loc1_.questXP = 120;
            _loc1_.questGold = 175;
            this.horseQuestWeapon = _loc1_;
            BindingManager.executeBindings(this, "horseQuestWeapon", this.horseQuestWeapon);
            return _loc1_;
        }

        private function _Main_Spells7_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "frost shard";
            _loc1_.iconType = "black";
            _loc1_.level = 1;
            _loc1_.manaCost = 6;
            _loc1_.Value = 12;
            _loc1_.requirementINT = 30;
            _loc1_.statusEffect = "slow";
            _loc1_.statusTime = 2;
            _loc1_.damage = 3;
            _loc1_.damageRange = 6;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Fire a shard of ice at an opponent.";
            _loc1_.descriptionCast = "A shard of ice coalesces in your hands and rockets towards your enemy, ";
            this.ice1 = _loc1_;
            BindingManager.executeBindings(this, "ice1", this.ice1);
            return _loc1_;
        }

        private function _Main_Spells8_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "rolling ice";
            _loc1_.iconType = "black";
            _loc1_.level = 3;
            _loc1_.manaCost = 18;
            _loc1_.Value = 40;
            _loc1_.requirementINT = 50;
            _loc1_.statusEffect = "slow";
            _loc1_.statusTime = 3;
            _loc1_.damage = 4;
            _loc1_.damageRange = 10;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Creates a ball of extreme cold, and send it at your enemy. ";
            _loc1_.descriptionCast = "You draw a spiral with your hand as you thrust it forward. A ball of cold coalesces on the ground, spins towards your foe, and bursts as it hits them, ";
            this.ice3 = _loc1_;
            BindingManager.executeBindings(this, "ice3", this.ice3);
            return _loc1_;
        }

        private function _Main_Spells9_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "avalanche";
            _loc1_.iconType = "black";
            _loc1_.level = 5;
            _loc1_.manaCost = 36;
            _loc1_.Value = 80;
            _loc1_.requirementINT = 70;
            _loc1_.statusEffect = "slow";
            _loc1_.statusTime = 5;
            _loc1_.damage = 7;
            _loc1_.damageRange = 20;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Bury your opponent in flash-frozen air. ";
            this.ice5 = _loc1_;
            BindingManager.executeBindings(this, "ice5", this.ice5);
            return _loc1_;
        }

        private function _Main_Zones1_i():Zones {
            var _loc1_:Zones = null;
            _loc1_ = new Zones();
            this.impassable = _loc1_;
            BindingManager.executeBindings(this, "impassable", this.impassable);
            return _loc1_;
        }

        private function _Main_Items30_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "jambalaya";
            _loc1_.Value = 8;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "Rice mixed with beef, ham, spices, and vegetables. A very well rounded and filling meal that stays good for a long time. ";
            _loc1_.itemUse = "You stuff the spicy rice mixture into your mouth by the handful, the mixture of meats and vegetables going well with the medium spiciness. ";
            _loc1_.overfilled = "You stuff down the spicy rice mixtures, but the heft of it proves to be just a bit more than your stomach can handle as full as you are... ";
            _loc1_.eat = 12;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 8;
            _loc1_.Heal = 40;
            this.jambalaya = _loc1_;
            BindingManager.executeBindings(this, "jambalaya", this.jambalaya);
            return _loc1_;
        }

        private function _Main_Quests1_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "learning to smith";
            _loc1_.visible = false;
            _loc1_.questGoal = 1;
            this.learningToSmith = _loc1_;
            BindingManager.executeBindings(this, "learningToSmith", this.learningToSmith);
            return _loc1_;
        }

        private function _Main_Items141_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "sample of lemon slime";
            _loc1_.Quest = true;
            _loc1_.Description = "A smallish lump of lemonslime, devoid of all it\'s previous animate nature...? ";
            this.lemonSampleItem = _loc1_;
            BindingManager.executeBindings(this, "lemonSampleItem", this.lemonSampleItem);
            return _loc1_;
        }

        private function _Main_Items142_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "captured lemon slime";
            _loc1_.Quest = true;
            this.lemonSlimeItem = _loc1_;
            BindingManager.executeBindings(this, "lemonSlimeItem", this.lemonSlimeItem);
            return _loc1_;
        }

        private function _Main_Enemies47_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "lizard wizard";
            _loc1_.voreable = true;
            _loc1_.weight = 180;
            _loc1_.grappleEscapeFail = "You struggle against the plants, but to no avail, the sheer amount of vines, bushes, and tree limbs and roots encircling your body proving too much for you. ";
            _loc1_.STR = 5;
            _loc1_.AGI = 10;
            _loc1_.INT = 30;
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 160;
            _loc1_.level = 3;
            _loc1_.GLD = 13;
            _loc1_.XP = 17;
            this.lizardWizard = _loc1_;
            BindingManager.executeBindings(this, "lizardWizard", this.lizardWizard);
            return _loc1_;
        }

        private function _Main_Quests8_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Beware of cheese";
            _loc1_.questGiver = "repDairyFarmer";
            _loc1_.questDescription = "There\'s something nasty lurking in the milk shed. It also happens to be evil (or at a minimum misunderstood). ";
            _loc1_.questGoal = 1;
            _loc1_.questGold = 350;
            _loc1_.questXP = 250;
            this.madCheese = _loc1_;
            BindingManager.executeBindings(this, "madCheese", this.madCheese);
            return _loc1_;
        }

        private function _Main_Quests7_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Mad Milk";
            _loc1_.questGiver = "repDairyFarmer";
            _loc1_.questDescription = "Defeat the rogue milking machine in the hills. ";
            _loc1_.questGoal = 1;
            _loc1_.questGold = 200;
            _loc1_.questXP = 150;
            this.madMilk = _loc1_;
            BindingManager.executeBindings(this, "madMilk", this.madMilk);
            return _loc1_;
        }

        private function _Main_Items140_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "the";
            _loc1_.Name = "magical obsidian";
            _loc1_.Quest = true;
            _loc1_.Description = "A chunk of obsidian you broke off the golem at the volcano. The East Island Village\'s Smith can use it to reforge the greatsword, if you dare. ";
            this.magicalObsidian = _loc1_;
            BindingManager.executeBindings(this, "magicalObsidian", this.magicalObsidian);
            return _loc1_;
        }

        private function _Main_Enemies43_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "mountainous tiger sorcerer";
            _loc1_.voreable = true;
            _loc1_.weight = 600;
            _loc1_.grappleEscapeFail = "Despite your best efforts, the tiger keeps you firmly trapped beneath his bulk, content to keep wailing on you. ";
            _loc1_.grappleEscapeSucceed = "Working both his weight and yours to your advantage, you manage to get out from under him as he tumbles to the ground. ";
            _loc1_.itemFound = "You scour the area to see if there\'s anything you missed, and find a long strand of the same gold thread that the sack had been embroidered with. ";
            _loc1_.STR = 70;
            _loc1_.AGI = 35;
            _loc1_.INT = 60;
            _loc1_.DEF = 6;
            _loc1_.maxHEA = 450;
            _loc1_.level = 17;
            _loc1_.GLD = 200;
            _loc1_.XP = 350;
            _loc1_.itemChance = 100;
            this.mountainousTiger = _loc1_;
            BindingManager.executeBindings(this, "mountainousTiger", this.mountainousTiger);
            return _loc1_;
        }

        private function _Main_Zones7_i():Zones {
            var _loc1_:Zones = null;
            _loc1_ = new Zones();
            this.mountains = _loc1_;
            BindingManager.executeBindings(this, "mountains", this.mountains);
            return _loc1_;
        }

        private function _Main_Quests24_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Angered the Experiments";
            _loc1_.questDescription = "You\'ve angered a group of theoretically civil people up in the mountains. Maybe you should go make amends with them? ";
            this.onBadTermsExperiments = _loc1_;
            BindingManager.executeBindings(this, "onBadTermsExperiments", this.onBadTermsExperiments);
            return _loc1_;
        }

        private function _Main_Quests25_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Working with the Experiments";
            _loc1_.visible = false;
            this.onGoodTermsExperiments = _loc1_;
            BindingManager.executeBindings(this, "onGoodTermsExperiments", this.onGoodTermsExperiments);
            return _loc1_;
        }

        private function _Main_Items2_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "an";
            _loc1_.Name = "orange";
            _loc1_.Value = 3;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A delicious citrus fruit with a strong acid that tastes good and cleans anything. ";
            _loc1_.itemUse = "You peel the orange and chomp into its flesh. Naturally, the juice runs all over your face, but it\'s tangy enough that you don\'t mind. ";
            _loc1_.eat = 2;
            _loc1_.drink = 1;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 1.5;
            _loc1_.Heal = 9;
            this.orange = _loc1_;
            BindingManager.executeBindings(this, "orange", this.orange);
            return _loc1_;
        }

        private function _Main_Items10_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "outrageous orange";
            _loc1_.Value = 3;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A tremendous orange that is vibrant in color. The peel is soft and the fruit is firm. You could get a few meals out of this. ";
            _loc1_.itemUse = "You bite into the giant orange, the taste of citrus filling your mouth as juice floods over your tongue. ";
            _loc1_.eat = 3;
            _loc1_.Charges = 9;
            _loc1_.Calories = 1;
            _loc1_.Heal = 9;
            this.outrageousOrange = _loc1_;
            BindingManager.executeBindings(this, "outrageousOrange", this.outrageousOrange);
            return _loc1_;
        }

        private function _Main_Items116_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "overalls";
            _loc1_.Value = 12;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Bottom = true;
            _loc1_.Expand = 24;
            _loc1_.type = "pants";
            _loc1_.Description = "An XXL set of white bib overalls with a large pocket at the front. Perfect for the heavier-set labourer. ";
            this.overalls = _loc1_;
            BindingManager.executeBindings(this, "overalls", this.overalls);
            return _loc1_;
        }

        private function _Main_Defeats2_i():Defeats {
            var _loc1_:Defeats = null;
            _loc1_ = new Defeats();
            this.overeating = _loc1_;
            BindingManager.executeBindings(this, "overeating", this.overeating);
            return _loc1_;
        }

        private function _Main_Locations102_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "strange plant";
            this.pitcherPlant = _loc1_;
            BindingManager.executeBindings(this, "pitcherPlant", this.pitcherPlant);
            return _loc1_;
        }

        private function _Main_Items11_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "plentiful peach";
            _loc1_.Value = 3;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A peach big enough to use as a helmet if you ate out the middle of it. Given that magic is keeping it firm and ripe, you might. ";
            _loc1_.itemUse = "You sink your teeth into the enormous peach, its distinct flavor and juice filling your mouth as you chew. ";
            _loc1_.eat = 3;
            _loc1_.Charges = 9;
            _loc1_.Calories = 1;
            _loc1_.Heal = 9;
            this.plentifulPeach = _loc1_;
            BindingManager.executeBindings(this, "plentifulPeach", this.plentifulPeach);
            return _loc1_;
        }

        private function _Main_Species54_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "polar bear";
            _loc1_.baseHeight = 78;
            _loc1_.furBack = "white";
            _loc1_.furBelly = "white";
            _loc1_.furHead = "white";
            this.polarBear = _loc1_;
            BindingManager.executeBindings(this, "polarBear", this.polarBear);
            return _loc1_;
        }

        private function _Main_Items15_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "profuse pumpkin";
            _loc1_.Value = 20;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "An enormous pumpkin the size of a small shed. The only thing more marvelous than the fact that you\'re carrying it is that it\'s lost none of its vibrant orange color. ";
            _loc1_.itemUse = "You dig into the meat of the pumpkin, eating a hole inside and devouring it from the inside. It\'s a stringy mess, but it\'s the flavor of Fall. ";
            _loc1_.eat = 20;
            _loc1_.Charges = 9;
            _loc1_.Calories = 10;
            _loc1_.Heal = 50;
            this.profusePumpkin = _loc1_;
            BindingManager.executeBindings(this, "profusePumpkin", this.profusePumpkin);
            return _loc1_;
        }

        private function _Main_Species17_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "pterodactyl";
            _loc1_.baseHeight = 65;
            _loc1_.furBack = "green";
            _loc1_.furBelly = "beige";
            _loc1_.furHead = "green";
            _loc1_.hand = "wing";
            _loc1_.hands = "wings";
            _loc1_.fur = "scales";
            _loc1_.furred = "scaled";
            _loc1_.furry = "scaly";
            this.pterodactyl = _loc1_;
            BindingManager.executeBindings(this, "pterodactyl", this.pterodactyl);
            return _loc1_;
        }

        private function _Main_Locations88_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "floating restaurant";
            this.raccoonStore = _loc1_;
            BindingManager.executeBindings(this, "raccoonStore", this.raccoonStore);
            return _loc1_;
        }

        private function _Main_Species16_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "raptor";
            _loc1_.baseHeight = 70;
            _loc1_.furBack = "dark green";
            _loc1_.furBelly = "beige";
            _loc1_.furHead = "dark green";
            _loc1_.hand = "claw";
            _loc1_.hands = "claws";
            _loc1_.fur = "scales";
            _loc1_.furred = "scaled";
            _loc1_.furry = "scaly";
            this.raptor = _loc1_;
            BindingManager.executeBindings(this, "raptor", this.raptor);
            return _loc1_;
        }

        private function _Main_Species25_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "red dragon";
            _loc1_.baseHeight = 73;
            _loc1_.furBack = "red";
            _loc1_.furBelly = "gold";
            _loc1_.furHead = "red";
            _loc1_.fur = "scales";
            _loc1_.furred = "scaled";
            _loc1_.furry = "scaly";
            this.redDragon = _loc1_;
            BindingManager.executeBindings(this, "redDragon", this.redDragon);
            return _loc1_;
        }

        private function _Main_Items18_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "rice bowl";
            _loc1_.Value = 20;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "Steaming hot and lightly seasoned, rice is great if you\'re hungry and want 2000 of something. Might fill you up more than you\'d expect. ";
            _loc1_.eat = 25;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 12;
            _loc1_.Heal = 75;
            this.riceBowl = _loc1_;
            BindingManager.executeBindings(this, "riceBowl", this.riceBowl);
            return _loc1_;
        }

        private function _Main_Items12_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "ridiculous raspberry";
            _loc1_.Value = 2;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A raspberry the size of a small child, but almost certainly better tasting. Magic keeps it fresh, clean, and ready to eat. ";
            _loc1_.itemUse = "You take a few good bites rom the fruit of the enormous raspberry, the flavor is best described as \'red and sweet.\' ";
            _loc1_.eat = 2;
            _loc1_.Charges = 9;
            _loc1_.Calories = 1;
            _loc1_.Heal = 6;
            this.ridiculousRaspberry = _loc1_;
            BindingManager.executeBindings(this, "ridiculousRaspberry", this.ridiculousRaspberry);
            return _loc1_;
        }

        private function _Main_Enemies50_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "star shaman";
            _loc1_.voreable = true;
            _loc1_.weight = 250;
            _loc1_.escapable = false;
            _loc1_.attackCounterA = 2;
            _loc1_.attackCounterB = 10;
            _loc1_.playerEscapeFail = "You try to get out, but with the gate closed, there isn\'t any good way to escape! ";
            _loc1_.STR = 20;
            _loc1_.AGI = 20;
            _loc1_.INT = 65;
            _loc1_.attackStat = "INT";
            _loc1_.DEF = 5;
            _loc1_.maxHEA = 400;
            _loc1_.level = 15;
            _loc1_.GLD = 60;
            _loc1_.XP = 110;
            _loc1_.itemChance = 100;
            this.shamanBoss = _loc1_;
            BindingManager.executeBindings(this, "shamanBoss", this.shamanBoss);
            return _loc1_;
        }

        private function _Main_Locations98_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "shaman\'s stronghold";
            this.shamanBossFight = _loc1_;
            BindingManager.executeBindings(this, "shamanBossFight", this.shamanBossFight);
            return _loc1_;
        }

        private function _Main_Enemies28_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "glutton shaman";
            _loc1_.voreable = true;
            _loc1_.weight = 350;
            _loc1_.STR = 20;
            _loc1_.AGI = 20;
            _loc1_.INT = 55;
            _loc1_.attackStat = "INT";
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 220;
            _loc1_.level = 9;
            _loc1_.GLD = 40;
            _loc1_.XP = 75;
            this.shamanBossNormal = _loc1_;
            BindingManager.executeBindings(this, "shamanBossNormal", this.shamanBossNormal);
            return _loc1_;
        }

        private function _Main_Items14_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "sizable strawberry";
            _loc1_.Value = 2;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A gigantic strawberry. The seeds that dot it are regular size, however, and unlike natural large strawberries, this has lost none of its red color. ";
            _loc1_.itemUse = "You eat some of the strawberry. The hardness of the little seeds does not take away from the sweetness of the fruit\'s red flesh. ";
            _loc1_.eat = 2;
            _loc1_.Charges = 9;
            _loc1_.Calories = 1;
            _loc1_.Heal = 6;
            this.sizableStrawberry = _loc1_;
            BindingManager.executeBindings(this, "sizableStrawberry", this.sizableStrawberry);
            return _loc1_;
        }

        private function _Main_Quests17_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Slime Quest part 1";
            _loc1_.questDescription = "Bronk, the west town innkeeper, wants you to bring him some lemon slime to try. ";
            _loc1_.questGoal = 1;
            _loc1_.questGold = 10;
            _loc1_.questXP = 50;
            this.slimeQuest1 = _loc1_;
            BindingManager.executeBindings(this, "slimeQuest1", this.slimeQuest1);
            return _loc1_;
        }

        private function _Main_Quests18_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Slime Quest part 2";
            _loc1_.questDescription = "Bronk the innkeeper wants you to bring him a whole Lemon slime, intact. ";
            _loc1_.questGoal = 1;
            _loc1_.questGold = 20;
            _loc1_.questXP = 90;
            this.slimeQuest2 = _loc1_;
            BindingManager.executeBindings(this, "slimeQuest2", this.slimeQuest2);
            return _loc1_;
        }

        private function _Main_Quests19_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Slime Quest part 3";
            _loc1_.questDescription = "Bronk the innkeeper wants you to bring him 3 whole lemon slimes!";
            _loc1_.questGoal = 3;
            _loc1_.questGold = 50;
            _loc1_.questXP = 150;
            this.slimeQuest3 = _loc1_;
            BindingManager.executeBindings(this, "slimeQuest3", this.slimeQuest3);
            return _loc1_;
        }

        private function _Main_Quests20_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Slime Quest part 4";
            _loc1_.questDescription = "Bronk the innkeeper wants you to capture him a Blueberry Slime. ";
            _loc1_.questGoal = 1;
            _loc1_.questGold = 30;
            _loc1_.questXP = 210;
            this.slimeQuest4 = _loc1_;
            BindingManager.executeBindings(this, "slimeQuest4", this.slimeQuest4);
            return _loc1_;
        }

        private function _Main_Quests21_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Slime Quest part 5";
            _loc1_.questDescription = "Bronk the insatiable innkeeper wants you to catch him 4 Blueberry Slimes!? ";
            _loc1_.questGoal = 4;
            _loc1_.questGold = 150;
            _loc1_.questXP = 300;
            this.slimeQuest5 = _loc1_;
            BindingManager.executeBindings(this, "slimeQuest5", this.slimeQuest5);
            return _loc1_;
        }

        private function _Main_Quests5_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Smithee";
            _loc1_.questDescription = "You helped with smithing down at the armory. Come back tomorrow to see if he needs any more help. ";
            this.smithedArmor = _loc1_;
            BindingManager.executeBindings(this, "smithedArmor", this.smithedArmor);
            return _loc1_;
        }

        private function _Main_Items135_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "the";
            _loc1_.Name = "map to serpent\'s lair";
            _loc1_.Quest = true;
            _loc1_.Useable = true;
            this.spearMap = _loc1_;
            BindingManager.executeBindings(this, "spearMap", this.spearMap);
            return _loc1_;
        }

        private function _Main_Quests27_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Quest for the Spear";
            _loc1_.questGoal = 1;
            _loc1_.questXP = 400;
            this.spearQuest = _loc1_;
            BindingManager.executeBindings(this, "spearQuest", this.spearQuest);
            return _loc1_;
        }

        private function _Main_Species19_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "stegosaurus";
            _loc1_.baseHeight = 75;
            _loc1_.furBack = "grey";
            _loc1_.furBelly = "beige";
            _loc1_.furHead = "grey";
            _loc1_.fur = "scales";
            _loc1_.furred = "scaled";
            _loc1_.furry = "scaly";
            this.stegosaurus = _loc1_;
            BindingManager.executeBindings(this, "stegosaurus", this.stegosaurus);
            return _loc1_;
        }

        private function _Main_LocationType1_i():LocationType {
            var _loc1_:LocationType = null;
            _loc1_ = new LocationType();
            this.store = _loc1_;
            BindingManager.executeBindings(this, "store", this.store);
            return _loc1_;
        }

        private function _Main_Items32_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "sushi roll";
            _loc1_.Value = 30;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.eat = 35;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 17;
            _loc1_.Heal = 65;
            this.sushiRoll = _loc1_;
            BindingManager.executeBindings(this, "sushiRoll", this.sushiRoll);
            return _loc1_;
        }

        private function _Main_Items137_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "the";
            _loc1_.Name = "map to volcano side";
            _loc1_.Quest = true;
            _loc1_.Useable = true;
            this.swordMap = _loc1_;
            BindingManager.executeBindings(this, "swordMap", this.swordMap);
            return _loc1_;
        }

        private function _Main_Quests29_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Quest for the Sword";
            _loc1_.questGoal = 1;
            _loc1_.questXP = 400;
            this.swordQuest = _loc1_;
            BindingManager.executeBindings(this, "swordQuest", this.swordQuest);
            return _loc1_;
        }

        private function _Main_Enemies22_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "takeout terror";
            _loc1_.voreable = true;
            _loc1_.weight = 250;
            _loc1_.STR = 24;
            _loc1_.AGI = 10;
            _loc1_.INT = 15;
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 140;
            _loc1_.level = 5;
            _loc1_.GLD = 15;
            _loc1_.XP = 30;
            this.takeoutTerror = _loc1_;
            BindingManager.executeBindings(this, "takeoutTerror", this.takeoutTerror);
            return _loc1_;
        }

        private function _Main_Items33_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "tempura shrimp";
            _loc1_.Value = 30;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "A few sizeable hunks of shrimp, breaded and deep fried to a luxurious golden-brown. Served with a savory dip to really bring out the flavors. Jumbo flavor, jumbo filling! ";
            _loc1_.eat = 38;
            _loc1_.StackLimit = 5;
            _loc1_.Calories = 25;
            _loc1_.Heal = 60;
            this.tempuraShrimp = _loc1_;
            BindingManager.executeBindings(this, "tempuraShrimp", this.tempuraShrimp);
            return _loc1_;
        }

        private function _Main_Locations69_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "mountainous tiger";
            this.tigerFight = _loc1_;
            BindingManager.executeBindings(this, "tigerFight", this.tigerFight);
            return _loc1_;
        }

        private function _Main_Defeats6_i():Defeats {
            var _loc1_:Defeats = null;
            _loc1_ = new Defeats();
            this.transformed = _loc1_;
            BindingManager.executeBindings(this, "transformed", this.transformed);
            return _loc1_;
        }

        private function _Main_Species18_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "triceratops";
            _loc1_.baseHeight = 75;
            _loc1_.furBack = "brown";
            _loc1_.furBelly = "brown";
            _loc1_.furHead = "brown";
            _loc1_.fur = "scales";
            _loc1_.furred = "scaled";
            _loc1_.furry = "scaly";
            this.triceratops = _loc1_;
            BindingManager.executeBindings(this, "triceratops", this.triceratops);
            return _loc1_;
        }

        private function _Main_Items104_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "tropical shirt";
            _loc1_.Value = 8;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Top = true;
            _loc1_.Expand = 10;
            _loc1_.type = "shirt";
            _loc1_.Description = "A really bright and cheerful piece of tropical clothing, if not the most tasteful of garments. ";
            this.tropicalShirt = _loc1_;
            BindingManager.executeBindings(this, "tropicalShirt", this.tropicalShirt);
            return _loc1_;
        }

        private function _Main_Species21_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "tyrannosaurus";
            _loc1_.baseHeight = 78;
            _loc1_.furBack = "dark green";
            _loc1_.furBelly = "beige";
            _loc1_.furHead = "dark green";
            _loc1_.hand = "claw";
            _loc1_.hands = "claws";
            _loc1_.fur = "scales";
            _loc1_.furred = "scaled";
            _loc1_.furry = "scaly";
            this.tyrannosaurus = _loc1_;
            BindingManager.executeBindings(this, "tyrannosaurus", this.tyrannosaurus);
            return _loc1_;
        }

        private function _Main_Quests10_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Uncommon Taste";
            _loc1_.questDescription = "Bring [food item] to the ex-adventurer horse hanging out at the dairy farm. ";
            _loc1_.questGoal = 1;
            _loc1_.questXP = 80;
            this.uncommonTaste = _loc1_;
            BindingManager.executeBindings(this, "uncommonTaste", this.uncommonTaste);
            return _loc1_;
        }

        private function _Main_Quests3_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Dishwasher";
            _loc1_.questDescription = "You helped do dishes at the restaurant today. Come back tomorrow to see if they need more help. ";
            this.washedDishes = _loc1_;
            BindingManager.executeBindings(this, "washedDishes", this.washedDishes);
            return _loc1_;
        }

        private function _Main_Spells12_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "douse";
            _loc1_.iconType = "grey";
            _loc1_.level = 1;
            _loc1_.manaCost = 5;
            _loc1_.Value = 15;
            _loc1_.requirementINT = 20;
            _loc1_.statusEffect = "soak";
            _loc1_.statusTime = 3;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Condense water from the air to soak an enemy, making them more susceptible to lightning. ";
            _loc1_.descriptionCast = "You raise a hand above your head and lower it slowly, causing a rain of water to fall harmlessly on your opponent. ";
            this.water1 = _loc1_;
            BindingManager.executeBindings(this, "water1", this.water1);
            return _loc1_;
        }

        private function _Main_Spells13_i():Spells {
            var _loc1_:Spells = null;
            _loc1_ = new Spells();
            _loc1_.name = "geyser";
            _loc1_.iconType = "black";
            _loc1_.level = 3;
            _loc1_.manaCost = 20;
            _loc1_.Value = 40;
            _loc1_.requirementINT = 50;
            _loc1_.statusEffect = "soak";
            _loc1_.statusTime = 5;
            _loc1_.damage = 4;
            _loc1_.damageRange = 8;
            _loc1_.spellType = "attack";
            _loc1_.targets = "enemy";
            _loc1_.description = "Summon a gout of water from the ground to pummel and soak an enemy. ";
            this.water3 = _loc1_;
            BindingManager.executeBindings(this, "water3", this.water3);
            return _loc1_;
        }

        private function _Main_DamageType7_i():DamageType {
            var _loc1_:DamageType = null;
            _loc1_ = new DamageType();
            _loc1_.name = "water";
            this.waterDamage = _loc1_;
            BindingManager.executeBindings(this, "waterDamage", this.waterDamage);
            return _loc1_;
        }

        private function _Main_Species26_i():Species {
            var _loc1_:Species = null;
            _loc1_ = new Species();
            _loc1_.speciesName = "white dragon";
            _loc1_.baseHeight = 74;
            _loc1_.furBack = "white";
            _loc1_.furBelly = "gold";
            _loc1_.furHead = "white";
            _loc1_.fur = "scales";
            _loc1_.furred = "scaled";
            _loc1_.furry = "scaly";
            this.whiteDragon = _loc1_;
            BindingManager.executeBindings(this, "whiteDragon", this.whiteDragon);
            return _loc1_;
        }

        private function _Main_Items138_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.article = "the";
            _loc1_.Name = "white gold chunk";
            _loc1_.Quest = true;
            _loc1_.Description = "This chunk of white gold is quite lovely, and the Smith in the East Island Village can use it to reforge the broken spear. ";
            this.whiteGoldChunk = _loc1_;
            BindingManager.executeBindings(this, "whiteGoldChunk", this.whiteGoldChunk);
            return _loc1_;
        }

        private function _Main_Items16_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "whopping watermelon";
            _loc1_.Value = 20;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Food = true;
            _loc1_.type = "food";
            _loc1_.Description = "This watermelon could double as a place to sleep if you ate out all the insides. Given that it\'s pink and delicious in there, that might not be a bad idea. ";
            _loc1_.itemUse = "You dig into the watermelon, and become a slick and sticky mess of its juice. A small pile of seeds forms as you spit them out while you eat. ";
            _loc1_.eat = 16;
            _loc1_.drink = 4;
            _loc1_.Charges = 9;
            _loc1_.Calories = 8;
            _loc1_.Heal = 48;
            this.whoppingWatermelon = _loc1_;
            BindingManager.executeBindings(this, "whoppingWatermelon", this.whoppingWatermelon);
            return _loc1_;
        }

        private function _Main_LocationType2_i():LocationType {
            var _loc1_:LocationType = null;
            _loc1_ = new LocationType();
            this.wilderness = _loc1_;
            BindingManager.executeBindings(this, "wilderness", this.wilderness);
            return _loc1_;
        }

        private function _Main_Locations79_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "Captive";
            this.wildlingCaptive = _loc1_;
            BindingManager.executeBindings(this, "wildlingCaptive", this.wildlingCaptive);
            return _loc1_;
        }

        private function _Main_Enemies23_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "wildling shaman";
            _loc1_.STR = 10;
            _loc1_.AGI = 17;
            _loc1_.INT = 27;
            _loc1_.DEF = 2;
            _loc1_.maxHEA = 110;
            _loc1_.level = 5;
            _loc1_.GLD = 12;
            _loc1_.XP = 24;
            this.wildlingShaman = _loc1_;
            BindingManager.executeBindings(this, "wildlingShaman", this.wildlingShaman);
            return _loc1_;
        }

        private function _Main_Enemies24_i():Enemies {
            var _loc1_:Enemies = null;
            _loc1_ = new Enemies();
            _loc1_.name = "wise wildling shaman";
            _loc1_.STR = 13;
            _loc1_.AGI = 20;
            _loc1_.INT = 34;
            _loc1_.DEF = 3;
            _loc1_.maxHEA = 160;
            _loc1_.level = 7;
            _loc1_.GLD = 19;
            _loc1_.XP = 38;
            this.wildlingShamanBoss = _loc1_;
            BindingManager.executeBindings(this, "wildlingShamanBoss", this.wildlingShamanBoss);
            return _loc1_;
        }

        private function _Main_Items41_i():Items {
            var _loc1_:Items = null;
            _loc1_ = new Items();
            _loc1_.Name = "wine";
            _loc1_.Value = 2;
            _loc1_.Consume = true;
            _loc1_.Useable = true;
            _loc1_.Drink = true;
            _loc1_.type = "drink";
            _loc1_.Description = "Made with fermented grapes, aged in a wooden barrel and poured in a big old jug for you to enjoy. ";
            _loc1_.itemUse = "You pop open the jug and drink some wine. It\'s fairly sweet, and the alcohol makes you feel warm and tingly. ";
            _loc1_.drink = 3;
            _loc1_.Charges = 5;
            _loc1_.Calories = 2;
            _loc1_.Stamina = 20;
            _loc1_.Heal = 7;
            this.wine = _loc1_;
            BindingManager.executeBindings(this, "wine", this.wine);
            return _loc1_;
        }

        private function _Main_Locations60_i():Locations {
            var _loc1_:Locations = null;
            _loc1_ = new Locations();
            _loc1_.Name = "wishing well";
            this.wishingWell = _loc1_;
            BindingManager.executeBindings(this, "wishingWell", this.wishingWell);
            return _loc1_;
        }

        private function _Main_Quests23_i():Quests {
            var _loc1_:Quests = null;
            _loc1_ = new Quests();
            _loc1_.questName = "Wizard\'s Notebook";
            _loc1_.questGiver = "repMountainWizard";
            _loc1_.questGoal = 1;
            _loc1_.reputationReward = 1;
            this.wizardNotebook = _loc1_;
            BindingManager.executeBindings(this, "wizardNotebook", this.wizardNotebook);
            return _loc1_;
        }

        private function _Main_BasicLayout1_c():BasicLayout {
            var _loc1_:BasicLayout = null;
            _loc1_ = new BasicLayout();
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Array2_c():Array {
            var _loc1_:Array = null;
            _loc1_ = [this._Main_Group1_i()];
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Group1_i():Group {
            var _loc1_:Group = null;
            _loc1_ = new Group();
            _loc1_.width = 1100;
            _loc1_.height = 800;
            _loc1_.mxmlContent = [this._Main_Image1_i(), this._Main_Group3_i()];
            _loc1_.id = "UI";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.UI = _loc1_;
            BindingManager.executeBindings(this, "UI", this.UI);
            return _loc1_;
        }

        private function _Main_Image1_i():Image {
            var _loc1_:Image = null;
            _loc1_ = new Image();
            _loc1_.left = 0;
            _loc1_.top = 0;
            _loc1_.percentWidth = 100;
            _loc1_.percentHeight = 100;
            _loc1_.source = this._embed_mxml_____Assets_backGround_png_69632306;
            _loc1_.alpha = 0.7;
            _loc1_.id = "backGround";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.backGround = _loc1_;
            BindingManager.executeBindings(this, "backGround", this.backGround);
            return _loc1_;
        }

        private function _Main_Image2_i():Image {
            var _loc1_:Image = null;
            _loc1_ = new Image();
            _loc1_.bottom = 0;
            _loc1_.left = 0;
            _loc1_.source = this._embed_mxml_____Assets_box_png_1678595406;
            _loc1_.id = "_Main_Image2";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Image2 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Image2", this._Main_Image2);
            return _loc1_;
        }

        private function _Main_Image3_i():Image {
            var _loc1_:Image = null;
            _loc1_ = new Image();
            _loc1_.bottom = 0;
            _loc1_.left = 325;
            _loc1_.source = this._embed_mxml_____Assets_books_png_195370380;
            _loc1_.id = "_Main_Image3";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Image3 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Image3", this._Main_Image3);
            return _loc1_;
        }

        private function _Main_Image4_i():Image {
            var _loc1_:Image = null;
            _loc1_ = new Image();
            _loc1_.bottom = 0;
            _loc1_.right = 0;
            _loc1_.source = this._embed_mxml_____Assets_gold_png_176888366;
            _loc1_.id = "_Main_Image4";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Image4 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Image4", this._Main_Image4);
            return _loc1_;
        }

        private function _Main_Group2_i():Group {
            var _loc1_:Group = null;
            _loc1_ = new Group();
            _loc1_.top = 15;
            _loc1_.horizontalCenter = 350;
            _loc1_.mxmlContent = [this._Main_Image5_i()];
            _loc1_.id = "gameImages";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.gameImages = _loc1_;
            BindingManager.executeBindings(this, "gameImages", this.gameImages);
            return _loc1_;
        }

        private function _Main_Image5_i():Image {
            var _loc1_:Image = null;
            _loc1_ = new Image();
            _loc1_.id = "sceneImage";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.sceneImage = _loc1_;
            BindingManager.executeBindings(this, "sceneImage", this.sceneImage);
            return _loc1_;
        }

        private function _Main_Image6_i():Image {
            var _loc1_:Image = null;
            _loc1_ = new Image();
            _loc1_.horizontalCenter = -3;
            _loc1_.bottom = 20;
            _loc1_.id = "enemyImage";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.enemyImage = _loc1_;
            BindingManager.executeBindings(this, "enemyImage", this.enemyImage);
            return _loc1_;
        }

        private function _Main_Image7_i():Image {
            var _loc1_:Image = null;
            _loc1_ = new Image();
            _loc1_.horizontalCenter = -236;
            _loc1_.top = 445;
            _loc1_.source = this._embed_mxml_____Assets_sign_png_183101168;
            _loc1_.id = "_Main_Image7";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Image7 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Image7", this._Main_Image7);
            return _loc1_;
        }

        private function _Main_Image8_i():Image {
            var _loc1_:Image = null;
            _loc1_ = new Image();
            _loc1_.x = 0;
            _loc1_.horizontalCenter = 0;
            _loc1_.source = this._embed_mxml_____Assets_woodframe_png_220704496;
            _loc1_.id = "_Main_Image8";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Image8 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Image8", this._Main_Image8);
            return _loc1_;
        }

        private function _Main_VGroup1_i():VGroup {
            var _loc1_:VGroup = null;
            _loc1_ = new VGroup();
            _loc1_.horizontalAlign = "center";
            _loc1_.verticalCenter = 0;
            _loc1_.horizontalCenter = 0;
            _loc1_.mxmlContent = [this._Main_HGroup1_c(), this._Main_HGroup2_c(), this._Main_HGroup3_c(), this._Main_HGroup4_c(), this._Main_HGroup5_c(), this._Main_HGroup6_c(), this._Main_HGroup7_c(), this._Main_HGroup8_c(), this._Main_HGroup9_c()];
            _loc1_.id = "cheatOptions";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.cheatOptions = _loc1_;
            BindingManager.executeBindings(this, "cheatOptions", this.cheatOptions);
            return _loc1_;
        }

        private function _Main_HGroup1_c():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.mxmlContent = [this._Main_Label1_c(), this._Main_TextInput1_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Label1_c():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.text = "Strength";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_TextInput1_i():spark.components.TextInput {
            var _loc1_:spark.components.TextInput = null;
            _loc1_ = new spark.components.TextInput();
            _loc1_.text = "";
            _loc1_.maxChars = 9;
            _loc1_.restrict = "0-9";
            _loc1_.id = "cheatStrength";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.cheatStrength = _loc1_;
            BindingManager.executeBindings(this, "cheatStrength", this.cheatStrength);
            return _loc1_;
        }

        private function _Main_HGroup2_c():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.mxmlContent = [this._Main_Label2_c(), this._Main_TextInput2_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Label2_c():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.text = "Agility";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_TextInput2_i():spark.components.TextInput {
            var _loc1_:spark.components.TextInput = null;
            _loc1_ = new spark.components.TextInput();
            _loc1_.text = "";
            _loc1_.maxChars = 9;
            _loc1_.restrict = "0-9";
            _loc1_.id = "cheatAgility";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.cheatAgility = _loc1_;
            BindingManager.executeBindings(this, "cheatAgility", this.cheatAgility);
            return _loc1_;
        }

        private function _Main_HGroup3_c():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.mxmlContent = [this._Main_Label3_c(), this._Main_TextInput3_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Label3_c():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.text = "Intelligence";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_TextInput3_i():spark.components.TextInput {
            var _loc1_:spark.components.TextInput = null;
            _loc1_ = new spark.components.TextInput();
            _loc1_.text = "";
            _loc1_.maxChars = 9;
            _loc1_.restrict = "0-9";
            _loc1_.id = "cheatIntelligence";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.cheatIntelligence = _loc1_;
            BindingManager.executeBindings(this, "cheatIntelligence", this.cheatIntelligence);
            return _loc1_;
        }

        private function _Main_HGroup4_c():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.mxmlContent = [this._Main_Label4_c(), this._Main_TextInput4_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Label4_c():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.text = "Endurance";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_TextInput4_i():spark.components.TextInput {
            var _loc1_:spark.components.TextInput = null;
            _loc1_ = new spark.components.TextInput();
            _loc1_.text = "";
            _loc1_.maxChars = 9;
            _loc1_.restrict = "0-9";
            _loc1_.id = "cheatEndurance";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.cheatEndurance = _loc1_;
            BindingManager.executeBindings(this, "cheatEndurance", this.cheatEndurance);
            return _loc1_;
        }

        private function _Main_HGroup5_c():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.mxmlContent = [this._Main_Label5_c(), this._Main_TextInput5_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Label5_c():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.text = "Stomach capacity";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_TextInput5_i():spark.components.TextInput {
            var _loc1_:spark.components.TextInput = null;
            _loc1_ = new spark.components.TextInput();
            _loc1_.text = "";
            _loc1_.maxChars = 9;
            _loc1_.restrict = "0-9";
            _loc1_.id = "cheatStomach";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.cheatStomach = _loc1_;
            BindingManager.executeBindings(this, "cheatStomach", this.cheatStomach);
            return _loc1_;
        }

        private function _Main_HGroup6_c():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.mxmlContent = [this._Main_Label6_c(), this._Main_TextInput6_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Label6_c():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.text = "Health";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_TextInput6_i():spark.components.TextInput {
            var _loc1_:spark.components.TextInput = null;
            _loc1_ = new spark.components.TextInput();
            _loc1_.text = "";
            _loc1_.maxChars = 9;
            _loc1_.restrict = "0-9";
            _loc1_.id = "cheatHealth";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.cheatHealth = _loc1_;
            BindingManager.executeBindings(this, "cheatHealth", this.cheatHealth);
            return _loc1_;
        }

        private function _Main_HGroup7_c():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.mxmlContent = [this._Main_Label7_c(), this._Main_TextInput7_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Label7_c():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.text = "Fatness";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_TextInput7_i():spark.components.TextInput {
            var _loc1_:spark.components.TextInput = null;
            _loc1_ = new spark.components.TextInput();
            _loc1_.text = "";
            _loc1_.maxChars = 9;
            _loc1_.restrict = "0-9";
            _loc1_.id = "cheatFat";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.cheatFat = _loc1_;
            BindingManager.executeBindings(this, "cheatFat", this.cheatFat);
            return _loc1_;
        }

        private function _Main_HGroup8_c():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.mxmlContent = [this._Main_Label8_c(), this._Main_TextInput8_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Label8_c():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.text = "Gold";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_TextInput8_i():spark.components.TextInput {
            var _loc1_:spark.components.TextInput = null;
            _loc1_ = new spark.components.TextInput();
            _loc1_.text = "";
            _loc1_.maxChars = 9;
            _loc1_.restrict = "0-9";
            _loc1_.id = "cheatGold";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.cheatGold = _loc1_;
            BindingManager.executeBindings(this, "cheatGold", this.cheatGold);
            return _loc1_;
        }

        private function _Main_HGroup9_c():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.mxmlContent = [this._Main_WrapButton1_i(), this._Main_WrapButton2_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_WrapButton1_i():WrapButton {
            var _loc1_:WrapButton = null;
            _loc1_ = new WrapButton();
            _loc1_.label = "Accept";
            _loc1_.setStyle("downSkin", this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995);
            _loc1_.setStyle("upSkin", this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293);
            _loc1_.setStyle("overSkin", this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533);
            _loc1_.addEventListener("click", this.__cheatDone_click);
            _loc1_.id = "cheatDone";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.cheatDone = _loc1_;
            BindingManager.executeBindings(this, "cheatDone", this.cheatDone);
            return _loc1_;
        }

        public function __cheatDone_click(param1:MouseEvent):void {
            this.acceptCheat();
        }

        private function _Main_WrapButton2_i():WrapButton {
            var _loc1_:WrapButton = null;
            _loc1_ = new WrapButton();
            _loc1_.label = "Cancel";
            _loc1_.setStyle("downSkin", this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995);
            _loc1_.setStyle("upSkin", this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293);
            _loc1_.setStyle("overSkin", this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533);
            _loc1_.addEventListener("click", this.__cheatCancel_click);
            _loc1_.id = "cheatCancel";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.cheatCancel = _loc1_;
            BindingManager.executeBindings(this, "cheatCancel", this.cheatCancel);
            return _loc1_;
        }

        public function __cheatCancel_click(param1:MouseEvent):void {
            this.changeOptions();
        }

        private function _Main_VGroup2_i():VGroup {
            var _loc1_:VGroup = null;
            _loc1_ = new VGroup();
            _loc1_.horizontalAlign = "center";
            _loc1_.horizontalCenter = 0;
            _loc1_.verticalCenter = 0;
            _loc1_.mxmlContent = [this._Main_TextArea1_c(), this._Main_Grid1_c(), this._Main_TextArea2_i(), this._Main_Grid2_i(), this._Main_Grid3_c()];
            _loc1_.setStyle("textAlign", "center");
            _loc1_.setStyle("fontSize", 16);
            _loc1_.id = "speciesDescriptors";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.speciesDescriptors = _loc1_;
            BindingManager.executeBindings(this, "speciesDescriptors", this.speciesDescriptors);
            return _loc1_;
        }

        private function _Main_TextArea1_c():TextArea {
            var _loc1_:TextArea = null;
            _loc1_ = new TextArea();
            _loc1_.percentWidth = 100;
            _loc1_.editable = false;
            _loc1_.text = "All fields must be filled in to continue. ";
            _loc1_.setStyle("contentBackgroundAlpha", 0.3);
            _loc1_.setStyle("contentBackgroundColor", 10053120);
            _loc1_.setStyle("fontWeight", "bold");
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Grid1_c():Grid {
            var temp:Grid = null;
            temp = new Grid();
            temp.setStyle("backgroundAlpha", 0.3);
            temp.setStyle("backgroundColor", 10053120);
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": Grid,
                "stylesFactory": function ():void {
                    this.backgroundAlpha = 0.3;
                    this.backgroundColor = 10053120;
                },
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Article"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Name"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Female name"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Male name"};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputArticle",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "a/an"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputName",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "wolf/bat/deer"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputFName",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "lioness/cow"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputMName",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "bull/lion"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Back Color"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Belly color"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Head color"};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputBack",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "brown/black/white"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputBelly",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "brown/black/white"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputHead",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "brown/black/white"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Hair"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Fur"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Furred"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Furry"};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputHair",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "hair/mane/fur"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputFur",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "fur/skin/scales"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputFurred",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "furred/skinned/scaled"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputFurry",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "furry/skinned/scaley"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Hand"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Hands"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Foot"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Feet"};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputHand",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "hand/paw/flipper"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputHands",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "hads/paws/flippers"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputFoot",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "foot/hoof/flipper"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputFeet",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "feet/hooves/flippers"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Mouth"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Teeth"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Tail"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Angry noise"};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputMouth",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "mouth/muzzle/beak"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputTeeth",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "teeth/bill/beak"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputTail",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "fluffy/short/null"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputAngry",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "A-Za-z",
                                                            "text": "growl/snort/snarl"
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            BindingManager.executeBindings(this, "temp", temp);
            return temp;
        }

        private function _Main_TextArea2_i():TextArea {
            var _loc1_:TextArea = null;
            _loc1_ = new TextArea();
            _loc1_.percentWidth = 100;
            _loc1_.height = 55;
            _loc1_.editable = false;
            _loc1_.text = "Stats bonuses must add up to less than 25 and no starting stat may have a bonus higher than 9. Height must be between 48 and 144 inches. ";
            _loc1_.setStyle("contentBackgroundAlpha", 0.3);
            _loc1_.setStyle("contentBackgroundColor", 10053120);
            _loc1_.setStyle("fontWeight", "bold");
            _loc1_.id = "_Main_TextArea2";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_TextArea2 = _loc1_;
            BindingManager.executeBindings(this, "_Main_TextArea2", this._Main_TextArea2);
            return _loc1_;
        }

        private function _Main_Grid2_i():Grid {
            var temp:Grid = null;
            temp = new Grid();
            temp.percentWidth = 100;
            temp.setStyle("backgroundAlpha", 0.3);
            temp.setStyle("backgroundColor", 10053120);
            temp.id = "_Main_Grid2";
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": Grid,
                "id": "_Main_Grid2",
                "stylesFactory": function ():void {
                    this.backgroundAlpha = 0.3;
                    this.backgroundColor = 10053120;
                },
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Strength bonus"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Agility bonus"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Endurance bonus"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Intelligence bonus"};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "15 +"};
                                                    }
                                                }), new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputStrength",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "0-9",
                                                            "text": "5",
                                                            "maxChars": 1
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "15 +"};
                                                    }
                                                }), new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputAgility",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "0-9",
                                                            "text": "5",
                                                            "maxChars": 1
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "15 +"};
                                                    }
                                                }), new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputEndurance",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "0-9",
                                                            "text": "5",
                                                            "maxChars": 1
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "15 +"};
                                                    }
                                                }), new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputIntelligence",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "0-9",
                                                            "text": "5",
                                                            "maxChars": 1
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({"type": GridItem}), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Stomach capacity bonus"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Starting height"};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({"type": GridItem}), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "20 +"};
                                                    }
                                                }), new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputStomach",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "0-9",
                                                            "text": "5",
                                                            "maxChars": 1
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": TextInput,
                                                    "id": "inputHeight",
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "restrict": "0-9",
                                                            "text": "60",
                                                            "maxChars": 3
                                                        };
                                                    }
                                                }), new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "inches"};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            this._Main_Grid2 = temp;
            BindingManager.executeBindings(this, "_Main_Grid2", this._Main_Grid2);
            return temp;
        }

        private function _Main_Grid3_c():Grid {
            var temp:Grid = null;
            temp = new Grid();
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": Grid,
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "customBack",
                                                    "events": {"click": "__customBack_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {"label": "Back"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "customComplete",
                                                    "events": {"click": "__customComplete_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {"label": "Complete"};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            BindingManager.executeBindings(this, "temp", temp);
            return temp;
        }

        public function __customBack_click(param1:MouseEvent):void {
            this.customSpeciesBack();
        }

        public function __customComplete_click(param1:MouseEvent):void {
            this.completeCustomSpecies();
        }

        private function _Main_TextArea3_i():TextArea {
            var _loc1_:TextArea = null;
            _loc1_ = new TextArea();
            _loc1_.editable = false;
            _loc1_.width = 675;
            _loc1_.height = 408;
            _loc1_.setStyle("fontSize", 16);
            _loc1_.id = "eventText";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.eventText = _loc1_;
            BindingManager.executeBindings(this, "eventText", this.eventText);
            return _loc1_;
        }

        private function _Main_TextArea4_i():TextArea {
            var _loc1_:TextArea = null;
            _loc1_ = new TextArea();
            _loc1_.editable = false;
            _loc1_.width = 675;
            _loc1_.height = 408;
            _loc1_.setStyle("fontSize", 16);
            _loc1_.id = "miscText";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.miscText = _loc1_;
            BindingManager.executeBindings(this, "miscText", this.miscText);
            return _loc1_;
        }

        private function _Main_BorderContainer1_i():BorderContainer {
            var _loc1_:BorderContainer = null;
            _loc1_ = new BorderContainer();
            _loc1_.top = 451;
            _loc1_.horizontalCenter = 111;
            _loc1_.width = 165;
            _loc1_.height = 24;
            _loc1_.alpha = 0.8;
            _loc1_.layout = this._Main_HorizontalLayout1_c();
            _loc1_.mxmlContentFactory = new DeferredInstanceFromFunction(this._Main_Array16_c);
            _loc1_.id = "common2";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.common2 = _loc1_;
            BindingManager.executeBindings(this, "common2", this.common2);
            return _loc1_;
        }

        private function _Main_HorizontalLayout1_c():HorizontalLayout {
            var _loc1_:HorizontalLayout = null;
            _loc1_ = new HorizontalLayout();
            _loc1_.requestedColumnCount = 3;
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Array16_c():Array {
            var _loc1_:Array = null;
            _loc1_ = [this._Main_Button1_i(), this._Main_Button2_i(), this._Main_Button3_i()];
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Button1_i():Button {
            var _loc1_:Button = null;
            _loc1_ = new Button();
            _loc1_.label = "Info";
            _loc1_.height = 20;
            _loc1_.width = 50;
            _loc1_.setStyle("paddingBottom", 0);
            _loc1_.setStyle("paddingLeft", 0);
            _loc1_.setStyle("paddingRight", 0);
            _loc1_.setStyle("paddingTop", 0);
            _loc1_.setStyle("downSkin", this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995);
            _loc1_.setStyle("upSkin", this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293);
            _loc1_.setStyle("overSkin", this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533);
            _loc1_.addEventListener("click", this.__instuction_click);
            _loc1_.id = "instuction";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.instuction = _loc1_;
            BindingManager.executeBindings(this, "instuction", this.instuction);
            return _loc1_;
        }

        public function __instuction_click(param1:MouseEvent):void {
            this.instructions();
        }

        private function _Main_Button2_i():Button {
            var _loc1_:Button = null;
            _loc1_ = new Button();
            _loc1_.label = "Options";
            _loc1_.height = 20;
            _loc1_.width = 50;
            _loc1_.setStyle("paddingBottom", 0);
            _loc1_.setStyle("paddingLeft", 0);
            _loc1_.setStyle("paddingRight", 0);
            _loc1_.setStyle("paddingTop", 0);
            _loc1_.setStyle("downSkin", this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995);
            _loc1_.setStyle("upSkin", this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293);
            _loc1_.setStyle("overSkin", this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533);
            _loc1_.addEventListener("click", this.__options_click);
            _loc1_.id = "options";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.options = _loc1_;
            BindingManager.executeBindings(this, "options", this.options);
            return _loc1_;
        }

        public function __options_click(param1:MouseEvent):void {
            this.changeOptions();
        }

        private function _Main_Button3_i():Button {
            var _loc1_:Button = null;
            _loc1_ = new Button();
            _loc1_.label = "Load";
            _loc1_.height = 20;
            _loc1_.width = 50;
            _loc1_.setStyle("paddingBottom", 0);
            _loc1_.setStyle("paddingLeft", 0);
            _loc1_.setStyle("paddingRight", 0);
            _loc1_.setStyle("paddingTop", 0);
            _loc1_.setStyle("downSkin", this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995);
            _loc1_.setStyle("upSkin", this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293);
            _loc1_.setStyle("overSkin", this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533);
            _loc1_.addEventListener("click", this.__loadGame_click);
            _loc1_.id = "loadGame";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.loadGame = _loc1_;
            BindingManager.executeBindings(this, "loadGame", this.loadGame);
            return _loc1_;
        }

        public function __loadGame_click(param1:MouseEvent):void {
            this.tryLoad();
        }

        private function _Main_Group3_i():Group {
            var _loc1_:Group = null;
            _loc1_ = new Group();
            _loc1_.alpha = 0.85;
            _loc1_.width = 520;
            _loc1_.height = 204;
            _loc1_.bottom = 100;
            _loc1_.right = 25;
            _loc1_.mxmlContent = [];
            _loc1_.setStyle("fontSize", 14);
            _loc1_.id = "buttonPanel";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.buttonPanel = _loc1_;
            BindingManager.executeBindings(this, "buttonPanel", this.buttonPanel);
            return _loc1_;
        }

        private function _Main_Grid4_i():Grid {
            var temp:Grid = null;
            temp = new Grid();
            temp.top = 0;
            temp.right = 0;
            temp.id = "actions";
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": Grid,
                "id": "actions",
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "button1",
                                                    "events": {"click": "__button1_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "button2",
                                                    "events": {"click": "__button2_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "button3",
                                                    "events": {"click": "__button3_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "button4",
                                                    "events": {"click": "__button4_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "button5",
                                                    "events": {"click": "__button5_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "button6",
                                                    "events": {"click": "__button6_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "button7",
                                                    "events": {"click": "__button7_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "button8",
                                                    "events": {"click": "__button8_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "button9",
                                                    "events": {"click": "__button9_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            this.actions = temp;
            BindingManager.executeBindings(this, "actions", this.actions);
            return temp;
        }

        public function __button1_click(param1:MouseEvent):void {
            this.btn1();
        }

        public function __button2_click(param1:MouseEvent):void {
            this.btn2();
        }

        public function __button3_click(param1:MouseEvent):void {
            this.btn3();
        }

        public function __button4_click(param1:MouseEvent):void {
            this.btn4();
        }

        public function __button5_click(param1:MouseEvent):void {
            this.btn5();
        }

        public function __button6_click(param1:MouseEvent):void {
            this.btn6();
        }

        public function __button7_click(param1:MouseEvent):void {
            this.btn7();
        }

        public function __button8_click(param1:MouseEvent):void {
            this.btn8();
        }

        public function __button9_click(param1:MouseEvent):void {
            this.btn9();
        }

        private function _Main_Grid5_i():Grid {
            var temp:Grid = null;
            temp = new Grid();
            temp.top = 125;
            temp.right = 0;
            temp.id = "decisions";
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": Grid,
                "id": "decisions",
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "decision1",
                                                    "events": {"click": "__decision1_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "decision2",
                                                    "events": {"click": "__decision2_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "decision3",
                                                    "events": {"click": "__decision3_click"},
                                                    "stylesFactory": function ():void {
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "width": 124,
                                                            "height": 34
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            this.decisions = temp;
            BindingManager.executeBindings(this, "decisions", this.decisions);
            return temp;
        }

        public function __decision1_click(param1:MouseEvent):void {
            this.dec1();
        }

        public function __decision2_click(param1:MouseEvent):void {
            this.dec2();
        }

        public function __decision3_click(param1:MouseEvent):void {
            this.dec3();
        }

        private function _Main_Grid6_i():Grid {
            var temp:Grid = null;
            temp = new Grid();
            temp.percentWidth = 100;
            temp.visible = false;
            temp.right = 0;
            temp.bottom = 0;
            temp.id = "common";
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": Grid,
                "id": "common",
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "restLvlBtn",
                                                    "events": {"click": "__restLvlBtn_click"},
                                                    "stylesFactory": function ():void {
                                                        this.icon = _embed_mxml_____Assets_icons_restIcon_png_684131085;
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "label": "Rest",
                                                            "height": 24,
                                                            "width": 87
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "yourselftext",
                                                    "events": {"click": "__yourselftext_click"},
                                                    "stylesFactory": function ():void {
                                                        this.icon = _embed_mxml_____Assets_icons_appearanceIcon_png_1870263667;
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "label": "Stats",
                                                            "height": 24,
                                                            "width": 87
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "surroundingstext",
                                                    "events": {"click": "__surroundingstext_click"},
                                                    "stylesFactory": function ():void {
                                                        this.icon = _embed_mxml_____Assets_icons_surroundingsIcon_png_528375619;
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "label": "Surroundings",
                                                            "height": 24,
                                                            "width": 125
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "stufftext",
                                                    "events": {"click": "__stufftext_click"},
                                                    "stylesFactory": function ():void {
                                                        this.icon = _embed_mxml_____Assets_icons_inventoryIcon_png_1695435037;
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "label": "Inventory",
                                                            "height": 24,
                                                            "width": 100
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": WrapButton,
                                                    "id": "spellList",
                                                    "events": {"click": "__spellList_click"},
                                                    "stylesFactory": function ():void {
                                                        this.icon = _embed_mxml_____Assets_icons_spellsIcon_png_1621160259;
                                                        this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                                        this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                                        this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                                                    },
                                                    "propertiesFactory": function ():Object {
                                                        return {
                                                            "label": "Spells",
                                                            "height": 24,
                                                            "width": 87
                                                        };
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            this.common = temp;
            BindingManager.executeBindings(this, "common", this.common);
            return temp;
        }

        public function __restLvlBtn_click(param1:MouseEvent):void {
            this.restLvl();
        }

        public function __yourselftext_click(param1:MouseEvent):void {
            this.doAppearance();
        }

        public function __surroundingstext_click(param1:MouseEvent):void {
            this.doArea();
        }

        public function __stufftext_click(param1:MouseEvent):void {
            this.doInventory();
        }

        public function __spellList_click(param1:MouseEvent):void {
            this.doSpells();
        }

        private function _Main_Grid7_i():Grid {
            var temp:Grid = null;
            temp = new Grid();
            temp.percentWidth = 100;
            temp.bottom = 0;
            temp.right = 0;
            temp.id = "inventoryPanel";
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": Grid,
                "id": "inventoryPanel",
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": GridRow,
                            "id": "_Main_GridRow21",
                            "propertiesFactory": function ():Object {
                                return {"childDescriptors": []};
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            this.inventoryPanel = temp;
            BindingManager.executeBindings(this, "inventoryPanel", this.inventoryPanel);
            return temp;
        }

        private function _Main_GridItem72_c():GridItem {
            var temp:GridItem = null;
            temp = new GridItem();
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": GridItem,
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": WrapButton,
                            "events": {"click": "___Main_WrapButton22_click"},
                            "stylesFactory": function ():void {
                                this.icon = _embed_mxml_____Assets_icons_returnIcon_png_1538788669;
                                this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                            },
                            "propertiesFactory": function ():Object {
                                return {
                                    "label": "Return",
                                    "height": 24,
                                    "width": 97
                                };
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            BindingManager.executeBindings(this, "temp", temp);
            return temp;
        }

        public function ___Main_WrapButton22_click(param1:MouseEvent):void {
            this.leaveMisc();
        }

        private function _Main_GridItem73_c():GridItem {
            var temp:GridItem = null;
            temp = new GridItem();
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": GridItem,
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": WrapButton,
                            "id": "pageUp",
                            "events": {"click": "__pageUp_click"},
                            "stylesFactory": function ():void {
                                this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                            },
                            "propertiesFactory": function ():Object {
                                return {
                                    "label": "Page Up",
                                    "height": 24,
                                    "width": 97
                                };
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            BindingManager.executeBindings(this, "temp", temp);
            return temp;
        }

        public function __pageUp_click(param1:MouseEvent):void {
            this.doPageUp();
        }

        private function _Main_GridItem74_c():GridItem {
            var temp:GridItem = null;
            temp = new GridItem();
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": GridItem,
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": WrapButton,
                            "id": "pageDown",
                            "events": {"click": "__pageDown_click"},
                            "stylesFactory": function ():void {
                                this.downSkin = _embed_mxml_____Assets_Buttons_buttonDown_png_1085050995;
                                this.upSkin = _embed_mxml_____Assets_Buttons_buttonUp_png_2122359293;
                                this.overSkin = _embed_mxml_____Assets_Buttons_buttonHover_png_2144397533;
                            },
                            "propertiesFactory": function ():Object {
                                return {
                                    "label": "Page Down",
                                    "height": 24,
                                    "width": 97
                                };
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            BindingManager.executeBindings(this, "temp", temp);
            return temp;
        }

        public function __pageDown_click(param1:MouseEvent):void {
            this.doPageDown();
        }

        private function _Main_GridItem75_i():GridItem {
            var temp:GridItem = null;
            temp = new GridItem();
            temp.id = "_Main_GridItem75";
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": GridItem,
                "id": "_Main_GridItem75",
                "propertiesFactory": function ():Object {
                    return {"childDescriptors": []};
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            this._Main_GridItem75 = temp;
            BindingManager.executeBindings(this, "_Main_GridItem75", this._Main_GridItem75);
            return temp;
        }

        private function _Main_WrapButton25_i():WrapButton {
            var _loc1_:WrapButton = null;
            _loc1_ = new WrapButton();
            _loc1_.height = 24;
            _loc1_.width = 97;
            _loc1_.setStyle("downSkin", this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995);
            _loc1_.setStyle("upSkin", this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293);
            _loc1_.setStyle("overSkin", this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533);
            _loc1_.addEventListener("click", this.__depositToggle_click);
            _loc1_.id = "depositToggle";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.depositToggle = _loc1_;
            BindingManager.executeBindings(this, "depositToggle", this.depositToggle);
            return _loc1_;
        }

        public function __depositToggle_click(param1:MouseEvent):void {
            this.toggleDeposit();
        }

        private function _Main_WrapButton26_i():WrapButton {
            var _loc1_:WrapButton = null;
            _loc1_ = new WrapButton();
            _loc1_.height = 24;
            _loc1_.width = 97;
            _loc1_.setStyle("downSkin", this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995);
            _loc1_.setStyle("upSkin", this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293);
            _loc1_.setStyle("overSkin", this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533);
            _loc1_.addEventListener("click", this.__discardToggle_click);
            _loc1_.id = "discardToggle";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.discardToggle = _loc1_;
            BindingManager.executeBindings(this, "discardToggle", this.discardToggle);
            return _loc1_;
        }

        public function __discardToggle_click(param1:MouseEvent):void {
            this.toggleDiscard();
        }

        private function _Main_GridItem76_i():GridItem {
            var temp:GridItem = null;
            temp = new GridItem();
            temp.id = "_Main_GridItem76";
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": GridItem,
                "id": "_Main_GridItem76",
                "propertiesFactory": function ():Object {
                    return {"childDescriptors": []};
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            this._Main_GridItem76 = temp;
            BindingManager.executeBindings(this, "_Main_GridItem76", this._Main_GridItem76);
            return temp;
        }

        private function _Main_WrapButton27_i():WrapButton {
            var _loc1_:WrapButton = null;
            _loc1_ = new WrapButton();
            _loc1_.label = "Gold";
            _loc1_.height = 24;
            _loc1_.width = 97;
            _loc1_.setStyle("downSkin", this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995);
            _loc1_.setStyle("upSkin", this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293);
            _loc1_.setStyle("overSkin", this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533);
            _loc1_.addEventListener("click", this.__gold_click);
            _loc1_.id = "gold";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.gold = _loc1_;
            BindingManager.executeBindings(this, "gold", this.gold);
            return _loc1_;
        }

        public function __gold_click(param1:MouseEvent):void {
            this.doStoreGold();
        }

        private function _Main_WrapButton28_i():WrapButton {
            var _loc1_:WrapButton = null;
            _loc1_ = new WrapButton();
            _loc1_.label = "Unequip";
            _loc1_.height = 24;
            _loc1_.width = 97;
            _loc1_.setStyle("downSkin", this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995);
            _loc1_.setStyle("upSkin", this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293);
            _loc1_.setStyle("overSkin", this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533);
            _loc1_.addEventListener("click", this.__unequipToggle_click);
            _loc1_.id = "unequipToggle";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.unequipToggle = _loc1_;
            BindingManager.executeBindings(this, "unequipToggle", this.unequipToggle);
            return _loc1_;
        }

        public function __unequipToggle_click(param1:MouseEvent):void {
            this.doUnequip();
        }

        private function _Main_HGroup10_i():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.bottom = 100;
            _loc1_.right = 50;
            _loc1_.visible = false;
            _loc1_.mxmlContent = [this._Main_TextInput34_i(), this._Main_Button4_i(), this._Main_Button5_i()];
            _loc1_.id = "GoldStorage";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.GoldStorage = _loc1_;
            BindingManager.executeBindings(this, "GoldStorage", this.GoldStorage);
            return _loc1_;
        }

        private function _Main_TextInput34_i():spark.components.TextInput {
            var _loc1_:spark.components.TextInput = null;
            _loc1_ = new spark.components.TextInput();
            _loc1_.width = 200;
            _loc1_.restrict = "0-9";
            _loc1_.maxChars = 9;
            _loc1_.id = "depositAmount";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.depositAmount = _loc1_;
            BindingManager.executeBindings(this, "depositAmount", this.depositAmount);
            return _loc1_;
        }

        private function _Main_Button4_i():Button {
            var _loc1_:Button = null;
            _loc1_ = new Button();
            _loc1_.label = "Confirm";
            _loc1_.setStyle("downSkin", this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995);
            _loc1_.setStyle("upSkin", this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293);
            _loc1_.setStyle("overSkin", this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533);
            _loc1_.addEventListener("click", this.__confirm_click);
            _loc1_.id = "confirm";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.confirm = _loc1_;
            BindingManager.executeBindings(this, "confirm", this.confirm);
            return _loc1_;
        }

        public function __confirm_click(param1:MouseEvent):void {
            this.confirmGold();
        }

        private function _Main_Button5_i():Button {
            var _loc1_:Button = null;
            _loc1_ = new Button();
            _loc1_.label = "All";
            _loc1_.setStyle("downSkin", this._embed_mxml_____Assets_Buttons_buttonDown_png_1085050995);
            _loc1_.setStyle("upSkin", this._embed_mxml_____Assets_Buttons_buttonUp_png_2122359293);
            _loc1_.setStyle("overSkin", this._embed_mxml_____Assets_Buttons_buttonHover_png_2144397533);
            _loc1_.addEventListener("click", this.__allGold_click);
            _loc1_.id = "allGold";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.allGold = _loc1_;
            BindingManager.executeBindings(this, "allGold", this.allGold);
            return _loc1_;
        }

        public function __allGold_click(param1:MouseEvent):void {
            this.doAllGold();
        }

        private function _Main_Grid8_i():Grid {
            var temp:Grid = null;
            temp = new Grid();
            temp.left = 80;
            temp.bottom = 40;
            temp.setStyle("fontSize", 16);
            temp.setStyle("backgroundAlpha", 0);
            temp.setStyle("verticalGap", 1);
            temp.setStyle("borderVisible", false);
            temp.id = "statPanel";
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": Grid,
                "id": "statPanel",
                "stylesFactory": function ():void {
                    this.fontSize = 16;
                    this.backgroundAlpha = 0;
                    this.verticalGap = 1;
                    this.borderVisible = false;
                },
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Strength"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_BitmapImage1_i(), _Main_BitmapImage2_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "id": "_Main_Label41"
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_Rect1_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Agility"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_BitmapImage3_i(), _Main_BitmapImage4_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "id": "_Main_Label43"
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_Rect2_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Endurance"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_BitmapImage5_i(), _Main_BitmapImage6_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "id": "_Main_Label45"
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_Rect3_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Intelligence"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_BitmapImage7_i(), _Main_BitmapImage8_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "id": "_Main_Label47"
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "width": 100,
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_Rect4_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Fatness"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_BitmapImage9_i(), _Main_BitmapImage10_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "id": "_Main_Label49"
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            this.statPanel = temp;
            BindingManager.executeBindings(this, "statPanel", this.statPanel);
            return temp;
        }

        private function _Main_BitmapImage1_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_downArrow_png_46682374;
            _loc1_.visible = false;
            _loc1_.initialized(this, "strengthDownArrow");
            this.strengthDownArrow = _loc1_;
            BindingManager.executeBindings(this, "strengthDownArrow", this.strengthDownArrow);
            return _loc1_;
        }

        private function _Main_BitmapImage2_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_upArrow_png_1883230764;
            _loc1_.visible = false;
            _loc1_.initialized(this, "strengthUpArrow");
            this.strengthUpArrow = _loc1_;
            BindingManager.executeBindings(this, "strengthUpArrow", this.strengthUpArrow);
            return _loc1_;
        }

        private function _Main_Rect1_i():Rect {
            var _loc1_:Rect = null;
            _loc1_ = new Rect();
            _loc1_.height = 14;
            _loc1_.fill = this._Main_SolidColor1_c();
            _loc1_.initialized(this, "_Main_Rect1");
            this._Main_Rect1 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Rect1", this._Main_Rect1);
            return _loc1_;
        }

        private function _Main_SolidColor1_c():SolidColor {
            var _loc1_:SolidColor = null;
            _loc1_ = new SolidColor();
            _loc1_.color = 21760;
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_BitmapImage3_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_downArrow_png_46682374;
            _loc1_.visible = false;
            _loc1_.initialized(this, "speedDownArrow");
            this.speedDownArrow = _loc1_;
            BindingManager.executeBindings(this, "speedDownArrow", this.speedDownArrow);
            return _loc1_;
        }

        private function _Main_BitmapImage4_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_upArrow_png_1883230764;
            _loc1_.visible = false;
            _loc1_.initialized(this, "speedUpArrow");
            this.speedUpArrow = _loc1_;
            BindingManager.executeBindings(this, "speedUpArrow", this.speedUpArrow);
            return _loc1_;
        }

        private function _Main_Rect2_i():Rect {
            var _loc1_:Rect = null;
            _loc1_ = new Rect();
            _loc1_.height = 14;
            _loc1_.fill = this._Main_SolidColor2_c();
            _loc1_.initialized(this, "_Main_Rect2");
            this._Main_Rect2 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Rect2", this._Main_Rect2);
            return _loc1_;
        }

        private function _Main_SolidColor2_c():SolidColor {
            var _loc1_:SolidColor = null;
            _loc1_ = new SolidColor();
            _loc1_.color = 21760;
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_BitmapImage5_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_downArrow_png_46682374;
            _loc1_.visible = false;
            _loc1_.initialized(this, "enduranceDownArrow");
            this.enduranceDownArrow = _loc1_;
            BindingManager.executeBindings(this, "enduranceDownArrow", this.enduranceDownArrow);
            return _loc1_;
        }

        private function _Main_BitmapImage6_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_upArrow_png_1883230764;
            _loc1_.visible = false;
            _loc1_.initialized(this, "enduranceUpArrow");
            this.enduranceUpArrow = _loc1_;
            BindingManager.executeBindings(this, "enduranceUpArrow", this.enduranceUpArrow);
            return _loc1_;
        }

        private function _Main_Rect3_i():Rect {
            var _loc1_:Rect = null;
            _loc1_ = new Rect();
            _loc1_.height = 14;
            _loc1_.fill = this._Main_SolidColor3_c();
            _loc1_.initialized(this, "_Main_Rect3");
            this._Main_Rect3 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Rect3", this._Main_Rect3);
            return _loc1_;
        }

        private function _Main_SolidColor3_c():SolidColor {
            var _loc1_:SolidColor = null;
            _loc1_ = new SolidColor();
            _loc1_.color = 21760;
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_BitmapImage7_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_downArrow_png_46682374;
            _loc1_.visible = false;
            _loc1_.initialized(this, "intelligenceDownArrow");
            this.intelligenceDownArrow = _loc1_;
            BindingManager.executeBindings(this, "intelligenceDownArrow", this.intelligenceDownArrow);
            return _loc1_;
        }

        private function _Main_BitmapImage8_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_upArrow_png_1883230764;
            _loc1_.visible = false;
            _loc1_.initialized(this, "intelligenceUpArrow");
            this.intelligenceUpArrow = _loc1_;
            BindingManager.executeBindings(this, "intelligenceUpArrow", this.intelligenceUpArrow);
            return _loc1_;
        }

        private function _Main_Rect4_i():Rect {
            var _loc1_:Rect = null;
            _loc1_ = new Rect();
            _loc1_.height = 14;
            _loc1_.fill = this._Main_SolidColor4_c();
            _loc1_.initialized(this, "_Main_Rect4");
            this._Main_Rect4 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Rect4", this._Main_Rect4);
            return _loc1_;
        }

        private function _Main_SolidColor4_c():SolidColor {
            var _loc1_:SolidColor = null;
            _loc1_ = new SolidColor();
            _loc1_.color = 21760;
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_BitmapImage9_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_downArrow_png_46682374;
            _loc1_.visible = false;
            _loc1_.initialized(this, "fatnessDownArrow");
            this.fatnessDownArrow = _loc1_;
            BindingManager.executeBindings(this, "fatnessDownArrow", this.fatnessDownArrow);
            return _loc1_;
        }

        private function _Main_BitmapImage10_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_upArrow_png_1883230764;
            _loc1_.visible = false;
            _loc1_.initialized(this, "fatnessUpArrow");
            this.fatnessUpArrow = _loc1_;
            BindingManager.executeBindings(this, "fatnessUpArrow", this.fatnessUpArrow);
            return _loc1_;
        }

        private function _Main_Grid9_i():Grid {
            var temp:Grid = null;
            temp = new Grid();
            temp.horizontalCenter = -236;
            temp.top = 490;
            temp.setStyle("fontSize", 16);
            temp.setStyle("verticalGap", 3);
            temp.setStyle("horizontalGap", 1);
            temp.setStyle("backgroundAlpha", 0);
            temp.setStyle("borderVisible", false);
            temp.id = "_Main_Grid9";
            if (!temp.document) {
                temp.document = this;
            }
            temp.mx_internal::_documentDescriptor = new UIComponentDescriptor({
                "type": Grid,
                "id": "_Main_Grid9",
                "stylesFactory": function ():void {
                    this.fontSize = 16;
                    this.verticalGap = 3;
                    this.horizontalGap = 1;
                    this.backgroundAlpha = 0;
                    this.borderVisible = false;
                },
                "propertiesFactory": function ():Object {
                    return {
                        "childDescriptors": [new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Health"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_BitmapImage11_i(), _Main_BitmapImage12_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "stylesFactory": function ():void {
                                            this.horizontalAlign = "center";
                                        },
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "width": 100,
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "id": "_Main_Label51"
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "width": 70,
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_Rect5_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Stamina"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_BitmapImage13_i(), _Main_BitmapImage14_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "stylesFactory": function ():void {
                                            this.horizontalAlign = "center";
                                        },
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "width": 100,
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "id": "_Main_Label53"
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "width": 70,
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_Rect6_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        }), new UIComponentDescriptor({
                            "type": GridRow,
                            "propertiesFactory": function ():Object {
                                return {
                                    "childDescriptors": [new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Mana"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_BitmapImage15_i(), _Main_BitmapImage16_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "stylesFactory": function ():void {
                                            this.horizontalAlign = "center";
                                        },
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "id": "_Main_Label55"
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "width": 70,
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_Rect7_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "propertiesFactory": function ():Object {
                                                        return {"text": "Fullness"};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_BitmapImage17_i(), _Main_BitmapImage18_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "stylesFactory": function ():void {
                                            this.horizontalAlign = "center";
                                        },
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Label,
                                                    "id": "_Main_Label57"
                                                }), new UIComponentDescriptor({
                                                    "type": Label,
                                                    "id": "_Main_Label58",
                                                    "stylesFactory": function ():void {
                                                        this.fontSize = 10;
                                                    }
                                                })]
                                            };
                                        }
                                    }), new UIComponentDescriptor({
                                        "type": GridItem,
                                        "propertiesFactory": function ():Object {
                                            return {
                                                "width": 70,
                                                "childDescriptors": [new UIComponentDescriptor({
                                                    "type": Group,
                                                    "propertiesFactory": function ():Object {
                                                        return {"mxmlContent": [_Main_Rect8_i()]};
                                                    }
                                                })]
                                            };
                                        }
                                    })]
                                };
                            }
                        })]
                    };
                }
            });
            temp.mx_internal::_documentDescriptor.document = this;
            this._Main_Grid9 = temp;
            BindingManager.executeBindings(this, "_Main_Grid9", this._Main_Grid9);
            return temp;
        }

        private function _Main_BitmapImage11_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_downArrow_png_46682374;
            _loc1_.visible = false;
            _loc1_.initialized(this, "healthDownArrow");
            this.healthDownArrow = _loc1_;
            BindingManager.executeBindings(this, "healthDownArrow", this.healthDownArrow);
            return _loc1_;
        }

        private function _Main_BitmapImage12_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_upArrow_png_1883230764;
            _loc1_.visible = false;
            _loc1_.initialized(this, "healthUpArrow");
            this.healthUpArrow = _loc1_;
            BindingManager.executeBindings(this, "healthUpArrow", this.healthUpArrow);
            return _loc1_;
        }

        private function _Main_Rect5_i():Rect {
            var _loc1_:Rect = null;
            _loc1_ = new Rect();
            _loc1_.height = 16;
            _loc1_.width = 70;
            _loc1_.fill = this._Main_SolidColor5_c();
            _loc1_.initialized(this, "healthBar");
            this.healthBar = _loc1_;
            BindingManager.executeBindings(this, "healthBar", this.healthBar);
            return _loc1_;
        }

        private function _Main_SolidColor5_c():SolidColor {
            var _loc1_:SolidColor = null;
            _loc1_ = new SolidColor();
            _loc1_.color = 21760;
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_BitmapImage13_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_downArrow_png_46682374;
            _loc1_.visible = false;
            _loc1_.initialized(this, "staminaDownArrow");
            this.staminaDownArrow = _loc1_;
            BindingManager.executeBindings(this, "staminaDownArrow", this.staminaDownArrow);
            return _loc1_;
        }

        private function _Main_BitmapImage14_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_upArrow_png_1883230764;
            _loc1_.visible = false;
            _loc1_.initialized(this, "staminaUpArrow");
            this.staminaUpArrow = _loc1_;
            BindingManager.executeBindings(this, "staminaUpArrow", this.staminaUpArrow);
            return _loc1_;
        }

        private function _Main_Rect6_i():Rect {
            var _loc1_:Rect = null;
            _loc1_ = new Rect();
            _loc1_.height = 16;
            _loc1_.width = 70;
            _loc1_.fill = this._Main_SolidColor6_c();
            _loc1_.initialized(this, "staminaBar");
            this.staminaBar = _loc1_;
            BindingManager.executeBindings(this, "staminaBar", this.staminaBar);
            return _loc1_;
        }

        private function _Main_SolidColor6_c():SolidColor {
            var _loc1_:SolidColor = null;
            _loc1_ = new SolidColor();
            _loc1_.color = 21760;
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_BitmapImage15_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_downArrow_png_46682374;
            _loc1_.visible = false;
            _loc1_.initialized(this, "manaDownArrow");
            this.manaDownArrow = _loc1_;
            BindingManager.executeBindings(this, "manaDownArrow", this.manaDownArrow);
            return _loc1_;
        }

        private function _Main_BitmapImage16_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_upArrow_png_1883230764;
            _loc1_.visible = false;
            _loc1_.initialized(this, "manaUpArrow");
            this.manaUpArrow = _loc1_;
            BindingManager.executeBindings(this, "manaUpArrow", this.manaUpArrow);
            return _loc1_;
        }

        private function _Main_Rect7_i():Rect {
            var _loc1_:Rect = null;
            _loc1_ = new Rect();
            _loc1_.height = 16;
            _loc1_.width = 70;
            _loc1_.minWidth = 0;
            _loc1_.fill = this._Main_SolidColor7_c();
            _loc1_.initialized(this, "manaBar");
            this.manaBar = _loc1_;
            BindingManager.executeBindings(this, "manaBar", this.manaBar);
            return _loc1_;
        }

        private function _Main_SolidColor7_c():SolidColor {
            var _loc1_:SolidColor = null;
            _loc1_ = new SolidColor();
            _loc1_.color = 102;
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_BitmapImage17_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_downArrow_png_46682374;
            _loc1_.visible = false;
            _loc1_.initialized(this, "fullnessDownArrow");
            this.fullnessDownArrow = _loc1_;
            BindingManager.executeBindings(this, "fullnessDownArrow", this.fullnessDownArrow);
            return _loc1_;
        }

        private function _Main_BitmapImage18_i():BitmapImage {
            var _loc1_:BitmapImage = null;
            _loc1_ = new BitmapImage();
            _loc1_.source = this._embed_mxml_____Assets_upArrow_png_1883230764;
            _loc1_.visible = false;
            _loc1_.initialized(this, "fullnessUpArrow");
            this.fullnessUpArrow = _loc1_;
            BindingManager.executeBindings(this, "fullnessUpArrow", this.fullnessUpArrow);
            return _loc1_;
        }

        private function _Main_Rect8_i():Rect {
            var _loc1_:Rect = null;
            _loc1_ = new Rect();
            _loc1_.height = 16;
            _loc1_.width = 70;
            _loc1_.minWidth = 0;
            _loc1_.fill = this._Main_SolidColor8_c();
            _loc1_.initialized(this, "fullnessBar");
            this.fullnessBar = _loc1_;
            BindingManager.executeBindings(this, "fullnessBar", this.fullnessBar);
            return _loc1_;
        }

        private function _Main_SolidColor8_c():SolidColor {
            var _loc1_:SolidColor = null;
            _loc1_ = new SolidColor();
            _loc1_.color = 21760;
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_VGroup3_i():VGroup {
            var _loc1_:VGroup = null;
            _loc1_ = new VGroup();
            _loc1_.bottom = 9;
            _loc1_.left = 450;
            _loc1_.width = 250;
            _loc1_.mxmlContent = [this._Main_HGroup11_c(), this._Main_HGroup12_c()];
            _loc1_.setStyle("fontSize", 16);
            _loc1_.id = "_Main_VGroup3";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_VGroup3 = _loc1_;
            BindingManager.executeBindings(this, "_Main_VGroup3", this._Main_VGroup3);
            return _loc1_;
        }

        private function _Main_HGroup11_c():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.mxmlContent = [this._Main_Label59_i(), this._Main_Label60_i(), this._Main_Rect9_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Label59_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.id = "_Main_Label59";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label59 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label59", this._Main_Label59);
            return _loc1_;
        }

        private function _Main_Label60_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.id = "_Main_Label60";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label60 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label60", this._Main_Label60);
            return _loc1_;
        }

        private function _Main_Rect9_i():Rect {
            var _loc1_:Rect = null;
            _loc1_ = new Rect();
            _loc1_.height = 15;
            _loc1_.width = 100;
            _loc1_.minWidth = 0;
            _loc1_.fill = this._Main_SolidColor9_c();
            _loc1_.initialized(this, "_Main_Rect9");
            this._Main_Rect9 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Rect9", this._Main_Rect9);
            return _loc1_;
        }

        private function _Main_SolidColor9_c():SolidColor {
            var _loc1_:SolidColor = null;
            _loc1_ = new SolidColor();
            _loc1_.color = 13934615;
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_HGroup12_c():HGroup {
            var _loc1_:HGroup = null;
            _loc1_ = new HGroup();
            _loc1_.mxmlContent = [this._Main_Group21_c(), this._Main_Group22_c()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Group21_c():Group {
            var _loc1_:Group = null;
            _loc1_ = new Group();
            _loc1_.mxmlContent = [this._Main_Label61_i(), this._Main_Label62_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Label61_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.id = "_Main_Label61";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label61 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label61", this._Main_Label61);
            return _loc1_;
        }

        private function _Main_Label62_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.id = "_Main_Label62";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label62 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label62", this._Main_Label62);
            return _loc1_;
        }

        private function _Main_Group22_c():Group {
            var _loc1_:Group = null;
            _loc1_ = new Group();
            _loc1_.mxmlContent = [this._Main_Group23_i(), this._Main_Group24_i()];
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Group23_i():Group {
            var _loc1_:Group = null;
            _loc1_ = new Group();
            _loc1_.mxmlContent = [this._Main_Label63_i(), this._Main_Label64_i()];
            _loc1_.id = "_Main_Group23";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Group23 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Group23", this._Main_Group23);
            return _loc1_;
        }

        private function _Main_Label63_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.id = "_Main_Label63";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label63 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label63", this._Main_Label63);
            return _loc1_;
        }

        private function _Main_Label64_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.text = "Waist size: 0\'0\"";
            _loc1_.id = "_Main_Label64";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label64 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label64", this._Main_Label64);
            return _loc1_;
        }

        private function _Main_Group24_i():Group {
            var _loc1_:Group = null;
            _loc1_ = new Group();
            _loc1_.mxmlContent = [this._Main_Label65_i(), this._Main_Label66_i()];
            _loc1_.id = "_Main_Group24";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Group24 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Group24", this._Main_Group24);
            return _loc1_;
        }

        private function _Main_Label65_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.id = "_Main_Label65";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label65 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label65", this._Main_Label65);
            return _loc1_;
        }

        private function _Main_Label66_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.text = "Waist size: 0 cm";
            _loc1_.id = "_Main_Label66";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label66 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label66", this._Main_Label66);
            return _loc1_;
        }

        private function _Main_TextInput35_i():spark.components.TextInput {
            var _loc1_:spark.components.TextInput = null;
            _loc1_ = new spark.components.TextInput();
            _loc1_.right = 250;
            _loc1_.top = 571;
            _loc1_.restrict = "A-Za-z";
            _loc1_.visible = false;
            _loc1_.maxChars = 15;
            _loc1_.id = "nameInput";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.nameInput = _loc1_;
            BindingManager.executeBindings(this, "nameInput", this.nameInput);
            return _loc1_;
        }

        private function _Main_DropDownList1_i():DropDownList {
            var _loc1_:DropDownList = null;
            _loc1_ = new DropDownList();
            _loc1_.labelField = "name";
            _loc1_.prompt = "Select species...";
            _loc1_.right = 170;
            _loc1_.top = 490;
            _loc1_.visible = false;
            _loc1_.dataProvider = this._Main_ArrayList1_c();
            _loc1_.addEventListener("change", this.__speciesDropDown_change);
            _loc1_.id = "speciesDropDown";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.speciesDropDown = _loc1_;
            BindingManager.executeBindings(this, "speciesDropDown", this.speciesDropDown);
            return _loc1_;
        }

        private function _Main_ArrayList1_c():ArrayList {
            var _loc1_:ArrayList = null;
            _loc1_ = new ArrayList();
            _loc1_.source = [this._Main_Object1_i(), this._Main_Object2_i(), this._Main_Object3_i(), this._Main_Object4_i(), this._Main_Object5_i(), this._Main_Object6_i(), this._Main_Object7_i(), this._Main_Object8_i(), this._Main_Object9_i(), this._Main_Object10_i(), this._Main_Object11_i(), this._Main_Object12_i(), this._Main_Object13_i(), this._Main_Object14_i(), this._Main_Object15_i(), this._Main_Object16_i(), this._Main_Object17_i(), this._Main_Object18_i(), this._Main_Object19_i(), this._Main_Object20_i(), this._Main_Object21_i(), this._Main_Object22_i(), this._Main_Object23_i(), this._Main_Object24_i(), this._Main_Object25_i(), this._Main_Object26_i(), this._Main_Object27_i(), this._Main_Object28_i(), this._Main_Object29_i(), this._Main_Object30_i(), this._Main_Object31_i(), this._Main_Object32_i(), this._Main_Object33_i(), this._Main_Object34_i(), this._Main_Object35_i(), this._Main_Object36_i(), this._Main_Object37_i(), this._Main_Object38_i(), this._Main_Object39_i(), this._Main_Object40_i(), this._Main_Object41_i(), this._Main_Object42_i(), this._Main_Object43_i(), this._Main_Object44_i(), this._Main_Object45_i(), this._Main_Object46_i(), this._Main_Object47_i(), this._Main_Object48_i(), this._Main_Object49_i(), this._Main_Object50_i(), this._Main_Object51_i(), this._Main_Object52_i(), this._Main_Object53_i(), this._Main_Object54_i(), this._Main_Object55_i(), this._Main_Object56_i()];
            BindingManager.executeBindings(this, "temp", _loc1_);
            return _loc1_;
        }

        private function _Main_Object1_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Apatosaurus",
                "type": null
            };
            this._Main_Object1 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object1", this._Main_Object1);
            return _loc1_;
        }

        private function _Main_Object2_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Badger",
                "type": null
            };
            this._Main_Object2 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object2", this._Main_Object2);
            return _loc1_;
        }

        private function _Main_Object3_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Bat",
                "type": null
            };
            this._Main_Object3 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object3", this._Main_Object3);
            return _loc1_;
        }

        private function _Main_Object4_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Bear, Brown",
                "type": null
            };
            this._Main_Object4 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object4", this._Main_Object4);
            return _loc1_;
        }

        private function _Main_Object5_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Bear, Polar",
                "type": null
            };
            this._Main_Object5 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object5", this._Main_Object5);
            return _loc1_;
        }

        private function _Main_Object6_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Bear, Black",
                "type": null
            };
            this._Main_Object6 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object6", this._Main_Object6);
            return _loc1_;
        }

        private function _Main_Object7_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Blue Jay",
                "type": null
            };
            this._Main_Object7 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object7", this._Main_Object7);
            return _loc1_;
        }

        private function _Main_Object8_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Cattle",
                "type": null
            };
            this._Main_Object8 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object8", this._Main_Object8);
            return _loc1_;
        }

        private function _Main_Object9_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Cheetah",
                "type": null
            };
            this._Main_Object9 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object9", this._Main_Object9);
            return _loc1_;
        }

        private function _Main_Object10_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Cougar",
                "type": null
            };
            this._Main_Object10 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object10", this._Main_Object10);
            return _loc1_;
        }

        private function _Main_Object11_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Coyote",
                "type": null
            };
            this._Main_Object11 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object11", this._Main_Object11);
            return _loc1_;
        }

        private function _Main_Object12_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Deer",
                "type": null
            };
            this._Main_Object12 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object12", this._Main_Object12);
            return _loc1_;
        }

        private function _Main_Object13_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Dog",
                "type": null
            };
            this._Main_Object13 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object13", this._Main_Object13);
            return _loc1_;
        }

        private function _Main_Object14_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Dolphin",
                "type": null
            };
            this._Main_Object14 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object14", this._Main_Object14);
            return _loc1_;
        }

        private function _Main_Object15_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Donkey",
                "type": null
            };
            this._Main_Object15 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object15", this._Main_Object15);
            return _loc1_;
        }

        private function _Main_Object16_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Dragon, Black",
                "type": null
            };
            this._Main_Object16 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object16", this._Main_Object16);
            return _loc1_;
        }

        private function _Main_Object17_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Dragon, Blue",
                "type": null
            };
            this._Main_Object17 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object17", this._Main_Object17);
            return _loc1_;
        }

        private function _Main_Object18_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Dragon, Green",
                "type": null
            };
            this._Main_Object18 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object18", this._Main_Object18);
            return _loc1_;
        }

        private function _Main_Object19_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Dragon, Red",
                "type": null
            };
            this._Main_Object19 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object19", this._Main_Object19);
            return _loc1_;
        }

        private function _Main_Object20_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Dragon, White",
                "type": null
            };
            this._Main_Object20 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object20", this._Main_Object20);
            return _loc1_;
        }

        private function _Main_Object21_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Ferret",
                "type": null
            };
            this._Main_Object21 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object21", this._Main_Object21);
            return _loc1_;
        }

        private function _Main_Object22_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Fox",
                "type": null
            };
            this._Main_Object22 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object22", this._Main_Object22);
            return _loc1_;
        }

        private function _Main_Object23_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Goat",
                "type": null
            };
            this._Main_Object23 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object23", this._Main_Object23);
            return _loc1_;
        }

        private function _Main_Object24_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Hawk",
                "type": null
            };
            this._Main_Object24 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object24", this._Main_Object24);
            return _loc1_;
        }

        private function _Main_Object25_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Hippo",
                "type": null
            };
            this._Main_Object25 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object25", this._Main_Object25);
            return _loc1_;
        }

        private function _Main_Object26_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Horse",
                "type": null
            };
            this._Main_Object26 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object26", this._Main_Object26);
            return _loc1_;
        }

        private function _Main_Object27_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Kangaroo, Grey",
                "type": null
            };
            this._Main_Object27 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object27", this._Main_Object27);
            return _loc1_;
        }

        private function _Main_Object28_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Kangaroo, Red",
                "type": null
            };
            this._Main_Object28 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object28", this._Main_Object28);
            return _loc1_;
        }

        private function _Main_Object29_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Leopard",
                "type": null
            };
            this._Main_Object29 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object29", this._Main_Object29);
            return _loc1_;
        }

        private function _Main_Object30_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Lion",
                "type": null
            };
            this._Main_Object30 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object30", this._Main_Object30);
            return _loc1_;
        }

        private function _Main_Object31_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Magpie",
                "type": null
            };
            this._Main_Object31 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object31", this._Main_Object31);
            return _loc1_;
        }

        private function _Main_Object32_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Mouse",
                "type": null
            };
            this._Main_Object32 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object32", this._Main_Object32);
            return _loc1_;
        }

        private function _Main_Object33_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Orca",
                "type": null
            };
            this._Main_Object33 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object33", this._Main_Object33);
            return _loc1_;
        }

        private function _Main_Object34_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Otter",
                "type": null
            };
            this._Main_Object34 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object34", this._Main_Object34);
            return _loc1_;
        }

        private function _Main_Object35_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Owl",
                "type": null
            };
            this._Main_Object35 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object35", this._Main_Object35);
            return _loc1_;
        }

        private function _Main_Object36_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Painted Dog",
                "type": null
            };
            this._Main_Object36 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object36", this._Main_Object36);
            return _loc1_;
        }

        private function _Main_Object37_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Panda",
                "type": null
            };
            this._Main_Object37 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object37", this._Main_Object37);
            return _loc1_;
        }

        private function _Main_Object38_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Panther",
                "type": null
            };
            this._Main_Object38 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object38", this._Main_Object38);
            return _loc1_;
        }

        private function _Main_Object39_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Penguin",
                "type": null
            };
            this._Main_Object39 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object39", this._Main_Object39);
            return _loc1_;
        }

        private function _Main_Object40_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Pig",
                "type": null
            };
            this._Main_Object40 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object40", this._Main_Object40);
            return _loc1_;
        }

        private function _Main_Object41_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Pterodactyl",
                "type": null
            };
            this._Main_Object41 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object41", this._Main_Object41);
            return _loc1_;
        }

        private function _Main_Object42_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Rabbit",
                "type": null
            };
            this._Main_Object42 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object42", this._Main_Object42);
            return _loc1_;
        }

        private function _Main_Object43_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Raccoon",
                "type": null
            };
            this._Main_Object43 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object43", this._Main_Object43);
            return _loc1_;
        }

        private function _Main_Object44_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Raptor",
                "type": null
            };
            this._Main_Object44 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object44", this._Main_Object44);
            return _loc1_;
        }

        private function _Main_Object45_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Rat",
                "type": null
            };
            this._Main_Object45 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object45", this._Main_Object45);
            return _loc1_;
        }

        private function _Main_Object46_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Raven",
                "type": null
            };
            this._Main_Object46 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object46", this._Main_Object46);
            return _loc1_;
        }

        private function _Main_Object47_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Rhino",
                "type": null
            };
            this._Main_Object47 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object47", this._Main_Object47);
            return _loc1_;
        }

        private function _Main_Object48_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Robin",
                "type": null
            };
            this._Main_Object48 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object48", this._Main_Object48);
            return _loc1_;
        }

        private function _Main_Object49_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Shark",
                "type": null
            };
            this._Main_Object49 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object49", this._Main_Object49);
            return _loc1_;
        }

        private function _Main_Object50_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Skunk",
                "type": null
            };
            this._Main_Object50 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object50", this._Main_Object50);
            return _loc1_;
        }

        private function _Main_Object51_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Squirrel",
                "type": null
            };
            this._Main_Object51 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object51", this._Main_Object51);
            return _loc1_;
        }

        private function _Main_Object52_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Stegosaurus",
                "type": null
            };
            this._Main_Object52 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object52", this._Main_Object52);
            return _loc1_;
        }

        private function _Main_Object53_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Tiger",
                "type": null
            };
            this._Main_Object53 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object53", this._Main_Object53);
            return _loc1_;
        }

        private function _Main_Object54_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Triceratops",
                "type": null
            };
            this._Main_Object54 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object54", this._Main_Object54);
            return _loc1_;
        }

        private function _Main_Object55_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Tyrannosaurus",
                "type": null
            };
            this._Main_Object55 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object55", this._Main_Object55);
            return _loc1_;
        }

        private function _Main_Object56_i():Object {
            var _loc1_:Object = null;
            _loc1_ = {
                "name": "Wolf",
                "type": null
            };
            this._Main_Object56 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Object56", this._Main_Object56);
            return _loc1_;
        }

        public function __speciesDropDown_change(param1:IndexChangeEvent):void {
            this.displaySpeciesStats();
        }

        private function _Main_Label67_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.right = 420;
            _loc1_.bottom = 300;
            _loc1_.id = "_Main_Label67";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label67 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label67", this._Main_Label67);
            return _loc1_;
        }

        private function _Main_Label68_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.right = 420;
            _loc1_.bottom = 300;
            _loc1_.id = "_Main_Label68";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label68 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label68", this._Main_Label68);
            return _loc1_;
        }

        private function _Main_Label69_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.top = 437;
            _loc1_.horizontalCenter = 350;
            _loc1_.setStyle("backgroundAlpha", 0.65);
            _loc1_.setStyle("backgroundColor", 0);
            _loc1_.setStyle("color", 16777215);
            _loc1_.id = "clock";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.clock = _loc1_;
            BindingManager.executeBindings(this, "clock", this.clock);
            return _loc1_;
        }

        private function _Main_Label70_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.top = 42;
            _loc1_.horizontalCenter = 350;
            _loc1_.id = "locationText";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.locationText = _loc1_;
            BindingManager.executeBindings(this, "locationText", this.locationText);
            return _loc1_;
        }

        private function _Main_Label71_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.top = 38;
            _loc1_.horizontalCenter = 347;
            _loc1_.width = 193;
            _loc1_.height = 23;
            _loc1_.setStyle("fontSize", 11);
            _loc1_.setStyle("textAlign", "center");
            _loc1_.id = "_Main_Label71";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label71 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label71", this._Main_Label71);
            return _loc1_;
        }

        private function _Main_Label72_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.top = 1;
            _loc1_.horizontalCenter = 0;
            _loc1_.alpha = 0.3;
            _loc1_.id = "gameVersion";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this.gameVersion = _loc1_;
            BindingManager.executeBindings(this, "gameVersion", this.gameVersion);
            return _loc1_;
        }

        private function _Main_Label73_i():spark.components.Label {
            var _loc1_:spark.components.Label = null;
            _loc1_ = new spark.components.Label();
            _loc1_.bottom = 20;
            _loc1_.right = 70;
            _loc1_.setStyle("fontSize", 25);
            _loc1_.id = "_Main_Label73";
            if (!_loc1_.document) {
                _loc1_.document = this;
            }
            this._Main_Label73 = _loc1_;
            BindingManager.executeBindings(this, "_Main_Label73", this._Main_Label73);
            return _loc1_;
        }

        public function ___Main_Application1_applicationComplete(param1:FlexEvent):void {
            this.introduction();
        }

        private function _Main_bindingsSetup():Array {
            var result:Array = null;
            result = [];
            result[0] = new Binding(this, null, null, "devoured.location", "EasternSquare");
            result[1] = new Binding(this, null, null, "overeating.location", "EasternSquare");
            result[2] = new Binding(this, null, null, "exploded.location", "EasternSquare");
            result[3] = new Binding(this, null, null, "battle.location", "EasternSquare");
            result[4] = new Binding(this, null, null, "floating.location", "EasternSquare");
            result[5] = new Binding(this, null, null, "transformed.location", "EasternSquare");
            result[6] = new Binding(this, null, null, "FatWolf.image", "wolfImage");
            result[7] = new Binding(this, null, null, "FatWolf.species", "Wolf");
            result[8] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent is a decidedly overweight wolf. " + capFirst(enemyt.gender.he) + " has a coat of thick grey fur over a layer of fat several inches thick. " + "" + "" + capFirst(enemyt.gender.he) + " jiggles with every labored move " + enemyt.gender.he + " makes and " + enemyt.gender.he + "\'s eyeing you hungrily. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FatWolf.description");
            result[9] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You flee from the battle. The wolf chases after you for a moment, " + enemyt.gender.his + " fat gut wobbling like a sea of jello, but " + enemyt.gender.he + " quickly runs out of breath and gives up the chase. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FatWolf.playerEscape");
            result[10] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The fat wolf pants with exertion before collapsing to the ground, too weak to continue fighting. " + "" + "As " + enemyt.gender.he + " hits the ground " + enemyt.gender.his + " body jiggles like a large jello mold before finally settling. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FatWolf.victory");
            result[11] = new Binding(this, null, null, "LemonSlime.gender", "Neutral");
            result[12] = new Binding(this, null, null, "LemonSlime.image", "lemonSlimeImage");
            result[13] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your final attack splatters what remains of the slime, sending lemony flavored goo across the ground. " + "" + "Rather than reforming, the goo quickly soaks into the ground, leaving you the victor!";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "LemonSlime.victory");
            result[14] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [LightningDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "LemonSlime.damageWeakness");
            result[15] = new Binding(this, null, null, "SyrupVine.gender", "Neutral");
            result[16] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You attempt to escape from the syrup vines. " + "" + "As you try to run you trip over several vines on the ground as they gently attempt to stop you, but you manage to dodge through them and eventually escape. " + "" + "The vines are too anchored to their spot to chase after you. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SyrupVine.playerEscape");
            result[17] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your last attack causes the mass of vines to tense up before limply falling to the ground. " + "" + "You poke at the mass of vines suspiciously, but the vines don\'t seem to react aside from leeking sweet smelling syrup accross the ground. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SyrupVine.victory");
            result[18] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [SlashingDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "SyrupVine.damageWeakness");
            result[19] = new Binding(this, null, null, "BloatedLion.image", "lionImage");
            result[20] = new Binding(this, null, null, "BloatedLion.species", "Lion");
            result[21] = new Binding(this, null, null, "BloatedLion.gender", "Male");
            result[22] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent is a large male lion who has a huge round belly that reaches halfway to the ground. " + "" + "He\'s eyeing you hungrily, apparently ready to add a little more to his overstretched stomach. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BloatedLion.description");
            result[23] = new Binding(this, null, null, "Drunk.gender", "Male");
            result[24] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent is a bloated drunken " + enemyt.species.name + " who appears to be raring to pick a fight with whoever " + enemyt.gender.he + " runs into. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Drunk.description");
            result[25] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The drunk closes " + enemyt.gender.his + " eyes for a second and wavers on " + enemyt.gender.his + " feet. " + "" + "You take this as a good opportunity to run away. " + "" + "As you look over your shoulder, you see the drunk wake up and look around in confusion, " + enemyt.gender.he + " shouts something about you just disappearing like magic. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Drunk.playerEscape");
            result[26] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The bloated drunk spins around on " + enemyt.gender.his + " heel in an attempt to flee but ends up falling flat on " + enemyt.gender.his + " swollen gut instead. " + "" + "" + capFirst(enemyt.gender.he) + " sloshes back and forth for a second, \"*belch* I could takes yous alls outsh if I washn\'t soooo... tired.\" " + "" + "The drunk passes out and begins snooring and occasionally hiccuping very loudly. Apparently you\'ve won. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Drunk.victory");
            result[27] = new Binding(this, null, null, "fruitDryad.gender", "Female");
            result[28] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Standing before you is only what you can describe as an otherworldly beautiful " + playerSpecies.name + ". " + "" + "She is a definite pear shape, in a long flowing gown that flows over her features effortlessly. " + "" + "She wears a wooden tiara brimming with delicious looking fruit, though to be honest they appear as if they are literally growing from her head rather then simply decorative. " + "" + "She chants a beautiful melodious song in some language you cannot identify. " + "" + "You are entranced for a few seconds before the oddest sensation comes over you. " + "" + "You look down and see your " + playerSpecies.fur + " starting to change color, starting from the base becoming a brilliant blue. " + "" + "You also feel a gurgling sensation in the pit of your stomach, which you can only describe as \'funny\'...";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "fruitDryad.description");
            result[29] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You turn and run, your belly sloshing with every bound as you attempt to escape the dryad, who calmly follows after, singing all the while. " + "" + "However, you manage to outdistance her, and soon her singing fades away in the distance as you feel the strange sensation begin to fade. " + "" + "As you watch the swelling recedes and the color starts fading back to your normal hue. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "fruitDryad.playerEscape");
            result[30] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You turn and run, your belly sloshing with every bound as you attempt to escape the dryad who calmly follows after, singing all the while. " + "" + "Unfortunately, your growing frame has put you off balance, and a misstep sends you tumbling onto your growing stomach. " + "" + "You rise to your feet, but the dryad is upon you once more. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "fruitDryad.playerEscapeFail");
            result[31] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "As your last attack hits, the dryad stumbles, her song coming to an abrupt end as she grasps at her wound. " + "" + "She looks at you briefly, anger blazing in her eyes, before she turns toward the nearest tree and sprints gracefully into it. " + "" + "She slides into it as effortlessly as if it was air and is gone without a trace. " + "" + "You begin to feel somewhat normal again as the last of the dryad\'s words fade from your mind. " + "" + "You look at yourself and see the color staining your " + playerSpecies.fur + " starting to fade as your swelling subsides. " + "" + "Within a few moments you\'re back to you original shade of " + playerSpecies.furBelly + ". ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "fruitDryad.victory");
            result[32] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [FireDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "fruitDryad.damageWeakness");
            result[33] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [BashingDamage, PiercingDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "fruitDryad.damageResistance");
            result[34] = new Binding(this, null, null, "fruitDryad.item", "bloatedBlueberry");
            result[35] = new Binding(this, null, null, "GorgedCheetah.image", "cheetahImage");
            result[36] = new Binding(this, null, null, "GorgedCheetah.species", "Cheetah");
            result[37] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent is an extremely well fed cheetah whose stomach hangs down from " + enemyt.gender.his + " otherwise sleek frame like a lead balloon. " + "" + "" + capFirst(enemyt.gender.his) + " bulging belly sways back and forth with every step as " + enemyt.gender.he + " eyes you hungrily, apparently still wanting to cram even more into it\'s overstretched gut. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "GorgedCheetah.description");
            result[38] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You flee from the battle. " + "" + "The cheetah attempts to chase you down, but " + enemyt.gender.his + " heavy swaying belly makes it too hard for " + enemyt.gender.him + " to chase after you and " + enemyt.gender.he + " quickly gives up. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "GorgedCheetah.playerEscape");
            result[39] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The bloated cheetah is panting from exhaustion. " + "" + "" + capFirst(enemyt.gender.he) + " turns and attempts to run away, but " + enemyt.gender.his + " swaying stomach gets the better of " + enemyt.gender.him + " and " + enemyt.gender.he + " topples to the ground. " + "" + "" + capFirst(enemyt.gender.he) + " tries to get up, but " + enemyt.gender.he + "\'s too weakened from the fight to lift " + enemyt.gender.his + " tremendous stomach.  ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "GorgedCheetah.victory");
            result[40] = new Binding(this, null, null, "BloatBees.gender", "Neutral");
            result[41] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent is a group of rather oversized bees the size of humming birds. From their oversized abdomen protrude sharp stingers, which drip wth an amber looking fluid. " + "" + "There is " + Math.ceil(eHEA / 25) + " left still flying. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BloatBees.description");
            result[42] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "As you adventure through the hills, you hear a quiet buzzing noise over your shoulder. " + "" + "As you turn to investigate you see a swarm of bees crest the previous hill and fly towards you menacingly. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BloatBees.introduction");
            result[43] = new Binding(this, null, null, "MeatMonster.gender", "Neutral");
            result[44] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You manage to flee from your opponent. " + "" + "He lets out a meaty roar before slowly stalking you down, but you think you manage to lose him before too long. It appears you have escaped. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MeatMonster.playerEscape");
            result[45] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You look down and notice a single lonely sausage on the ground that hasn\'t been damaged from the fight and isn\'t too dirty. " + "" + "Considering it probably falls within the 5 second rule, you pick up the sausage and dust it off. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MeatMonster.itemFound");
            result[46] = new Binding(this, null, null, "MeatMonster.item", "Sausage");
            result[47] = new Binding(this, null, null, "ObeseBear.image", "bearImage");
            result[48] = new Binding(this, null, null, "ObeseBear.species", "brownBear");
            result[49] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent is an enormous bear that\'s clearly prepared for several years worth of hibernation. " + "" + "Thick layers of fat ripple accross " + enemyt.gender.his + " entire body, " + enemyt.gender.his + " gut nearly dragging on the floor. " + "" + "" + capFirst(enemyt.gender.he) + " bares " + enemyt.gender.his + " fangs at you, clearly eager to add even more to " + enemyt.gender.his + " ponderous waist.";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ObeseBear.description");
            result[50] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You flee from the battle. " + "" + "The rotund bear chases after you for a while, looking like a roiling sea of brown fat, but " + enemyt.gender.he + " quickly becomes tired and decides to look for easier prey. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ObeseBear.playerEscape");
            result[51] = new Binding(this, null, null, "Thief.gender", "Male");
            result[52] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent appears to be dressed as a thief that\'s clearly packed on a few pounds. " + "" + "His leather armor is bursting at the seams all over and appears to be comically held together with bit\'s of rope. He\'s wielding a vicious looking dagger though.";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Thief.description");
            result[53] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent was once a " + enemyt.species.name + " member of your society who has for some reason left to live in the wilderness. " + "" + "" + capFirst(enemyt.gender.he) + " is wearing tattered rags of what were clothes manufactured in the city. " + "" + "" + capFirst(enemyt.gender.he) + " is grinning at you malevolently as " + enemyt.gender.he + " points a wooden spear at you. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Wildling.description");
            result[54] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You attempt to flee from the battle and manage to escape from the yelling wild " + enemyt.gender.man + ". ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Wildling.playerEscape");
            result[55] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent senses " + enemyt.gender.his + " eminent defeat and decides to kick some dirt into your eyes. " + "" + "You cough and spit as you wipe the dirt out of your eyes and by the time you can see again, your foe seems to have vanished into the wilderness. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Wildling.victory");
            result[56] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "In " + enemyt.gender.his + " haste to leave " + enemyt.gender.he + " happened to have left a small health potion behind. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Wildling.itemFound");
            result[57] = new Binding(this, null, null, "Wildling.item", "SmallHealthPotion");
            result[58] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A " + enemyt.species.name + " wildling with colored markings painted on " + enemyt.gender.him + " in vaguely ritualistic designs. " + "" + "Behind " + enemyt.gender.him + " is a large bag of assorted foods, presumably taken from society. " + "" + "After many years in the wild, " + enemyt.gender.he + " has become very adept in their methods of preparing the perfect sacrifice. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "WildlingRitualist.description");
            result[59] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You attempt to flee from the battle and manage to escape from the yelling wild " + enemyt.gender.man + ". ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "WildlingRitualist.playerEscape");
            result[60] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Upon realising defeat, the wildling runs away, throwing one final cupcake in your direction as a distraction. " + "" + "As you try to catch the cupcake, you see the wildling flee to the undergrowth in the corner of your eye. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "WildlingRitualist.victory");
            result[61] = new Binding(this, null, null, "WildlingRitualist.item", "Cupcake");
            result[62] = new Binding(this, null, null, "BlueberrySlime.gender", "Neutral");
            result[63] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your final attack splatters what remains of the slime, sending blueberry flavored goo across the ground. " + "" + "Rather than reforming, the goo quickly soaks into the ground, leaving you the victor! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BlueberrySlime.victory");
            result[64] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [IceDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "BlueberrySlime.damageWeakness");
            result[65] = new Binding(this, null, null, "HoneySlime.gender", "Neutral");
            result[66] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A delicious and mouth-watering scent begins pervading before the approach of your foe - a honey slime! " + "" + "Drooling by the captivating scent, you catch yourself wiping your mouth. The slime, lumbering, approaches you with viscous sweetness and fierceness! Or is it the honey that gives the vibe? ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "HoneySlime.introduction");
            result[67] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent is a large chunk of amporphous honey that smells too sweet. Still, the " + saySun() + "light perforating through the slime makes your gurgle with possibly oncoming gastronomical onslaught - or feast! " + "" + "This slime seems reasonably slower than its counterparts in its rather sticky, honeyish form. As it trudges towards you, it actually leaves a viscous trail behind! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "HoneySlime.description");
            result[68] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [PiercingDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "HoneySlime.damageResistance");
            result[69] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [FireDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "HoneySlime.damageWeakness");
            result[70] = new Binding(this, null, null, "HoneySlime.item", "honeyDipper");
            result[71] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You feel the ground shaking beneath you, making the grass around you sway sibilantly. Suddenly ahead of you out bursts a rampaging elephant! " + capFirst(enemyt.gender.he) + " is quite the roundest pachyderm you’ve ever seen, stomach swollen so much that that famously wrinkled hide is stretched completely taut and smooth. " + "" + "You notice that their trunk is curled around peculiarly purple fruit. As you watch, the elephant greedily stuffs it into " + enemyt.gender.his + " mouth. " + "" + "The liberal purplish staining around " + enemyt.gender.his + " lips suggests that they’ve already eaten far too many of those things. " + "" + "Even as that belly gurgles and stretches slightly larger before your very eyes, the highly elastic elephant advances ponderously towards you, eyes gleaming hungrily. " + "" + "It’s going to take more just than peanuts to fill THAT stomach now. In fact, it looks like " + enemyt.gender.he + " thinks " + enemyt.gender.he + "\'ll stretch enough to fit YOU in, as well! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ExpandedElephant.description");
            result[72] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You manage to get out of range of that flailing trunk and turn and run into the grassland. " + "" + "With a ferious bellow the elephant sets after you, but almost immediately you hear a squeal of satisfaction. " + "" + "Risking a look over your shoulder, you see the elephant clasping a pile of stretchy-fruits in " + enemyt.gender.his + " trunk, which " + enemyt.gender.he + " stuffs into " + enemyt.gender.his + " mouth. " + "" + "As they’re gulped down that huge grey belly swells even larger, and the elephant finally beaches itself on " + enemyt.gender.his + " own stomach, " + "" + "trumpeting after you as you get safely out of range- either from being eaten, or from the elephant exploding! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ExpandedElephant.playerEscape");
            result[73] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You try to flee from this overly-elasticated elephant, but " + enemyt.gender.his + " trunk whips out and tangles with your legs, sending you sprawling on the hard ground. " + "" + "You roll and heave yourself upright, this time careful not to take your eyes off your opponent. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ExpandedElephant.playerEscapeFail");
            result[74] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You squirm in the elephant’s grip, but " + enemyt.gender.his + " trunk is like a vice. " + "" + "You manage to get both hands around the middle of it and HAUL, " + "" + "but to your shock all that happens is that it stretches out like a piece of elastic with no apparent ill-effect except to annoy its owner. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ExpandedElephant.grappleEscapeFail");
            result[75] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You squirm in the elephant’s grip, their trunk pulsing against you like a snake. " + "" + "As it shuffles and adjusts its grip you manage to HEAVE a coil of the trunk over your head and off of you- with " + enemyt.gender.his + " grip thus loosened you manage to break free and jump out of range as they attempt to recapture you. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ExpandedElephant.grappleEscapeSucceed");
            result[76] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The elephant eventually tires, and with a final THUMP you at last manage to send it staggering back. " + "" + "You follow up the blow with a haymaker to the elephant’s rubbery chin that actually causes the thing to fall backwards and roll right over onto its back! " + "" + "Squealing and trumpeting in rage, the pneumatic pachyderm waggles its bloated, stubby legs in the air helplessly as it rocks from side to side, unable to right itself! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ExpandedElephant.victory");
            result[77] = new Binding(this, null, null, "MilkMachine.gender", "Neutral");
            result[78] = new Binding(this, null, null, "MilkMachine.image", "milkMachineImage");
            result[79] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent is a large, steam-powered, wheeled, brass amalgamation of flailing mechanical arms and hoses surrounding a massive cylindrical storage tank. " + "" + "The mechanical hoses are each tipped with a rubber suction cup-like tip that occasional spurts out milk. " + "" + "This mechanical monster has found a new container to store its harvest in. (Hint: it\'s you.) ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MilkMachine.description");
            result[80] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [PiercingDamage, SlashingDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "MilkMachine.damageResistance");
            result[81] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [LightningDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "MilkMachine.damageWeakness");
            result[82] = new Binding(this, null, null, "MilkMachine.item", "MilkBottle");
            result[83] = new Binding(this, null, null, "WaterElemental.gender", "Neutral");
            result[84] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This strange creature appears to be a blob of water, approaching you with crudely-shaped limbs. " + "" + "It appears to be slow, but it\'d sure hurt to get hit by one of those limbs.... ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "WaterElemental.description");
            result[85] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You do however find a jug of water mysteriously sitting on the ground. You\'re pretty sure it wasn\'t there before...? " + "" + "You pick the jug up to inspect it and it gives all the signs of just being a regular jug of fresh water...?";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "WaterElemental.itemFound");
            result[86] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [LightningDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "WaterElemental.damageWeakness");
            result[87] = new Binding(this, null, null, "WaterElemental.item", "WaterJug");
            result[88] = new Binding(this, null, null, "BubbleOrca.image", "bubbleOrcaImage");
            result[89] = new Binding(this, null, null, "BubbleOrca.species", "Orca");
            result[90] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent is a bloated looking blue orca – " + enemyt.gender.he + " has a magical aura around " + enemyt.gender.him + ", and bubbles are constantly leaking from " + enemyt.gender.his + " mouth. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BubbleOrca.description");
            result[91] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You turn tail and attempt to flee from the battle. The orca blinks in confusion, and then tries to pursue you. " + "" + "However, it begins to fall behind and eventually runs out of puff, drooping down and panting, letting out clouds of bubbles with every exhale. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BubbleOrca.playerEscape");
            result[92] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You turn tail and attempt to flee from the battle. The orca blinks in confusion and then tries to pursue you. " + "" + "The vast amount of activity however strains you and gives you a cramp, forcing you to stop and the Orca quickly catches up to you. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BubbleOrca.playerEscapeFail");
            result[93] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The orca spins through the water from your last hit, rolling onto " + enemyt.gender.his + " back and bobbing to the surface in a daze. " + "" + "You take this opportunity to quickly swim away, looking behind you for a moment to see the unconscious orca still burping out bubbles which float off into the sky. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BubbleOrca.victory");
            result[94] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [PiercingDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "BubbleOrca.damageWeakness");
            result[95] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent is a large, orange, " + enemyt.gender.name + " snake – Only the first five feet of it are poking out of the sand, and you have no idea how long it really is. " + "" + "It’s a foot wide, with some lumps visible in its length, and it stares and hisses at you, adamant to turn you into an even bigger, wider lump in its gut. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SandSnake.description");
            result[96] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You decide to try to run, be it through cowardice or unwillingness to fight. " + "" + "You quickly begin to charge at " + enemyt.gender.him + ", but rather than attacking, you vault over one of its coils and flee. " + "" + "The snake blinks, confused, and then realises it should give chase, and dives back under the sand. " + "" + "You hear tunnelling below you, and it bursts out of the sand and flies out with its mouth outstretched... right into a nearby coconut tree. " + "" + "The impact knocks a coconut out, and it falls right onto the snake’s head, dazing it. " + "" + "By the time it’s stopped seeing stars, you’re already gone. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SandSnake.playerEscape");
            result[97] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You decide to try to run, be it through cowardice or unwillingness to fight. " + "" + "You quickly begin to charge at " + enemyt.gender.him + ", but rather than attacking you vault over one of its coils and flee. " + "" + "The snake blinks, confused, then realises it should give chase and dives back under the sand. " + "" + "You hear tunnelling below you, and it bursts out of the sand and flies out with its mouth outstretched. " + "" + "You duck and it misses you by millimeters. It burrows down in front of you, its head resurfacing and facing you again, and it’s on the offensive before you can react. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SandSnake.playerEscapeFail");
            result[98] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You’re about to turn away and go on your way but you notice the snake’s fangs are dripping orange venom. " + "" + "You get an empty drink bottle from your bag and hold it up to the fang and the venom oozes into it. You could probably use this for more controlled use later. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SandSnake.itemFound");
            result[99] = new Binding(this, null, null, "SandSnake.item", "SnakeVenom");
            result[100] = new Binding(this, null, null, "SphericalShark.image", "sphereSharkImage");
            result[101] = new Binding(this, null, null, "SphericalShark.species", "Shark");
            result[102] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your opponent is a " + enemyt.gender.name + " great white shark, almost ball-shaped from its colossal girth. " + "" + "" + capFirst(enemyt.gender.he) + " stares at you with a glint in its eyes, making " + enemyt.gender.his + " intentions of using you to make " + enemyt.gender.himself + " even wider very clear indeed. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SphericalShark.description");
            result[103] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You swim under the shark and then over it, in an attempt to confuse it to give you time to escape. " + "" + "It tries to follow you with its eyes by turning around in the water, and the momentum of its weight makes it spin feebly in the water, flailing a little. " + "" + "By the time " + enemyt.gender.he + "\'s righted itself and shaken off the dizziness, you’re already gone. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SphericalShark.playerEscape");
            result[104] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You swim under the shark and then over it, in an attempt to confuse it and give you time to escape. " + "" + "It quickly rears downwards and slaps you with " + enemyt.gender.his + " tail, knocking you away and winding you, making you have to go up for air. " + "" + "By the time you’ve done so the shark’s already righted itself and is back within attacking distance. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SphericalShark.playerEscapeFail");
            result[105] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your final attack sends the shark reeling backwards, rolling in the water so it ends belly up. " + "" + "" + capFirst(enemyt.gender.he) + " flaps " + enemyt.gender.his + " fin at you a few times in stunned desperation before it falls unconscious. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SphericalShark.victory");
            result[106] = new Binding(this, null, null, "takeoutTerror.gender", "Male");
            result[107] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You’re brought up short as a hugely fat " + enemyt.species.name + " waddles towards you- practically so wide that there’s no space in the street to avoid him. " + "" + "The ground shakes beneath his thunderous footfalls. His shirt and denim pants are bursting at the seams, his belly so bloated it hangs past his knees. " + "" + "He resembles a hot-air balloon stuffed into a set of clothes. Obviously having been gorging for hours, the " + enemyt.species.name + " is occupied greedily devouring something from a crumpled parchment bag, accompanied by a strong smell of fried food, but as you watch he balls the now-empty bag up and tosses it away, " + "" + "obviously STILL not satisfied. Catching sight of you, he pants, \"Hey, y-you there! You’ve gotta lend me some GOLD!\" His enormous middle emits a subterranean rumble, " + "" + "and he adds desperately. \"You don’t understand, I just… gotta get some more CHOW!\" A slightly crazed look enters his food-fuddled gaze, " + "" + "and he looms over you like a wrecking ball. \"In fact… you’re look mighty tasty there… if you’ve not got any gold maybe I’ll j-just eat YOU!\" ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "takeoutTerror.description");
            result[108] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Going purple in the face, you squirm and struggle against this overfed brute’s huge bulk, which wobbles and ripples as you try to break free- " + "" + "it’s like fighting a vast ball of dough. Try as you might, you’re unable to escape from this lardball’s chubby grip. " + "" + "You shove hard against him, but all you do is sink into his soft blubber. And he STINKS of fried food... ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "takeoutTerror.grappleEscapeFail");
            result[109] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Going purple in the face, you squirm and struggle against this overfed brute’s huge bulk, which wobbles and ripples as you try to break free- " + "" + "it’s like fighting a vast ball of dough. You manage to prize his obese arm off of your neck, and SHOVE him backwards- " + "" + "though mostly you wind up just bouncing free of him as his gut rebounds against you. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "takeoutTerror.grappleEscapeSucceed");
            result[110] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "People who say a fat animal isn’t intimidating have obviously never been up close and personal with one. " + "" + "You suddenly dodge left, then right, and try to sprint past the colossally chubby " + enemyt.species.name + ". Unfortunately, he picks the same direction as you and so stomps into your path. " + "" + "There’s not enough room to get past! You SMACK into his huge belly and rebound as firmly as if you’d hit a crash-mat. " + "" + "He, in contrast, barely registers the collision with nothing more than a stifled grunt. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "takeoutTerror.playerEscapeFail");
            result[111] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "People who say a fat animal isn’t intimidating have obviously never been up close and personal with one. " + "" + "You suddenly dodge left, then right, and try to sprint past the colossally chubby " + enemyt.species.name + ". Caught off-balance, you make it past and get behind him! " + "" + "Fortunately he’s so unwieldy that by the time he’s managed to turn around, you’re well up the street and too far off for him to catch. " + "" + "You here a bellow of anger- followed by a deafening belly-rumble- but, for today at least, you’re nobody’s snack. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "takeoutTerror.playerEscape");
            result[112] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The massively obese " + enemyt.species.name + " staggers one last time and teeters precipitously on his " + enemyt.species.feet + ", " + "" + "until the weight of his he backside pulls him down with a THUMP that makes the surrounding buildings shake, accompanied by a RRIP as his clothes finally burst apart. " + "" + "He moans and topples onto his back, belly rising up level with your chin, heaving in time with his panting breath. " + "" + "Looks like this guy won’t be hassling anyone soon- not until he can get up. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "takeoutTerror.victory");
            result[113] = new Binding(this, null, null, "wildlingShaman.species", "Dog");
            result[114] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Walking out of the long grass, you come unexpectedly upon a canine figure standing with their back to you, staring into the distance. " + "" + "A ragged loincloth and blanket makes you think that this is a wilding, and you tense to defend yourself, but you relax slightly when you observe that " + enemyt.gender.he + " carries no weapon, and not even any food. The only thing you can see is an old, gnarled staff and a small medicine-bag at their feet. " + "" + "The creature slowly turns to face you- soot black, hatchet-muzzled and quite the thinnest creature you’ve seen in a long time, " + enemyt.gender.his + " face is decorated with tribal markings that even you can interpret. A shaman! Err... whoops! " + capFirst(enemyt.gender.he) + " regards you with an inscrutable, hawk-like expression for a few moments, then " + enemyt.gender.his + " weathered muzzle breaks slowly into a fathomless, predatory smile. This doesn’t look good... ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShaman.description");
            result[115] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "walking out of the long grass, you come unexpectedly upon a canine figure standing with their back to you, staring into the distance. " + "" + "A ragged loincloth and blanket makes you think that this is a wilding, and you tense to defend yourself, but you relax slightly when you observe that " + enemyt.gender.he + " carries no weapon, and not even any food. The only thing you can see is an old, gnarled staff and a small medicine-bag at their feet. " + "" + "The creature slowly turns to face you- soot black, hatchet-muzzled and quite the thinnest creature you’ve seen in a long time, " + enemyt.gender.his + " face is decorated with tribal markings that even you can interpret. A shaman! Err... whoops! " + capFirst(enemyt.gender.he) + " regards you with an inscrutable, hawk-like expression for a few moments, then " + enemyt.gender.his + " weathered muzzle breaks slowly into a fathomless, predatory smile. This doesn’t look good... ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShaman.introduction");
            result[116] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You turn on your tail and run into the long grass, leaving your foe standing. " + "" + "Hearing no sounds of pursuit, you come to a halt after a few minutes, panting and wiping your brow. " + "" + "But when you stand up and happen to glance to your side you nearly jump out of your skin to find the shaman standing there exactly as before, apparently without having moved a muscle. " + "" + "You failed to escape! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShaman.playerEscapeFail");
            result[117] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You turn on your tail and run into the long grass, leaving your foe standing. " + "" + "As the distance lengthens you risk a glance over your shoulder to check for pursuit, but the shaman is merely watching your hurried departure with interest, head to one side. " + "" + "Just before " + enemyt.gender.he + " vanishes into the distance " + enemyt.gender.he + " smiles and raises one paw in a meaning that you can guess all too well- \'be seeing you\'. " + "" + "It looks like you’ve been let go, but why? ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShaman.playerEscape");
            result[118] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Under the amused gaze of your foe, you squirm and flex inside the vice-like grip of the magical wind, but are left panting for breath, " + "" + "unable to break free of whatever spell is holding you to the spot. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShaman.grappleEscapeFail");
            result[119] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Sweating with exertion, your heave and strain your shoulders and with a mighty effort of will manage to break free of the shaman’s magical grip! You " + playerSpecies.angry + " in triumph while the shaman growls angrily. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShaman.grappleEscapeSucceed");
            result[120] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You prove too big a mouthful for the shaman to tackle. " + capFirst(enemyt.gender.he) + " slips away from your last attack, " + enemyt.gender.his + " eyes still fixed on you coldly. " + "" + "You lunge forwards in an attempt to grab " + enemyt.gender.him + " before " + enemyt.gender.he + " gets away, but land flat on your face in the dust, " + fatness() + " arms wrapped around thin air! " + "" + "You look up from your prone position on the floor laying atop your " + waist() + " belly, but all you see is the outline of a soaring eagle as it disappears into the horizon. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShaman.victory");
            result[121] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [BashingDamage, SlashingDamage, PiercingDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "wildlingShaman.damageResistance");
            result[122] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [FireDamage, IceDamage, LightningDamage, ArcaneDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "wildlingShaman.damageWeakness");
            result[123] = new Binding(this, null, null, "wildlingShamanBoss.species", "Dog");
            result[124] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You face the wilding shaman, as skinny and dark as a shadow at noon, with ritualistic markings across the hatchet-like planes of " + enemyt.gender.his + " chiselled canine features and adorned with a full ceremonial headdress and robe. " + "" + "Scrawny and completely unarmed, carrying only an old wooden flute, you still feel the skin crawl on the back of your neck when those eyes fix on you speculatively. " + "" + "The face is expressionless, but " + enemyt.gender.his + " eyes are alight at this turn of good fortune. TWO captives for sacrifice... Looks like you\'ll have to fight your way out! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShamanBoss.description");
            result[125] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You turn on your tail and run into the long grass, leaving your foe standing. " + "" + "Hearing no sounds of pursuit, you stagger to a stop after a few minutes, panting and wiping your brow. " + "" + "But when you stand up and happen to glance to your side you nearly jump out of your skin to find the shaman standing there exactly as before, apparently without having moved a muscle. " + "" + "You failed to escape! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShamanBoss.playerEscapeFail");
            result[126] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You turn on your tail and run into the long grass, leaving your foe standing. " + "" + "As the distance lengthens you risk a glance over your shoulder to check for pursuit, but the shaman is merely watching your hurried departure with interest, head to one side. " + "" + "Obviously they must have their hands full with just one prisoner- and given the size of him, you\'re not surprised. " + "" + "You can still just hear the faint, frantic pleading of the enormous captive from the enclosure. You keep running, coward that you are. " + "" + "Just before the shaman vanishes from sight " + enemyt.gender.he + " smiles and points a sticklike finger toward you in a gesture you can interpret only too well- \'next time it could be you\'. " + "" + "\r\tYou lost your pride, but at least you escaped! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShamanBoss.playerEscape");
            result[127] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Under the amused gaze of your foe, you squirm and flex inside the vice-like grip of the magical wind, but are left panting for breath, " + "" + "unable to break free of whatever spell is holding you to the spot. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShamanBoss.grappleEscapeFail");
            result[128] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Sweating with exertion, your heave and strain your shoulders and with a mighty effort of will manage to break free of the shaman\'s magical grip! " + "" + "You shout in triumph while the shaman growls angrily. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShamanBoss.grappleEscapeSucceed");
            result[129] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You prove too tough a piece of meat for it to be worth chewing. The shaman lowers " + enemyt.gender.his + " paw and slowly backs away from you, keeping between you and the stockade. " + "" + "The message in that fathomless stare is clear- \'leave now, before I change my mind\'. You cautiously back away to the edge of the clearing, still locked in a stare. " + "" + "Then you turn and make a break for it, pounding through the long grass. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wildlingShamanBoss.victory");
            result[130] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [BashingDamage, SlashingDamage, PiercingDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "wildlingShamanBoss.damageResistance");
            result[131] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [FireDamage, IceDamage, LightningDamage, ArcaneDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "wildlingShamanBoss.damageWeakness");
            result[132] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "As you " + walk() + " through the jungle, you suddenly catch sight of a long, tubular, scaled snake\'s torso. " + "" + "Your eyes follow it left and right but can\'t seem to find the end of it. " + "" + "Turning around, you see the head of the lengthy Anaconda, and discern two things: First off, it\'s looking at you hungrily, and second, its body is all around you! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Anaconda.introduction");
            result[133] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This huge snake is roughly two feet thick and approxiately Very Very Long, " + "" + "its body disappearing behind the jungle foliage in a way that makes it nearly impossible to tell where it ends. " + "" + "Where it begins is more obvious: The hungry snake head that\'s hissing at you and preparing to make you its lunch. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Anaconda.description");
            result[134] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your travels through the jungle is suddenly interrupted by the sound of a growling feline. " + "" + "Turning to look, you are within arms reach of a round-bellied jaguar, which has snuck up quite closely to you, and is obviously quite confident that you won\'t escape it, " + "" + "judging by its behavior. You have just enough time to prepare to fight as it pounces at you! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FatJaguar.introduction");
            result[135] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This husky, spotted feline appears to have been quite successful in its recent hunts, sporting a thick body and an impressively fat gut. " + "" + "Now it looks like it wants to add you to its list of accomplishments. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FatJaguar.description");
            result[136] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You get away from the jaguar and run through the trees to put some distance between the two of you. " + "" + "Ill suited for chasing, the jaguar only follows you for a short ways before stopping to skulk in the shadows again. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FatJaguar.playerEscape");
            result[137] = new Binding(this, function ():Species {
                return randomDinosaur();
            }, null, "GluttonSeparatist.species");
            result[138] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "As you " + walk() + " through the jungle, you are suddenly interrupted by an angry shout in a language you don\'t understand. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "GluttonSeparatist.introduction");
            result[139] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This fat-bellied " + enemyt.species.name + " is wearing segmented armor marked with the sigil of the Glutton Separatists of the island and wielding a metal spear decorated with " + "" + "feathers near its tip, which is currently pointing in your direction. Looks like " + enemyt.gender.he + " has some nasty ideas in mind for what he wants to do with you. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "GluttonSeparatist.description");
            result[140] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You turn tail and flee, not wanting to be stuck in this fight anymore. The " + enemyt.species.name + " chases you for a short ways, " + "" + "yelling tauntingly in a language you don\'t understand, but only just far enough to see that you\'re well and truly gone. You escape with no further injury but to your ego. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "GluttonSeparatist.playerEscape");
            result[141] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your last attack sends the " + enemyt.species.name + " flopping onto " + enemyt.gender.his + " side groaning in pain. Looks like you showed " + enemyt.gender.him + " whatfor. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "GluttonSeparatist.victory");
            result[142] = new Binding(this, function ():Species {
                return randomDinosaur();
            }, null, "shamanBossNormal.species");
            result[143] = new Binding(this, null, null, "shamanBossNormal.bossOf", "cultistVillage");
            result[144] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Dressed in feathered robes that fail to cover " + enemyt.gender.his + " round belly bearing the mark of the Glutton Separatists, " + "" + "this " + enemyt.species.name + " is wielding a totem and already chanting incantations in a tongue you don\'t understand. " + "" + "Given the way that the world itself seems to shift around " + enemyt.gender.him + ", it\'s obvious that " + enemyt.gender.he + "\'s not as defenseless as " + enemyt.gender.his + " empty hands would imply. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "shamanBossNormal.description");
            result[145] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The shaman wobbles a bit on " + enemyt.gender.his + " feet after your last attack, then crashes to the ground on " + enemyt.gender.his + " big, round stomach, letting out a groan as " + enemyt.gender.he + " goes. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "shamanBossNormal.victory");
            result[146] = new Binding(this, null, null, "cheeseMonster.gender", "Neutral");
            result[147] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You’ve never seen a cheese quite like this. It looks hard and crumbly, with a reddish rind and swiss-cheese type holes. " + "" + "It seems to be quivering slightly, with steam rising off it. It doesn’t look too dangerous, although you can’t help but notice a dagger sticking out of the top of it like a cheese-knife, " + "" + "and a number of other cut-marks in the rind. You take a step towards it, then back up hurriedly as the rind cracks to reveal a kind of mouth set in a feral, hungry grin, " + "" + "strands of soft cheese hanging between the jaws. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cheeseMonster.description");
            result[148] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Catching the cheese off guard, you turn and sprint for the shed door. With the cheese in hot pursuit, you slam it shut behind you and lean on it, hard. " + "" + "The doors resound with a mighty THUD as the cheese collides with them. You listen for a few minutes, breathing hard, but there\'s no further noises from inside the shed. " + "" + "Panting, you look up to find that the bull standing in front of you- evidently he returned to find out how the fight was going. He gives you a worried look as your expression says it all. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cheeseMonster.playerEscape");
            result[149] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You turn and try to make a dash for the shed door, but the cheese cannons into the back of your knees, dropping you onto your front. " + "" + "As you try to stagger upright, the cheese launches itself at you again, smacking into your " + fatness() + " rump, sending you sprawling to the floor again. " + "" + "As you try to scramble on your hands and knees towards the door, it lands on your back like some kind of wrestling move, squashing you to the floorboards and squeezing the air out of you. " + "" + "You\'re not getting away from this dairy derivative without a fight! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cheeseMonster.playerEscapeFail");
            result[150] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The demonic cheese is finally weakening, large cracks appearing across its rind as it tries to keep itself together. " + "" + "You make a grab for it, catch hold of a gash in its side with your fingers and HEAVE. " + "" + "With a noise like a tree-trunk splitting apart you tear the remains of the cheese in two, right down the middle. " + "" + "You then viciously stuff one of the chunks into your mouth, and chew, and chew, and chew... " + "" + "\r\tEventually you\'re found sitting on the floor, legs spread apart, swollen belly sitting in your lap. " + "" + "All that remains of your adversary is a single solitary chunk of cheese in your hand, and a rather unpleasantly lingering smell. " + "" + "You gulp this last mouthful heavily, and feel the lump heading down to join the queue for your stomach. " + "" + "Bits of gnawed rind litter the floor, and there are little heaps of cheesy crumbs scattered around. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cheeseMonster.victory");
            result[151] = new Binding(this, function ():Species {
                return randomDinosaur();
            }, null, "DinosaurRider.species");
            result[152] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You " + walk() + " through the jungle and encounter an oddly flattened clearing. Closer inspection reveals that the plant life in this area has been completely trampled. " + "" + "By the time you realize this, you can hear the tell-tale thudding of enormous footsteps. " + "" + "A quick glance in the direction of their origin gives you a good view of an enormous feral tyrannosaurus parting the trees with its body, being directed by an anthro " + enemyt.species.name + " wearing a light armor that bears the symbol of the Glutton Separatists. " + capFirst(enemyt.gender.he) + " shouts commandingly in a tongue you don\'t understand, and the " + "" + "tyrannosaurus turns to face you. This could go very poorly! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "DinosaurRider.introduction");
            result[153] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You are up against a tyrannosaurus being ridden by " + enemyt.species.article + " " + enemyt.species.name + ". " + "" + "The tyrannosaurus is moving to squash you flat, and the " + enemyt.species.name + " has a bundle of javelins that " + enemyt.gender.he + "\'s obviously just itching to introduce you to. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "DinosaurRider.description");
            result[154] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You decide that it\'s time to leave, and flee as quickly as you can into the jungle. " + "" + "The sound of thundering footfalls and crashing trees eventually fades as you go far and fast in the direction of Anywhere Else. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "DinosaurRider.playerEscape");
            result[155] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The tyrannosaurus staggers, letting out a pained roar from your last attack, and crashes to the ground with an earth-shaking thud. " + "" + "You take some time to revel in your victory before continuing on through the jungle. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "DinosaurRider.victory");
            result[156] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "crazed magic " + enemyt.species.name;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MagicalFur.name");
            result[157] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "As you traverse the mountains, you come across " + enemyt.species.article + " " + enemyt.species.name + " in tattered robes holding " + enemyt.gender.his + " head in both hands and walking in an almost drunken stagger. Given that " + enemyt.gender.he + " is grunting and groaning with pain, " + "" + "you feel safe in assuming they aren\'t having that kind of fun at the moment. \"Head hurts...\" " + enemyt.gender.he + " gasps out, \"ALWAYS hurts...\" As " + enemyt.gender.he + " approaches, you can see that " + enemyt.gender.his + " head does appear to be a bit swollen, but not nearly as much as " + enemyt.gender.his + " gut. " + capFirst(enemyt.gender.he) + " manages to lift " + enemyt.gender.his + " head enough to see you, and hisses out, \"...except when I get to EAT.\" With a staggered sweep, " + enemyt.gender.he + " throws open one side of " + enemyt.gender.his + " robe and pulls out an ugly, bent stick of a wand, pointing it at you menacingly! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MagicalFur.description");
            result[158] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With your last attack, the " + enemyt.species.name + " is knocked on " + enemyt.gender.his + " back, and lets out a pained cry. As " + enemyt.gender.he + " tries to get back up, " + enemyt.gender.he + " stops, letting out a moan, and lies back down. When " + enemyt.gender.he + " is on " + enemyt.gender.his + " back, " + enemyt.gender.he + " lets out a long, relaxed sigh, seemingly content to just take a nap. " + capFirst(enemyt.gender.he) + " appears to be in less pain than where " + enemyt.gender.he + " started, so you decide to just leave it at that. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MagicalFur.victory");
            result[159] = new Binding(this, null, null, "MagicalFur.item", "CharredWand");
            result[160] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "crazed muscular " + enemyt.species.name;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MuscleFur.name");
            result[161] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your path is suddenly crossed by a lumbering hulk of " + enemyt.species.article + " " + enemyt.species.name + ". " + "" + "" + capFirst(enemyt.gender.he) + " is exceptionally large, in height, musculature, and weight, " + enemyt.gender.his + " massive belly easily being a third of " + enemyt.gender.his + " mass, " + "" + "and is dragging something that could be called a club, but would be better described as a small tree. " + "" + "Upon spotting you, " + enemyt.gender.he + " rumbles in a deep voice, \"Eat more... Get bigger... Eat YOU... GET BIGGER!\" " + enemyt.gender.he + " rushes you, mouth open wide and club raised! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MuscleFur.description");
            result[162] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Grunting with effort, you pry the twisted " + enemyt.species.name + " monster\'s arms off of you just long enough to escape " + enemyt.gender.his + " grasp. Not a moment too soon, as " + enemyt.gender.his + " mouth comes plunging down, teeth clacking as they snap shut where your head once was! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MuscleFur.grappleEscapeSucceed");
            result[163] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With your last attack, the giant " + enemyt.species.name + " crashes to " + enemyt.gender.his + " knees, letting out a low moan and reaching towards you before falling on " + enemyt.gender.his + " face. Looks like you\'ve put an end to " + enemyt.gender.his + " rampage. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MuscleFur.victory");
            result[164] = new Binding(this, null, null, "MuscleFur.item", "GreatClub");
            result[165] = new Binding(this, null, null, "SoldierAnt.gender", "Neutral");
            result[166] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "As you hike along the side of a mountain, you come across a line of ants marching in formation. " + "" + "This wouldn\'t be particularly noteworthy if they weren\'t the size of housecats and carrying away what looks to be an entire banquet. " + "" + "Several of them turn to you, mandibles flexing in a threatening manner. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SoldierAnt.description");
            result[167] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With your last attack, the last ant aggressor falls, knocked onto its back and legs twitching in the air. " + "" + "The others seem far less interested in fighting, picking up the pace and dashing off in all directions, finding a stunning number of nooks and crannies to carry their food into. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SoldierAnt.victory");
            result[168] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "crazed thin " + enemyt.species.name;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ThinFur.name");
            result[169] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "As you explore the mountains, a thin shell of " + enemyt.species.article + " " + enemyt.species.name + " staggers across your path, holding " + enemyt.gender.his + " stomach. " + "" + "Surprisingly, it is flat, though given that " + enemyt.gender.he + " is currently taking the last few bites of what looks to have been an entire hock of ham, that seems very unusual. " + "" + "\"Never lasts,\" " + enemyt.gender.he + " grumbles quietly, \"always need more. Never stay full.\" " + capFirst(enemyt.gender.he) + " suddenly looks up and sees you, " + enemyt.gender.his + " face turning into a twisted, angry grimace. \"GIVE ME MORE FOOD!\" " + enemyt.gender.he + " suddenly bellows, dropping the meatless bone and suddenly pulling a nasty looking pair of daggers out! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ThinFur.description");
            result[170] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With your last attack, the " + enemyt.species.name + " is send sprawling to the ground. " + capFirst(enemyt.gender.he) + " twitches for a bit, lets out a deep sigh, and falls into unconsciousness. Looks like that\'s that. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ThinFur.victory");
            result[171] = new Binding(this, null, null, "ThinFur.item", "NastyDagger");
            result[172] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "crazed tough " + enemyt.species.name;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ToughFur.name");
            result[173] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You are wandering through a particularly cold mountainside when your path is crossed by " + enemyt.species.article + " " + enemyt.species.name + " that is abnormally fat, even given the current state of things. " + capFirst(enemyt.gender.he) + " appears to be completely unbothered by the inclimental weather, waddling up to you bare " + enemyt.species.furred + ". The sheer girth of " + enemyt.gender.him + " becomes more apparent as " + enemyt.gender.he + " gets closer--" + enemyt.gender.his + " belly nearly hangs down to " + enemyt.gender.his + " knees, and every inch of " + enemyt.gender.his + " body bulges with thick fat. " + capFirst(enemyt.gender.he) + " raises a wooden spear tipped with obsidian at you and demands, " + "" + "\"Give me your food, or I\'ll squash you!\" And with that, it\'s time to fight! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ToughFur.description");
            result[174] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With your last attack, the corpulent " + enemyt.species.name + " falls to " + enemyt.gender.his + " knees, grunting out a curse before collapsing to the ground, which shakes a bit under " + enemyt.gender.his + " bulk. Chalk up another victory for you! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ToughFur.victory");
            result[175] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = capFirst(enemyt.gender.his) + " spear is lying on the ground and in good shape. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ToughFur.itemFound");
            result[176] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [IceDamage, PiercingDamage, BashingDamage, SlashingDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ToughFur.damageResistance");
            result[177] = new Binding(this, null, null, "ToughFur.item", "ObsidianSpear");
            result[178] = new Binding(this, null, null, "FeederAnt.gender", "Neutral");
            result[179] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This appears to be similar to a honeypot ant, but scaled up to about eight feet in height and nearly twice that in length. " + "" + "Fortunately, it doesn\'t seem to have much in the way of natural weapons. Unfortunately, that\'s not deterring it from wanting to beat you into submission and stuff you to bursting. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FeederAnt.description");
            result[180] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With your last attack, the creature lets out a disturbing shrieking noise and falls to the ground, honey leaking everywhere. " + "" + "The other insects respond by getting into a bit of a tizzy, scrambling about in a panic and generally demonstrating that it might be a good time to leave. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FeederAnt.victory");
            result[181] = new Binding(this, null, null, "FeederAnt.item", "MagicalHoney");
            result[182] = new Binding(this, null, null, "Manticore.gender", "Male");
            result[183] = new Binding(this, null, null, "Manticore.bossOf", "WizardTower");
            result[184] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With the body of a massive feral lion, giant feathered wings, and an intimidatingly huge scorpion stinger for a tail, " + "" + "there\'s no question that this magical creature was made to \'change minds\' without mercy. " + "" + "Its stinger is raised, and its body is low to the ground, ready to pounce at you. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Manticore.description");
            result[185] = new Binding(this, null, null, "Snookums.species", "Squirrel");
            result[186] = new Binding(this, null, null, "Snookums.gender", "Female");
            result[187] = new Binding(this, null, null, "Snookums.bossOf", "ExperimentCave");
            result[188] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This giant and giant-muscled squirrel female is very angry at you for trying to leave without permission, " + "" + "and the way she holds her stone mace makes it clear how she handles things that make her angry! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Snookums.description");
            result[189] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Grunting with effort, you pry the twisted squirrel monster\'s arms off of you just long enough to escape her grasp. " + "" + "Not a moment too soon, as her mouth comes plunging down, teeth clacking as they snap shut where your head once was! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Snookums.grappleEscapeSucceed");
            result[190] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [IceDamage, PiercingDamage, BashingDamage, SlashingDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Snookums.damageResistance");
            result[191] = new Binding(this, null, null, "FatWyvern.gender", "Female");
            result[192] = new Binding(this, null, null, "FatWyvern.bossOf", "WyvernCave");
            result[193] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This blue-grey wyvern is even bigger and fatter than the ones that can normally be found around the mountain, " + "" + "and is also unusual in that its tail is dotted with boney protrusions that crackle with lightning when it\'s angry. " + "" + "Given that you\'ve threatened its young, that would be now. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FatWyvern.description");
            result[194] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You push one of the beast\'s wings aside with your whole body, its hungry maw getting nothing but air before you force yourself out of its grasp. " + "" + "The wyvern roars furiously at your escape. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FatWyvern.grappleEscapeSucceed");
            result[195] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With a howl of pain, the giant wyvern lurches, then collapses onto its side, thoroughly beaten by your attacks. " + "" + "It lets out a groan as it slowly writhes on the ground, the fight taken out of it. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FatWyvern.victory");
            result[196] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [LightningDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "FatWyvern.damageResistance");
            result[197] = new Binding(this, null, null, "RoyalGuardWasp.gender", "Neutral");
            result[198] = new Binding(this, null, null, "RoyalGuardWasp.bossOf", "InsectHive");
            result[199] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "An ordinary wasp is bad enough, but this one is bigger than some houses you\'ve seen in the city. " + "" + "It hovers expertly and waves its stinger at you, which is not only massive, but drips with some sort of nasty poison. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "RoyalGuardWasp.description");
            result[200] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With a hideous insectoid screech, the wasp falls to the ground, its limbs twitching before slowing to a halt. " + "" + "You have defeated the guardian insect and are free to advance to the queen insect\'s chamber.";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "RoyalGuardWasp.victory");
            result[201] = new Binding(this, null, null, "Smarty.species", "Rabbit");
            result[202] = new Binding(this, null, null, "Smarty.gender", "Male");
            result[203] = new Binding(this, null, null, "Smarty.bossOf", "ExperimentCave");
            result[204] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This robed male rabbit has a slightly large head that appears to be throbbing. " + "" + "He has one hand on it, rubbing it gently, and the other pointing a wand at you. From the looks of things, he has a headache and you just hurt his giant girlfriend. This could get ugly. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Smarty.description");
            result[205] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your enemy is a giant three headed serpent the colour of sand. Each head stares at you as their tongues flick up and down, tasting the air. " + "" + "It seems hungry, waiting to add you to the list of victims in its cauldron-like belly. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Hydra.description");
            result[206] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your resolve falters and you quickly turn tail on the fight, running as fast as you can. " + "" + "The hydra smashes " + enemyt.gender.his + " tail down on the ground, hoping to incapacitate you or stop your retreat, " + "" + "but " + enemyt.gender.he + "’s too slow and " + enemyt.gender.his + " tail crashes into the ground behind you. " + "" + "By the time " + enemyt.gender.he + " pulls it back up, you’re too far away for " + enemyt.gender.him + " to catch. " + "" + "The element of surprise was all " + enemyt.gender.he + " had, so now that there’s no one within range " + enemyt.gender.he + " slips back into the water.";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Hydra.playerEscape");
            result[207] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your resolve falters and you quickly turn tail on the fight, running as fast as you can. " + "" + "The hydra smashes " + enemyt.gender.his + " tail down on the ground, hoping to incapacitate you or stop your retreat. " + "" + "You stop yourself just in time to avoid being made into a pancake against the sand and look away from the impassable wall of flesh in front of you. " + "" + "You have no choice but to return to the fight. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Hydra.playerEscapeFail");
            result[208] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The hydra looks around at the rest of the beach, thinking that the people around " + enemyt.gender.him + " are too far away to bother with, " + "" + "and it’s about to retreat into the water before the middle mouth gags. " + "" + "The other two look at it before it retches and brings you up onto the sand. You’re dazed and confused by the impact and light, but get back up and yell at the Hydra defiantly. " + "" + "The middle head roars in rage, while the right one looks on in a mix of bemusement and genuine admiration. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Hydra.grappleEscapeSucceed");
            result[209] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The hydra recoils, all heads screeching in pain. " + "" + "The outer two stop, but the middle one continues screeching in rage, and while you can’t understand the word, you understand it’s yelling at the other two. " + "" + "They share a gaze, then both headbutt the middle one, knocking it unconscious. The two look at you, obviously conceding defeat, lower their heads and spit out the others they ate. " + "" + "The hydra turns and leaves, glaring back at you. It might try to strike again while you’re not around. " + "" + "As the medical services arrive to tend to the vomited anthros, a female from the crowd walks over to you, " + "" + "thanking you for saving her husband and emptying her purse into your hands while all the while thanking you and wishing she had more to give. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Hydra.victory");
            result[210] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [BashingDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Hydra.damageResistance");
            result[211] = new Binding(this, null, null, "Hydra.item", "SpectrumGem");
            result[212] = new Binding(this, null, null, "mountainousTiger.species", "Tiger");
            result[213] = new Binding(this, null, null, "mountainousTiger.gender", "Male");
            result[214] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A tiger of obscene muscularity bears down on you, teeth bared. Save his loincloth, you can see that every inch of him has been toned and filled to bursting, " + "" + "forcing his arms up and his legs apart. His paws begin to burn with a blue arcane fire, which travels up his forearms. You may have bitten off more than you can chew... ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "mountainousTiger.description");
            result[215] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Realizing you really have bitten off more than you can chew, you wait for an opening in his attacks, before tripping him up with your weapon, sending him to the ground. " + "" + "By the time he\'s back up, you\'ve already put a good deal of distance between the both of you. " + "" + "He gives a start, preparing to give chase, before letting out an echoing growl and going back to his bag. Seems you weren\'t worth risking his catch. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "mountainousTiger.playerEscape");
            result[216] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Deciding to cut your losses, you attempt to give the feline the slip. " + "" + "You only make it a few yards before a blast of blue fire erupts in front of you as the tiger teleports squarely in your line of escape. \"Going somewhere?\" He growls. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "mountainousTiger.playerEscapeFail");
            result[217] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With a roar of pain and frustration, the tiger swears at you. \"Fine, you win!\" But before you can stop him, " + "" + "he\'s summoned a bright flash of light, and like that, both him and the black sack full of fatties is gone. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "mountainousTiger.victory");
            result[218] = new Binding(this, null, null, "mountainousTiger.item", "goldThread");
            result[219] = new Binding(this, null, null, "cabalDragon.species", "blackDragon");
            result[220] = new Binding(this, null, null, "cabalDragon.gender", "Male");
            result[221] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This anthropomorphic grey dragon is tremendously large, far bigger than what is naturally possible, and sports both a gigantic musculature and a massively round belly. " + "" + "He is looking at you with hunger in his eyes, and a malicious grin upon his face. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cabalDragon.description");
            result[222] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The dragon lets out an anguished roar, arcane red energy leaking out in whisps from his battered form, causing him to shrink considerably. " + "" + "Some of the energy flows back into your body, returning you to your original state. As he lowers to the floor, he groans out, \"I can\'t be bested here, Master.\" " + "" + "Looking up from the floor, he snarls at you. \"I\'ll have my revenge. I\'m not done with you, I swear it!\" " + "" + "For a moment it appears he continues to shrink, but it quickly becomes apparent that he is turning into some sort of grey ooze. " + "" + "The viscous fluid flows into cracks in the cavern walls, retreating from you, " + "" + "and as the magical barrier fades away, you are left alone in the chamber with the magical container you were sent to retrieve. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cabalDragon.victory");
            result[223] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With the dragon beaten, you are now able to return the cauldron to the Cabal, and will surely be rewarded handsomely for it. " + "" + "On closer inspection, the simplistic cauldron is quite compact and light, certainly due to the magical enchantments on it. " + "" + "It is easy enough to safely stash in your pack, and the lid is secured by a simple lock to prevent its contents from spilling forth. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cabalDragon.itemFound");
            result[224] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [BashingDamage, SlashingDamage, FireDamage, IceDamage, ArcaneDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "cabalDragon.damageResistance");
            result[225] = new Binding(this, null, null, "cabalDragon.item", "cabalCauldron");
            result[226] = new Binding(this, function ():int {
                return 100;
            }, null, "cabalDragon.itemChance");
            result[227] = new Binding(this, null, null, "StoreRoomOwner.bossOf", "StoreRoom");
            result[228] = new Binding(this, null, null, "StoreRoomOwner.gender", "Male");
            result[229] = new Binding(this, null, null, "GingerbreadWitch.bossOf", "GingerbreadHouse");
            result[230] = new Binding(this, null, null, "GingerbreadWitch.gender", "Female");
            result[231] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [LightningDamage, FireDamage, IceDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "GingerbreadWitch.damageResistance");
            result[232] = new Binding(this, null, null, "lizardWizard.gender", "Male");
            result[233] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This smallish lizard is dressed in snappy, colorful garb. " + "" + "It fails to hide his pudgy belly, but between the feathered cap, colorful patterns, " + "" + "and the wand that leaves slight magical trails as he waves it idly, it does the job of letting you know that you\'re up against a wizard. " + "" + "The wicked grin lets you know that he\'s a confident one, at that. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "lizardWizard.description");
            result[234] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With great effort, you rip your limbs from the mass of plants, sending several fruits crashing to the ground. " + "" + "The lizard screeches angrily at you as you make a mess of his farm. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "lizardWizard.grappleEscapeSucceed");
            result[235] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "As your last attack connects, the little wizard suddenly disappears. " + "" + "With a hurried glance, you see that the plants have returned to their original, spaceous placement. " + "" + "The lizard is a ways away from you, picking himself up and dusting his hat off. " + "" + "\"You\'re lucky this time,\" he growls angrily, and with a snap of his wrist, he points his wand straight upward. " + "" + "With a brilliant flash and disorienting sound somewhere between a rush of wind and an explosion, the farm is gone, and a distant cart is hurrying away towards the horizon. " + "" + "You have achieved victory! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "lizardWizard.victory");
            result[236] = new Binding(this, function ():Species {
                return randomDinosaur();
            }, null, "GluttonSeparatistBoss.species");
            result[237] = new Binding(this, null, null, "GluttonSeparatistBoss.bossOf", "cultistVillage");
            result[238] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "As you " + walk() + " through the jungle, you are suddenly interrupted by an angry shout in a language you don\'t understand. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "GluttonSeparatistBoss.introduction");
            result[239] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This fat-bellied " + enemyt.species.name + " is wearing segmented armor marked with the sigil of the Glutton Separatists of the island " + "" + "and wielding a metal spear decorated with feathers near its tip, which is currently pointing in your direction as you have just intruded on " + enemyt.gender.his + " territory with malicious intent. Judging by the snarl on " + enemyt.gender.his + " face, you feel pretty certain that the malice is mutual. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "GluttonSeparatistBoss.description");
            result[240] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your last attack sends the " + enemyt.species.name + " flopping onto " + enemyt.gender.his + " side groaning in pain, leaving you free to march on past and see what\'s inside.";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "GluttonSeparatistBoss.victory");
            result[241] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This Anaconda is a bit different from other jungle snakes, bearing strikingly colored patterns, numerous scars on its head and torso, " + "" + "and the fact that it\'s longer than you can readily see and its gigantic body rises up as big as the buildings in the city when flat along the ground. " + "" + "It\'s encircled you and is preparing to make you into a light lunch. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "anacondaBoss.description");
            result[242] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Letting out a hissing roar, the enormous snake rears up, then collapses to the ground, still. You celebrate your victory for a moment, then search the hole it emerged from. " + "" + "Sure enough, the White Gold that you were sent to find is in there, and in great quantities. You grab a hunk of it and pull it free, taking it with you. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "anacondaBoss.victory");
            result[243] = new Binding(this, null, null, "anacondaBoss.item", "whiteGoldChunk");
            result[244] = new Binding(this, null, null, "shamanBoss.species", "raptor");
            result[245] = new Binding(this, null, null, "shamanBoss.gender", "Male");
            result[246] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This shaman is an abnormally large and heavily-muscled raptor, dressed in robes that bear an unusual symbol that makes your head hurt and your eyes water when you look at it " + "" + "too long. He is wielding a totem topped by the Fallen Star in his powerful arms, and that\'s what you\'re here to get. Only one way to do so now... ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "shamanBoss.description");
            result[247] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With your last blow, the raptor staggers backwards and falls to the ground. " + "" + "Crying out words in a language that makes your brain hurt just hearing them, he is suddenly consumed by a roaring mist of horrendous purple magic. " + "" + "A scream escapes him and is cut short, and just like that, he is gone. The totem and the Fallen Star, however, are still there. " + "" + "You smash the totem and take the hunk of star metal with you. It\'s huge! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "shamanBoss.victory");
            result[248] = new Binding(this, null, null, "shamanBoss.item", "fallenStar");
            result[249] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Looks like the obsidian deposit you were looking for has decided to come to you, and has risen up into the form of a " + sayDistance(180) + " tall anthropomorphic monstrosity. " + "" + "It\'s also decided to pound you into the ground like a tent stake, so it might be a good idea to do something about that. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "golemBoss.description");
            result[250] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [BashingDamage, SlashingDamage, PiercingDamage];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "golemBoss.damageResistance");
            result[251] = new Binding(this, null, null, "golemBoss.item", "magicalObsidian");
            result[252] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The simple, subtle flavor of every bite is enough to make you let out a contented sigh. " + "" + "True to the raccoon\'s warning, you feel as if you\'ve put away an entire field of rice, rather than a simple bowl! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "riceBowl.itemUse");
            result[253] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You open the jug and gulp down the stew. It\'s much more filling than you expected, " + "" + "the meat and vegetables lending enough weight to the broth to stretch your stomach just too much... ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "beefStew.overfilled");
            result[254] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Lightly battered and deep fried to perfection, these bite-size rings have just the right amount of give to keep you crunching. " + "" + "Served with a thick creamy dip with a few spicy hints. Careful, these aren\'t appetizer portions. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "calamari.Description");
            result[255] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The inviting aroma fills your senses as you dig in, taking your sweet time in savoring the unique harmony of flavor, each wondrous crunch is music to your ears. " + "" + "Before you know it you\'re done, but you feel like you\'ve been eating nonstop for hours! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "calamari.itemUse");
            result[256] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Perfectly portioned and wrapped in soft, puffy rice, these little mouthfuls are filled with only the freshest, most delectable ingredients. " + "" + "Lightly decorated with sesame seeds and sauce, it\'s exactly the roll wanted. You do like sushi, right? Either way, it\'s more of a meal than you\'d expect it to be. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "sushiRoll.Description");
            result[257] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With a light touch of soy sauce, you pop piece after piece into your maw, relishing the smooth blend of flavors and soft texture until there\'s not a grain of rice left. " + "" + "However, you feel more like you\'ve downed a buffet than a side-dish! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "sushiRoll.itemUse");
            result[258] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With a wonderful crunch, your stomach starts doing the talking. You chomp through piece after piece with growing momentum, overwhelmed by the rich, " + "" + "fresh flavor, licking your fingers clean and almost losing a hand in the process. You feel like you now know how a whale feels! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "tempuraShrimp.itemUse");
            result[259] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You pick up the chocolate chip cookie. For a moment you think about savoring it, but you find you\'ve already crammed the entire cookie into your mouth without noticing. " + "" + "You eyes roll back in your head as you enjoy the sweet chocolatey goodness. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Cookies.itemUse");
            result[260] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You delicately peel off the paper from the bottom of the cupcake and chomp it down in a few bites. " + "" + "It takes you a second to notice the icing on your nose and you lick it off, hoping no one noticed. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Cupcake.itemUse");
            result[261] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You delicately pick up a donut so you don\'t get your " + playerSpecies.hands + " all sticky. " + "" + "You chomp it down in two bites and relish its warm sticky goodness as you clean errant bits of donut from around your mouth with your tongue. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "DonutsSmall.itemUse");
            result[262] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "As you continue to eat, your overburdened stomach grumbles loudly, signifying you that you\'ve hit your limit. " + "" + "As you force the rest of the berry down your throat, you regret your decision as your stomach aches from its swollen state. " + "" + "You lie back on the ground, rubbing your stomach the entire time...Until you notice it growing even bigger! " + "" + "That berry must\'ve had bloat venom in it! You groan loudly as you futilely try to massage your stomach, growing and swelling in your hands. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "WeirdBerry.overfilled");
            result[263] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You toss the odd fruit into your mouth and start chewing it. It oozes strange tasting juices. It\'s not bad, but it\'s not good either. " + "" + "It actually tastes kind of like grape flavored rubber. " + "" + "As the fruit\'s juices flow down your throat, you feel your stomach rumble and eventually relax. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "StretchyFruit.itemUse");
            result[264] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You give the handful of seaweed a cautious sniff. It smells faintly of ozone, but not too bad. You roll the fronds up into a small ball and push them into your mouth, and chew. " + "" + "It tastes exactly like you’d expect seaweed to taste, and you pull some spectacular faces before swallowing it down. Urgh, talk about eating your greens! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "StretchySeaweed.itemUse");
            result[265] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You suck down the thick, sweet honey. It is very filling, and leaves you feeling strong. " + "" + "However, you don\'t think it\'s enough enough for the magics to permanently change you. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MagicalHoney.itemUse");
            result[266] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This lump of jelly looks similar to honey, but it is opaque, and it\'s very weighty in your hands. " + "" + "It is neatly packed in a large packet of wax and practically glows with potent magic. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "RoyalJelly.Description");
            result[267] = new Binding(this, null, null, "Weaponless.damageType", "BashingDamage");
            result[268] = new Binding(this, null, null, "LightClub.damageType", "BashingDamage");
            result[269] = new Binding(this, null, null, "HeavyClub.damageType", "BashingDamage");
            result[270] = new Binding(this, null, null, "ShortSword.damageType", "SlashingDamage");
            result[271] = new Binding(this, null, null, "Axe.damageType", "SlashingDamage");
            result[272] = new Binding(this, null, null, "honeyDipper.damageType", "BashingDamage");
            result[273] = new Binding(this, null, null, "Trident.damageType", "PiercingDamage");
            result[274] = new Binding(this, null, null, "Warhammer.damageType", "BashingDamage");
            result[275] = new Binding(this, null, null, "HeavyLance.damageType", "PiercingDamage");
            result[276] = new Binding(this, null, null, "GreatClub.damageType", "BashingDamage");
            result[277] = new Binding(this, null, null, "greatSword.damageType", "SlashingDamage");
            result[278] = new Binding(this, null, null, "giantAxe.damageType", "SlashingDamage");
            result[279] = new Binding(this, null, null, "StarHammer.damageType", "BashingDamage");
            result[280] = new Binding(this, null, null, "BlackSword.damageType", "SlashingDamage");
            result[281] = new Binding(this, null, null, "IronfistPebbles.damageType", "BashingDamage");
            result[282] = new Binding(this, null, null, "Dagger.damageType", "PiercingDamage");
            result[283] = new Binding(this, null, null, "Rapier.damageType", "PiercingDamage");
            result[284] = new Binding(this, null, null, "Spear.damageType", "PiercingDamage");
            result[285] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You lift the lance up in both your hands. " + "" + "While it\'s not particularly practical to be using this item on foot, you\'re still sure you woldn\'t want to be one the receiving end of this thing. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "LightLance.itemUse");
            result[286] = new Binding(this, null, null, "LightLance.damageType", "PiercingDamage");
            result[287] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The Insect Queen\'s stinger has just enough of a handhold to be a potent thrusting weapon. " + "" + "It straddles the line between a rapier and a spear, and seeps with an odd paralytic poison. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "QueensSting.Description");
            result[288] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You grab the \"hilt\" of the \"sword\" and adjust your grip to get a better hold of if.         Out of curiosity you prick your finger on the end of the sword and you feel your finger go numb. " + "" + "The numbness quickly spreads to the rest of your hand and you quickly jerk you hand away and shake it until you get the feeling back. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "QueensSting.itemUse");
            result[289] = new Binding(this, null, null, "QueensSting.damageType", "PiercingDamage");
            result[290] = new Binding(this, null, null, "NastyDagger.damageType", "PiercingDamage");
            result[291] = new Binding(this, null, null, "ObsidianSpear.damageType", "PiercingDamage");
            result[292] = new Binding(this, null, null, "glaive.damageType", "SlashingDamage");
            result[293] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A set of bracers enchanted with the spirit of a vicious predator. Wearing them transforms your claws into dangerous shredding weapons, " + "" + "even if you didn\'t have claws previously. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BeastclawBracers.Description");
            result[294] = new Binding(this, null, null, "BeastclawBracers.damageType", "SlashingDamage");
            result[295] = new Binding(this, null, null, "ThunderboltSpear.damageType", "LightningDamage");
            result[296] = new Binding(this, null, null, "LightningWand.damageType", "LightningDamage");
            result[297] = new Binding(this, null, null, "IceWand.damageType", "IceDamage");
            result[298] = new Binding(this, null, null, "FireWand.damageType", "FireDamage");
            result[299] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You heft the staff in your hands. " + "" + "You inspect it to glean some information on it\'s magic qualities and when you look at the end of it you\'re nearly blinded by a searing light. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "WizardStaff.itemUse");
            result[300] = new Binding(this, null, null, "WizardStaff.damageType", "ArcaneDamage");
            result[301] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Charred and blackened, this wand doesn\'t look like much, but has the curious trait of amplifying magic directed down it to a dangerous degree, " + "" + "both for the target and for the wielder.";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "CharredWand.Description");
            result[302] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You grip the wand in your " + playerSpecies.hand + " and immediately feel a sensation as though the wand was on fire. " + "" + "The effect dies down rather quickly, but the wand is still somewhat painful to hold. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "CharredWand.itemUse");
            result[303] = new Binding(this, null, null, "CharredWand.damageType", "ArcaneDamage");
            result[304] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You don the garb, which is comfortable despite its increased bulk, and not even terribly gaudy for something a wizard would wear. " + "" + "When it\'s on, you can feel magic flowing more readily around you.";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "enchantedWarmageArmor.itemUse");
            result[305] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This seemingly simple dark-brown robe doesn\'t appear to be special in any way, but when donned, " + "" + "it provides magical assistance of a level normally granted by those approaching the divine. " + "" + "Inside the cuff of the sleeves is an ornamentally stitched dragon, the only hint of its origin. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cabalDragonRobe.Description");
            result[306] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your fat gut has finally grown so large that the belly shirt has rolled up to being just a thin line around your chest. " + "" + "It\'s certainly showing off your belly, but not functioning much as a shirt. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BellyShirt.Popoff");
            result[307] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With a ripping noise stitches across the back of your tropical shirt tear open, relieving the tension in the fabric a little, but not by enough. " + "" + "Groaning under the pressure, the buttons burst open, one by one, until your belly eventually FLUMPS out of the open front. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "tropicalShirt.Popoff");
            result[308] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your arms squeeze through the arm-holes, with a bit of persuasion, but suck it in as you might, the two edges of the shirt only just meet across your middle. " + "" + "You manage to get one straining button done up across your chest, but as you breathe out with relief it POPS open, causing a tidal-wave of belly to flop out. Shucks, it just won’t fit. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "tropicalShirt.Toosmall");
            result[309] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You slip your arms through the sleeves and with some fiddling manage to do all the buttons up over your chest and stomach. " + "" + "Not a bad fit, even if everyone will be able to see you coming about a mile off. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "tropicalShirt.itemUse");
            result[310] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A really bright and cheerful piece of tropical clothing, if not the most tasteful of garments. " + "" + "The buttons all burst off, the open edges of the shirt flap uselessly against your sides, framing your belly between them. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "tropicalShirt.PoppedDescription");
            result[311] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Your swim shirt has been getting noticably tighter as you\'ve been getting bigger. " + "" + "All of a sudden, the shirt rolls up your stomach, unable to keep itself down and leaving your belly exposed. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "RedSwimShirt.Popoff");
            result[312] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You put your arms through the sleeves with a bit of trouble, but as you pull the shirt down, you face a real battle. " + "" + "After stretching and pulling, you don\'t think that the swim shirt will pull down far enough unless you tear it. " + "" + "Being unwilling to do that, you take off the swim shirt to save it from that demise. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "RedSwimShirt.Toosmall");
            result[313] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Pushing your arms through the stretchy material you slip on the shirt, dragging it down to your hips. " + "" + "You look about yourself, pleased that it fits you well. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "RedSwimShirt.itemUse");
            result[314] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Despite your best efforts to wear it, the swim shirt is just too small for your sizeable gut. " + "" + "The whole shirt has retreated towards your shoulders in order to escape from tearing. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "RedSwimShirt.PoppedDescription");
            result[315] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This swim suit is build for just about any normal sized being, with a lot of potential to stretch. " + "" + "It is red, long sleeved and conforms to body shape very well. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "RedSwimShirt.Description");
            result[316] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You slide your arms through the sleeves and try to do the buttons, but try as you might, your belly is just to big for the buttons to reach. " + "" + "Dejectedly, you go back to what you were wearing before. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ButtonDownShirt.Toosmall");
            result[317] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You slide the tunic over your head, but can\'t get it any farther than your gut. " + "" + "Try as you might, you can\'t quite get the tunic over your oversized belly. Disappointed, you go back to what you were wearing before. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Tunic.Toosmall");
            result[318] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With a sudden \"ping!\", one of your fancy shirt button goes flying off. " + "" + "As you watch it sail away in confusion, several other \"pings!\" are heard as your bulging belly surges out through the gaps left by the flying buttons. " + "" + "The shirt\'s not so fancy anymore. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "TuxedoJacket.Popoff");
            result[319] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You slide on the tuxedo shirt and try to do the buttons, but try as you might, your belly is just to big for the buttons to reach. " + "" + "Dejectedly, you go back to what you were wearing before. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "TuxedoJacket.Toosmall");
            result[320] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "All of a sudden you feel your swim trunks start sliding down. " + "" + "Apparently the elastic waist band finally reached it\'s limits and couldn\'t help but slide back down around your thighs to escape the growing sphere of your gut. " + "" + "Fortunately they still just barely keep you modest, but they\'re not doing their job of being pants very well. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BlueSwimTrunks.Popoff");
            result[321] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You stick your legs through the leg holes and attempt to pull the swim trunks up around your waist, " + "" + "but the elastic just can\'t stretch around you properly no matter how hard you pull. " + "" + "The best you can do is to get them around your thighs, which doesn\'t exactly get the job done, so you put them back in your inventory. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BlueSwimTrunks.Toosmall");
            result[322] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You attempt to slide your legs into your pants, but can only barely get them past your thighs, let alone being able to zip them up. " + "" + "Sadly, you go back to what you were wearing before. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Bluejeans.Toosmall");
            result[323] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You attempt to pull your skirt up around your waist, but your waist is now so large that you have no hope of wearing this skirt properly. " + "" + "Unfortunately, you have to go back to what you were wearing before. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Skirt.Toosmall");
            result[324] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You attempt to slide your legs into your pants, but can only barely get them past your thighs, let alone being able to close up the buttons. " + "" + "Unfortunately, you have to go back to what you were wearing before. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "TuxedoPants.Toosmall");
            result[325] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With an ominous creak you feel your overalls squeezing tightly around your backside. " + "" + "When you try to take a step forward the creak becomes a sharp RIP as the seat of your pants bursts open. " + "" + "This causes a ripple through to your belly, and more of your stomach bulges up over the \'bib\'. " + "" + "Burdened with too much to contain, one of the straps SNAPS, letting your stomach hang out even further on display. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "overalls.Popoff");
            result[326] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You squirm into the legs of the overalls, but strain as you might you just cannot pull them up over your backside and stomach, " + "" + "your belly repeatedly spilling over the top of them just when you’re trying to haul the braces up over your shoulders. " + "" + "With a sigh, you’re forced to accept that these XXL overalls just don’t come in your size. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "overalls.Toosmall");
            result[327] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You slip into the oversized overalls and cinch the braces to your size, the soft white material hugging your stomach and backside. " + "" + "Ok, they make you look \'fat\', but they’re roomy and hard-wearing. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "overalls.itemUse");
            result[328] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The legs of the overalls cling tightly to your chunky thighs, but the ill-fitting \'bib\' doesn’t cover much of your belly any more, one strap burst, " + "" + "the other stretched tight over your gut, while your backside shows through a tear in the seat of your pants. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "overalls.PoppedDescription");
            result[329] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "An entrancingly beautiful length of golden thread that had previously been part of an outright enormous cloth bag. " + "" + "Any tailor worth their salt would surely be interested in an item like this. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "goldThread.Description");
            result[330] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You swig the contents of the flask in one go, spilling some down your chin and chest. Urgh, it tastes like... celery juice! " + "" + "You wipe your lips in disgust, but then feel a queer, almost tuneful rumbling from your insides. " + "" + "A wave of clarity and calmness washes over you, and with a small belch you feel completely back to your old self! " + "" + "If only you could get the taste of it out of your mouth... ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "antidotePotion.itemUse");
            result[331] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You sit down, holding the gem in your hand and looking at it. It’s pretty, but try as you might, you can’t figure out a way to release its power. " + "" + "Shrugging, you put it back in your bag. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "UnidentifiedGem.itemUse");
            result[332] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The colours of this black gem shift a little as you look at it, " + "" + "and just looking at it makes you feel a bit on the peckish size, while at the same time having no interest in eating it whatsoever. " + "" + "Pressing this against your gut will instantly empty it and make you a bit lighter. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "VoidOnyx.Description");
            result[333] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You hold the gem against your stomach, and it feels worryingly cold. " + "" + "A sharp, retch-inducing feeling kicks in, feeling like something from your stomach getting wrenched away from you. You hold the gem away from you as it crumbles to dust, its use expended. " + "" + "You feel like you’ve dropped a fair bit of weight, but considering how earth-shatteringly hungry you feel, you don’t know how long that’ll last. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "VoidOnyx.itemUse");
            result[334] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This gem feels abnormally weighty in your bag and tends to roll to the bottom of your bag. " + "" + "You feel a bit sluggish even holding it in your hand. Clenching it in your fist will fill you up and make you put on a few. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "DenseTopaz.Description");
            result[335] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With a sense of curiosity, you clasp your hand around the gem and squeeze. " + "" + "Immediately, you feel like something is entering your mouth from your throat downwards. " + "" + "You try to spit a bit of it out to see what it is, but all that come out are fragments of magical, wispy smoke, which immediately dart back into your mouth. " + "" + "You feel your stomach begin to rapidly fill with something warm, but you can feel the warmth pass your stomach and move down to your love handles and backside, ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "DenseTopaz.itemUse");
            result[336] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This round, shiny pearl hangs lazily in the air when in your bag or dropped. " + "" + "Whenever you hold it, you have to suppress the urge to burp or pass wind to relieve some spontaneous twinges of gas. " + "" + "The book mentions that its power will be unleashed by putting it in your mouth, but it’s concerning vague about what exactly that means. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "AeroPearl.Description");
            result[337] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With a sense of impending doom, you carefully put the pearl into your mouth and close your mouth around it, wondering what might happen. " + "" + "You soon get your answer as you feel a building pressure in your mouth, and when you try to open your mouth to let it out, your jaw and lips seem to have locked shut. " + "" + "You hear a loud hiss ring out from inside your mouth and you feel air begin to force its way down into your stomach, having nowhere else to go, and your middle begins to swell out. " + "" + "You try to poke your fingers into your mouth to pry your mouth open, but your swollen fingers can’t get any leverage, and all you accomplish is accidentally swallowing the pearl. " + "" + "You feel it fall into your stomach, ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "AeroPearl.itemUse");
            result[338] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You hold the gem tightly in your hand, and bolts of power flicker through in between your fingers. " + "" + "Bolts of energy hit your arms, legs, spine, head and your gut, enhancing all of them before the gem’s dies down. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SpectrumGem.itemUse");
            result[339] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You open the bottle and drink the venom down. It’s rather tasteless, but you feel it immediately work on your body. " + "" + "You feel quite full from it, and see your gut bulge out a bit. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SnakeVenom.itemUse");
            result[340] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "This is a small, leather-lined book marketed towards gem, rock and fossil aficionados. " + "" + "The later pages look the most interesting, talking about mystic gems and their powers. Use this item with an Unidentified Gem in your inventory to identify it. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BookOfCrystals.Description");
            result[341] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A map of the mountains that shows where to find the Cabal Rogue. " + "" + "You have been told that it will be a very difficult battle, and cautioned that your own body will be used against you. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cabalMap.Description");
            result[342] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You follow the map to a cliff face and find an unlit cave. " + "" + "Stepping inside reveals the darkness to be an illusion; once you set foot within, you are greeted by a large, lit passageway. " + "" + "Following it deeper inside, you come to a huge, dome-shaped chamber. " + "" + "A magical force triggers behind you, barring the way you came. A deep, rumbling voice booms out, \"So, the cabal has sent another meal to me? How kind of them!\" " + "" + "The entire floor lights up in a gigantic magical circle, and a gigantic anthropomorphic grey dragon is revealed to be before you, light glinting off his eyes and sharp teeth. " + "" + "With no way out, you steel yourself for battle! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cabalMap.itemUse");
            result[343] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The simplistic cauldron is quite compact and light, certainly due to the magical enchantments on it. " + "" + "It is easy enough to safely stash in your pack, and the lid is secured by a simple lock to prevent its contents from spilling forth. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cabalCauldron.Description");
            result[344] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A map marked with the location of a deposit of white gold, and emblazoned with a warning that a giant serpent dwells here. " + "" + "You feel like you could find it fairly easily following this map. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "spearMap.Description");
            result[345] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You follow the map deep into the jungle, the landmarks upon it proving usable, even if you do have to climb a tree to see them a couple of times. " + "" + "When you arrive in the marked location, you come across a hole in the ground. When you approach, an enormous snake begins to slide out of it. " + "" + "More and more of the giant snake emerges, and it soon becomes apparent that you are trapped in the area by its enormously lengthy body! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "spearMap.itemUse");
            result[346] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You follow the map into the jungle, not having to go very far before finding freshly worn foot paths. " + "" + "Following them in the appropriate direction leads you to a barricaded structure. Fortunately, the gate is open, and you make your way inside. " + "" + "There, the shaman is performing some kind of ritual around a totem that is topped with the Fallen Star. He suddenly stops, pointing at you. " + "" + "From behind, you hear a creaking of wood as the gate crashes shut. Looks like the only way out is a fight! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "hammerMap.itemUse");
            result[347] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A map marked with the location of a spiritually resonating deposit of obsidian. " + "" + "There is a warning that it is likely guarded by something, but you could go see yourself by following this map. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "swordMap.Description");
            result[348] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You follow the map through the jungle and towards the center of the island, climbing up the side of the volcanic mountain. " + "" + "The heat begins to grow immense as you steadily approach the deposit, which is uncomfortably close to the open peak. " + "" + "Fortunately, you don\'t have to go much further, as the obsidian lies before you. " + "" + "Before you can take any of it, though, a deep, booming growl echoes from the mountain, forming obscure arcane syllables. " + "" + "As you watch, the obsidian rises up, taking a rough anthropomorphic form, and marches to you in time to a magical barrier trapping you in with it! ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "swordMap.itemUse");
            result[349] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A lemon slime subdued for the sake of Bronks the innkeeper. " + "" + "How you\'re managing to keep it on your person without ruining everything else you\'re carrying is a bit of a mystery. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "lemonSlimeItem.Description");
            result[350] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A blueberry slime subdued for the sake of Bronks the innkeeper. " + "" + "How you\'re managing to keep it on your person without ruining everything else you\'re carrying is a bit of a mystery. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "blueSlimeItem.Description");
            result[351] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A tentlike pair of pants of an unfamiliar design so well-worn it\'s difficult to say what they were made of, let alone what color they were originally. " + "" + "A large split down the seat of them and numerous other little splits suggests that they might have been inadequate on the previous owner. You certainly can\'t wear them looking like this. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "horsePantsBroke.Description");
            result[352] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "An extremely voluminous pair of pants of an unfamiliar design, now made mostly from a magical robe. " + "" + "While the effect is rather bright, the tailor has managed to arrange the magical designs so that they are at least slightly tasteful. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "horsePantsFixed.Description");
            result[353] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A very fine set of chainmail whose rings have nevertheless ruptured and burst entirely down the front, splitting it in half. " + "" + "When the two halves are put together you can see a stylized running horse emblazoned in gold across the chest, albeit now stretched very much out of shape. " + "" + "Looking very closely at one of the links, you can see a very small signature engraved on it, but sadly it\'s so worn as to be unreadable. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "horseArmorBroke.Description");
            result[354] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A very fine set of enchanted chainmail repaired by Kieras. " + "" + "You notice that she has even managed to re-assemble the gold horse emblem on the chest- though somehow the process has resulted in a far chunkier-looking beast being portrayed. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "horseArmorFixed.Description");
            result[355] = new Binding(this, null, null, "city.dayBackground", "cityday");
            result[356] = new Binding(this, null, null, "city.nightBackground", "citynight");
            result[357] = new Binding(this, null, null, "grasslands.dayBackground", "grasslandsday");
            result[358] = new Binding(this, null, null, "grasslands.nightBackground", "grasslandsnight");
            result[359] = new Binding(this, null, null, "forest.dayBackground", "forestDay");
            result[360] = new Binding(this, null, null, "forest.nightBackground", "forestNight");
            result[361] = new Binding(this, null, null, "hills.dayBackground", "hillsDay");
            result[362] = new Binding(this, null, null, "hills.nightBackground", "hillsNight");
            result[363] = new Binding(this, null, null, "beach.dayBackground", "beachDay");
            result[364] = new Binding(this, null, null, "beach.nightBackground", "beachNight");
            result[365] = new Binding(this, null, null, "mountains.dayBackground", "mountainsDay");
            result[366] = new Binding(this, null, null, "mountains.nightBackground", "mountainsNight");
            result[367] = new Binding(this, null, null, "blank.locationZone", "impassable");
            result[368] = new Binding(this, null, null, "Wall.locationZone", "impassable");
            result[369] = new Binding(this, null, null, "Wall.icon", "iconWall");
            result[370] = new Binding(this, null, null, "Fence.locationZone", "impassable");
            result[371] = new Binding(this, null, null, "Fence.icon", "iconFence");
            result[372] = new Binding(this, null, null, "YourHouse.locationZone", "city");
            result[373] = new Binding(this, null, null, "YourHouse.icon", "iconHome");
            result[374] = new Binding(this, null, null, "CentralSquare.locationZone", "city");
            result[375] = new Binding(this, null, null, "CentralSquare.icon", "iconRoad");
            result[376] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing in the main city of the area. " + "" + "Longer than recorded history this city has stood in the shadow of the eastern mountains, isolated from the goings on in the rest of the world. " + "" + "The coblestone streets are well worn and smoothed over from centuries of horse, cart, and foot traffic. The streets are lined by old wood and stone buildings. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "CentralSquare.Description");
            result[377] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(YourHouse, Restaurant, MarketSquare, WesternSquare, blank, EasternSquare, blank, SouthernSquare, Hospital);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "CentralSquare.Surroundings");
            result[378] = new Binding(this, null, null, "WesternSquare.locationZone", "city");
            result[379] = new Binding(this, null, null, "WesternSquare.icon", "iconRoad");
            result[380] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing in the main city of the area. " + "" + "Longer than recorded history this city has stood in the shadow of the eastern mountains, isolated from the goings on in the rest of the world. " + "" + "The coblestone streets are well worn and smoothed over from centuries of horse, cart, and foot traffic. The streets are lined by old wood and stone buildings. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "WesternSquare.Description");
            result[381] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(Wall, TrainingGrounds, YourHouse, WestCityGates, blank, CentralSquare, Wall, blank, SouthernSquare);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "WesternSquare.Surroundings");
            result[382] = new Binding(this, null, null, "EasternSquare.locationZone", "city");
            result[383] = new Binding(this, null, null, "EasternSquare.icon", "iconRoad");
            result[384] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing in the main city of the area. " + "" + "Longer than recorded history this city has stood in the shadow of the eastern mountains, isolated from the goings on in the rest of the world. " + "" + "The coblestone streets are well worn and smoothed over from centuries of horse, cart, and foot traffic. The streets are lined by old wood and stone buildings. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "EasternSquare.Description");
            result[385] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(Restaurant, MarketSquare, Wall, CentralSquare, blank, EastCityGates, Hospital, Church, Wall);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "EasternSquare.Surroundings");
            result[386] = new Binding(this, null, null, "SouthernSquare.locationZone", "city");
            result[387] = new Binding(this, null, null, "SouthernSquare.icon", "iconRoad");
            result[388] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing in the main city of the area. " + "" + "Longer than recorded history this city has stood in the shadow of the eastern mountains, isolated from the goings on in the rest of the world. " + "" + "The coblestone streets are well worn and smoothed over from centuries of horse, cart, and foot traffic. The streets are lined by old wood and stone buildings. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SouthernSquare.Description");
            result[389] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(blank, CentralSquare, Hospital, blank, blank, blank, Wall, SouthCityGates, Wall);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "SouthernSquare.Surroundings");
            result[390] = new Binding(this, null, null, "MarketSquare.locationZone", "city");
            result[391] = new Binding(this, null, null, "MarketSquare.icon", "iconRoad");
            result[392] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing in the main city of the area. " + "" + "Longer than recorded history this city has stood in the shadow of the eastern mountains, isolated from the goings on in the rest of the world. " + "" + "The coblestone streets are well worn and smoothed over from centuries of horse, cart, and foot traffic. The streets are lined by old wood and stone buildings. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MarketSquare.Description");
            result[393] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(EquipmentStore, GroceryStore, GeneralStore, ClothesStore, blank, Tailor, CentralSquare, EasternSquare, blank);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "MarketSquare.Surroundings");
            result[394] = new Binding(this, null, null, "WestCityGates.locationZone", "city");
            result[395] = new Binding(this, null, null, "WestCityGates.icon", "iconGate");
            result[396] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(ForestHub, Wall, TrainingGrounds, WestRoad, blank, WesternSquare, dairyFarmRoad, Wall, blank);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "WestCityGates.Surroundings");
            result[397] = new Binding(this, null, null, "EastCityGates.locationZone", "city");
            result[398] = new Binding(this, null, null, "EastCityGates.icon", "iconGate");
            result[399] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(MarketSquare, Wall, ForestHub, EasternSquare, blank, EastRoad, Church, Wall, HillsHub);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "EastCityGates.Surroundings");
            result[400] = new Binding(this, null, null, "SouthCityGates.locationZone", "city");
            result[401] = new Binding(this, null, null, "SouthCityGates.icon", "iconGate");
            result[402] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(blank, SouthernSquare, Church, Wall, blank, Wall, GrasslandsEvent, SouthRoad, HillsHub);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "SouthCityGates.Surroundings");
            result[403] = new Binding(this, null, null, "TestArea.locationZone", "city");
            result[404] = new Binding(this, null, null, "TestArea.icon", "iconTest");
            result[405] = new Binding(this, null, null, "Hospital.locationZone", "city");
            result[406] = new Binding(this, null, null, "Hospital.icon", "iconHospital");
            result[407] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing in the city\'s main and only hospital. " + "" + "Usually there wasn\'t much use for the place since the world had been such a calm and peaceful place, " + "" + "but with increasing attacks from wild animals and monster, not to mention the bizzarely increased prevelance of people gorging themselves to the literal point of bursting, " + "" + "there has been a marked increase in need for medical care. " + "" + "At all hours of the day there can be heard constant groans of pain from the rooms. " + "" + "Although it\'s hard to tell if they\'re in pain from actual injuries or just from rampant indigestion. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Hospital.Description");
            result[408] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [blank, CentralSquare, blank, HospitalInfirmary, blank, HospitalDesk];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Hospital.Surroundings");
            result[409] = new Binding(this, null, null, "HospitalDesk.locationZone", "city");
            result[410] = new Binding(this, null, null, "HospitalDesk.type", "store");
            result[411] = new Binding(this, null, null, "HospitalDesk.locationVendor", "ClerkHospital");
            result[412] = new Binding(this, null, null, "HospitalInfirmary.locationZone", "city");
            result[413] = new Binding(this, null, null, "HospitalOffice.locationZone", "city");
            result[414] = new Binding(this, null, null, "Church.locationZone", "city");
            result[415] = new Binding(this, null, null, "Church.icon", "iconChurch");
            result[416] = new Binding(this, null, null, "Restaurant.locationZone", "city");
            result[417] = new Binding(this, null, null, "Restaurant.icon", "iconRestaurant");
            result[418] = new Binding(this, null, null, "TrainingGrounds.locationZone", "city");
            result[419] = new Binding(this, null, null, "TrainingGrounds.icon", "iconTrainingGround");
            result[420] = new Binding(this, null, null, "EquipmentStore.locationZone", "city");
            result[421] = new Binding(this, null, null, "EquipmentStore.icon", "iconStore");
            result[422] = new Binding(this, null, null, "EquipmentStore.locationVendor", "ClerkEquipment");
            result[423] = new Binding(this, null, null, "GroceryStore.locationZone", "city");
            result[424] = new Binding(this, null, null, "GroceryStore.icon", "iconStore");
            result[425] = new Binding(this, null, null, "GroceryStore.locationVendor", "ClerkGrocery");
            result[426] = new Binding(this, null, null, "GeneralStore.locationZone", "city");
            result[427] = new Binding(this, null, null, "GeneralStore.icon", "iconStore");
            result[428] = new Binding(this, null, null, "GeneralStore.locationVendor", "ClerkGeneral");
            result[429] = new Binding(this, null, null, "ClothesStore.locationZone", "city");
            result[430] = new Binding(this, null, null, "ClothesStore.icon", "iconStore");
            result[431] = new Binding(this, null, null, "ClothesStore.locationVendor", "ClerkClothes");
            result[432] = new Binding(this, null, null, "Tailor.locationZone", "city");
            result[433] = new Binding(this, null, null, "Tailor.icon", "iconTailor");
            result[434] = new Binding(this, null, null, "donutShop.locationZone", "city");
            result[435] = new Binding(this, null, null, "WestTownHub.locationZone", "city");
            result[436] = new Binding(this, null, null, "WestTownHub.icon", "iconRoad");
            result[437] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [BeachHub, WestTownInn, Wall, Docks, blank, WestTownGates, MageGuild, WestTownStore, Wall];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "WestTownHub.Surroundings");
            result[438] = new Binding(this, null, null, "WestTownGates.locationZone", "city");
            result[439] = new Binding(this, null, null, "WestTownGates.icon", "iconGate");
            result[440] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [WestTownInn, Wall, ForestHub, WestTownHub, blank, WestRoad, WestTownStore, Wall, GrasslandsEvent];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "WestTownGates.Surroundings");
            result[441] = new Binding(this, null, null, "Docks.locationZone", "beach");
            result[442] = new Binding(this, null, null, "Docks.icon", "iconRoad");
            result[443] = new Binding(this, null, null, "BeachEntrance.locationZone", "beach");
            result[444] = new Binding(this, null, null, "BeachEntrance.icon", "iconBeach");
            result[445] = new Binding(this, null, null, "WestTownInn.locationZone", "city");
            result[446] = new Binding(this, null, null, "WestTownInn.icon", "iconInn");
            result[447] = new Binding(this, null, null, "MageGuild.locationZone", "city");
            result[448] = new Binding(this, null, null, "MageGuild.icon", "iconMage");
            result[449] = new Binding(this, null, null, "MageGuildLibrary.locationZone", "city");
            result[450] = new Binding(this, null, null, "MageGuildStore.locationZone", "city");
            result[451] = new Binding(this, null, null, "MageGuildStore.icon", "iconStore");
            result[452] = new Binding(this, null, null, "MageGuildStore.locationVendor", "ClerkMagesGuild");
            result[453] = new Binding(this, null, null, "MageGuildHall.locationZone", "city");
            result[454] = new Binding(this, null, null, "MageGuildDestruction.locationZone", "city");
            result[455] = new Binding(this, null, null, "MageGuildAlteration.locationZone", "city");
            result[456] = new Binding(this, null, null, "MageGuildRestoration.locationZone", "city");
            result[457] = new Binding(this, null, null, "WestTownStore.locationZone", "city");
            result[458] = new Binding(this, null, null, "WestTownStore.icon", "iconStore");
            result[459] = new Binding(this, null, null, "WestTownStore.locationVendor", "ClerkWestTown");
            result[460] = new Binding(this, null, null, "WestRoad.locationZone", "grasslands");
            result[461] = new Binding(this, null, null, "WestRoad.icon", "iconRoad");
            result[462] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing on the dirt road going west of the city. To the north there\'s is a dense forest. " + "" + "To the south there are open grasslands with several farms near the road.  ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "WestRoad.Description");
            result[463] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(ForestHub, ForestHub, ForestHub, WestTownGates, blank, WestCityGates, GrasslandsEvent, GrasslandsEvent, dairyFarmRoad);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "WestRoad.Surroundings");
            result[464] = new Binding(this, null, null, "EastRoad.locationZone", "grasslands");
            result[465] = new Binding(this, null, null, "EastRoad.icon", "iconRoad");
            result[466] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing on the dirt road east out of the city. To the north there is a dense forest. " + "" + "To the south are rolling foothills leading up towards the mountain. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "EastRoad.Description");
            result[467] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(ForestHub, ForestHub, ForestHub, EastCityGates, blank, Wall, HillsHub, HillsHub, HillsHub);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "EastRoad.Surroundings");
            result[468] = new Binding(this, null, null, "SouthRoad.locationZone", "grasslands");
            result[469] = new Binding(this, null, null, "SouthRoad.icon", "iconRoad");
            result[470] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing on the dirt road south of the city. To the west are the open grasslands where there are several farms near the road. " + "" + "To the east are the rocky foothills leading up towards the mountains. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "SouthRoad.Description");
            result[471] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(GrasslandsEvent, SouthCityGates, HillsHub, GrasslandsEvent, blank, HillsHub, GrasslandsEvent, Wall, HillsHub);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "SouthRoad.Surroundings");
            result[472] = new Binding(this, null, null, "dairyFarmRoad.locationZone", "grasslands");
            result[473] = new Binding(this, null, null, "dairyFarmRoad.icon", "iconRoad");
            result[474] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(WestRoad, WestRoad, WestRoad, GrasslandsEvent, blank, SouthRoad, GrasslandsEvent, dairyFarmGates, SouthRoad);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "dairyFarmRoad.Surroundings");
            result[475] = new Binding(this, null, null, "dairyFarmGates.locationZone", "grasslands");
            result[476] = new Binding(this, null, null, "dairyFarmGates.icon", "iconFenceGate");
            result[477] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Looking up you see a large wooden sign proclaiming this place to be a diary farm. " + "" + "A large rustic wooden fence surrounds the property with little wooden cowheads capping the fenceposts near the main gate. " + "" + "The gates are left standing wide open, as if inviting you in. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "dairyFarmGates.Description");
            result[478] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(blank, dairyFarmRoad, blank, Fence, blank, Fence, blank, dairyFarmCenter, blank);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "dairyFarmGates.Surroundings");
            result[479] = new Binding(this, null, null, "dairyFarmCenter.locationZone", "grasslands");
            result[480] = new Binding(this, null, null, "dairyFarmCenter.icon", "iconRoad");
            result[481] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing in the main hub of the farm under the branches of a large apple tree." + "" + "To the east there\'s a large pasture filled with several large farm animals diligently mowing down the grass as fast as it can grow back. " + "" + "To the west there\'s a small whitewashed sales stand with little paintings of cows over it. " + "" + "South of that are two large buildings, one of them a large barn and the other a small milking shed. " + "" + "On the southern end of the property stands a tall white farmhouse. It looks a little run down, but still seems well maintained. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "dairyFarmCenter.Description");
            result[482] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(dairyFarmStand, dairyFarmGates, dairyFarmPasture, dairyFarmShed, blank, dairyFarmPasture, dairyFarmBarn, dairyFarmHouse, dairyFarmPasture);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "dairyFarmCenter.Surroundings");
            result[483] = new Binding(this, null, null, "dairyFarmCenterQuest.locationZone", "grasslands");
            result[484] = new Binding(this, null, null, "dairyFarmCenterQuest.icon", "iconRoad");
            result[485] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing in the main hub of the farm under the branches of a large apple tree." + "" + "To the east there\'s a large pasture filled with several large farm animals diligently mowing down the grass as fast as it can grow back. " + "" + "To the west there\'s a small whitewashed sales stand with little paintings of cows over it. " + "" + "South of that are two large buildings, one of them a large barn and the other a small milking shed. " + "" + "On the southern end of the property stands a tall white farmhouse. It looks a little run down, but still seems well maintained. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "dairyFarmCenterQuest.Description");
            result[486] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(dairyFarmStand, dairyFarmGates, dairyFarmPasture, dairyFarmShed, blank, dairyFarmPasture, dairyFarmBarn, dairyFarmHouse, dairyFarmPasture);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "dairyFarmCenterQuest.Surroundings");
            result[487] = new Binding(this, null, null, "dairyFarmBarn.locationZone", "grasslands");
            result[488] = new Binding(this, null, null, "dairyFarmBarn.icon", "iconBuilding");
            result[489] = new Binding(this, null, null, "dairyFarmStand.locationZone", "grasslands");
            result[490] = new Binding(this, null, null, "dairyFarmStand.icon", "iconStore");
            result[491] = new Binding(this, null, null, "dairyFarmPasture.locationZone", "grasslands");
            result[492] = new Binding(this, null, null, "dairyFarmPasture.icon", "iconFence");
            result[493] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Standing out in the field there are several of perhaps the fattest cows known in recorded history. " + "" + "Each of them looking like large furred barrels, their fat guts sagging almost to the ground and expanding outward making them look almost spherical. " + "" + "They\'re all sporting large udders swollen with gallons of milk that sloshes back and forth with every small step they take. " + "" + "\r\tThey\'re all very diligently searching out and devouring what little grass remains in the well grazed fields. " + "" + "If the grass in the pasture has been growing at the same rate the grass in the rest of the grasslands have been " + "" + "then it\'s pretty easy to see how the cattle are managing to stay so preposterously well fed. " + "" + "(there\'s nothing here)";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "dairyFarmPasture.Description");
            result[494] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [blank, blank, blank, dairyFarmCenter];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "dairyFarmPasture.Surroundings");
            result[495] = new Binding(this, null, null, "dairyFarmShed.locationZone", "grasslands");
            result[496] = new Binding(this, null, null, "dairyFarmShed.icon", "iconBuilding");
            result[497] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A large water wheel behind the shed rotates as it\'s partially submerged in the river that curves around the farm. " + "" + "You pull on the door, but it\'s locked shut. You can hear the quiet rhytmic sound of machinery from within. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "dairyFarmShed.Description");
            result[498] = new Binding(this, null, null, "dairyFarmHouse.locationZone", "grasslands");
            result[499] = new Binding(this, null, null, "dairyFarmHouse.icon", "iconBuilding");
            result[500] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [blank, dairyFarmCenter];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "dairyFarmHouse.Surroundings");
            result[501] = new Binding(this, null, null, "ForestHub.locationZone", "forest");
            result[502] = new Binding(this, null, null, "ForestHub.type", "wilderness");
            result[503] = new Binding(this, null, null, "ForestHub.icon", "iconForest");
            result[504] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "\tThe local forest has provided a constant supply of wood and game for the local populace as well as being quite serene and beautiful to travel through. " + "" + "Lately the forest has become a somewhat more abundant place.          \r\tTrees creak under the weight of their fruit and the forest creatures have been gorging themselves on the increasingly lush forest. " + "" + "It\'s as though all the animals are fattening themselves up for a winter that never comes.          \r\tThe predators too are taking advantage of this bounty and have been devouring their fatter slower prey indisciminately. " + "" + "The predators have even become so bold as to start attacking people who venture into the forest.          \r\tMore worrisome than the common predators are stories of practitioners of dark magic hiding out in the woods, kidnapping random passers by. " + "" + "There\'s also tales of strange creatures never before seen by any person alive. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ForestHub.Description");
            result[505] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [FatWolf, ObeseBear, LemonSlime, SyrupVine, fruitDryad];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ForestHub.enemies");
            result[506] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [ForestEvent, ForestEvent, ForestEvent, ForestEvent, ForestEvent, ForestEvent, ForestEvent, ForestEvent, ForestEvent];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ForestHub.Surroundings");
            result[507] = new Binding(this, null, null, "ForestEvent.locationZone", "forest");
            result[508] = new Binding(this, null, null, "ForestEvent.icon", "iconForest");
            result[509] = new Binding(this, null, null, "ForestFeast.locationZone", "forest");
            result[510] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A large ornate table is laid out with a tremendous feast fit for a small kingdom, " + "" + "which is especially peculiar given that it\'s set out in the middle of the forest floor with seemingly no one else around...? ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ForestFeast.Description");
            result[511] = new Binding(this, null, null, "StoreRoom.locationZone", "forest");
            result[512] = new Binding(this, null, null, "GingerbreadHouse.locationZone", "forest");
            result[513] = new Binding(this, null, null, "alphaWolf.locationZone", "forest");
            result[514] = new Binding(this, null, null, "HillsHub.locationZone", "hills");
            result[515] = new Binding(this, null, null, "HillsHub.type", "wilderness");
            result[516] = new Binding(this, null, null, "HillsHub.icon", "iconHills");
            result[517] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'re standing in the rolling hills. " + "" + "The frequent changes in elevation make it hard to find a bearing on your location, as the top of every hill seems to be surrounded by even taller hills. " + "" + "Several large rocky outcroppings jut from the earth along with several small thickets of trees. " + "" + "Across the distant southeastern horizon the tall dark mountains loom overhead. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "HillsHub.Description");
            result[518] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [MeatMonster, BlueberrySlime, BloatBees, MilkMachine, HoneySlime];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "HillsHub.enemies");
            result[519] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [HillsEvent, HillsEvent, HillsEvent, HillsEvent, HillsEvent, HillsEvent, HillsEvent, HillsEvent, MountainHub];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "HillsHub.Surroundings");
            result[520] = new Binding(this, null, null, "HillsEvent.locationZone", "hills");
            result[521] = new Binding(this, null, null, "HillsEvent.type", "wilderness");
            result[522] = new Binding(this, null, null, "HillsEvent.icon", "iconHills");
            result[523] = new Binding(this, null, null, "wishingWell.locationZone", "hills");
            result[524] = new Binding(this, null, null, "wishingWell.type", "wilderness");
            result[525] = new Binding(this, null, null, "wishingWell.icon", "iconHills");
            result[526] = new Binding(this, null, null, "dessertVillage.locationZone", "hills");
            result[527] = new Binding(this, null, null, "dessertVillage.type", "wilderness");
            result[528] = new Binding(this, null, null, "dessertVillage.icon", "iconHills");
            result[529] = new Binding(this, null, null, "MountainHub.locationZone", "mountains");
            result[530] = new Binding(this, null, null, "MountainHub.type", "wilderness");
            result[531] = new Binding(this, null, null, "MountainHub.icon", "iconMountain");
            result[532] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The dark snow-capped mountains loom around you in almost all directions, seemingly without end. " + "" + "Behind you an inviting path slopes downwards back into the rolling foothills of the mountains. " + "" + "Cold winds rip and howl through the rocky crags and tug sharply at you as if attempting to fling you off their mountain. " + "" + "The black cliffsides are pockmarked with small caves and outcroppings that could grant temporary sanctuary from the freezing cold, " + "" + "but who knows what else may be seeking shelter from the storm? " + "" + "On a distant peek you can make out the unusual yet unmistakable outline of a lonely white tower jutting vertically from a mountain side. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "MountainHub.Description");
            result[533] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [ToughFur, MuscleFur, SoldierAnt, ThinFur, MagicalFur];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "MountainHub.enemies");
            result[534] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [HillsEvent, MountainEvent, MountainEvent, MountainEvent, MountainEvent, MountainEvent, MountainEvent, MountainEvent, MountainEvent];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "MountainHub.Surroundings");
            result[535] = new Binding(this, null, null, "MountainEvent.locationZone", "mountains");
            result[536] = new Binding(this, null, null, "MountainEvent.icon", "iconMountain");
            result[537] = new Binding(this, null, null, "InsectHive.locationZone", "mountains");
            result[538] = new Binding(this, null, null, "WizardTower.locationZone", "mountains");
            result[539] = new Binding(this, null, null, "WyvernCave.locationZone", "mountains");
            result[540] = new Binding(this, null, null, "CabalCave.locationZone", "mountains");
            result[541] = new Binding(this, null, null, "CabalCave.icon", "iconMountain");
            result[542] = new Binding(this, null, null, "ExperimentCave.locationZone", "mountains");
            result[543] = new Binding(this, null, null, "ExperimentCave.icon", "iconMountain");
            result[544] = new Binding(this, null, null, "tigerFight.locationZone", "mountains");
            result[545] = new Binding(this, null, null, "cabalRogueBossFight.locationZone", "mountains");
            result[546] = new Binding(this, null, null, "ExperimentTown.locationZone", "mountains");
            result[547] = new Binding(this, null, null, "ExperimentTown.icon", "iconMountain");
            result[548] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [ExperimentTownFarm, ExperimentTownForge, ExperimentTownSmarty, blank, MountainHub];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ExperimentTown.Surroundings");
            result[549] = new Binding(this, null, null, "ExperimentTownFarm.locationZone", "mountains");
            result[550] = new Binding(this, null, null, "ExperimentTownFarm.icon", "iconStore");
            result[551] = new Binding(this, null, null, "ExperimentTownForge.locationZone", "mountains");
            result[552] = new Binding(this, null, null, "ExperimentTownForge.icon", "iconStore");
            result[553] = new Binding(this, null, null, "ExperimentTownSmarty.locationZone", "mountains");
            result[554] = new Binding(this, null, null, "grasslandsHub.locationZone", "grasslands");
            result[555] = new Binding(this, null, null, "grasslandsHub.type", "wilderness");
            result[556] = new Binding(this, null, null, "grasslandsHub.icon", "iconGrasslands");
            result[557] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The grasslands are a large plain covered in tall grasses. The areas closer to the city are where most of the towns local farms are. " + "" + "The landscape is dotted by several copses of small trees and historically the grass would only come up to your shins. " + "" + "\r\tLately though the grasslands have grown wilder and harder to traverse. " + "" + "Old footpaths have grown back over, in many places the grass grows as high as your waist, " + "" + "grazers have grown fatter and fatter as they keep up with the endless growing season, and the predators have become much more aggressive. " + "" + "\r\tThere\'s tales of predators actively attacking and devouring people who venture too far into the grasslands. " + "" + "People have even reported seeing other furs out in the grasslands living like savages, as though they had returned to their primal roots. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "grasslandsHub.Description");
            result[558] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [BloatedLion, GorgedCheetah, ExpandedElephant, Wildling, WildlingRitualist, wildlingShaman];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "grasslandsHub.enemies");
            result[559] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [GrasslandsEvent, GrasslandsEvent, GrasslandsEvent, GrasslandsEvent, GrasslandsEvent, GrasslandsEvent, GrasslandsEvent, GrasslandsEvent, GrasslandsEvent];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "grasslandsHub.Surroundings");
            result[560] = new Binding(this, null, null, "GrasslandsEvent.locationZone", "grasslands");
            result[561] = new Binding(this, null, null, "GrasslandsEvent.icon", "iconGrasslands");
            result[562] = new Binding(this, null, null, "CapturedByWildlings.locationZone", "grasslands");
            result[563] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Aside from clearly being in the wild grasslands, you have no idea where you are right now. " + "" + "With so few landmarks in the large sea of grass, it\'s basically impossible to figure out where you have ended up. " + "" + "The only thing you do know is, that this probably isn\'t a good place to be right now. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "CapturedByWildlings.Description");
            result[564] = new Binding(this, null, null, "FruitFarm.locationZone", "grasslands");
            result[565] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You\'ve come accross a strange verdant field out in the middle of the grasslands. " + "" + "There are a mixture of bushes, trees, and vines, and all of them are sporting truly enormous and especially round fruits. " + "" + "A bit away from the fields is a small, comfortable looking shack, most likely where the owner of the place is. The fruits are quite alluring, but the shack looks inviting, for certain. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "FruitFarm.Description");
            result[566] = new Binding(this, null, null, "wildlingCaptive.locationZone", "grasslands");
            result[567] = new Binding(this, null, null, "BeachHub.locationZone", "beach");
            result[568] = new Binding(this, null, null, "BeachHub.type", "wilderness");
            result[569] = new Binding(this, null, null, "BeachHub.icon", "iconBeach");
            result[570] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Rolling white sand dunes stretch out to the horizon where they\'re overtaken by rocky cliffs. " + "" + "Behind the dunes stand long lines of coconut trees weighed down by enormous coconuts. " + "" + "The soft whispering of gentle waves lapping across the shore as well as the subtle sea breeze coming from the ocean make the beach seem very peaceful. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "BeachHub.Description");
            result[571] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [SandSnake, WaterElemental];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "BeachHub.enemies");
            result[572] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [OceanHub, BeachEvent, BeachEvent, OceanHub, BeachEvent, BeachEvent, OceanHub, BeachEvent, WestTownHub];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "BeachHub.Surroundings");
            result[573] = new Binding(this, null, null, "BeachEvent.locationZone", "beach");
            result[574] = new Binding(this, null, null, "BeachEvent.icon", "iconBeach");
            result[575] = new Binding(this, null, null, "SandMound.locationZone", "beach");
            result[576] = new Binding(this, null, null, "CoconutTree.locationZone", "beach");
            result[577] = new Binding(this, null, null, "HydraEvent.locationZone", "beach");
            result[578] = new Binding(this, null, null, "OceanHub.locationZone", "beach");
            result[579] = new Binding(this, null, null, "OceanHub.type", "wilderness");
            result[580] = new Binding(this, null, null, "OceanHub.icon", "iconOcean");
            result[581] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The clear blues ocean waters allow for very distant visibility that allows you to almost clearly see the ocean floor. " + "" + "Although the further from the beach you get, the farther the sea floor sinks out of view into a serene dark blue abyss. " + "" + "All around you are schools of fish fattened into spheres of different sizes, although as you swim close to anyone school the fish dart surprisingly fast out of your reach. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "OceanHub.Description");
            result[582] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [SphericalShark, BubbleOrca];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "OceanHub.enemies");
            result[583] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [OceanEvent, OceanEvent, BeachHub, OceanEvent, OceanEvent, BeachHub, OceanEvent, OceanEvent, BeachHub];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "OceanHub.Surroundings");
            result[584] = new Binding(this, null, null, "OceanEvent.locationZone", "beach");
            result[585] = new Binding(this, null, null, "OceanEvent.icon", "iconOcean");
            result[586] = new Binding(this, null, null, "BuriedTreasure.locationZone", "beach");
            result[587] = new Binding(this, null, null, "raccoonStore.locationZone", "beach");
            result[588] = new Binding(this, null, null, "SirensEvent.locationZone", "beach");
            result[589] = new Binding(this, null, null, "DinosaurCenter.locationZone", "forest");
            result[590] = new Binding(this, null, null, "DinosaurCenter.icon", "iconRoad");
            result[591] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [DinosaurShaman, DinosaurSmith, DinosaurInn, JungleHub, blank, DinosaurDocks, DinosaurChief];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "DinosaurCenter.Surroundings");
            result[592] = new Binding(this, null, null, "DinosaurSmith.locationZone", "forest");
            result[593] = new Binding(this, null, null, "DinosaurSmith.icon", "iconStore");
            result[594] = new Binding(this, null, null, "DinosaurInn.locationZone", "forest");
            result[595] = new Binding(this, null, null, "DinosaurInn.icon", "iconInn");
            result[596] = new Binding(this, null, null, "DinosaurShaman.locationZone", "forest");
            result[597] = new Binding(this, null, null, "DinosaurChief.locationZone", "forest");
            result[598] = new Binding(this, null, null, "DinosaurDocks.locationZone", "beach");
            result[599] = new Binding(this, null, null, "DinosaurDocks.icon", "iconRoad");
            result[600] = new Binding(this, null, null, "JungleHub.locationZone", "forest");
            result[601] = new Binding(this, null, null, "JungleHub.type", "wilderness");
            result[602] = new Binding(this, null, null, "JungleHub.icon", "iconForest");
            result[603] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Densely packed trees surround you on all sides and form a dense canopy overhead, " + "" + "allowing very little light to hit the jungle floor and making it rather difficult to navigate through. " + "" + "A cacophony of sorrounds constantly accompanies you as you travel through the untamed wilds. A huge array of musical calls from countless unseen birds echo through the jungle. " + "" + "Every once in a while, with a huge *thwump* an incredibly colorful and obese parrot falls from a tree and hits the ground. " + "" + "They somehow always manage to drunkenly stumble to their feet and flap off with overburdened wings. " + "" + "An occasional rustle from the undergrowth causes you to turn, but whatever caused the sound always seems to slip out of reach. " + "" + "Thundering footsteps and shaking trees also sometimes heralds the travel of the larger jungle denizens. " + "" + "\r\tDue to its hostile and untamed nature, as well as the general seclusion of the island itself, not much is known about the jungle. " + "" + "You occasionally you trip accross broken chunks of carved stone that were obviously part of some ancient society long since given to ruin. " + "" + "You consider for a moment if there\'s some connection with the dinosaur village you encountered when you arrived on the island, " + "" + "but the designs are clearly different from any of the architecture you saw before. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "JungleHub.Description");
            result[604] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [DinosaurRider, Anaconda, GluttonSeparatist, FatJaguar];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "JungleHub.enemies");
            result[605] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [JungleEvent, JungleEvent, JungleEvent, JungleEvent, JungleEvent, JungleEvent, JungleEvent, JungleEvent, JungleEvent];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "JungleHub.Surroundings");
            result[606] = new Binding(this, null, null, "JungleEvent.locationZone", "forest");
            result[607] = new Binding(this, null, null, "JungleEvent.icon", "iconForest");
            result[608] = new Binding(this, null, null, "shamanBossFight.locationZone", "forest");
            result[609] = new Binding(this, null, null, "golemBossFight.locationZone", "forest");
            result[610] = new Binding(this, null, null, "anacondaBossFight.locationZone", "forest");
            result[611] = new Binding(this, null, null, "cultistVillage.locationZone", "forest");
            result[612] = new Binding(this, null, null, "pitcherPlant.locationZone", "forest");
            result[613] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The tailor in town has woven a gold bracelet from an enchanted thread found from his brother in the mountains. " + "" + "It enhances your stomach capacity, and if you find more it can increase your capacity even further. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "foundGoldThread.questDescription");
            result[614] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A powerful member of the mountain cabal has gone rogue and stolen away with one of their powerful artifacts. " + "" + "Your mission is to defeat this rogue member and return their property. You\'ve been given a map that will lead you to his hidden lair in the mountains. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "cabalRogue.questDescription");
            result[615] = new Binding(this, null, null, "cabalRogue.questItem", "cabalDragonRobe");
            result[616] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You received the notes of a rather mad wizard in the mountains. " + "" + "The first few pages of this book are a sensible set of studious notes, but the further it goes, the more jumbled and fragmented it gets. " + "" + "It may prove useful to someone, though. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "wizardNotebook.questDescription");
            result[617] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The chief of the East Island Village wants you to \'beat the sense back into\' several of the rebelling shaman in the jungle. " + "" + "You\'ve been promised a reward if you do so. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "defeatShaman.questDescription");
            result[618] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You have agreed to help the East Island Village\'s Smith repair a legendary spear by following her map to a deposit of White Gold. " + "" + "You will most certainly have to face a gigantic serpent to get it. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "spearQuest.questDescription");
            result[619] = new Binding(this, null, null, "spearQuest.questItem", "ThunderboltSpear");
            result[620] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You have agreed to help the East Island Village\'s Smith repair a legendary mace by following her map to the location of the weapon\'s head, " + "" + "a huge mass of star metal called the Fallen Star. A rebelling shaman has it in their stronghold, so you\'ll need to prepare for a fight. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "hammerQuest.questDescription");
            result[621] = new Binding(this, null, null, "hammerQuest.questItem", "StarHammer");
            result[622] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You have agreed to help the East Island Village\'s Smith repair a legendary greatsword by following her map to the location of spiritually resonating obsidian. " + "" + "You have no idea what you\'ll find there, but given the strong magic in the area, you\'ll want to be prepared to defend yourself. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "swordQuest.questDescription");
            result[623] = new Binding(this, null, null, "swordQuest.questItem", "BlackSword");
            result[624] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 7, 4, 7, 3, 3);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Dolphin.statChange");
            result[625] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(7, 5, 4, 2, 7, 15);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Orca.statChange");
            result[626] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(8, 5, 2, 0, 10, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Shark.statChange");
            result[627] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(3, 8, 6, 7, 0, 0);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "BlueJay.statChange");
            result[628] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(5, 8, 5, 6, 0, 0);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Hawk.statChange");
            result[629] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(5, 6, 5, 8, 0, 2);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Owl.statChange");
            result[630] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 4, 5, 5, 7, 6);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Penguin.statChange");
            result[631] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(3, 7, 5, 9, 0, 0);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Raven.statChange");
            result[632] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(3, 8, 6, 7, 0, 0);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Robin.statChange");
            result[633] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(2, 8, 4, 10, 0, 0);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Magpie.statChange");
            result[634] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(2, 5, 6, 7, 5, 3);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Coyote.statChange");
            result[635] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(5, 5, 5, 5, 5, 8);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Dog.statChange");
            result[636] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(1, 5, 7, 7, 5, 3);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Fox.statChange");
            result[637] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(3, 5, 7, 4, 5, 3);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "PaintedDog.statChange");
            result[638] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(5, 5, 5, 3, 7, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Wolf.statChange");
            result[639] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(3, 7, 4, 1, 10, 0);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "raptor.statChange");
            result[640] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(3, 9, 6, 5, 2, 4);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "pterodactyl.statChange");
            result[641] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(8, 0, 7, 5, 5, 20);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "triceratops.statChange");
            result[642] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(6, 0, 7, 7, 5, 20);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "stegosaurus.statChange");
            result[643] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(7, 0, 7, 6, 5, 20);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "apatosaurus.statChange");
            result[644] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(8, 3, 4, 0, 10, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "tyrannosaurus.statChange");
            result[645] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(8, 2, 0, 5, 10, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "blackDragon.statChange");
            result[646] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(5, 0, 2, 8, 10, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "blueDragon.statChange");
            result[647] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(10, 2, 1, 2, 10, 10);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "greenDragon.statChange");
            result[648] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(6, 4, 2, 3, 10, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "redDragon.statChange");
            result[649] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(7, 0, 3, 5, 10, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "whiteDragon.statChange");
            result[650] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(0, 10, 5, 0, 10, 0);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Cheetah.statChange");
            result[651] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 6, 5, 3, 7, 3);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Cougar.statChange");
            result[652] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 6, 5, 3, 7, 3);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Leopard.statChange");
            result[653] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(5, 5, 5, 0, 10, 4);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Lion.statChange");
            result[654] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 6, 5, 3, 7, 3);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Panther.statChange");
            result[655] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(5, 5, 5, 0, 10, 4);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Tiger.statChange");
            result[656] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(8, 0, 7, 5, 5, 25);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Cattle.statChange");
            result[657] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 7, 5, 4, 5, 10);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Deer.statChange");
            result[658] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(7, 5, 8, 5, 0, 6);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Donkey.statChange");
            result[659] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(6, 2, 7, 5, 5, 15);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Goat.statChange");
            result[660] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(7, 7, 7, 4, 0, 4);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Horse.statChange");
            result[661] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 3, 5, 7, 6, 13);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Pig.statChange");
            result[662] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(6, 4, 5, 5, 5, 10);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Badger.statChange");
            result[663] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(3, 9, 5, 8, 0, 0);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Ferret.statChange");
            result[664] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(5, 7, 6, 5, 2, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "GreyKangaroo.statChange");
            result[665] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(7, 4, 6, 4, 4, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "RedKangaroo.statChange");
            result[666] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 7, 6, 8, 0, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Otter.statChange");
            result[667] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 5, 4, 8, 4, 8);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Raccoon.statChange");
            result[668] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(5, 5, 7, 7, 1, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Skunk.statChange");
            result[669] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(3, 6, 5, 8, 3, 2);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Mouse.statChange");
            result[670] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 7, 5, 5, 4, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Rabbit.statChange");
            result[671] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 5, 6, 6, 4, 5);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Rat.statChange");
            result[672] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(3, 7, 6, 6, 2, 3);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Squirrel.statChange");
            result[673] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(4, 6, 6, 6, 2, 1);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Bat.statChange");
            result[674] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(8, 0, 5, 0, 12, 20);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "blackBear.statChange");
            result[675] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(8, 0, 5, 0, 12, 20);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "brownBear.statChange");
            result[676] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(8, 0, 5, 0, 12, 22);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Panda.statChange");
            result[677] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(8, 0, 5, 0, 12, 25);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "polarBear.statChange");
            result[678] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(11, 0, 6, 2, 6, 20);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Rhino.statChange");
            result[679] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = new Array(10, 0, 5, 2, 8, 30);
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "Hippo.statChange");
            result[680] = new Binding(this, null, null, "Fireball1.damageType", "FireDamage");
            result[681] = new Binding(this, null, null, "Fireball3.damageType", "FireDamage");
            result[682] = new Binding(this, null, null, "Fireball5.damageType", "FireDamage");
            result[683] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You draw a great circle in front of you, and push forward with both hands. " + "" + "A tremendous fiery serpent roars forth, flying at your opponent with its great maw open. Its fiery body consumes them in flames, ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Fireball5.descriptionCast");
            result[684] = new Binding(this, null, null, "LightningBolt1.damageType", "LightningDamage");
            result[685] = new Binding(this, null, null, "LightningBolt3.damageType", "LightningDamage");
            result[686] = new Binding(this, null, null, "LightningBolt5.damageType", "LightningDamage");
            result[687] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You chant an invokation to the gods, pointing condemningly at your foe. Above, the clouds part as a halo of light shines down upon them. " + "" + "For a moment, the air shimmers and sparkles, then lightning strikes down in a tremendous flash and peal of thunder, causing a massive burst, ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "LightningBolt5.descriptionCast");
            result[688] = new Binding(this, null, null, "ice1.damageType", "IceDamage");
            result[689] = new Binding(this, null, null, "ice3.damageType", "IceDamage");
            result[690] = new Binding(this, null, null, "ice5.damageType", "IceDamage");
            result[691] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You hold your hands apart, pointed toward your foe. Tremendous, jagged blocks of ice form in the air around it, " + "" + "and as you bring your hands together they smash together, entombing your opponent before bursting in eruptions of cold, ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ice5.descriptionCast");
            result[692] = new Binding(this, null, null, "earth1.damageType", "BashingDamage");
            result[693] = new Binding(this, null, null, "earth3.damageType", "BashingDamage");
            result[694] = new Binding(this, null, null, "water1.damageType", "waterDamage");
            result[695] = new Binding(this, null, null, "water3.damageType", "waterDamage");
            result[696] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You bend low, hands facing up before rising suddenly, throwing both hands into the air. " + "" + "The ground below your opponent rumbles for a moment before splitting open as a pounding rush of water blasts them, ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "water3.descriptionCast");
            result[697] = new Binding(this, null, null, "Heal1.damageType", "LifeDamage");
            result[698] = new Binding(this, null, null, "Heal2.damageType", "LifeDamage");
            result[699] = new Binding(this, null, null, "Regenerate2.damageType", "LifeDamage");
            result[700] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You clasp your hands in front of you and plant your feet firmly. " + "" + "From the ground, you can feel a trickle of water flow up your legs and onto your body, soothing your injuries. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "Regenerate2.descriptionCast");
            result[701] = new Binding(this, null, null, "BoostStrength1.damageType", "LifeDamage");
            result[702] = new Binding(this, null, null, "BoostAgility1.damageType", "LifeDamage");
            result[703] = new Binding(this, null, null, "BoostDefense1.damageType", "LifeDamage");
            result[704] = new Binding(this, null, null, "BoostDodge1.damageType", "LifeDamage");
            result[705] = new Binding(this, null, null, "ClerkEquipment.StoreExit", "EquipmentStore");
            result[706] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You step into the Armory, greeted by the sounds of hammer hitting anvil, the heat of a working forge, and the sight of a shirtless, thick-bodied lion at work. " + "" + "He looks up at you and rumbles out, \"Welcome to the Armory. Don\'t hesitate to ask if ye\'ve any interest in my works.\" ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ClerkEquipment.Leaving");
            result[707] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [LeatherArmor, ChainmailArmor, SplintArmor, PlatemailArmor, ShortSword, Dagger, Axe, LightClub];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ClerkEquipment.vendArray");
            result[708] = new Binding(this, null, null, "ClerkGrocery.StoreExit", "GroceryStore");
            result[709] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [Apple, Grapes, Oats, Cheeseburger, Sausage, MeatballSub, Cake, WaterFlask, WaterJug, orange, friedChicken, cheese, wine];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ClerkGrocery.vendArray");
            result[710] = new Binding(this, null, null, "ClerkClothes.StoreExit", "ClothesStore");
            result[711] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [ButtonDownShirt, Tunic, BellyShirt, TuxedoJacket, TuxedoPants, Bluejeans, Skirt, overalls, DressSkirt, Trousers, Vest, DressGown];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ClerkClothes.vendArray");
            result[712] = new Binding(this, null, null, "ClerkGeneral.StoreExit", "GeneralStore");
            result[713] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [SmallHealthPotion, MediumHealthPotion, LargeHealthPotion];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ClerkGeneral.vendArray");
            result[714] = new Binding(this, null, null, "ClerkHospital.StoreExit", "Hospital");
            result[715] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [SmallHealthPotion, MediumHealthPotion, LargeHealthPotion, dietPill];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ClerkHospital.vendArray");
            result[716] = new Binding(this, null, null, "ClerkWestTown.StoreExit", "WestTownStore");
            result[717] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A smattering of various foods and clothing are on a few shelves, and an array of weapons lines an entire wall. Behind a counter, a young looking panther girl smiles at you. " + "" + "\"Welcome to the store!\" she greets you chipperly, \"everything is for sale, so don\'t hesitate to ask for whatever you want.\" ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ClerkWestTown.Leaving");
            result[718] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [BookOfCrystals, Rapier, Spear, Trident, Warhammer, BlueSwimTrunks, RedSwimShirt, Bagofcandy, tropicalShirt, DonutsSmall];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ClerkWestTown.vendArray");
            result[719] = new Binding(this, null, null, "ClerkMagesGuild.StoreExit", "MageGuildStore");
            result[720] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [LightningWand, FireWand, IceWand, SmallManaPotion, MediumManaPotion, antidotePotion, MageApprenticeRobe, WizardsRobes, BattlemagesGarb];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ClerkMagesGuild.vendArray");
            result[721] = new Binding(this, null, null, "ClerkSmithNormal.StoreExit", "ExperimentTownForge");
            result[722] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [greatSword, glaive, giantAxe, LightLance, ChainmailArmor, SplintArmor, PlatemailArmor];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ClerkSmithNormal.vendArray");
            result[723] = new Binding(this, null, null, "ClerkSmithSpecial.StoreExit", "ExperimentTownForge");
            result[724] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [greatSword, glaive, giantAxe, LightLance, ChainmailArmor, SplintArmor, PlatemailArmor, enchantedFighterArmor, enchantedKnightArmor, enchantedWarmageArmor];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ClerkSmithSpecial.vendArray");
            result[725] = new Binding(this, null, null, "ClerkEarl.StoreExit", "ExperimentTownFarm");
            result[726] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You are lead to an expansive cavern that is well lit by an odd glowing orb near its peak. What is more odd, though, is that the cave floor appears to be sprouting plant life. " + "" + "Several cows graze on grass, and a pen is occupied by several fat pigs. Elsewhere, small fields of wheat, corn, and assorted vegetables grow just as vibrantly as they would in a calm, " + "" + "warm grassland. Several extremely fat furs are seen harvesting plants, and one of the large ones is plowing. A thin male goat walks quickly up to you, chewing on a bag of grains absently. " + "" + "\"Welcome to the farm. What can I get ya?\" he asks. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ClerkEarl.Leaving");
            result[727] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [MilkJug, Oats, breadLoaf, hamHock, bigSteak, beefStew, chili, jambalaya];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ClerkEarl.vendArray");
            result[728] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "With a blur of expert speed, you watch as the raccoon lovingly turns your order into a reality, before folding it up in a big green leaf. " + "" + "\"There, guaranteed as fresh as the moment you bought it!\" ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "clerkRaccoon.Bought");
            result[729] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [riceBowl, tempuraShrimp, calamari, sushiRoll];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "clerkRaccoon.vendArray");
            result[730] = new Binding(this, null, null, "ClerkLizard.StoreExit", "GrasslandsEvent");
            result[731] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "The little lizard guides you outside to a cart drawn by a horse. " + "" + "Which would be less odd if it weren\'t an anthropomorphic one. " + "" + "You shake your head slightly, reminding yourself that there\'s no accounting for taste. " + "" + "He displays his cart with a flourish, a sampling of the fruits from his farm on ready display and available for purchase. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ClerkLizard.Buying");
            result[732] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "You politely bid the lizard fellow farewell. He welcomes you to return any time that you happen to find him. " + "" + "Before you have time to respond, he pulls a wand from his sleeve, waves it deftly, " + "" + "and with a whoosh and the shine of magic the farm is gone, but an odd clay globe has appeared in his hand. He tips his hat, climbs into his cart, and snaps his fingers. " + "" + "His \'steed\' begins to march away, taking him and his cart with. You return to your adventuring, satisfied that this odd encounter has ended. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "ClerkLizard.Leaving");
            result[733] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [ampleApple, outrageousOrange, plentifulPeach, ridiculousRaspberry, bloatedBlueberry, sizableStrawberry, profusePumpkin, whoppingWatermelon, giganticGrape];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "ClerkLizard.vendArray");
            result[734] = new Binding(this, null, null, "clerkDinoSmithNormal.StoreExit", "DinosaurSmith");
            result[735] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [Rapier, Spear, Trident, Warhammer, LightLance, SplintArmor, SegmentataArmor];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "clerkDinoSmithNormal.vendArray");
            result[736] = new Binding(this, null, null, "clerkDinoSmithSpecial.StoreExit", "DinosaurSmith");
            result[737] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [Rapier, Spear, Trident, Warhammer, LightLance, SplintArmor, SegmentataArmor, HuntersGarb, BrutesHarness, IronfistPebbles, BeastclawBracers];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "clerkDinoSmithSpecial.vendArray");
            result[738] = new Binding(this, null, null, "TeacherDestruction.StoreExit", "MageGuildDestruction");
            result[739] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [Fireball1, LightningBolt1, ice1];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "TeacherDestruction.vendArray");
            result[740] = new Binding(this, null, null, "TeacherRestoration.StoreExit", "MageGuildRestoration");
            result[741] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Aside from treating burned mage trainees, you can see rather a lot of figures of anatomy. " + "" + "From the looks of it, learning what organs do what and where they are in the body has high importance in this class. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "TeacherRestoration.Leaving");
            result[742] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [Heal1, Heal2, Antidote1];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "TeacherRestoration.vendArray");
            result[743] = new Binding(this, null, null, "TeacherAlteration.StoreExit", "MageGuildAlteration");
            result[744] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "A white-furred fox giving a lecture to several confused-looking apprentice mages. " + "" + "He has drawn diagrams and figures magically in the air and is gesticulating wildly as he tries to explain the hows and whats of Alteration. ";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "TeacherAlteration.Leaving");
            result[745] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [BoostStrength1];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "TeacherAlteration.vendArray");
            result[746] = new Binding(this, null, null, "TeacherSmarty.StoreExit", "ExperimentTownSmarty");
            result[747] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [LightningBolt3, LightningBolt5, Fireball3, Fireball5, ice3, ice5];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "TeacherSmarty.vendArray");
            result[748] = new Binding(this, null, null, "TeacherDinosaur.StoreExit", "DinosaurShaman");
            result[749] = new Binding(this, function ():Array {
                var _loc1_:* = undefined;
                _loc1_ = [BoostDefense1, BoostDodge1, BoostAgility1, earth1, earth3, Regenerate2, water1, water3, LightningBolt1, LightningBolt3];
                return _loc1_ == null || _loc1_ is Array || _loc1_ is Proxy ? _loc1_ : [_loc1_];
            }, null, "TeacherDinosaur.vendArray");
            result[750] = new Binding(this, null, null, "defaultNPC.species", "Lion");
            result[751] = new Binding(this, null, null, "defaultNPC.gender", "Male");
            result[752] = new Binding(this, function ():Object {
                return backgroundImageSource;
            }, null, "sceneImage.source");
            result[753] = new Binding(this, function ():Object {
                return enemyImageSource;
            }, null, "enemyImage.source");
            result[754] = new Binding(this, function ():Boolean {
                return newGame;
            }, null, "_Main_TextArea2.visible");
            result[755] = new Binding(this, function ():Boolean {
                return newGame;
            }, null, "_Main_Grid2.visible");
            result[756] = new Binding(this, null, function (param1:Class):void {
                customBack.setStyle("icon", param1);
            }, "customBack.icon", "iconReturn");
            result[757] = new Binding(this, null, function (param1:Class):void {
                customComplete.setStyle("icon", param1);
            }, "customComplete.icon", "iconYes");
            result[758] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = mainText;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "eventText.htmlText");
            result[759] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = miscellaneousText;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "miscText.htmlText");
            result[760] = new Binding(this, function ():Boolean {
                return appButtonVisibility;
            }, null, "common2.visible");
            result[761] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabel1;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "button1.label");
            result[762] = new Binding(this, function ():Boolean {
                return buttonVisible1;
            }, null, "button1.visible");
            result[763] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabel2;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "button2.label");
            result[764] = new Binding(this, function ():Boolean {
                return buttonVisible2;
            }, null, "button2.visible");
            result[765] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabel3;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "button3.label");
            result[766] = new Binding(this, function ():Boolean {
                return buttonVisible3;
            }, null, "button3.visible");
            result[767] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabel4;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "button4.label");
            result[768] = new Binding(this, function ():Boolean {
                return buttonVisible4;
            }, null, "button4.visible");
            result[769] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabel5;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "button5.label");
            result[770] = new Binding(this, function ():Boolean {
                return buttonVisible5;
            }, null, "button5.visible");
            result[771] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabel6;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "button6.label");
            result[772] = new Binding(this, function ():Boolean {
                return buttonVisible6;
            }, null, "button6.visible");
            result[773] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabel7;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "button7.label");
            result[774] = new Binding(this, function ():Boolean {
                return buttonVisible7;
            }, null, "button7.visible");
            result[775] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabel8;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "button8.label");
            result[776] = new Binding(this, function ():Boolean {
                return buttonVisible8;
            }, null, "button8.visible");
            result[777] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabel9;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "button9.label");
            result[778] = new Binding(this, function ():Boolean {
                return buttonVisible9;
            }, null, "button9.visible");
            result[779] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabeldec1;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "decision1.label");
            result[780] = new Binding(this, function ():Boolean {
                return buttonVisibledec1;
            }, null, "decision1.visible");
            result[781] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabeldec2;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "decision2.label");
            result[782] = new Binding(this, function ():Boolean {
                return buttonVisibledec2;
            }, null, "decision2.visible");
            result[783] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = buttonLabeldec3;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "decision3.label");
            result[784] = new Binding(this, function ():Boolean {
                return buttonVisibledec3;
            }, null, "decision3.visible");
            result[785] = new Binding(this, function ():Boolean {
                return appButtonVisibility;
            }, null, "restLvlBtn.visible");
            result[786] = new Binding(this, function ():Boolean {
                return appButtonVisibility;
            }, null, "stufftext.visible");
            result[787] = new Binding(this, function ():Boolean {
                return appButtonVisibility;
            }, null, "spellList.visible");
            result[788] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = depositLabel;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "depositToggle.label");
            result[789] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = discardLabel;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "discardToggle.label");
            result[790] = new Binding(this, function ():Boolean {
                return !newGame;
            }, null, "statPanel.visible");
            result[791] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = int(STR);
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label41.text");
            result[792] = new Binding(this, function ():uint {
                return strColor;
            }, function (param1:uint):void {
                _Main_Label41.setStyle("color", param1);
            }, "_Main_Label41.color");
            result[793] = new Binding(this, function ():Number {
                return STR % 100;
            }, null, "_Main_Rect1.width");
            result[794] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = int(AGI);
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label43.text");
            result[795] = new Binding(this, function ():uint {
                return agiColor;
            }, function (param1:uint):void {
                _Main_Label43.setStyle("color", param1);
            }, "_Main_Label43.color");
            result[796] = new Binding(this, function ():Number {
                return AGI % 100;
            }, null, "_Main_Rect2.width");
            result[797] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = int(END);
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label45.text");
            result[798] = new Binding(this, function ():uint {
                return endColor;
            }, function (param1:uint):void {
                _Main_Label45.setStyle("color", param1);
            }, "_Main_Label45.color");
            result[799] = new Binding(this, function ():Number {
                return END % 100;
            }, null, "_Main_Rect3.width");
            result[800] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = int(INT);
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label47.text");
            result[801] = new Binding(this, function ():uint {
                return intColor;
            }, function (param1:uint):void {
                _Main_Label47.setStyle("color", param1);
            }, "_Main_Label47.color");
            result[802] = new Binding(this, function ():Number {
                return INT % 100;
            }, null, "_Main_Rect4.width");
            result[803] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = int(FAT + tenemyFATdebuff);
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label49.text");
            result[804] = new Binding(this, function ():Boolean {
                return !newGame;
            }, null, "_Main_Grid9.visible");
            result[805] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = int(HEA) + "/" + int(maxHEA);
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label51.text");
            result[806] = new Binding(this, function ():uint {
                return healthColor;
            }, function (param1:uint):void {
                _Main_Label51.setStyle("color", param1);
            }, "_Main_Label51.color");
            result[807] = new Binding(this, function ():Number {
                return HEAbarScale;
            }, null, "healthBar.scaleX");
            result[808] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = int(STA) + "%";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label53.text");
            result[809] = new Binding(this, function ():Number {
                return STA * 0.01;
            }, null, "staminaBar.scaleX");
            result[810] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = Math.floor(MANA) + "/" + Math.floor(maxMANA);
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label55.text");
            result[811] = new Binding(this, function ():uint {
                return manaColor;
            }, function (param1:uint):void {
                _Main_Label55.setStyle("color", param1);
            }, "_Main_Label55.color");
            result[812] = new Binding(this, function ():Number {
                return MANAbarScale;
            }, null, "manaBar.scaleX");
            result[813] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = int(ATE) + "/" + int(STO);
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label57.text");
            result[814] = new Binding(this, function ():uint {
                return stoColor;
            }, function (param1:uint):void {
                _Main_Label57.setStyle("color", param1);
            }, "_Main_Label57.color");
            result[815] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "(" + int(FUL) + "%)";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label58.text");
            result[816] = new Binding(this, function ():uint {
                return stoColor;
            }, function (param1:uint):void {
                _Main_Label58.setStyle("color", param1);
            }, "_Main_Label58.color");
            result[817] = new Binding(this, function ():Number {
                return FULbarScale;
            }, null, "fullnessBar.scaleX");
            result[818] = new Binding(this, function ():Boolean {
                return !newGame;
            }, null, "_Main_VGroup3.visible");
            result[819] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Level: " + LVL;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label59.text");
            result[820] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Experience: " + XP + "/" + XPtoLevel;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label60.text");
            result[821] = new Binding(this, function ():Number {
                return XP / XPtoLevel;
            }, null, "_Main_Rect9.scaleX");
            result[822] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Weight: " + int(bSTR * 3 + FAT + Eaten + Drank + InflatedMass + 40) + " lbs";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label61.text");
            result[823] = new Binding(this, function ():Boolean {
                return optionsImperial;
            }, null, "_Main_Label61.visible");
            result[824] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Weight: " + int((bSTR * 3 + FAT + Eaten + Drank + InflatedMass + 40) * 0.453592) + " kgs";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label62.text");
            result[825] = new Binding(this, function ():Boolean {
                return optionsMetric;
            }, null, "_Main_Label62.visible");
            result[826] = new Binding(this, function ():Boolean {
                return optionsImperial;
            }, null, "_Main_Group23.visible");
            result[827] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Waist diameter: " + Math.floor((2 * Math.pow(90 * (ATE + (FAT + tenemyFATdebuff) * 0.21) / (4 * Math.PI), 1 / 3) - 5) / 12) + "\'" + Math.floor((2 * Math.pow(90 * (ATE + (FAT + tenemyFATdebuff) * 0.21) / (4 * Math.PI), 1 / 3) - 5) % 12) + "\"";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label63.text");
            result[828] = new Binding(this, function ():Boolean {
                return Math.floor(2 * Math.pow(90 * (ATE + (FAT + tenemyFATdebuff) * 0.21) / (4 * Math.PI), 1 / 3) - 5) > 0;
            }, null, "_Main_Label63.visible");
            result[829] = new Binding(this, function ():Boolean {
                return 0 >= Math.floor(2 * Math.pow(90 * (ATE + (FAT + tenemyFATdebuff) * 0.21) / (4 * Math.PI), 1 / 3) - 5);
            }, null, "_Main_Label64.visible");
            result[830] = new Binding(this, function ():Boolean {
                return optionsMetric;
            }, null, "_Main_Group24.visible");
            result[831] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Waist size: " + Math.floor((2 * Math.pow(90 * (ATE + (FAT + tenemyFATdebuff) * 0.21) / (4 * Math.PI), 1 / 3) - 5) * 2.54) + " cm";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label65.text");
            result[832] = new Binding(this, function ():Boolean {
                return Math.floor((2 * Math.pow(90 * (ATE + (FAT + tenemyFATdebuff) * 0.21) / (4 * Math.PI), 1 / 3) - 5) * 2.54) > 0;
            }, null, "_Main_Label65.visible");
            result[833] = new Binding(this, function ():Boolean {
                return 0 >= Math.floor((2 * Math.pow(90 * (ATE + (FAT + tenemyFATdebuff) * 0.21) / (4 * Math.PI), 1 / 3) - 5) * 2.54);
            }, null, "_Main_Label66.visible");
            result[834] = new Binding(this, null, null, "_Main_Object1.type", "apatosaurus");
            result[835] = new Binding(this, null, null, "_Main_Object2.type", "Badger");
            result[836] = new Binding(this, null, null, "_Main_Object3.type", "Bat");
            result[837] = new Binding(this, null, null, "_Main_Object4.type", "brownBear");
            result[838] = new Binding(this, null, null, "_Main_Object5.type", "polarBear");
            result[839] = new Binding(this, null, null, "_Main_Object6.type", "blackBear");
            result[840] = new Binding(this, null, null, "_Main_Object7.type", "BlueJay");
            result[841] = new Binding(this, null, null, "_Main_Object8.type", "Cattle");
            result[842] = new Binding(this, null, null, "_Main_Object9.type", "Cheetah");
            result[843] = new Binding(this, null, null, "_Main_Object10.type", "Cougar");
            result[844] = new Binding(this, null, null, "_Main_Object11.type", "Coyote");
            result[845] = new Binding(this, null, null, "_Main_Object12.type", "Deer");
            result[846] = new Binding(this, null, null, "_Main_Object13.type", "Dog");
            result[847] = new Binding(this, null, null, "_Main_Object14.type", "Dolphin");
            result[848] = new Binding(this, null, null, "_Main_Object15.type", "Donkey");
            result[849] = new Binding(this, null, null, "_Main_Object16.type", "blackDragon");
            result[850] = new Binding(this, null, null, "_Main_Object17.type", "blueDragon");
            result[851] = new Binding(this, null, null, "_Main_Object18.type", "greenDragon");
            result[852] = new Binding(this, null, null, "_Main_Object19.type", "redDragon");
            result[853] = new Binding(this, null, null, "_Main_Object20.type", "whiteDragon");
            result[854] = new Binding(this, null, null, "_Main_Object21.type", "Ferret");
            result[855] = new Binding(this, null, null, "_Main_Object22.type", "Fox");
            result[856] = new Binding(this, null, null, "_Main_Object23.type", "Goat");
            result[857] = new Binding(this, null, null, "_Main_Object24.type", "Hawk");
            result[858] = new Binding(this, null, null, "_Main_Object25.type", "Hippo");
            result[859] = new Binding(this, null, null, "_Main_Object26.type", "Horse");
            result[860] = new Binding(this, null, null, "_Main_Object27.type", "GreyKangaroo");
            result[861] = new Binding(this, null, null, "_Main_Object28.type", "RedKangaroo");
            result[862] = new Binding(this, null, null, "_Main_Object29.type", "Leopard");
            result[863] = new Binding(this, null, null, "_Main_Object30.type", "Lion");
            result[864] = new Binding(this, null, null, "_Main_Object31.type", "Magpie");
            result[865] = new Binding(this, null, null, "_Main_Object32.type", "Mouse");
            result[866] = new Binding(this, null, null, "_Main_Object33.type", "Orca");
            result[867] = new Binding(this, null, null, "_Main_Object34.type", "Otter");
            result[868] = new Binding(this, null, null, "_Main_Object35.type", "Owl");
            result[869] = new Binding(this, null, null, "_Main_Object36.type", "PaintedDog");
            result[870] = new Binding(this, null, null, "_Main_Object37.type", "Panda");
            result[871] = new Binding(this, null, null, "_Main_Object38.type", "Panther");
            result[872] = new Binding(this, null, null, "_Main_Object39.type", "Penguin");
            result[873] = new Binding(this, null, null, "_Main_Object40.type", "Pig");
            result[874] = new Binding(this, null, null, "_Main_Object41.type", "pterodactyl");
            result[875] = new Binding(this, null, null, "_Main_Object42.type", "Rabbit");
            result[876] = new Binding(this, null, null, "_Main_Object43.type", "Raccoon");
            result[877] = new Binding(this, null, null, "_Main_Object44.type", "raptor");
            result[878] = new Binding(this, null, null, "_Main_Object45.type", "Rat");
            result[879] = new Binding(this, null, null, "_Main_Object46.type", "Raven");
            result[880] = new Binding(this, null, null, "_Main_Object47.type", "Rhino");
            result[881] = new Binding(this, null, null, "_Main_Object48.type", "Robin");
            result[882] = new Binding(this, null, null, "_Main_Object49.type", "Shark");
            result[883] = new Binding(this, null, null, "_Main_Object50.type", "Skunk");
            result[884] = new Binding(this, null, null, "_Main_Object51.type", "Squirrel");
            result[885] = new Binding(this, null, null, "_Main_Object52.type", "stegosaurus");
            result[886] = new Binding(this, null, null, "_Main_Object53.type", "Tiger");
            result[887] = new Binding(this, null, null, "_Main_Object54.type", "triceratops");
            result[888] = new Binding(this, null, null, "_Main_Object55.type", "tyrannosaurus");
            result[889] = new Binding(this, null, null, "_Main_Object56.type", "Wolf");
            result[890] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Page: " + invPage;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label67.text");
            result[891] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Page: " + spellPage;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label68.text");
            result[892] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Day " + day + "   " + displayHour + ":" + tensMinute + "" + int(onesMinute) + " " + AMPM;
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "clock.text");
            result[893] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = capFirst(location.Name);
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "locationText.text");
            result[894] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = capFirst(enemyt.name) + "\rLevel " + enemyt.level + "   " + Math.ceil(eHEA / enemyt.maxHEA * 100) + "% HP";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label71.text");
            result[895] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "(Version " + version + ")";
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "gameVersion.text");
            result[896] = new Binding(this, function ():String {
                var _loc1_:* = undefined;
                _loc1_ = "Gold " + int(GLD);
                return _loc1_ == undefined ? null : String(_loc1_);
            }, null, "_Main_Label73.text");
            result[897] = new Binding(this, function ():Boolean {
                return !newGame;
            }, null, "_Main_Label73.visible");
            return result;
        }

        mx_internal function _Main_StylesInit():void {
            var style:CSSStyleDeclaration = null;
            var effects:Array = null;
            var conditions:Array = null;
            var condition:CSSCondition = null;
            var selector:CSSSelector = null;
            if (mx_internal::_Main_StylesInit_done) {
                return;
            }
            mx_internal::_Main_StylesInit_done = true;
            selector = null;
            conditions = null;
            conditions = null;
            selector = new CSSSelector("spark.components.BorderContainer", conditions, selector);
            style = styleManager.getStyleDeclaration("spark.components.BorderContainer");
            if (!style) {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null) {
                style.factory = function ():void {
                    this.borderColor = 10053120;
                    this.backgroundColor = 10053120;
                    this.borderAlpha = 0.25;
                    this.backgroundAlpha = 0.3;
                    this.borderWeight = 2;
                };
            }
            selector = null;
            conditions = null;
            conditions = null;
            selector = new CSSSelector("mx.containers.Grid", conditions, selector);
            style = styleManager.getStyleDeclaration("mx.containers.Grid");
            if (!style) {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null) {
                style.factory = function ():void {
                    this.borderStyle = "solid";
                    this.borderColor = 10053120;
                    this.paddingTop = 4;
                    this.backgroundColor = 10053120;
                    this.borderVisible = true;
                    this.verticalAlign = "middle";
                    this.borderAlpha = 0.5;
                    this.backgroundAlpha = 0.3;
                    this.paddingBottom = 4;
                    this.paddingLeft = 4;
                    this.paddingRight = 4;
                };
            }
            selector = null;
            conditions = null;
            conditions = null;
            selector = new CSSSelector("mx.controls.TextArea", conditions, selector);
            style = styleManager.getStyleDeclaration("mx.controls.TextArea");
            if (!style) {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null) {
                style.factory = function ():void {
                    this.contentBackgroundAlpha = 0.5;
                    this.borderVisible = false;
                    this.contentBackgroundColor = 16777164;
                    this.horizontalCenter = -145;
                    this.top = 26;
                };
            }
            styleManager.initProtoChainRoots();
        }

        [Bindable(event="propertyChange")]
        public function get AeroPearl():Items {
            return this._239210683AeroPearl;
        }

        public function set AeroPearl(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._239210683AeroPearl;
            if (_loc2_ !== param1) {
                this._239210683AeroPearl = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "AeroPearl", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Amulet():Items {
            return this._1965151186Amulet;
        }

        public function set Amulet(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1965151186Amulet;
            if (_loc2_ !== param1) {
                this._1965151186Amulet = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Amulet", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Anaconda():Enemies {
            return this._968416181Anaconda;
        }

        public function set Anaconda(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._968416181Anaconda;
            if (_loc2_ !== param1) {
                this._968416181Anaconda = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Anaconda", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Antidote1():Spells {
            return this._111768269Antidote1;
        }

        public function set Antidote1(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._111768269Antidote1;
            if (_loc2_ !== param1) {
                this._111768269Antidote1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Antidote1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Apple():Items {
            return this._63476538Apple;
        }

        public function set Apple(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._63476538Apple;
            if (_loc2_ !== param1) {
                this._63476538Apple = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Apple", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ArcaneDamage():DamageType {
            return this._479099531ArcaneDamage;
        }

        public function set ArcaneDamage(param1:DamageType):void {
            var _loc2_:Object = null;
            _loc2_ = this._479099531ArcaneDamage;
            if (_loc2_ !== param1) {
                this._479099531ArcaneDamage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ArcaneDamage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Armorless():Items {
            return this._831548216Armorless;
        }

        public function set Armorless(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._831548216Armorless;
            if (_loc2_ !== param1) {
                this._831548216Armorless = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Armorless", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Axe():Items {
            return this._66286Axe;
        }

        public function set Axe(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._66286Axe;
            if (_loc2_ !== param1) {
                this._66286Axe = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Axe", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Badger():Species {
            return this._1982186831Badger;
        }

        public function set Badger(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1982186831Badger;
            if (_loc2_ !== param1) {
                this._1982186831Badger = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Badger", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Bagofcandy():Items {
            return this._1745281018Bagofcandy;
        }

        public function set Bagofcandy(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1745281018Bagofcandy;
            if (_loc2_ !== param1) {
                this._1745281018Bagofcandy = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Bagofcandy", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BashingDamage():DamageType {
            return this._1112427139BashingDamage;
        }

        public function set BashingDamage(param1:DamageType):void {
            var _loc2_:Object = null;
            _loc2_ = this._1112427139BashingDamage;
            if (_loc2_ !== param1) {
                this._1112427139BashingDamage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BashingDamage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Bat():Species {
            return this._66549Bat;
        }

        public function set Bat(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._66549Bat;
            if (_loc2_ !== param1) {
                this._66549Bat = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Bat", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BattlemagesGarb():Items {
            return this._103508077BattlemagesGarb;
        }

        public function set BattlemagesGarb(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._103508077BattlemagesGarb;
            if (_loc2_ !== param1) {
                this._103508077BattlemagesGarb = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BattlemagesGarb", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BeachEntrance():Locations {
            return this._750677273BeachEntrance;
        }

        public function set BeachEntrance(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._750677273BeachEntrance;
            if (_loc2_ !== param1) {
                this._750677273BeachEntrance = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BeachEntrance", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BeachEvent():Locations {
            return this._12935959BeachEvent;
        }

        public function set BeachEvent(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._12935959BeachEvent;
            if (_loc2_ !== param1) {
                this._12935959BeachEvent = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BeachEvent", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BeachHub():Locations {
            return this._1376551090BeachHub;
        }

        public function set BeachHub(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1376551090BeachHub;
            if (_loc2_ !== param1) {
                this._1376551090BeachHub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BeachHub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BeastclawBracers():Items {
            return this._1476416438BeastclawBracers;
        }

        public function set BeastclawBracers(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1476416438BeastclawBracers;
            if (_loc2_ !== param1) {
                this._1476416438BeastclawBracers = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BeastclawBracers", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BellyShirt():Items {
            return this._1900790752BellyShirt;
        }

        public function set BellyShirt(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1900790752BellyShirt;
            if (_loc2_ !== param1) {
                this._1900790752BellyShirt = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BellyShirt", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BlackSword():Items {
            return this._344512862BlackSword;
        }

        public function set BlackSword(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._344512862BlackSword;
            if (_loc2_ !== param1) {
                this._344512862BlackSword = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BlackSword", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BloatBees():Enemies {
            return this._1468039031BloatBees;
        }

        public function set BloatBees(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1468039031BloatBees;
            if (_loc2_ !== param1) {
                this._1468039031BloatBees = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BloatBees", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BloatedLion():Enemies {
            return this._1035889773BloatedLion;
        }

        public function set BloatedLion(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1035889773BloatedLion;
            if (_loc2_ !== param1) {
                this._1035889773BloatedLion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BloatedLion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BlueJay():Species {
            return this._1648784200BlueJay;
        }

        public function set BlueJay(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1648784200BlueJay;
            if (_loc2_ !== param1) {
                this._1648784200BlueJay = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BlueJay", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BlueSwimTrunks():Items {
            return this._206167551BlueSwimTrunks;
        }

        public function set BlueSwimTrunks(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._206167551BlueSwimTrunks;
            if (_loc2_ !== param1) {
                this._206167551BlueSwimTrunks = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BlueSwimTrunks", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BlueberrySlime():Enemies {
            return this._1006109364BlueberrySlime;
        }

        public function set BlueberrySlime(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1006109364BlueberrySlime;
            if (_loc2_ !== param1) {
                this._1006109364BlueberrySlime = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BlueberrySlime", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Bluejeans():Items {
            return this._331663727Bluejeans;
        }

        public function set Bluejeans(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._331663727Bluejeans;
            if (_loc2_ !== param1) {
                this._331663727Bluejeans = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Bluejeans", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BookOfCrystals():Items {
            return this._1090757341BookOfCrystals;
        }

        public function set BookOfCrystals(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1090757341BookOfCrystals;
            if (_loc2_ !== param1) {
                this._1090757341BookOfCrystals = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BookOfCrystals", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BoostAgility1():Spells {
            return this._1323926225BoostAgility1;
        }

        public function set BoostAgility1(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._1323926225BoostAgility1;
            if (_loc2_ !== param1) {
                this._1323926225BoostAgility1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BoostAgility1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BoostDefense1():Spells {
            return this._2037292692BoostDefense1;
        }

        public function set BoostDefense1(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._2037292692BoostDefense1;
            if (_loc2_ !== param1) {
                this._2037292692BoostDefense1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BoostDefense1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BoostDodge1():Spells {
            return this._1253505891BoostDodge1;
        }

        public function set BoostDodge1(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._1253505891BoostDodge1;
            if (_loc2_ !== param1) {
                this._1253505891BoostDodge1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BoostDodge1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BoostStrength1():Spells {
            return this._178329651BoostStrength1;
        }

        public function set BoostStrength1(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._178329651BoostStrength1;
            if (_loc2_ !== param1) {
                this._178329651BoostStrength1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BoostStrength1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BrutesHarness():Items {
            return this._1587018163BrutesHarness;
        }

        public function set BrutesHarness(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1587018163BrutesHarness;
            if (_loc2_ !== param1) {
                this._1587018163BrutesHarness = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BrutesHarness", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BubbleOrca():Enemies {
            return this._2138305459BubbleOrca;
        }

        public function set BubbleOrca(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._2138305459BubbleOrca;
            if (_loc2_ !== param1) {
                this._2138305459BubbleOrca = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BubbleOrca", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get BuriedTreasure():Locations {
            return this._1576889816BuriedTreasure;
        }

        public function set BuriedTreasure(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1576889816BuriedTreasure;
            if (_loc2_ !== param1) {
                this._1576889816BuriedTreasure = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "BuriedTreasure", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ButtonDownShirt():Items {
            return this._1070700354ButtonDownShirt;
        }

        public function set ButtonDownShirt(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1070700354ButtonDownShirt;
            if (_loc2_ !== param1) {
                this._1070700354ButtonDownShirt = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ButtonDownShirt", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get CabalCave():Locations {
            return this._368421628CabalCave;
        }

        public function set CabalCave(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._368421628CabalCave;
            if (_loc2_ !== param1) {
                this._368421628CabalCave = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "CabalCave", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Cake():Items {
            return this._2092632Cake;
        }

        public function set Cake(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._2092632Cake;
            if (_loc2_ !== param1) {
                this._2092632Cake = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Cake", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get CapturedByWildlings():Locations {
            return this._1788611134CapturedByWildlings;
        }

        public function set CapturedByWildlings(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1788611134CapturedByWildlings;
            if (_loc2_ !== param1) {
                this._1788611134CapturedByWildlings = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "CapturedByWildlings", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Cattle():Species {
            return this._2011305335Cattle;
        }

        public function set Cattle(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._2011305335Cattle;
            if (_loc2_ !== param1) {
                this._2011305335Cattle = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Cattle", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get CentralSquare():Locations {
            return this._1760212690CentralSquare;
        }

        public function set CentralSquare(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1760212690CentralSquare;
            if (_loc2_ !== param1) {
                this._1760212690CentralSquare = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "CentralSquare", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ChainmailArmor():Items {
            return this._504732601ChainmailArmor;
        }

        public function set ChainmailArmor(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._504732601ChainmailArmor;
            if (_loc2_ !== param1) {
                this._504732601ChainmailArmor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ChainmailArmor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get CharredWand():Items {
            return this._428943877CharredWand;
        }

        public function set CharredWand(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._428943877CharredWand;
            if (_loc2_ !== param1) {
                this._428943877CharredWand = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "CharredWand", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Cheeseburger():Items {
            return this._1757550548Cheeseburger;
        }

        public function set Cheeseburger(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1757550548Cheeseburger;
            if (_loc2_ !== param1) {
                this._1757550548Cheeseburger = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Cheeseburger", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Cheetah():Species {
            return this._1887932010Cheetah;
        }

        public function set Cheetah(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1887932010Cheetah;
            if (_loc2_ !== param1) {
                this._1887932010Cheetah = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Cheetah", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Church():Locations {
            return this._2017797575Church;
        }

        public function set Church(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._2017797575Church;
            if (_loc2_ !== param1) {
                this._2017797575Church = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Church", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClerkClothes():Vendors {
            return this._1030350419ClerkClothes;
        }

        public function set ClerkClothes(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._1030350419ClerkClothes;
            if (_loc2_ !== param1) {
                this._1030350419ClerkClothes = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClerkClothes", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClerkEarl():Vendors {
            return this._1212841387ClerkEarl;
        }

        public function set ClerkEarl(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._1212841387ClerkEarl;
            if (_loc2_ !== param1) {
                this._1212841387ClerkEarl = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClerkEarl", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClerkEquipment():Vendors {
            return this._443766567ClerkEquipment;
        }

        public function set ClerkEquipment(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._443766567ClerkEquipment;
            if (_loc2_ !== param1) {
                this._443766567ClerkEquipment = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClerkEquipment", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClerkGeneral():Vendors {
            return this._83632883ClerkGeneral;
        }

        public function set ClerkGeneral(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._83632883ClerkGeneral;
            if (_loc2_ !== param1) {
                this._83632883ClerkGeneral = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClerkGeneral", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClerkGrocery():Vendors {
            return this._456663832ClerkGrocery;
        }

        public function set ClerkGrocery(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._456663832ClerkGrocery;
            if (_loc2_ !== param1) {
                this._456663832ClerkGrocery = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClerkGrocery", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClerkHospital():Vendors {
            return this._478619023ClerkHospital;
        }

        public function set ClerkHospital(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._478619023ClerkHospital;
            if (_loc2_ !== param1) {
                this._478619023ClerkHospital = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClerkHospital", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClerkLizard():Vendors {
            return this._1812459307ClerkLizard;
        }

        public function set ClerkLizard(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._1812459307ClerkLizard;
            if (_loc2_ !== param1) {
                this._1812459307ClerkLizard = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClerkLizard", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClerkMagesGuild():Vendors {
            return this._1422792377ClerkMagesGuild;
        }

        public function set ClerkMagesGuild(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._1422792377ClerkMagesGuild;
            if (_loc2_ !== param1) {
                this._1422792377ClerkMagesGuild = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClerkMagesGuild", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClerkSmithNormal():Vendors {
            return this._1336923307ClerkSmithNormal;
        }

        public function set ClerkSmithNormal(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._1336923307ClerkSmithNormal;
            if (_loc2_ !== param1) {
                this._1336923307ClerkSmithNormal = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClerkSmithNormal", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClerkSmithSpecial():Vendors {
            return this._1663934475ClerkSmithSpecial;
        }

        public function set ClerkSmithSpecial(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._1663934475ClerkSmithSpecial;
            if (_loc2_ !== param1) {
                this._1663934475ClerkSmithSpecial = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClerkSmithSpecial", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClerkWestTown():Vendors {
            return this._568932406ClerkWestTown;
        }

        public function set ClerkWestTown(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._568932406ClerkWestTown;
            if (_loc2_ !== param1) {
                this._568932406ClerkWestTown = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClerkWestTown", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ClothesStore():Locations {
            return this._903283303ClothesStore;
        }

        public function set ClothesStore(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._903283303ClothesStore;
            if (_loc2_ !== param1) {
                this._903283303ClothesStore = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ClothesStore", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Coconut():Items {
            return this._1689082219Coconut;
        }

        public function set Coconut(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1689082219Coconut;
            if (_loc2_ !== param1) {
                this._1689082219Coconut = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Coconut", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get CoconutTree():Locations {
            return this._840221741CoconutTree;
        }

        public function set CoconutTree(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._840221741CoconutTree;
            if (_loc2_ !== param1) {
                this._840221741CoconutTree = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "CoconutTree", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Cookies():Items {
            return this._1678124433Cookies;
        }

        public function set Cookies(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1678124433Cookies;
            if (_loc2_ !== param1) {
                this._1678124433Cookies = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Cookies", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Cougar():Species {
            return this._2024251599Cougar;
        }

        public function set Cougar(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._2024251599Cougar;
            if (_loc2_ !== param1) {
                this._2024251599Cougar = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Cougar", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Coyote():Species {
            return this._2024379027Coyote;
        }

        public function set Coyote(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._2024379027Coyote;
            if (_loc2_ !== param1) {
                this._2024379027Coyote = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Coyote", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Cupcake():Items {
            return this._1505671850Cupcake;
        }

        public function set Cupcake(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1505671850Cupcake;
            if (_loc2_ !== param1) {
                this._1505671850Cupcake = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Cupcake", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Dagger():Items {
            return this._2039534506Dagger;
        }

        public function set Dagger(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._2039534506Dagger;
            if (_loc2_ !== param1) {
                this._2039534506Dagger = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Dagger", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DeathDamage():DamageType {
            return this._617286371DeathDamage;
        }

        public function set DeathDamage(param1:DamageType):void {
            var _loc2_:Object = null;
            _loc2_ = this._617286371DeathDamage;
            if (_loc2_ !== param1) {
                this._617286371DeathDamage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DeathDamage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Deer():Species {
            return this._2126094Deer;
        }

        public function set Deer(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._2126094Deer;
            if (_loc2_ !== param1) {
                this._2126094Deer = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Deer", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DenseTopaz():Items {
            return this._2044530831DenseTopaz;
        }

        public function set DenseTopaz(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._2044530831DenseTopaz;
            if (_loc2_ !== param1) {
                this._2044530831DenseTopaz = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DenseTopaz", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DinosaurCenter():Locations {
            return this._463030086DinosaurCenter;
        }

        public function set DinosaurCenter(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._463030086DinosaurCenter;
            if (_loc2_ !== param1) {
                this._463030086DinosaurCenter = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DinosaurCenter", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DinosaurChief():Locations {
            return this._1400493876DinosaurChief;
        }

        public function set DinosaurChief(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1400493876DinosaurChief;
            if (_loc2_ !== param1) {
                this._1400493876DinosaurChief = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DinosaurChief", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DinosaurDocks():Locations {
            return this._1401620367DinosaurDocks;
        }

        public function set DinosaurDocks(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1401620367DinosaurDocks;
            if (_loc2_ !== param1) {
                this._1401620367DinosaurDocks = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DinosaurDocks", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DinosaurInn():Locations {
            return this._293508456DinosaurInn;
        }

        public function set DinosaurInn(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._293508456DinosaurInn;
            if (_loc2_ !== param1) {
                this._293508456DinosaurInn = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DinosaurInn", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DinosaurRider():Enemies {
            return this._1414371689DinosaurRider;
        }

        public function set DinosaurRider(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1414371689DinosaurRider;
            if (_loc2_ !== param1) {
                this._1414371689DinosaurRider = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DinosaurRider", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DinosaurShaman():Locations {
            return this._923472927DinosaurShaman;
        }

        public function set DinosaurShaman(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._923472927DinosaurShaman;
            if (_loc2_ !== param1) {
                this._923472927DinosaurShaman = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DinosaurShaman", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DinosaurSmith():Locations {
            return this._1415419634DinosaurSmith;
        }

        public function set DinosaurSmith(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1415419634DinosaurSmith;
            if (_loc2_ !== param1) {
                this._1415419634DinosaurSmith = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DinosaurSmith", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Docks():Locations {
            return this._66204800Docks;
        }

        public function set Docks(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._66204800Docks;
            if (_loc2_ !== param1) {
                this._66204800Docks = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Docks", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Dog():Species {
            return this._68892Dog;
        }

        public function set Dog(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._68892Dog;
            if (_loc2_ !== param1) {
                this._68892Dog = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Dog", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Dolphin():Species {
            return this._793243202Dolphin;
        }

        public function set Dolphin(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._793243202Dolphin;
            if (_loc2_ !== param1) {
                this._793243202Dolphin = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Dolphin", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Donkey():Species {
            return this._2052676188Donkey;
        }

        public function set Donkey(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._2052676188Donkey;
            if (_loc2_ !== param1) {
                this._2052676188Donkey = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Donkey", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DonutsSmall():Items {
            return this._1765640662DonutsSmall;
        }

        public function set DonutsSmall(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1765640662DonutsSmall;
            if (_loc2_ !== param1) {
                this._1765640662DonutsSmall = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DonutsSmall", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DressGown():Items {
            return this._1308404854DressGown;
        }

        public function set DressGown(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1308404854DressGown;
            if (_loc2_ !== param1) {
                this._1308404854DressGown = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DressGown", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get DressSkirt():Items {
            return this._1916794684DressSkirt;
        }

        public function set DressSkirt(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1916794684DressSkirt;
            if (_loc2_ !== param1) {
                this._1916794684DressSkirt = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DressSkirt", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Drunk():Enemies {
            return this._66311556Drunk;
        }

        public function set Drunk(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._66311556Drunk;
            if (_loc2_ !== param1) {
                this._66311556Drunk = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Drunk", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get EastCityGates():Locations {
            return this._70515008EastCityGates;
        }

        public function set EastCityGates(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._70515008EastCityGates;
            if (_loc2_ !== param1) {
                this._70515008EastCityGates = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "EastCityGates", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get EastRoad():Locations {
            return this._709593891EastRoad;
        }

        public function set EastRoad(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._709593891EastRoad;
            if (_loc2_ !== param1) {
                this._709593891EastRoad = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "EastRoad", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get EasternSquare():Locations {
            return this._672630175EasternSquare;
        }

        public function set EasternSquare(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._672630175EasternSquare;
            if (_loc2_ !== param1) {
                this._672630175EasternSquare = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "EasternSquare", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get EquipmentStore():Locations {
            return this._1096693779EquipmentStore;
        }

        public function set EquipmentStore(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1096693779EquipmentStore;
            if (_loc2_ !== param1) {
                this._1096693779EquipmentStore = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "EquipmentStore", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ExpandedElephant():Enemies {
            return this._490815734ExpandedElephant;
        }

        public function set ExpandedElephant(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._490815734ExpandedElephant;
            if (_loc2_ !== param1) {
                this._490815734ExpandedElephant = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ExpandedElephant", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ExperimentCave():Locations {
            return this._1054363978ExperimentCave;
        }

        public function set ExperimentCave(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1054363978ExperimentCave;
            if (_loc2_ !== param1) {
                this._1054363978ExperimentCave = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ExperimentCave", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ExperimentTown():Locations {
            return this._1054883919ExperimentTown;
        }

        public function set ExperimentTown(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1054883919ExperimentTown;
            if (_loc2_ !== param1) {
                this._1054883919ExperimentTown = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ExperimentTown", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ExperimentTownFarm():Locations {
            return this._1497025829ExperimentTownFarm;
        }

        public function set ExperimentTownFarm(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1497025829ExperimentTownFarm;
            if (_loc2_ !== param1) {
                this._1497025829ExperimentTownFarm = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ExperimentTownFarm", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ExperimentTownForge():Locations {
            return this._836422568ExperimentTownForge;
        }

        public function set ExperimentTownForge(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._836422568ExperimentTownForge;
            if (_loc2_ !== param1) {
                this._836422568ExperimentTownForge = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ExperimentTownForge", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ExperimentTownSmarty():Locations {
            return this._210540799ExperimentTownSmarty;
        }

        public function set ExperimentTownSmarty(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._210540799ExperimentTownSmarty;
            if (_loc2_ !== param1) {
                this._210540799ExperimentTownSmarty = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ExperimentTownSmarty", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get FatJaguar():Enemies {
            return this._1663651759FatJaguar;
        }

        public function set FatJaguar(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1663651759FatJaguar;
            if (_loc2_ !== param1) {
                this._1663651759FatJaguar = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "FatJaguar", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get FatWolf():Enemies {
            return this._587606251FatWolf;
        }

        public function set FatWolf(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._587606251FatWolf;
            if (_loc2_ !== param1) {
                this._587606251FatWolf = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "FatWolf", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get FatWyvern():Enemies {
            return this._2058427238FatWyvern;
        }

        public function set FatWyvern(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._2058427238FatWyvern;
            if (_loc2_ !== param1) {
                this._2058427238FatWyvern = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "FatWyvern", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get FeederAnt():Enemies {
            return this._365635324FeederAnt;
        }

        public function set FeederAnt(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._365635324FeederAnt;
            if (_loc2_ !== param1) {
                this._365635324FeederAnt = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "FeederAnt", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Female():Gender {
            return this._2100660076Female;
        }

        public function set Female(param1:Gender):void {
            var _loc2_:Object = null;
            _loc2_ = this._2100660076Female;
            if (_loc2_ !== param1) {
                this._2100660076Female = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Female", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Fence():Locations {
            return this._67764241Fence;
        }

        public function set Fence(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._67764241Fence;
            if (_loc2_ !== param1) {
                this._67764241Fence = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Fence", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Ferret():Species {
            return this._2100825166Ferret;
        }

        public function set Ferret(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._2100825166Ferret;
            if (_loc2_ !== param1) {
                this._2100825166Ferret = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Ferret", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get FireDamage():DamageType {
            return this._919947621FireDamage;
        }

        public function set FireDamage(param1:DamageType):void {
            var _loc2_:Object = null;
            _loc2_ = this._919947621FireDamage;
            if (_loc2_ !== param1) {
                this._919947621FireDamage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "FireDamage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get FireWand():Items {
            return this._499034762FireWand;
        }

        public function set FireWand(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._499034762FireWand;
            if (_loc2_ !== param1) {
                this._499034762FireWand = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "FireWand", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Fireball1():Spells {
            return this._1719948668Fireball1;
        }

        public function set Fireball1(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._1719948668Fireball1;
            if (_loc2_ !== param1) {
                this._1719948668Fireball1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Fireball1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Fireball3():Spells {
            return this._1719948670Fireball3;
        }

        public function set Fireball3(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._1719948670Fireball3;
            if (_loc2_ !== param1) {
                this._1719948670Fireball3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Fireball3", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Fireball5():Spells {
            return this._1719948672Fireball5;
        }

        public function set Fireball5(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._1719948672Fireball5;
            if (_loc2_ !== param1) {
                this._1719948672Fireball5 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Fireball5", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ForestEvent():Locations {
            return this._840128605ForestEvent;
        }

        public function set ForestEvent(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._840128605ForestEvent;
            if (_loc2_ !== param1) {
                this._840128605ForestEvent = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ForestEvent", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ForestFeast():Locations {
            return this._840541990ForestFeast;
        }

        public function set ForestFeast(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._840541990ForestFeast;
            if (_loc2_ !== param1) {
                this._840541990ForestFeast = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ForestFeast", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ForestHub():Locations {
            return this._691859592ForestHub;
        }

        public function set ForestHub(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._691859592ForestHub;
            if (_loc2_ !== param1) {
                this._691859592ForestHub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ForestHub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Fox():Species {
            return this._70831Fox;
        }

        public function set Fox(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._70831Fox;
            if (_loc2_ !== param1) {
                this._70831Fox = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Fox", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get FruitFarm():Locations {
            return this._1276758454FruitFarm;
        }

        public function set FruitFarm(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1276758454FruitFarm;
            if (_loc2_ !== param1) {
                this._1276758454FruitFarm = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "FruitFarm", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get GeneralStore():Locations {
            return this._1638114553GeneralStore;
        }

        public function set GeneralStore(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1638114553GeneralStore;
            if (_loc2_ !== param1) {
                this._1638114553GeneralStore = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GeneralStore", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get GingerbreadHouse():Locations {
            return this._98471728GingerbreadHouse;
        }

        public function set GingerbreadHouse(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._98471728GingerbreadHouse;
            if (_loc2_ !== param1) {
                this._98471728GingerbreadHouse = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GingerbreadHouse", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get GingerbreadWitch():Enemies {
            return this._112144343GingerbreadWitch;
        }

        public function set GingerbreadWitch(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._112144343GingerbreadWitch;
            if (_loc2_ !== param1) {
                this._112144343GingerbreadWitch = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GingerbreadWitch", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get GluttonSeparatist():Enemies {
            return this._1320996247GluttonSeparatist;
        }

        public function set GluttonSeparatist(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1320996247GluttonSeparatist;
            if (_loc2_ !== param1) {
                this._1320996247GluttonSeparatist = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GluttonSeparatist", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get GluttonSeparatistBoss():Enemies {
            return this._503457372GluttonSeparatistBoss;
        }

        public function set GluttonSeparatistBoss(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._503457372GluttonSeparatistBoss;
            if (_loc2_ !== param1) {
                this._503457372GluttonSeparatistBoss = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GluttonSeparatistBoss", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Goat():Species {
            return this._2224955Goat;
        }

        public function set Goat(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._2224955Goat;
            if (_loc2_ !== param1) {
                this._2224955Goat = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Goat", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get GoldStorage():HGroup {
            return this._1258477019GoldStorage;
        }

        public function set GoldStorage(param1:HGroup):void {
            var _loc2_:Object = null;
            _loc2_ = this._1258477019GoldStorage;
            if (_loc2_ !== param1) {
                this._1258477019GoldStorage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GoldStorage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get GorgedCheetah():Enemies {
            return this._1238408326GorgedCheetah;
        }

        public function set GorgedCheetah(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1238408326GorgedCheetah;
            if (_loc2_ !== param1) {
                this._1238408326GorgedCheetah = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GorgedCheetah", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Grapes():Items {
            return this._2140951720Grapes;
        }

        public function set Grapes(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._2140951720Grapes;
            if (_loc2_ !== param1) {
                this._2140951720Grapes = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Grapes", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get GrasslandsEvent():Locations {
            return this._1985456728GrasslandsEvent;
        }

        public function set GrasslandsEvent(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1985456728GrasslandsEvent;
            if (_loc2_ !== param1) {
                this._1985456728GrasslandsEvent = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GrasslandsEvent", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get GreatClub():Items {
            return this._333514557GreatClub;
        }

        public function set GreatClub(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._333514557GreatClub;
            if (_loc2_ !== param1) {
                this._333514557GreatClub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GreatClub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get GreyKangaroo():Species {
            return this._556893183GreyKangaroo;
        }

        public function set GreyKangaroo(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._556893183GreyKangaroo;
            if (_loc2_ !== param1) {
                this._556893183GreyKangaroo = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GreyKangaroo", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get GroceryStore():Locations {
            return this._269153268GroceryStore;
        }

        public function set GroceryStore(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._269153268GroceryStore;
            if (_loc2_ !== param1) {
                this._269153268GroceryStore = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GroceryStore", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get HamSandwich():Items {
            return this._200628175HamSandwich;
        }

        public function set HamSandwich(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._200628175HamSandwich;
            if (_loc2_ !== param1) {
                this._200628175HamSandwich = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HamSandwich", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Hawk():Species {
            return this._2241965Hawk;
        }

        public function set Hawk(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._2241965Hawk;
            if (_loc2_ !== param1) {
                this._2241965Hawk = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Hawk", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Heal1():Spells {
            return this._69599017Heal1;
        }

        public function set Heal1(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._69599017Heal1;
            if (_loc2_ !== param1) {
                this._69599017Heal1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Heal1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Heal2():Spells {
            return this._69599018Heal2;
        }

        public function set Heal2(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._69599018Heal2;
            if (_loc2_ !== param1) {
                this._69599018Heal2 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Heal2", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get HeavyClub():Items {
            return this._1971884547HeavyClub;
        }

        public function set HeavyClub(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1971884547HeavyClub;
            if (_loc2_ !== param1) {
                this._1971884547HeavyClub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HeavyClub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get HeavyLance():Items {
            return this._990901420HeavyLance;
        }

        public function set HeavyLance(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._990901420HeavyLance;
            if (_loc2_ !== param1) {
                this._990901420HeavyLance = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HeavyLance", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get HillsEvent():Locations {
            return this._1897535368HillsEvent;
        }

        public function set HillsEvent(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1897535368HillsEvent;
            if (_loc2_ !== param1) {
                this._1897535368HillsEvent = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HillsEvent", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get HillsHub():Locations {
            return this._1472881309HillsHub;
        }

        public function set HillsHub(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1472881309HillsHub;
            if (_loc2_ !== param1) {
                this._1472881309HillsHub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HillsHub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Hippo():Species {
            return this._69732782Hippo;
        }

        public function set Hippo(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._69732782Hippo;
            if (_loc2_ !== param1) {
                this._69732782Hippo = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Hippo", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get HoneySlime():Enemies {
            return this._1395215469HoneySlime;
        }

        public function set HoneySlime(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1395215469HoneySlime;
            if (_loc2_ !== param1) {
                this._1395215469HoneySlime = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HoneySlime", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Horse():Species {
            return this._69913533Horse;
        }

        public function set Horse(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._69913533Horse;
            if (_loc2_ !== param1) {
                this._69913533Horse = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Horse", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Hospital():Locations {
            return this._238984614Hospital;
        }

        public function set Hospital(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._238984614Hospital;
            if (_loc2_ !== param1) {
                this._238984614Hospital = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Hospital", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get HospitalDesk():Locations {
            return this._1823139821HospitalDesk;
        }

        public function set HospitalDesk(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1823139821HospitalDesk;
            if (_loc2_ !== param1) {
                this._1823139821HospitalDesk = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HospitalDesk", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get HospitalInfirmary():Locations {
            return this._774210923HospitalInfirmary;
        }

        public function set HospitalInfirmary(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._774210923HospitalInfirmary;
            if (_loc2_ !== param1) {
                this._774210923HospitalInfirmary = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HospitalInfirmary", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get HospitalOffice():Locations {
            return this._624746934HospitalOffice;
        }

        public function set HospitalOffice(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._624746934HospitalOffice;
            if (_loc2_ !== param1) {
                this._624746934HospitalOffice = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HospitalOffice", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get HuntersGarb():Items {
            return this._181983235HuntersGarb;
        }

        public function set HuntersGarb(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._181983235HuntersGarb;
            if (_loc2_ !== param1) {
                this._181983235HuntersGarb = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HuntersGarb", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Hydra():Enemies {
            return this._70197954Hydra;
        }

        public function set Hydra(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._70197954Hydra;
            if (_loc2_ !== param1) {
                this._70197954Hydra = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Hydra", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get HydraEvent():Locations {
            return this._1794782984HydraEvent;
        }

        public function set HydraEvent(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1794782984HydraEvent;
            if (_loc2_ !== param1) {
                this._1794782984HydraEvent = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HydraEvent", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get IceDamage():DamageType {
            return this._872359494IceDamage;
        }

        public function set IceDamage(param1:DamageType):void {
            var _loc2_:Object = null;
            _loc2_ = this._872359494IceDamage;
            if (_loc2_ !== param1) {
                this._872359494IceDamage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "IceDamage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get IceWand():Items {
            return this._1001457909IceWand;
        }

        public function set IceWand(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1001457909IceWand;
            if (_loc2_ !== param1) {
                this._1001457909IceWand = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "IceWand", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get InsectHive():Locations {
            return this._1765131112InsectHive;
        }

        public function set InsectHive(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1765131112InsectHive;
            if (_loc2_ !== param1) {
                this._1765131112InsectHive = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "InsectHive", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get IronfistPebbles():Items {
            return this._1499328537IronfistPebbles;
        }

        public function set IronfistPebbles(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1499328537IronfistPebbles;
            if (_loc2_ !== param1) {
                this._1499328537IronfistPebbles = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "IronfistPebbles", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get JungleEvent():Locations {
            return this._841684925JungleEvent;
        }

        public function set JungleEvent(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._841684925JungleEvent;
            if (_loc2_ !== param1) {
                this._841684925JungleEvent = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "JungleEvent", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get JungleHub():Locations {
            return this._964483368JungleHub;
        }

        public function set JungleHub(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._964483368JungleHub;
            if (_loc2_ !== param1) {
                this._964483368JungleHub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "JungleHub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LargeHealthPotion():Items {
            return this._1952427574LargeHealthPotion;
        }

        public function set LargeHealthPotion(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1952427574LargeHealthPotion;
            if (_loc2_ !== param1) {
                this._1952427574LargeHealthPotion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LargeHealthPotion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LargeManaPotion():Items {
            return this._873655349LargeManaPotion;
        }

        public function set LargeManaPotion(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._873655349LargeManaPotion;
            if (_loc2_ !== param1) {
                this._873655349LargeManaPotion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LargeManaPotion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LargeWyvernEgg():Items {
            return this._1254571811LargeWyvernEgg;
        }

        public function set LargeWyvernEgg(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1254571811LargeWyvernEgg;
            if (_loc2_ !== param1) {
                this._1254571811LargeWyvernEgg = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LargeWyvernEgg", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LeatherArmor():Items {
            return this._1636873546LeatherArmor;
        }

        public function set LeatherArmor(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1636873546LeatherArmor;
            if (_loc2_ !== param1) {
                this._1636873546LeatherArmor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LeatherArmor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LemonSlime():Enemies {
            return this._268791883LemonSlime;
        }

        public function set LemonSlime(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._268791883LemonSlime;
            if (_loc2_ !== param1) {
                this._268791883LemonSlime = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LemonSlime", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Leopard():Species {
            return this._1728291545Leopard;
        }

        public function set Leopard(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1728291545Leopard;
            if (_loc2_ !== param1) {
                this._1728291545Leopard = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Leopard", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LifeDamage():DamageType {
            return this._301979051LifeDamage;
        }

        public function set LifeDamage(param1:DamageType):void {
            var _loc2_:Object = null;
            _loc2_ = this._301979051LifeDamage;
            if (_loc2_ !== param1) {
                this._301979051LifeDamage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LifeDamage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LightClub():Items {
            return this._1605831988LightClub;
        }

        public function set LightClub(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1605831988LightClub;
            if (_loc2_ !== param1) {
                this._1605831988LightClub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LightClub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LightLance():Items {
            return this._1766793317LightLance;
        }

        public function set LightLance(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1766793317LightLance;
            if (_loc2_ !== param1) {
                this._1766793317LightLance = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LightLance", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LightningBolt1():Spells {
            return this._410464334LightningBolt1;
        }

        public function set LightningBolt1(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._410464334LightningBolt1;
            if (_loc2_ !== param1) {
                this._410464334LightningBolt1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LightningBolt1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LightningBolt3():Spells {
            return this._410464332LightningBolt3;
        }

        public function set LightningBolt3(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._410464332LightningBolt3;
            if (_loc2_ !== param1) {
                this._410464332LightningBolt3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LightningBolt3", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LightningBolt5():Spells {
            return this._410464330LightningBolt5;
        }

        public function set LightningBolt5(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._410464330LightningBolt5;
            if (_loc2_ !== param1) {
                this._410464330LightningBolt5 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LightningBolt5", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LightningDamage():DamageType {
            return this._204849849LightningDamage;
        }

        public function set LightningDamage(param1:DamageType):void {
            var _loc2_:Object = null;
            _loc2_ = this._204849849LightningDamage;
            if (_loc2_ !== param1) {
                this._204849849LightningDamage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LightningDamage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get LightningWand():Items {
            return this._1649939402LightningWand;
        }

        public function set LightningWand(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1649939402LightningWand;
            if (_loc2_ !== param1) {
                this._1649939402LightningWand = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LightningWand", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Lion():Species {
            return this._2368572Lion;
        }

        public function set Lion(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._2368572Lion;
            if (_loc2_ !== param1) {
                this._2368572Lion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Lion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MageApprenticeRobe():Items {
            return this._852474749MageApprenticeRobe;
        }

        public function set MageApprenticeRobe(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._852474749MageApprenticeRobe;
            if (_loc2_ !== param1) {
                this._852474749MageApprenticeRobe = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MageApprenticeRobe", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MageGuild():Locations {
            return this._301859455MageGuild;
        }

        public function set MageGuild(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._301859455MageGuild;
            if (_loc2_ !== param1) {
                this._301859455MageGuild = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MageGuild", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MageGuildAlteration():Locations {
            return this._2032125184MageGuildAlteration;
        }

        public function set MageGuildAlteration(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._2032125184MageGuildAlteration;
            if (_loc2_ !== param1) {
                this._2032125184MageGuildAlteration = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MageGuildAlteration", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MageGuildDestruction():Locations {
            return this._1588089969MageGuildDestruction;
        }

        public function set MageGuildDestruction(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1588089969MageGuildDestruction;
            if (_loc2_ !== param1) {
                this._1588089969MageGuildDestruction = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MageGuildDestruction", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MageGuildHall():Locations {
            return this._101217958MageGuildHall;
        }

        public function set MageGuildHall(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._101217958MageGuildHall;
            if (_loc2_ !== param1) {
                this._101217958MageGuildHall = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MageGuildHall", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MageGuildLibrary():Locations {
            return this._842023942MageGuildLibrary;
        }

        public function set MageGuildLibrary(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._842023942MageGuildLibrary;
            if (_loc2_ !== param1) {
                this._842023942MageGuildLibrary = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MageGuildLibrary", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MageGuildRestoration():Locations {
            return this._549670819MageGuildRestoration;
        }

        public function set MageGuildRestoration(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._549670819MageGuildRestoration;
            if (_loc2_ !== param1) {
                this._549670819MageGuildRestoration = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MageGuildRestoration", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MageGuildStore():Locations {
            return this._1167938528MageGuildStore;
        }

        public function set MageGuildStore(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1167938528MageGuildStore;
            if (_loc2_ !== param1) {
                this._1167938528MageGuildStore = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MageGuildStore", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MagicalFur():Enemies {
            return this._729461781MagicalFur;
        }

        public function set MagicalFur(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._729461781MagicalFur;
            if (_loc2_ !== param1) {
                this._729461781MagicalFur = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MagicalFur", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MagicalHoney():Items {
            return this._931434589MagicalHoney;
        }

        public function set MagicalHoney(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._931434589MagicalHoney;
            if (_loc2_ !== param1) {
                this._931434589MagicalHoney = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MagicalHoney", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Magpie():Species {
            return this._1997761671Magpie;
        }

        public function set Magpie(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1997761671Magpie;
            if (_loc2_ !== param1) {
                this._1997761671Magpie = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Magpie", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Male():Gender {
            return this._2390573Male;
        }

        public function set Male(param1:Gender):void {
            var _loc2_:Object = null;
            _loc2_ = this._2390573Male;
            if (_loc2_ !== param1) {
                this._2390573Male = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Male", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Manticore():Enemies {
            return this._2076005710Manticore;
        }

        public function set Manticore(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._2076005710Manticore;
            if (_loc2_ !== param1) {
                this._2076005710Manticore = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Manticore", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MarketSquare():Locations {
            return this._77598873MarketSquare;
        }

        public function set MarketSquare(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._77598873MarketSquare;
            if (_loc2_ !== param1) {
                this._77598873MarketSquare = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MarketSquare", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MeatMonster():Enemies {
            return this._380086639MeatMonster;
        }

        public function set MeatMonster(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._380086639MeatMonster;
            if (_loc2_ !== param1) {
                this._380086639MeatMonster = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MeatMonster", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MeatballSub():Items {
            return this._1434899830MeatballSub;
        }

        public function set MeatballSub(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1434899830MeatballSub;
            if (_loc2_ !== param1) {
                this._1434899830MeatballSub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MeatballSub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MediumHealthPotion():Items {
            return this._699393212MediumHealthPotion;
        }

        public function set MediumHealthPotion(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._699393212MediumHealthPotion;
            if (_loc2_ !== param1) {
                this._699393212MediumHealthPotion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MediumHealthPotion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MediumManaPotion():Items {
            return this._691719215MediumManaPotion;
        }

        public function set MediumManaPotion(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._691719215MediumManaPotion;
            if (_loc2_ !== param1) {
                this._691719215MediumManaPotion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MediumManaPotion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MilkBottle():Items {
            return this._1336621599MilkBottle;
        }

        public function set MilkBottle(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1336621599MilkBottle;
            if (_loc2_ !== param1) {
                this._1336621599MilkBottle = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MilkBottle", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MilkJug():Items {
            return this._1567596991MilkJug;
        }

        public function set MilkJug(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1567596991MilkJug;
            if (_loc2_ !== param1) {
                this._1567596991MilkJug = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MilkJug", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MilkMachine():Enemies {
            return this._2024825972MilkMachine;
        }

        public function set MilkMachine(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._2024825972MilkMachine;
            if (_loc2_ !== param1) {
                this._2024825972MilkMachine = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MilkMachine", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MountainEvent():Locations {
            return this._352266221MountainEvent;
        }

        public function set MountainEvent(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._352266221MountainEvent;
            if (_loc2_ !== param1) {
                this._352266221MountainEvent = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MountainEvent", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MountainHub():Locations {
            return this._1099070712MountainHub;
        }

        public function set MountainHub(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1099070712MountainHub;
            if (_loc2_ !== param1) {
                this._1099070712MountainHub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MountainHub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Mouse():Species {
            return this._74534021Mouse;
        }

        public function set Mouse(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._74534021Mouse;
            if (_loc2_ !== param1) {
                this._74534021Mouse = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Mouse", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get MuscleFur():Enemies {
            return this._2063846862MuscleFur;
        }

        public function set MuscleFur(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._2063846862MuscleFur;
            if (_loc2_ !== param1) {
                this._2063846862MuscleFur = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MuscleFur", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get NastyDagger():Items {
            return this._346774383NastyDagger;
        }

        public function set NastyDagger(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._346774383NastyDagger;
            if (_loc2_ !== param1) {
                this._346774383NastyDagger = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "NastyDagger", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Neutral():Gender {
            return this._785992281Neutral;
        }

        public function set Neutral(param1:Gender):void {
            var _loc2_:Object = null;
            _loc2_ = this._785992281Neutral;
            if (_loc2_ !== param1) {
                this._785992281Neutral = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Neutral", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Oats():Items {
            return this._2450417Oats;
        }

        public function set Oats(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._2450417Oats;
            if (_loc2_ !== param1) {
                this._2450417Oats = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Oats", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ObeseBear():Enemies {
            return this._772992120ObeseBear;
        }

        public function set ObeseBear(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._772992120ObeseBear;
            if (_loc2_ !== param1) {
                this._772992120ObeseBear = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ObeseBear", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ObsidianSpear():Items {
            return this._216375778ObsidianSpear;
        }

        public function set ObsidianSpear(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._216375778ObsidianSpear;
            if (_loc2_ !== param1) {
                this._216375778ObsidianSpear = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ObsidianSpear", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get OceanEvent():Locations {
            return this._2146210908OceanEvent;
        }

        public function set OceanEvent(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._2146210908OceanEvent;
            if (_loc2_ !== param1) {
                this._2146210908OceanEvent = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "OceanEvent", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get OceanHub():Locations {
            return this._896089911OceanHub;
        }

        public function set OceanHub(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._896089911OceanHub;
            if (_loc2_ !== param1) {
                this._896089911OceanHub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "OceanHub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get OddCookie():Items {
            return this._2007491667OddCookie;
        }

        public function set OddCookie(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._2007491667OddCookie;
            if (_loc2_ !== param1) {
                this._2007491667OddCookie = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "OddCookie", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Orca():Species {
            return this._2466209Orca;
        }

        public function set Orca(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._2466209Orca;
            if (_loc2_ !== param1) {
                this._2466209Orca = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Orca", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Otter():Species {
            return this._76528636Otter;
        }

        public function set Otter(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._76528636Otter;
            if (_loc2_ !== param1) {
                this._76528636Otter = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Otter", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Owl():Species {
            return this._79716Owl;
        }

        public function set Owl(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._79716Owl;
            if (_loc2_ !== param1) {
                this._79716Owl = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Owl", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get PaintedDog():Species {
            return this._1495648609PaintedDog;
        }

        public function set PaintedDog(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1495648609PaintedDog;
            if (_loc2_ !== param1) {
                this._1495648609PaintedDog = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "PaintedDog", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Panda():Species {
            return this._76880314Panda;
        }

        public function set Panda(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._76880314Panda;
            if (_loc2_ !== param1) {
                this._76880314Panda = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Panda", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Panther():Species {
            return this._868024350Panther;
        }

        public function set Panther(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._868024350Panther;
            if (_loc2_ !== param1) {
                this._868024350Panther = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Panther", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Pantsless():Items {
            return this._958103381Pantsless;
        }

        public function set Pantsless(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._958103381Pantsless;
            if (_loc2_ !== param1) {
                this._958103381Pantsless = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Pantsless", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Penguin():Species {
            return this._982166284Penguin;
        }

        public function set Penguin(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._982166284Penguin;
            if (_loc2_ !== param1) {
                this._982166284Penguin = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Penguin", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get PiercingDamage():DamageType {
            return this._1835622900PiercingDamage;
        }

        public function set PiercingDamage(param1:DamageType):void {
            var _loc2_:Object = null;
            _loc2_ = this._1835622900PiercingDamage;
            if (_loc2_ !== param1) {
                this._1835622900PiercingDamage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "PiercingDamage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Pig():Species {
            return this._80238Pig;
        }

        public function set Pig(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._80238Pig;
            if (_loc2_ !== param1) {
                this._80238Pig = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Pig", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get PlatemailArmor():Items {
            return this._478646382PlatemailArmor;
        }

        public function set PlatemailArmor(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._478646382PlatemailArmor;
            if (_loc2_ !== param1) {
                this._478646382PlatemailArmor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "PlatemailArmor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get QueensSting():Items {
            return this._1061783368QueensSting;
        }

        public function set QueensSting(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1061783368QueensSting;
            if (_loc2_ !== param1) {
                this._1061783368QueensSting = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "QueensSting", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Rabbit():Species {
            return this._1854778310Rabbit;
        }

        public function set Rabbit(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1854778310Rabbit;
            if (_loc2_ !== param1) {
                this._1854778310Rabbit = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Rabbit", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Raccoon():Species {
            return this._1662593729Raccoon;
        }

        public function set Raccoon(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1662593729Raccoon;
            if (_loc2_ !== param1) {
                this._1662593729Raccoon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Raccoon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Rapier():Items {
            return this._1854354635Rapier;
        }

        public function set Rapier(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1854354635Rapier;
            if (_loc2_ !== param1) {
                this._1854354635Rapier = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Rapier", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Rat():Species {
            return this._81925Rat;
        }

        public function set Rat(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._81925Rat;
            if (_loc2_ !== param1) {
                this._81925Rat = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Rat", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Raven():Species {
            return this._78735088Raven;
        }

        public function set Raven(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._78735088Raven;
            if (_loc2_ !== param1) {
                this._78735088Raven = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Raven", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get RedKangaroo():Species {
            return this._951661425RedKangaroo;
        }

        public function set RedKangaroo(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._951661425RedKangaroo;
            if (_loc2_ !== param1) {
                this._951661425RedKangaroo = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "RedKangaroo", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get RedSwimShirt():Items {
            return this._1860079325RedSwimShirt;
        }

        public function set RedSwimShirt(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1860079325RedSwimShirt;
            if (_loc2_ !== param1) {
                this._1860079325RedSwimShirt = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "RedSwimShirt", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Regenerate2():Spells {
            return this._592804970Regenerate2;
        }

        public function set Regenerate2(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._592804970Regenerate2;
            if (_loc2_ !== param1) {
                this._592804970Regenerate2 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Regenerate2", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Restaurant():Locations {
            return this._220997469Restaurant;
        }

        public function set Restaurant(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._220997469Restaurant;
            if (_loc2_ !== param1) {
                this._220997469Restaurant = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Restaurant", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Rhino():Species {
            return this._78931412Rhino;
        }

        public function set Rhino(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._78931412Rhino;
            if (_loc2_ !== param1) {
                this._78931412Rhino = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Rhino", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Robin():Species {
            return this._79133066Robin;
        }

        public function set Robin(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._79133066Robin;
            if (_loc2_ !== param1) {
                this._79133066Robin = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Robin", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get RoyalGuardWasp():Enemies {
            return this._1288204229RoyalGuardWasp;
        }

        public function set RoyalGuardWasp(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1288204229RoyalGuardWasp;
            if (_loc2_ !== param1) {
                this._1288204229RoyalGuardWasp = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "RoyalGuardWasp", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get RoyalJelly():Items {
            return this._1785381175RoyalJelly;
        }

        public function set RoyalJelly(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1785381175RoyalJelly;
            if (_loc2_ !== param1) {
                this._1785381175RoyalJelly = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "RoyalJelly", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SandMound():Locations {
            return this._662348347SandMound;
        }

        public function set SandMound(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._662348347SandMound;
            if (_loc2_ !== param1) {
                this._662348347SandMound = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SandMound", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SandSnake():Enemies {
            return this._656856324SandSnake;
        }

        public function set SandSnake(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._656856324SandSnake;
            if (_loc2_ !== param1) {
                this._656856324SandSnake = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SandSnake", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SandyBox():Items {
            return this._2058111286SandyBox;
        }

        public function set SandyBox(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._2058111286SandyBox;
            if (_loc2_ !== param1) {
                this._2058111286SandyBox = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SandyBox", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Sausage():Items {
            return this._758003725Sausage;
        }

        public function set Sausage(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._758003725Sausage;
            if (_loc2_ !== param1) {
                this._758003725Sausage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Sausage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SegmentataArmor():Items {
            return this._1589564260SegmentataArmor;
        }

        public function set SegmentataArmor(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1589564260SegmentataArmor;
            if (_loc2_ !== param1) {
                this._1589564260SegmentataArmor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SegmentataArmor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Shark():Species {
            return this._79847365Shark;
        }

        public function set Shark(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._79847365Shark;
            if (_loc2_ !== param1) {
                this._79847365Shark = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Shark", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Shirtless():Items {
            return this._1053408145Shirtless;
        }

        public function set Shirtless(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1053408145Shirtless;
            if (_loc2_ !== param1) {
                this._1053408145Shirtless = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Shirtless", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ShortSword():Items {
            return this._746509567ShortSword;
        }

        public function set ShortSword(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._746509567ShortSword;
            if (_loc2_ !== param1) {
                this._746509567ShortSword = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ShortSword", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SirensEvent():Locations {
            return this._37501812SirensEvent;
        }

        public function set SirensEvent(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._37501812SirensEvent;
            if (_loc2_ !== param1) {
                this._37501812SirensEvent = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SirensEvent", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Skirt():Items {
            return this._79944435Skirt;
        }

        public function set Skirt(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._79944435Skirt;
            if (_loc2_ !== param1) {
                this._79944435Skirt = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Skirt", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Skunk():Species {
            return this._79955834Skunk;
        }

        public function set Skunk(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._79955834Skunk;
            if (_loc2_ !== param1) {
                this._79955834Skunk = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Skunk", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SlashingDamage():DamageType {
            return this._437855540SlashingDamage;
        }

        public function set SlashingDamage(param1:DamageType):void {
            var _loc2_:Object = null;
            _loc2_ = this._437855540SlashingDamage;
            if (_loc2_ !== param1) {
                this._437855540SlashingDamage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SlashingDamage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SmallHealthPotion():Items {
            return this._1249106326SmallHealthPotion;
        }

        public function set SmallHealthPotion(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1249106326SmallHealthPotion;
            if (_loc2_ !== param1) {
                this._1249106326SmallHealthPotion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SmallHealthPotion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SmallManaPotion():Items {
            return this._1585580287SmallManaPotion;
        }

        public function set SmallManaPotion(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1585580287SmallManaPotion;
            if (_loc2_ !== param1) {
                this._1585580287SmallManaPotion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SmallManaPotion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Smarty():Enemies {
            return this._1815080976Smarty;
        }

        public function set Smarty(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1815080976Smarty;
            if (_loc2_ !== param1) {
                this._1815080976Smarty = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Smarty", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SnakeVenom():Items {
            return this._319362173SnakeVenom;
        }

        public function set SnakeVenom(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._319362173SnakeVenom;
            if (_loc2_ !== param1) {
                this._319362173SnakeVenom = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SnakeVenom", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Snookums():Enemies {
            return this._749177003Snookums;
        }

        public function set Snookums(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._749177003Snookums;
            if (_loc2_ !== param1) {
                this._749177003Snookums = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Snookums", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SoldierAnt():Enemies {
            return this._1285892827SoldierAnt;
        }

        public function set SoldierAnt(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1285892827SoldierAnt;
            if (_loc2_ !== param1) {
                this._1285892827SoldierAnt = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SoldierAnt", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SouthCityGates():Locations {
            return this._327665456SouthCityGates;
        }

        public function set SouthCityGates(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._327665456SouthCityGates;
            if (_loc2_ !== param1) {
                this._327665456SouthCityGates = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SouthCityGates", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SouthRoad():Locations {
            return this._366882413SouthRoad;
        }

        public function set SouthRoad(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._366882413SouthRoad;
            if (_loc2_ !== param1) {
                this._366882413SouthRoad = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SouthRoad", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SouthernSquare():Locations {
            return this._274449711SouthernSquare;
        }

        public function set SouthernSquare(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._274449711SouthernSquare;
            if (_loc2_ !== param1) {
                this._274449711SouthernSquare = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SouthernSquare", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Spear():Items {
            return this._80089017Spear;
        }

        public function set Spear(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._80089017Spear;
            if (_loc2_ !== param1) {
                this._80089017Spear = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Spear", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SpectrumGem():Items {
            return this._1831188066SpectrumGem;
        }

        public function set SpectrumGem(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1831188066SpectrumGem;
            if (_loc2_ !== param1) {
                this._1831188066SpectrumGem = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SpectrumGem", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SphericalShark():Enemies {
            return this._3841112SphericalShark;
        }

        public function set SphericalShark(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._3841112SphericalShark;
            if (_loc2_ !== param1) {
                this._3841112SphericalShark = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SphericalShark", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SplintArmor():Items {
            return this._752173793SplintArmor;
        }

        public function set SplintArmor(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._752173793SplintArmor;
            if (_loc2_ !== param1) {
                this._752173793SplintArmor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SplintArmor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Squirrel():Species {
            return this._716840071Squirrel;
        }

        public function set Squirrel(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._716840071Squirrel;
            if (_loc2_ !== param1) {
                this._716840071Squirrel = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Squirrel", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get StarHammer():Items {
            return this._837721128StarHammer;
        }

        public function set StarHammer(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._837721128StarHammer;
            if (_loc2_ !== param1) {
                this._837721128StarHammer = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "StarHammer", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Steak():Items {
            return this._80208174Steak;
        }

        public function set Steak(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._80208174Steak;
            if (_loc2_ !== param1) {
                this._80208174Steak = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Steak", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get StoreRoom():Locations {
            return this._599083716StoreRoom;
        }

        public function set StoreRoom(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._599083716StoreRoom;
            if (_loc2_ !== param1) {
                this._599083716StoreRoom = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "StoreRoom", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get StoreRoomOwner():Enemies {
            return this._1978518825StoreRoomOwner;
        }

        public function set StoreRoomOwner(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1978518825StoreRoomOwner;
            if (_loc2_ !== param1) {
                this._1978518825StoreRoomOwner = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "StoreRoomOwner", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Strawberries():Items {
            return this._696249933Strawberries;
        }

        public function set Strawberries(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._696249933Strawberries;
            if (_loc2_ !== param1) {
                this._696249933Strawberries = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Strawberries", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get StretchyFruit():Items {
            return this._720660032StretchyFruit;
        }

        public function set StretchyFruit(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._720660032StretchyFruit;
            if (_loc2_ !== param1) {
                this._720660032StretchyFruit = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "StretchyFruit", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get StretchySeaweed():Items {
            return this._673041432StretchySeaweed;
        }

        public function set StretchySeaweed(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._673041432StretchySeaweed;
            if (_loc2_ !== param1) {
                this._673041432StretchySeaweed = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "StretchySeaweed", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get SyrupVine():Enemies {
            return this._2011263343SyrupVine;
        }

        public function set SyrupVine(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._2011263343SyrupVine;
            if (_loc2_ !== param1) {
                this._2011263343SyrupVine = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "SyrupVine", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Tailor():Locations {
            return this._1797301677Tailor;
        }

        public function set Tailor(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1797301677Tailor;
            if (_loc2_ !== param1) {
                this._1797301677Tailor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Tailor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get TeacherAlteration():Vendors {
            return this._1674710529TeacherAlteration;
        }

        public function set TeacherAlteration(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._1674710529TeacherAlteration;
            if (_loc2_ !== param1) {
                this._1674710529TeacherAlteration = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "TeacherAlteration", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get TeacherDestruction():Vendors {
            return this._901829744TeacherDestruction;
        }

        public function set TeacherDestruction(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._901829744TeacherDestruction;
            if (_loc2_ !== param1) {
                this._901829744TeacherDestruction = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "TeacherDestruction", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get TeacherDinosaur():Vendors {
            return this._495402669TeacherDinosaur;
        }

        public function set TeacherDinosaur(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._495402669TeacherDinosaur;
            if (_loc2_ !== param1) {
                this._495402669TeacherDinosaur = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "TeacherDinosaur", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get TeacherRestoration():Vendors {
            return this._1255376764TeacherRestoration;
        }

        public function set TeacherRestoration(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._1255376764TeacherRestoration;
            if (_loc2_ !== param1) {
                this._1255376764TeacherRestoration = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "TeacherRestoration", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get TeacherSmarty():Vendors {
            return this._1994581454TeacherSmarty;
        }

        public function set TeacherSmarty(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._1994581454TeacherSmarty;
            if (_loc2_ !== param1) {
                this._1994581454TeacherSmarty = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "TeacherSmarty", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get TestArea():Locations {
            return this._1082698657TestArea;
        }

        public function set TestArea(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1082698657TestArea;
            if (_loc2_ !== param1) {
                this._1082698657TestArea = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "TestArea", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get TestEnemy():Enemies {
            return this._799655414TestEnemy;
        }

        public function set TestEnemy(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._799655414TestEnemy;
            if (_loc2_ !== param1) {
                this._799655414TestEnemy = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "TestEnemy", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Thief():Enemies {
            return this._80778166Thief;
        }

        public function set Thief(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._80778166Thief;
            if (_loc2_ !== param1) {
                this._80778166Thief = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Thief", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ThinFur():Enemies {
            return this._318647306ThinFur;
        }

        public function set ThinFur(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._318647306ThinFur;
            if (_loc2_ !== param1) {
                this._318647306ThinFur = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ThinFur", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ThunderboltSpear():Items {
            return this._1398042112ThunderboltSpear;
        }

        public function set ThunderboltSpear(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1398042112ThunderboltSpear;
            if (_loc2_ !== param1) {
                this._1398042112ThunderboltSpear = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ThunderboltSpear", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Tiger():Species {
            return this._80806047Tiger;
        }

        public function set Tiger(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._80806047Tiger;
            if (_loc2_ !== param1) {
                this._80806047Tiger = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Tiger", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ToughFur():Enemies {
            return this._751223832ToughFur;
        }

        public function set ToughFur(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._751223832ToughFur;
            if (_loc2_ !== param1) {
                this._751223832ToughFur = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ToughFur", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get TrainingGrounds():Locations {
            return this._1168124558TrainingGrounds;
        }

        public function set TrainingGrounds(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1168124558TrainingGrounds;
            if (_loc2_ !== param1) {
                this._1168124558TrainingGrounds = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "TrainingGrounds", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get TreasureChest():Items {
            return this._1368414578TreasureChest;
        }

        public function set TreasureChest(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1368414578TreasureChest;
            if (_loc2_ !== param1) {
                this._1368414578TreasureChest = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "TreasureChest", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Trident():Items {
            return this._604670482Trident;
        }

        public function set Trident(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._604670482Trident;
            if (_loc2_ !== param1) {
                this._604670482Trident = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Trident", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Trousers():Items {
            return this._1752798999Trousers;
        }

        public function set Trousers(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1752798999Trousers;
            if (_loc2_ !== param1) {
                this._1752798999Trousers = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Trousers", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Tunic():Items {
            return this._81170375Tunic;
        }

        public function set Tunic(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._81170375Tunic;
            if (_loc2_ !== param1) {
                this._81170375Tunic = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Tunic", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get TuxedoJacket():Items {
            return this._1680726905TuxedoJacket;
        }

        public function set TuxedoJacket(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1680726905TuxedoJacket;
            if (_loc2_ !== param1) {
                this._1680726905TuxedoJacket = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "TuxedoJacket", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get TuxedoPants():Items {
            return this._1752450307TuxedoPants;
        }

        public function set TuxedoPants(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1752450307TuxedoPants;
            if (_loc2_ !== param1) {
                this._1752450307TuxedoPants = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "TuxedoPants", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get UI():Group {
            return this._2708UI;
        }

        public function set UI(param1:Group):void {
            var _loc2_:Object = null;
            _loc2_ = this._2708UI;
            if (_loc2_ !== param1) {
                this._2708UI = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "UI", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get UnidentifiedGem():Items {
            return this._85346971UnidentifiedGem;
        }

        public function set UnidentifiedGem(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._85346971UnidentifiedGem;
            if (_loc2_ !== param1) {
                this._85346971UnidentifiedGem = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "UnidentifiedGem", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Vest():Items {
            return this._2662768Vest;
        }

        public function set Vest(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._2662768Vest;
            if (_loc2_ !== param1) {
                this._2662768Vest = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Vest", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get VoidOnyx():Items {
            return this._1907597038VoidOnyx;
        }

        public function set VoidOnyx(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1907597038VoidOnyx;
            if (_loc2_ !== param1) {
                this._1907597038VoidOnyx = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "VoidOnyx", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Wall():Locations {
            return this._2688490Wall;
        }

        public function set Wall(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._2688490Wall;
            if (_loc2_ !== param1) {
                this._2688490Wall = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Wall", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Warhammer():Items {
            return this._85735310Warhammer;
        }

        public function set Warhammer(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._85735310Warhammer;
            if (_loc2_ !== param1) {
                this._85735310Warhammer = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Warhammer", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WaterElemental():Enemies {
            return this._1921233680WaterElemental;
        }

        public function set WaterElemental(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1921233680WaterElemental;
            if (_loc2_ !== param1) {
                this._1921233680WaterElemental = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WaterElemental", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WaterFlask():Items {
            return this._363418308WaterFlask;
        }

        public function set WaterFlask(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._363418308WaterFlask;
            if (_loc2_ !== param1) {
                this._363418308WaterFlask = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WaterFlask", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WaterJug():Items {
            return this._611915781WaterJug;
        }

        public function set WaterJug(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._611915781WaterJug;
            if (_loc2_ !== param1) {
                this._611915781WaterJug = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WaterJug", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Watermelon():Items {
            return this._327599076Watermelon;
        }

        public function set Watermelon(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._327599076Watermelon;
            if (_loc2_ !== param1) {
                this._327599076Watermelon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Watermelon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Weaponless():Items {
            return this._928263723Weaponless;
        }

        public function set Weaponless(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._928263723Weaponless;
            if (_loc2_ !== param1) {
                this._928263723Weaponless = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Weaponless", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WeirdBerry():Items {
            return this._1548572777WeirdBerry;
        }

        public function set WeirdBerry(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1548572777WeirdBerry;
            if (_loc2_ !== param1) {
                this._1548572777WeirdBerry = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WeirdBerry", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WestCityGates():Locations {
            return this._540470962WestCityGates;
        }

        public function set WestCityGates(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._540470962WestCityGates;
            if (_loc2_ !== param1) {
                this._540470962WestCityGates = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WestCityGates", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WestRoad():Locations {
            return this._148731505WestRoad;
        }

        public function set WestRoad(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._148731505WestRoad;
            if (_loc2_ !== param1) {
                this._148731505WestRoad = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WestRoad", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WestTownGates():Locations {
            return this._1282875257WestTownGates;
        }

        public function set WestTownGates(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1282875257WestTownGates;
            if (_loc2_ !== param1) {
                this._1282875257WestTownGates = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WestTownGates", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WestTownHub():Locations {
            return this._953287628WestTownHub;
        }

        public function set WestTownHub(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._953287628WestTownHub;
            if (_loc2_ !== param1) {
                this._953287628WestTownHub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WestTownHub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WestTownInn():Locations {
            return this._953286872WestTownInn;
        }

        public function set WestTownInn(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._953286872WestTownInn;
            if (_loc2_ !== param1) {
                this._953286872WestTownInn = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WestTownInn", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WestTownStore():Locations {
            return this._1271231392WestTownStore;
        }

        public function set WestTownStore(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1271231392WestTownStore;
            if (_loc2_ !== param1) {
                this._1271231392WestTownStore = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WestTownStore", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WesternSquare():Locations {
            return this._1142586129WesternSquare;
        }

        public function set WesternSquare(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1142586129WesternSquare;
            if (_loc2_ !== param1) {
                this._1142586129WesternSquare = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WesternSquare", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Wildling():Enemies {
            return this._1108095264Wildling;
        }

        public function set Wildling(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1108095264Wildling;
            if (_loc2_ !== param1) {
                this._1108095264Wildling = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Wildling", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WildlingRitualist():Enemies {
            return this._75410041WildlingRitualist;
        }

        public function set WildlingRitualist(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._75410041WildlingRitualist;
            if (_loc2_ !== param1) {
                this._75410041WildlingRitualist = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WildlingRitualist", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WizardStaff():Items {
            return this._247062549WizardStaff;
        }

        public function set WizardStaff(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._247062549WizardStaff;
            if (_loc2_ !== param1) {
                this._247062549WizardStaff = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WizardStaff", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WizardTower():Locations {
            return this._247858238WizardTower;
        }

        public function set WizardTower(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._247858238WizardTower;
            if (_loc2_ !== param1) {
                this._247858238WizardTower = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WizardTower", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WizardsRobes():Items {
            return this._45849141WizardsRobes;
        }

        public function set WizardsRobes(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._45849141WizardsRobes;
            if (_loc2_ !== param1) {
                this._45849141WizardsRobes = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WizardsRobes", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get Wolf():Species {
            return this._2701938Wolf;
        }

        public function set Wolf(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._2701938Wolf;
            if (_loc2_ !== param1) {
                this._2701938Wolf = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Wolf", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get WyvernCave():Locations {
            return this._1566279590WyvernCave;
        }

        public function set WyvernCave(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1566279590WyvernCave;
            if (_loc2_ !== param1) {
                this._1566279590WyvernCave = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "WyvernCave", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get YourHouse():Locations {
            return this._1973850483YourHouse;
        }

        public function set YourHouse(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1973850483YourHouse;
            if (_loc2_ !== param1) {
                this._1973850483YourHouse = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "YourHouse", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get _Main_GridItem75():GridItem {
            return this._1130434590_Main_GridItem75;
        }

        public function set _Main_GridItem75(param1:GridItem):void {
            var _loc2_:Object = null;
            _loc2_ = this._1130434590_Main_GridItem75;
            if (_loc2_ !== param1) {
                this._1130434590_Main_GridItem75 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "_Main_GridItem75", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get _Main_GridItem76():GridItem {
            return this._1130434591_Main_GridItem76;
        }

        public function set _Main_GridItem76(param1:GridItem):void {
            var _loc2_:Object = null;
            _loc2_ = this._1130434591_Main_GridItem76;
            if (_loc2_ !== param1) {
                this._1130434591_Main_GridItem76 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "_Main_GridItem76", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get _Main_GridRow21():GridRow {
            return this._875927820_Main_GridRow21;
        }

        public function set _Main_GridRow21(param1:GridRow):void {
            var _loc2_:Object = null;
            _loc2_ = this._875927820_Main_GridRow21;
            if (_loc2_ !== param1) {
                this._875927820_Main_GridRow21 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "_Main_GridRow21", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get actions():Grid {
            return this._1161803523actions;
        }

        public function set actions(param1:Grid):void {
            var _loc2_:Object = null;
            _loc2_ = this._1161803523actions;
            if (_loc2_ !== param1) {
                this._1161803523actions = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "actions", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get allGold():Button {
            return this._912542303allGold;
        }

        public function set allGold(param1:Button):void {
            var _loc2_:Object = null;
            _loc2_ = this._912542303allGold;
            if (_loc2_ !== param1) {
                this._912542303allGold = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "allGold", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get alphaWolf():Locations {
            return this._593556272alphaWolf;
        }

        public function set alphaWolf(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._593556272alphaWolf;
            if (_loc2_ !== param1) {
                this._593556272alphaWolf = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "alphaWolf", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ampleApple():Items {
            return this._616418077ampleApple;
        }

        public function set ampleApple(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._616418077ampleApple;
            if (_loc2_ !== param1) {
                this._616418077ampleApple = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ampleApple", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get anacondaBoss():Enemies {
            return this._1082810936anacondaBoss;
        }

        public function set anacondaBoss(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1082810936anacondaBoss;
            if (_loc2_ !== param1) {
                this._1082810936anacondaBoss = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "anacondaBoss", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get anacondaBossFight():Locations {
            return this._608041144anacondaBossFight;
        }

        public function set anacondaBossFight(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._608041144anacondaBossFight;
            if (_loc2_ !== param1) {
                this._608041144anacondaBossFight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "anacondaBossFight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get antidotePotion():Items {
            return this._709710383antidotePotion;
        }

        public function set antidotePotion(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._709710383antidotePotion;
            if (_loc2_ !== param1) {
                this._709710383antidotePotion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "antidotePotion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get apatosaurus():Species {
            return this._1147039638apatosaurus;
        }

        public function set apatosaurus(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1147039638apatosaurus;
            if (_loc2_ !== param1) {
                this._1147039638apatosaurus = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "apatosaurus", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get backGround():Image {
            return this._2046640462backGround;
        }

        public function set backGround(param1:Image):void {
            var _loc2_:Object = null;
            _loc2_ = this._2046640462backGround;
            if (_loc2_ !== param1) {
                this._2046640462backGround = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "backGround", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get battle():Defeats {
            return this._1396158280battle;
        }

        public function set battle(param1:Defeats):void {
            var _loc2_:Object = null;
            _loc2_ = this._1396158280battle;
            if (_loc2_ !== param1) {
                this._1396158280battle = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "battle", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get beach():Zones {
            return this._93610339beach;
        }

        public function set beach(param1:Zones):void {
            var _loc2_:Object = null;
            _loc2_ = this._93610339beach;
            if (_loc2_ !== param1) {
                this._93610339beach = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "beach", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get beefStew():Items {
            return this._1428610327beefStew;
        }

        public function set beefStew(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1428610327beefStew;
            if (_loc2_ !== param1) {
                this._1428610327beefStew = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "beefStew", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get bigSteak():Items {
            return this._724337710bigSteak;
        }

        public function set bigSteak(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._724337710bigSteak;
            if (_loc2_ !== param1) {
                this._724337710bigSteak = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "bigSteak", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get blackBear():Species {
            return this._1331757139blackBear;
        }

        public function set blackBear(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1331757139blackBear;
            if (_loc2_ !== param1) {
                this._1331757139blackBear = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "blackBear", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get blackDragon():Species {
            return this._12386574blackDragon;
        }

        public function set blackDragon(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._12386574blackDragon;
            if (_loc2_ !== param1) {
                this._12386574blackDragon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "blackDragon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get blank():Locations {
            return this._93819220blank;
        }

        public function set blank(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._93819220blank;
            if (_loc2_ !== param1) {
                this._93819220blank = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "blank", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get bloatedBlueberry():Items {
            return this._611059141bloatedBlueberry;
        }

        public function set bloatedBlueberry(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._611059141bloatedBlueberry;
            if (_loc2_ !== param1) {
                this._611059141bloatedBlueberry = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "bloatedBlueberry", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get blueDragon():Species {
            return this._466047219blueDragon;
        }

        public function set blueDragon(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._466047219blueDragon;
            if (_loc2_ !== param1) {
                this._466047219blueDragon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "blueDragon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get blueSlimeItem():Items {
            return this._1374240449blueSlimeItem;
        }

        public function set blueSlimeItem(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1374240449blueSlimeItem;
            if (_loc2_ !== param1) {
                this._1374240449blueSlimeItem = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "blueSlimeItem", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get breadLoaf():Items {
            return this._1904650752breadLoaf;
        }

        public function set breadLoaf(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1904650752breadLoaf;
            if (_loc2_ !== param1) {
                this._1904650752breadLoaf = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "breadLoaf", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get brownBear():Species {
            return this._980779510brownBear;
        }

        public function set brownBear(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._980779510brownBear;
            if (_loc2_ !== param1) {
                this._980779510brownBear = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "brownBear", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get button1():WrapButton {
            return this._241352511button1;
        }

        public function set button1(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._241352511button1;
            if (_loc2_ !== param1) {
                this._241352511button1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "button1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get button2():WrapButton {
            return this._241352512button2;
        }

        public function set button2(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._241352512button2;
            if (_loc2_ !== param1) {
                this._241352512button2 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "button2", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get button3():WrapButton {
            return this._241352513button3;
        }

        public function set button3(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._241352513button3;
            if (_loc2_ !== param1) {
                this._241352513button3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "button3", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get button4():WrapButton {
            return this._241352514button4;
        }

        public function set button4(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._241352514button4;
            if (_loc2_ !== param1) {
                this._241352514button4 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "button4", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get button5():WrapButton {
            return this._241352515button5;
        }

        public function set button5(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._241352515button5;
            if (_loc2_ !== param1) {
                this._241352515button5 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "button5", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get button6():WrapButton {
            return this._241352516button6;
        }

        public function set button6(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._241352516button6;
            if (_loc2_ !== param1) {
                this._241352516button6 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "button6", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get button7():WrapButton {
            return this._241352517button7;
        }

        public function set button7(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._241352517button7;
            if (_loc2_ !== param1) {
                this._241352517button7 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "button7", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get button8():WrapButton {
            return this._241352518button8;
        }

        public function set button8(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._241352518button8;
            if (_loc2_ !== param1) {
                this._241352518button8 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "button8", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get button9():WrapButton {
            return this._241352519button9;
        }

        public function set button9(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._241352519button9;
            if (_loc2_ !== param1) {
                this._241352519button9 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "button9", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get buttonPanel():Group {
            return this._1773821454buttonPanel;
        }

        public function set buttonPanel(param1:Group):void {
            var _loc2_:Object = null;
            _loc2_ = this._1773821454buttonPanel;
            if (_loc2_ !== param1) {
                this._1773821454buttonPanel = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonPanel", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cabalCauldron():Items {
            return this._1278056433cabalCauldron;
        }

        public function set cabalCauldron(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1278056433cabalCauldron;
            if (_loc2_ !== param1) {
                this._1278056433cabalCauldron = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cabalCauldron", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cabalDragon():Enemies {
            return this._241706466cabalDragon;
        }

        public function set cabalDragon(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._241706466cabalDragon;
            if (_loc2_ !== param1) {
                this._241706466cabalDragon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cabalDragon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cabalDragonRobe():Items {
            return this._1335535550cabalDragonRobe;
        }

        public function set cabalDragonRobe(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1335535550cabalDragonRobe;
            if (_loc2_ !== param1) {
                this._1335535550cabalDragonRobe = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cabalDragonRobe", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cabalMap():Items {
            return this._468391955cabalMap;
        }

        public function set cabalMap(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._468391955cabalMap;
            if (_loc2_ !== param1) {
                this._468391955cabalMap = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cabalMap", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cabalRogue():Quests {
            return this._851927083cabalRogue;
        }

        public function set cabalRogue(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._851927083cabalRogue;
            if (_loc2_ !== param1) {
                this._851927083cabalRogue = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cabalRogue", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cabalRogueBossFight():Locations {
            return this._1607948472cabalRogueBossFight;
        }

        public function set cabalRogueBossFight(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1607948472cabalRogueBossFight;
            if (_loc2_ !== param1) {
                this._1607948472cabalRogueBossFight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cabalRogueBossFight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cabalTownMap():Items {
            return this._152728443cabalTownMap;
        }

        public function set cabalTownMap(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._152728443cabalTownMap;
            if (_loc2_ !== param1) {
                this._152728443cabalTownMap = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cabalTownMap", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get calamari():Items {
            return this._182050914calamari;
        }

        public function set calamari(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._182050914calamari;
            if (_loc2_ !== param1) {
                this._182050914calamari = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "calamari", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheatAgility():spark.components.TextInput {
            return this._1002315762cheatAgility;
        }

        public function set cheatAgility(param1:spark.components.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1002315762cheatAgility;
            if (_loc2_ !== param1) {
                this._1002315762cheatAgility = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheatAgility", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheatCancel():WrapButton {
            return this._499832109cheatCancel;
        }

        public function set cheatCancel(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._499832109cheatCancel;
            if (_loc2_ !== param1) {
                this._499832109cheatCancel = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheatCancel", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheatDone():WrapButton {
            return this._349166325cheatDone;
        }

        public function set cheatDone(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._349166325cheatDone;
            if (_loc2_ !== param1) {
                this._349166325cheatDone = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheatDone", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheatEndurance():spark.components.TextInput {
            return this._1950509684cheatEndurance;
        }

        public function set cheatEndurance(param1:spark.components.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1950509684cheatEndurance;
            if (_loc2_ !== param1) {
                this._1950509684cheatEndurance = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheatEndurance", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheatFat():spark.components.TextInput {
            return this._1535285574cheatFat;
        }

        public function set cheatFat(param1:spark.components.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1535285574cheatFat;
            if (_loc2_ !== param1) {
                this._1535285574cheatFat = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheatFat", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheatGold():spark.components.TextInput {
            return this._349255635cheatGold;
        }

        public function set cheatGold(param1:spark.components.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._349255635cheatGold;
            if (_loc2_ !== param1) {
                this._349255635cheatGold = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheatGold", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheatHealth():spark.components.TextInput {
            return this._646293775cheatHealth;
        }

        public function set cheatHealth(param1:spark.components.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._646293775cheatHealth;
            if (_loc2_ !== param1) {
                this._646293775cheatHealth = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheatHealth", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheatIntelligence():spark.components.TextInput {
            return this._709366578cheatIntelligence;
        }

        public function set cheatIntelligence(param1:spark.components.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._709366578cheatIntelligence;
            if (_loc2_ !== param1) {
                this._709366578cheatIntelligence = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheatIntelligence", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheatOptions():VGroup {
            return this._810202699cheatOptions;
        }

        public function set cheatOptions(param1:VGroup):void {
            var _loc2_:Object = null;
            _loc2_ = this._810202699cheatOptions;
            if (_loc2_ !== param1) {
                this._810202699cheatOptions = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheatOptions", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheatStomach():spark.components.TextInput {
            return this._175254484cheatStomach;
        }

        public function set cheatStomach(param1:spark.components.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._175254484cheatStomach;
            if (_loc2_ !== param1) {
                this._175254484cheatStomach = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheatStomach", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheatStrength():spark.components.TextInput {
            return this._1216812596cheatStrength;
        }

        public function set cheatStrength(param1:spark.components.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1216812596cheatStrength;
            if (_loc2_ !== param1) {
                this._1216812596cheatStrength = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheatStrength", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheese():Items {
            return this._1361525545cheese;
        }

        public function set cheese(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1361525545cheese;
            if (_loc2_ !== param1) {
                this._1361525545cheese = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheese", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheeseMonster():Enemies {
            return this._1081259261cheeseMonster;
        }

        public function set cheeseMonster(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1081259261cheeseMonster;
            if (_loc2_ !== param1) {
                this._1081259261cheeseMonster = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheeseMonster", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get chili():Items {
            return this._94631201chili;
        }

        public function set chili(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._94631201chili;
            if (_loc2_ !== param1) {
                this._94631201chili = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "chili", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get city():Zones {
            return this._3053931city;
        }

        public function set city(param1:Zones):void {
            var _loc2_:Object = null;
            _loc2_ = this._3053931city;
            if (_loc2_ !== param1) {
                this._3053931city = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "city", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get clerkDinoSmithNormal():Vendors {
            return this._1582426929clerkDinoSmithNormal;
        }

        public function set clerkDinoSmithNormal(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._1582426929clerkDinoSmithNormal;
            if (_loc2_ !== param1) {
                this._1582426929clerkDinoSmithNormal = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "clerkDinoSmithNormal", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get clerkDinoSmithSpecial():Vendors {
            return this._1651710511clerkDinoSmithSpecial;
        }

        public function set clerkDinoSmithSpecial(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._1651710511clerkDinoSmithSpecial;
            if (_loc2_ !== param1) {
                this._1651710511clerkDinoSmithSpecial = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "clerkDinoSmithSpecial", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get clerkRaccoon():Vendors {
            return this._967181130clerkRaccoon;
        }

        public function set clerkRaccoon(param1:Vendors):void {
            var _loc2_:Object = null;
            _loc2_ = this._967181130clerkRaccoon;
            if (_loc2_ !== param1) {
                this._967181130clerkRaccoon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "clerkRaccoon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get clock():spark.components.Label {
            return this._94755854clock;
        }

        public function set clock(param1:spark.components.Label):void {
            var _loc2_:Object = null;
            _loc2_ = this._94755854clock;
            if (_loc2_ !== param1) {
                this._94755854clock = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "clock", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get common():Grid {
            return this._1354814997common;
        }

        public function set common(param1:Grid):void {
            var _loc2_:Object = null;
            _loc2_ = this._1354814997common;
            if (_loc2_ !== param1) {
                this._1354814997common = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "common", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get common2():BorderContainer {
            return this._950408103common2;
        }

        public function set common2(param1:BorderContainer):void {
            var _loc2_:Object = null;
            _loc2_ = this._950408103common2;
            if (_loc2_ !== param1) {
                this._950408103common2 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "common2", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get confirm():Button {
            return this._951117504confirm;
        }

        public function set confirm(param1:Button):void {
            var _loc2_:Object = null;
            _loc2_ = this._951117504confirm;
            if (_loc2_ !== param1) {
                this._951117504confirm = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "confirm", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cookedFood():Quests {
            return this._1695793435cookedFood;
        }

        public function set cookedFood(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1695793435cookedFood;
            if (_loc2_ !== param1) {
                this._1695793435cookedFood = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cookedFood", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cultistVillage():Locations {
            return this._1858636220cultistVillage;
        }

        public function set cultistVillage(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1858636220cultistVillage;
            if (_loc2_ !== param1) {
                this._1858636220cultistVillage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cultistVillage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get customBack():WrapButton {
            return this._1582242824customBack;
        }

        public function set customBack(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._1582242824customBack;
            if (_loc2_ !== param1) {
                this._1582242824customBack = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "customBack", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get customComplete():WrapButton {
            return this._875569098customComplete;
        }

        public function set customComplete(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._875569098customComplete;
            if (_loc2_ !== param1) {
                this._875569098customComplete = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "customComplete", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get dairyFarmBarn():Locations {
            return this._1070532612dairyFarmBarn;
        }

        public function set dairyFarmBarn(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1070532612dairyFarmBarn;
            if (_loc2_ !== param1) {
                this._1070532612dairyFarmBarn = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "dairyFarmBarn", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get dairyFarmCenter():Locations {
            return this._1978097826dairyFarmCenter;
        }

        public function set dairyFarmCenter(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1978097826dairyFarmCenter;
            if (_loc2_ !== param1) {
                this._1978097826dairyFarmCenter = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "dairyFarmCenter", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get dairyFarmCenterQuest():Locations {
            return this._58297308dairyFarmCenterQuest;
        }

        public function set dairyFarmCenterQuest(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._58297308dairyFarmCenterQuest;
            if (_loc2_ !== param1) {
                this._58297308dairyFarmCenterQuest = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "dairyFarmCenterQuest", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get dairyFarmGates():Locations {
            return this._1168608033dairyFarmGates;
        }

        public function set dairyFarmGates(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1168608033dairyFarmGates;
            if (_loc2_ !== param1) {
                this._1168608033dairyFarmGates = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "dairyFarmGates", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get dairyFarmHouse():Locations {
            return this._1167266057dairyFarmHouse;
        }

        public function set dairyFarmHouse(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1167266057dairyFarmHouse;
            if (_loc2_ !== param1) {
                this._1167266057dairyFarmHouse = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "dairyFarmHouse", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get dairyFarmPasture():Locations {
            return this._1646239277dairyFarmPasture;
        }

        public function set dairyFarmPasture(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1646239277dairyFarmPasture;
            if (_loc2_ !== param1) {
                this._1646239277dairyFarmPasture = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "dairyFarmPasture", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get dairyFarmRoad():Locations {
            return this._1071022185dairyFarmRoad;
        }

        public function set dairyFarmRoad(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1071022185dairyFarmRoad;
            if (_loc2_ !== param1) {
                this._1071022185dairyFarmRoad = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "dairyFarmRoad", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get dairyFarmShed():Locations {
            return this._1071045373dairyFarmShed;
        }

        public function set dairyFarmShed(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1071045373dairyFarmShed;
            if (_loc2_ !== param1) {
                this._1071045373dairyFarmShed = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "dairyFarmShed", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get dairyFarmStand():Locations {
            return this._1156977747dairyFarmStand;
        }

        public function set dairyFarmStand(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1156977747dairyFarmStand;
            if (_loc2_ !== param1) {
                this._1156977747dairyFarmStand = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "dairyFarmStand", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get decision1():WrapButton {
            return this._357419989decision1;
        }

        public function set decision1(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._357419989decision1;
            if (_loc2_ !== param1) {
                this._357419989decision1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "decision1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get decision2():WrapButton {
            return this._357419990decision2;
        }

        public function set decision2(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._357419990decision2;
            if (_loc2_ !== param1) {
                this._357419990decision2 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "decision2", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get decision3():WrapButton {
            return this._357419991decision3;
        }

        public function set decision3(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._357419991decision3;
            if (_loc2_ !== param1) {
                this._357419991decision3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "decision3", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get decisions():Grid {
            return this._357420055decisions;
        }

        public function set decisions(param1:Grid):void {
            var _loc2_:Object = null;
            _loc2_ = this._357420055decisions;
            if (_loc2_ !== param1) {
                this._357420055decisions = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "decisions", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get defaultNPC():NPCs {
            return this._678634720defaultNPC;
        }

        public function set defaultNPC(param1:NPCs):void {
            var _loc2_:Object = null;
            _loc2_ = this._678634720defaultNPC;
            if (_loc2_ !== param1) {
                this._678634720defaultNPC = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "defaultNPC", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get defeatShaman():Quests {
            return this._2081446977defeatShaman;
        }

        public function set defeatShaman(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._2081446977defeatShaman;
            if (_loc2_ !== param1) {
                this._2081446977defeatShaman = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "defeatShaman", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get defendingTheHerd():Quests {
            return this._434405132defendingTheHerd;
        }

        public function set defendingTheHerd(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._434405132defendingTheHerd;
            if (_loc2_ !== param1) {
                this._434405132defendingTheHerd = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "defendingTheHerd", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get depositAmount():spark.components.TextInput {
            return this._407477098depositAmount;
        }

        public function set depositAmount(param1:spark.components.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._407477098depositAmount;
            if (_loc2_ !== param1) {
                this._407477098depositAmount = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "depositAmount", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get depositToggle():WrapButton {
            return this._138071954depositToggle;
        }

        public function set depositToggle(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._138071954depositToggle;
            if (_loc2_ !== param1) {
                this._138071954depositToggle = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "depositToggle", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get dessertVillage():Locations {
            return this._1543337306dessertVillage;
        }

        public function set dessertVillage(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1543337306dessertVillage;
            if (_loc2_ !== param1) {
                this._1543337306dessertVillage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "dessertVillage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get devoured():Defeats {
            return this._1115281910devoured;
        }

        public function set devoured(param1:Defeats):void {
            var _loc2_:Object = null;
            _loc2_ = this._1115281910devoured;
            if (_loc2_ !== param1) {
                this._1115281910devoured = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "devoured", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get dietPill():Items {
            return this._112859315dietPill;
        }

        public function set dietPill(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._112859315dietPill;
            if (_loc2_ !== param1) {
                this._112859315dietPill = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "dietPill", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get discardToggle():WrapButton {
            return this._1576354194discardToggle;
        }

        public function set discardToggle(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._1576354194discardToggle;
            if (_loc2_ !== param1) {
                this._1576354194discardToggle = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "discardToggle", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get donutShop():Locations {
            return this._2122071352donutShop;
        }

        public function set donutShop(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._2122071352donutShop;
            if (_loc2_ !== param1) {
                this._2122071352donutShop = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "donutShop", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get earth1():Spells {
            return this._1310330585earth1;
        }

        public function set earth1(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._1310330585earth1;
            if (_loc2_ !== param1) {
                this._1310330585earth1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "earth1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get earth3():Spells {
            return this._1310330583earth3;
        }

        public function set earth3(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._1310330583earth3;
            if (_loc2_ !== param1) {
                this._1310330583earth3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "earth3", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get eatingContest():Quests {
            return this._894292950eatingContest;
        }

        public function set eatingContest(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._894292950eatingContest;
            if (_loc2_ !== param1) {
                this._894292950eatingContest = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "eatingContest", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get enchantedFighterArmor():Items {
            return this._921037478enchantedFighterArmor;
        }

        public function set enchantedFighterArmor(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._921037478enchantedFighterArmor;
            if (_loc2_ !== param1) {
                this._921037478enchantedFighterArmor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "enchantedFighterArmor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get enchantedKnightArmor():Items {
            return this._1927565094enchantedKnightArmor;
        }

        public function set enchantedKnightArmor(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1927565094enchantedKnightArmor;
            if (_loc2_ !== param1) {
                this._1927565094enchantedKnightArmor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "enchantedKnightArmor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get enchantedWarmageArmor():Items {
            return this._1490705443enchantedWarmageArmor;
        }

        public function set enchantedWarmageArmor(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1490705443enchantedWarmageArmor;
            if (_loc2_ !== param1) {
                this._1490705443enchantedWarmageArmor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "enchantedWarmageArmor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get enduranceDownArrow():BitmapImage {
            return this._1615526464enduranceDownArrow;
        }

        public function set enduranceDownArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._1615526464enduranceDownArrow;
            if (_loc2_ !== param1) {
                this._1615526464enduranceDownArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "enduranceDownArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get enduranceUpArrow():BitmapImage {
            return this._1280474663enduranceUpArrow;
        }

        public function set enduranceUpArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._1280474663enduranceUpArrow;
            if (_loc2_ !== param1) {
                this._1280474663enduranceUpArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "enduranceUpArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get enemyImage():Image {
            return this._1794203315enemyImage;
        }

        public function set enemyImage(param1:Image):void {
            var _loc2_:Object = null;
            _loc2_ = this._1794203315enemyImage;
            if (_loc2_ !== param1) {
                this._1794203315enemyImage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "enemyImage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get event():LocationType {
            return this._96891546event;
        }

        public function set event(param1:LocationType):void {
            var _loc2_:Object = null;
            _loc2_ = this._96891546event;
            if (_loc2_ !== param1) {
                this._96891546event = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "event", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get eventText():TextArea {
            return this._31411943eventText;
        }

        public function set eventText(param1:TextArea):void {
            var _loc2_:Object = null;
            _loc2_ = this._31411943eventText;
            if (_loc2_ !== param1) {
                this._31411943eventText = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "eventText", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get exploded():Defeats {
            return this._1928911965exploded;
        }

        public function set exploded(param1:Defeats):void {
            var _loc2_:Object = null;
            _loc2_ = this._1928911965exploded;
            if (_loc2_ !== param1) {
                this._1928911965exploded = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "exploded", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get fallenStar():Items {
            return this._1507858902fallenStar;
        }

        public function set fallenStar(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1507858902fallenStar;
            if (_loc2_ !== param1) {
                this._1507858902fallenStar = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "fallenStar", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get fatnessDownArrow():BitmapImage {
            return this._758268279fatnessDownArrow;
        }

        public function set fatnessDownArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._758268279fatnessDownArrow;
            if (_loc2_ !== param1) {
                this._758268279fatnessDownArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "fatnessDownArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get fatnessUpArrow():BitmapImage {
            return this._838850786fatnessUpArrow;
        }

        public function set fatnessUpArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._838850786fatnessUpArrow;
            if (_loc2_ !== param1) {
                this._838850786fatnessUpArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "fatnessUpArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get floating():Defeats {
            return this._2010122246floating;
        }

        public function set floating(param1:Defeats):void {
            var _loc2_:Object = null;
            _loc2_ = this._2010122246floating;
            if (_loc2_ !== param1) {
                this._2010122246floating = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "floating", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get forest():Zones {
            return this._1268786147forest;
        }

        public function set forest(param1:Zones):void {
            var _loc2_:Object = null;
            _loc2_ = this._1268786147forest;
            if (_loc2_ !== param1) {
                this._1268786147forest = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "forest", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get foundGoldThread():Quests {
            return this._1382165420foundGoldThread;
        }

        public function set foundGoldThread(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1382165420foundGoldThread;
            if (_loc2_ !== param1) {
                this._1382165420foundGoldThread = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "foundGoldThread", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get friedChicken():Items {
            return this._862190489friedChicken;
        }

        public function set friedChicken(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._862190489friedChicken;
            if (_loc2_ !== param1) {
                this._862190489friedChicken = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "friedChicken", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get fruitDryad():Enemies {
            return this._1375361882fruitDryad;
        }

        public function set fruitDryad(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1375361882fruitDryad;
            if (_loc2_ !== param1) {
                this._1375361882fruitDryad = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "fruitDryad", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get fullnessBar():Rect {
            return this._966888243fullnessBar;
        }

        public function set fullnessBar(param1:Rect):void {
            var _loc2_:Object = null;
            _loc2_ = this._966888243fullnessBar;
            if (_loc2_ !== param1) {
                this._966888243fullnessBar = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "fullnessBar", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get fullnessDownArrow():BitmapImage {
            return this._1441528257fullnessDownArrow;
        }

        public function set fullnessDownArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._1441528257fullnessDownArrow;
            if (_loc2_ !== param1) {
                this._1441528257fullnessDownArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "fullnessDownArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get fullnessUpArrow():BitmapImage {
            return this._645961240fullnessUpArrow;
        }

        public function set fullnessUpArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._645961240fullnessUpArrow;
            if (_loc2_ !== param1) {
                this._645961240fullnessUpArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "fullnessUpArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get gameImages():Group {
            return this._334462218gameImages;
        }

        public function set gameImages(param1:Group):void {
            var _loc2_:Object = null;
            _loc2_ = this._334462218gameImages;
            if (_loc2_ !== param1) {
                this._334462218gameImages = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "gameImages", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get gameVersion():spark.components.Label {
            return this._218068102gameVersion;
        }

        public function set gameVersion(param1:spark.components.Label):void {
            var _loc2_:Object = null;
            _loc2_ = this._218068102gameVersion;
            if (_loc2_ !== param1) {
                this._218068102gameVersion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "gameVersion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get giantAxe():Items {
            return this._701581065giantAxe;
        }

        public function set giantAxe(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._701581065giantAxe;
            if (_loc2_ !== param1) {
                this._701581065giantAxe = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "giantAxe", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get giganticGrape():Items {
            return this._1118296561giganticGrape;
        }

        public function set giganticGrape(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1118296561giganticGrape;
            if (_loc2_ !== param1) {
                this._1118296561giganticGrape = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "giganticGrape", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get glaive():Items {
            return this._1243430084glaive;
        }

        public function set glaive(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1243430084glaive;
            if (_loc2_ !== param1) {
                this._1243430084glaive = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "glaive", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get gold():WrapButton {
            return this._3178592gold;
        }

        public function set gold(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._3178592gold;
            if (_loc2_ !== param1) {
                this._3178592gold = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "gold", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get goldThread():Items {
            return this._1519603062goldThread;
        }

        public function set goldThread(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1519603062goldThread;
            if (_loc2_ !== param1) {
                this._1519603062goldThread = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "goldThread", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get golemBoss():Enemies {
            return this._1245362759golemBoss;
        }

        public function set golemBoss(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1245362759golemBoss;
            if (_loc2_ !== param1) {
                this._1245362759golemBoss = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "golemBoss", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get golemBossFight():Locations {
            return this._460987863golemBossFight;
        }

        public function set golemBossFight(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._460987863golemBossFight;
            if (_loc2_ !== param1) {
                this._460987863golemBossFight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "golemBossFight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get grasslands():Zones {
            return this._975277042grasslands;
        }

        public function set grasslands(param1:Zones):void {
            var _loc2_:Object = null;
            _loc2_ = this._975277042grasslands;
            if (_loc2_ !== param1) {
                this._975277042grasslands = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "grasslands", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get grasslandsHub():Locations {
            return this._975326301grasslandsHub;
        }

        public function set grasslandsHub(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._975326301grasslandsHub;
            if (_loc2_ !== param1) {
                this._975326301grasslandsHub = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "grasslandsHub", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get greatSword():Items {
            return this._567584624greatSword;
        }

        public function set greatSword(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._567584624greatSword;
            if (_loc2_ !== param1) {
                this._567584624greatSword = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "greatSword", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get greenDragon():Species {
            return this._1626991350greenDragon;
        }

        public function set greenDragon(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1626991350greenDragon;
            if (_loc2_ !== param1) {
                this._1626991350greenDragon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "greenDragon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get hamHock():Items {
            return this._691048547hamHock;
        }

        public function set hamHock(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._691048547hamHock;
            if (_loc2_ !== param1) {
                this._691048547hamHock = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "hamHock", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get hammerMap():Items {
            return this._571812682hammerMap;
        }

        public function set hammerMap(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._571812682hammerMap;
            if (_loc2_ !== param1) {
                this._571812682hammerMap = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "hammerMap", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get hammerQuest():Quests {
            return this._248109500hammerQuest;
        }

        public function set hammerQuest(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._248109500hammerQuest;
            if (_loc2_ !== param1) {
                this._248109500hammerQuest = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "hammerQuest", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get healthBar():Rect {
            return this._29266967healthBar;
        }

        public function set healthBar(param1:Rect):void {
            var _loc2_:Object = null;
            _loc2_ = this._29266967healthBar;
            if (_loc2_ !== param1) {
                this._29266967healthBar = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "healthBar", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get healthDownArrow():BitmapImage {
            return this._1257899637healthDownArrow;
        }

        public function set healthDownArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._1257899637healthDownArrow;
            if (_loc2_ !== param1) {
                this._1257899637healthDownArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "healthDownArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get healthUpArrow():BitmapImage {
            return this._499831858healthUpArrow;
        }

        public function set healthUpArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._499831858healthUpArrow;
            if (_loc2_ !== param1) {
                this._499831858healthUpArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "healthUpArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get hills():Zones {
            return this._99281490hills;
        }

        public function set hills(param1:Zones):void {
            var _loc2_:Object = null;
            _loc2_ = this._99281490hills;
            if (_loc2_ !== param1) {
                this._99281490hills = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "hills", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get honeyDipper():Items {
            return this._1797858355honeyDipper;
        }

        public function set honeyDipper(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1797858355honeyDipper;
            if (_loc2_ !== param1) {
                this._1797858355honeyDipper = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "honeyDipper", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get horseArmorBroke():Items {
            return this._673102473horseArmorBroke;
        }

        public function set horseArmorBroke(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._673102473horseArmorBroke;
            if (_loc2_ !== param1) {
                this._673102473horseArmorBroke = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "horseArmorBroke", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get horseArmorFixed():Items {
            return this._669668046horseArmorFixed;
        }

        public function set horseArmorFixed(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._669668046horseArmorFixed;
            if (_loc2_ !== param1) {
                this._669668046horseArmorFixed = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "horseArmorFixed", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get horsePantsBroke():Items {
            return this._1044859654horsePantsBroke;
        }

        public function set horsePantsBroke(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1044859654horsePantsBroke;
            if (_loc2_ !== param1) {
                this._1044859654horsePantsBroke = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "horsePantsBroke", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get horsePantsFixed():Items {
            return this._1041425227horsePantsFixed;
        }

        public function set horsePantsFixed(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1041425227horsePantsFixed;
            if (_loc2_ !== param1) {
                this._1041425227horsePantsFixed = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "horsePantsFixed", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get horseQuestArmor():Quests {
            return this._1899019578horseQuestArmor;
        }

        public function set horseQuestArmor(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1899019578horseQuestArmor;
            if (_loc2_ !== param1) {
                this._1899019578horseQuestArmor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "horseQuestArmor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get horseQuestClothes():Quests {
            return this._1201935747horseQuestClothes;
        }

        public function set horseQuestClothes(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1201935747horseQuestClothes;
            if (_loc2_ !== param1) {
                this._1201935747horseQuestClothes = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "horseQuestClothes", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get horseQuestFreedom():Quests {
            return this._268431215horseQuestFreedom;
        }

        public function set horseQuestFreedom(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._268431215horseQuestFreedom;
            if (_loc2_ !== param1) {
                this._268431215horseQuestFreedom = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "horseQuestFreedom", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get horseQuestRetire():Quests {
            return this._785042560horseQuestRetire;
        }

        public function set horseQuestRetire(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._785042560horseQuestRetire;
            if (_loc2_ !== param1) {
                this._785042560horseQuestRetire = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "horseQuestRetire", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get horseQuestStrength():Quests {
            return this._697225626horseQuestStrength;
        }

        public function set horseQuestStrength(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._697225626horseQuestStrength;
            if (_loc2_ !== param1) {
                this._697225626horseQuestStrength = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "horseQuestStrength", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get horseQuestWeapon():Quests {
            return this._642456191horseQuestWeapon;
        }

        public function set horseQuestWeapon(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._642456191horseQuestWeapon;
            if (_loc2_ !== param1) {
                this._642456191horseQuestWeapon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "horseQuestWeapon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ice1():Spells {
            return this._3226374ice1;
        }

        public function set ice1(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._3226374ice1;
            if (_loc2_ !== param1) {
                this._3226374ice1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ice1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ice3():Spells {
            return this._3226376ice3;
        }

        public function set ice3(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._3226376ice3;
            if (_loc2_ !== param1) {
                this._3226376ice3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ice3", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ice5():Spells {
            return this._3226378ice5;
        }

        public function set ice5(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._3226378ice5;
            if (_loc2_ !== param1) {
                this._3226378ice5 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ice5", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get impassable():Zones {
            return this._1681772017impassable;
        }

        public function set impassable(param1:Zones):void {
            var _loc2_:Object = null;
            _loc2_ = this._1681772017impassable;
            if (_loc2_ !== param1) {
                this._1681772017impassable = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "impassable", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputAgility():mx.controls.TextInput {
            return this._70993637inputAgility;
        }

        public function set inputAgility(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._70993637inputAgility;
            if (_loc2_ !== param1) {
                this._70993637inputAgility = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputAgility", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputAngry():mx.controls.TextInput {
            return this._1358790647inputAngry;
        }

        public function set inputAngry(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1358790647inputAngry;
            if (_loc2_ !== param1) {
                this._1358790647inputAngry = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputAngry", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputArticle():mx.controls.TextInput {
            return this._253990348inputArticle;
        }

        public function set inputArticle(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._253990348inputArticle;
            if (_loc2_ !== param1) {
                this._253990348inputArticle = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputArticle", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputBack():mx.controls.TextInput {
            return this._1706417105inputBack;
        }

        public function set inputBack(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1706417105inputBack;
            if (_loc2_ !== param1) {
                this._1706417105inputBack = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputBack", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputBelly():mx.controls.TextInput {
            return this._1359450668inputBelly;
        }

        public function set inputBelly(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1359450668inputBelly;
            if (_loc2_ !== param1) {
                this._1359450668inputBelly = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputBelly", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputEndurance():mx.controls.TextInput {
            return this._1292328285inputEndurance;
        }

        public function set inputEndurance(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1292328285inputEndurance;
            if (_loc2_ !== param1) {
                this._1292328285inputEndurance = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputEndurance", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputFName():mx.controls.TextInput {
            return this._1362448999inputFName;
        }

        public function set inputFName(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1362448999inputFName;
            if (_loc2_ !== param1) {
                this._1362448999inputFName = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputFName", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputFeet():mx.controls.TextInput {
            return this._1706540184inputFeet;
        }

        public function set inputFeet(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1706540184inputFeet;
            if (_loc2_ !== param1) {
                this._1706540184inputFeet = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputFeet", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputFoot():mx.controls.TextInput {
            return this._1706550104inputFoot;
        }

        public function set inputFoot(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1706550104inputFoot;
            if (_loc2_ !== param1) {
                this._1706550104inputFoot = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputFoot", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputFur():mx.controls.TextInput {
            return this._470692185inputFur;
        }

        public function set inputFur(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._470692185inputFur;
            if (_loc2_ !== param1) {
                this._470692185inputFur = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputFur", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputFurred():mx.controls.TextInput {
            return this._677225320inputFurred;
        }

        public function set inputFurred(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._677225320inputFurred;
            if (_loc2_ !== param1) {
                this._677225320inputFurred = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputFurred", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputFurry():mx.controls.TextInput {
            return this._1363627360inputFurry;
        }

        public function set inputFurry(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1363627360inputFurry;
            if (_loc2_ !== param1) {
                this._1363627360inputFurry = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputFurry", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputHair():mx.controls.TextInput {
            return this._1706596044inputHair;
        }

        public function set inputHair(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1706596044inputHair;
            if (_loc2_ !== param1) {
                this._1706596044inputHair = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputHair", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputHand():mx.controls.TextInput {
            return this._1706596185inputHand;
        }

        public function set inputHand(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1706596185inputHand;
            if (_loc2_ !== param1) {
                this._1706596185inputHand = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputHand", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputHands():mx.controls.TextInput {
            return this._1364874298inputHands;
        }

        public function set inputHands(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1364874298inputHands;
            if (_loc2_ !== param1) {
                this._1364874298inputHands = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputHands", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputHead():mx.controls.TextInput {
            return this._1706599626inputHead;
        }

        public function set inputHead(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1706599626inputHead;
            if (_loc2_ !== param1) {
                this._1706599626inputHead = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputHead", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputHeight():mx.controls.TextInput {
            return this._635021935inputHeight;
        }

        public function set inputHeight(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._635021935inputHeight;
            if (_loc2_ !== param1) {
                this._635021935inputHeight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputHeight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputIntelligence():mx.controls.TextInput {
            return this._646984791inputIntelligence;
        }

        public function set inputIntelligence(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._646984791inputIntelligence;
            if (_loc2_ !== param1) {
                this._646984791inputIntelligence = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputIntelligence", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputMName():mx.controls.TextInput {
            return this._1368913646inputMName;
        }

        public function set inputMName(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1368913646inputMName;
            if (_loc2_ !== param1) {
                this._1368913646inputMName = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputMName", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputMouth():mx.controls.TextInput {
            return this._1369916189inputMouth;
        }

        public function set inputMouth(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1369916189inputMouth;
            if (_loc2_ !== param1) {
                this._1369916189inputMouth = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputMouth", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputName():mx.controls.TextInput {
            return this._1706774901inputName;
        }

        public function set inputName(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1706774901inputName;
            if (_loc2_ !== param1) {
                this._1706774901inputName = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputName", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputStomach():mx.controls.TextInput {
            return this._898054915inputStomach;
        }

        public function set inputStomach(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._898054915inputStomach;
            if (_loc2_ !== param1) {
                this._898054915inputStomach = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputStomach", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputStrength():mx.controls.TextInput {
            return this._1991007701inputStrength;
        }

        public function set inputStrength(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1991007701inputStrength;
            if (_loc2_ !== param1) {
                this._1991007701inputStrength = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputStrength", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputTail():mx.controls.TextInput {
            return this._1706953530inputTail;
        }

        public function set inputTail(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1706953530inputTail;
            if (_loc2_ !== param1) {
                this._1706953530inputTail = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputTail", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inputTeeth():mx.controls.TextInput {
            return this._1376067550inputTeeth;
        }

        public function set inputTeeth(param1:mx.controls.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1376067550inputTeeth;
            if (_loc2_ !== param1) {
                this._1376067550inputTeeth = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inputTeeth", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get instuction():Button {
            return this._1464960104instuction;
        }

        public function set instuction(param1:Button):void {
            var _loc2_:Object = null;
            _loc2_ = this._1464960104instuction;
            if (_loc2_ !== param1) {
                this._1464960104instuction = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "instuction", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get intelligenceDownArrow():BitmapImage {
            return this._2117909640intelligenceDownArrow;
        }

        public function set intelligenceDownArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._2117909640intelligenceDownArrow;
            if (_loc2_ !== param1) {
                this._2117909640intelligenceDownArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "intelligenceDownArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get intelligenceUpArrow():BitmapImage {
            return this._689950097intelligenceUpArrow;
        }

        public function set intelligenceUpArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._689950097intelligenceUpArrow;
            if (_loc2_ !== param1) {
                this._689950097intelligenceUpArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "intelligenceUpArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get inventoryPanel():Grid {
            return this._47547896inventoryPanel;
        }

        public function set inventoryPanel(param1:Grid):void {
            var _loc2_:Object = null;
            _loc2_ = this._47547896inventoryPanel;
            if (_loc2_ !== param1) {
                this._47547896inventoryPanel = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "inventoryPanel", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get jambalaya():Items {
            return this._210527854jambalaya;
        }

        public function set jambalaya(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._210527854jambalaya;
            if (_loc2_ !== param1) {
                this._210527854jambalaya = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "jambalaya", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get learningToSmith():Quests {
            return this._1661890230learningToSmith;
        }

        public function set learningToSmith(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1661890230learningToSmith;
            if (_loc2_ !== param1) {
                this._1661890230learningToSmith = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "learningToSmith", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get lemonSampleItem():Items {
            return this._1652294448lemonSampleItem;
        }

        public function set lemonSampleItem(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1652294448lemonSampleItem;
            if (_loc2_ !== param1) {
                this._1652294448lemonSampleItem = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "lemonSampleItem", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get lemonSlimeItem():Items {
            return this._2014457784lemonSlimeItem;
        }

        public function set lemonSlimeItem(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._2014457784lemonSlimeItem;
            if (_loc2_ !== param1) {
                this._2014457784lemonSlimeItem = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "lemonSlimeItem", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get lizardWizard():Enemies {
            return this._1884839841lizardWizard;
        }

        public function set lizardWizard(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1884839841lizardWizard;
            if (_loc2_ !== param1) {
                this._1884839841lizardWizard = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "lizardWizard", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get loadGame():Button {
            return this._1845207544loadGame;
        }

        public function set loadGame(param1:Button):void {
            var _loc2_:Object = null;
            _loc2_ = this._1845207544loadGame;
            if (_loc2_ !== param1) {
                this._1845207544loadGame = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "loadGame", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get locationText():spark.components.Label {
            return this._58296702locationText;
        }

        public function set locationText(param1:spark.components.Label):void {
            var _loc2_:Object = null;
            _loc2_ = this._58296702locationText;
            if (_loc2_ !== param1) {
                this._58296702locationText = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "locationText", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get madCheese():Quests {
            return this._1616766393madCheese;
        }

        public function set madCheese(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1616766393madCheese;
            if (_loc2_ !== param1) {
                this._1616766393madCheese = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "madCheese", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get madMilk():Quests {
            return this._825431435madMilk;
        }

        public function set madMilk(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._825431435madMilk;
            if (_loc2_ !== param1) {
                this._825431435madMilk = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "madMilk", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get magicalObsidian():Items {
            return this._1073648365magicalObsidian;
        }

        public function set magicalObsidian(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1073648365magicalObsidian;
            if (_loc2_ !== param1) {
                this._1073648365magicalObsidian = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "magicalObsidian", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get manaBar():Rect {
            return this._835224652manaBar;
        }

        public function set manaBar(param1:Rect):void {
            var _loc2_:Object = null;
            _loc2_ = this._835224652manaBar;
            if (_loc2_ !== param1) {
                this._835224652manaBar = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "manaBar", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get manaDownArrow():BitmapImage {
            return this._981062144manaDownArrow;
        }

        public function set manaDownArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._981062144manaDownArrow;
            if (_loc2_ !== param1) {
                this._981062144manaDownArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "manaDownArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get manaUpArrow():BitmapImage {
            return this._1514643943manaUpArrow;
        }

        public function set manaUpArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._1514643943manaUpArrow;
            if (_loc2_ !== param1) {
                this._1514643943manaUpArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "manaUpArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get miscText():TextArea {
            return this._1222211527miscText;
        }

        public function set miscText(param1:TextArea):void {
            var _loc2_:Object = null;
            _loc2_ = this._1222211527miscText;
            if (_loc2_ !== param1) {
                this._1222211527miscText = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "miscText", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get mountainousTiger():Enemies {
            return this._2021648641mountainousTiger;
        }

        public function set mountainousTiger(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._2021648641mountainousTiger;
            if (_loc2_ !== param1) {
                this._2021648641mountainousTiger = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "mountainousTiger", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get mountains():Zones {
            return this._457455494mountains;
        }

        public function set mountains(param1:Zones):void {
            var _loc2_:Object = null;
            _loc2_ = this._457455494mountains;
            if (_loc2_ !== param1) {
                this._457455494mountains = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "mountains", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get nameInput():spark.components.TextInput {
            return this._1213385727nameInput;
        }

        public function set nameInput(param1:spark.components.TextInput):void {
            var _loc2_:Object = null;
            _loc2_ = this._1213385727nameInput;
            if (_loc2_ !== param1) {
                this._1213385727nameInput = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "nameInput", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get onBadTermsExperiments():Quests {
            return this._705755691onBadTermsExperiments;
        }

        public function set onBadTermsExperiments(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._705755691onBadTermsExperiments;
            if (_loc2_ !== param1) {
                this._705755691onBadTermsExperiments = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "onBadTermsExperiments", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get onGoodTermsExperiments():Quests {
            return this._1164451989onGoodTermsExperiments;
        }

        public function set onGoodTermsExperiments(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1164451989onGoodTermsExperiments;
            if (_loc2_ !== param1) {
                this._1164451989onGoodTermsExperiments = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "onGoodTermsExperiments", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get options():Button {
            return this._1249474914options;
        }

        public function set options(param1:Button):void {
            var _loc2_:Object = null;
            _loc2_ = this._1249474914options;
            if (_loc2_ !== param1) {
                this._1249474914options = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "options", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get orange():Items {
            return this._1008851410orange;
        }

        public function set orange(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1008851410orange;
            if (_loc2_ !== param1) {
                this._1008851410orange = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "orange", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get outrageousOrange():Items {
            return this._1242460512outrageousOrange;
        }

        public function set outrageousOrange(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1242460512outrageousOrange;
            if (_loc2_ !== param1) {
                this._1242460512outrageousOrange = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "outrageousOrange", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get overalls():Items {
            return this._529493446overalls;
        }

        public function set overalls(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._529493446overalls;
            if (_loc2_ !== param1) {
                this._529493446overalls = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "overalls", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get overeating():Defeats {
            return this._2141650782overeating;
        }

        public function set overeating(param1:Defeats):void {
            var _loc2_:Object = null;
            _loc2_ = this._2141650782overeating;
            if (_loc2_ !== param1) {
                this._2141650782overeating = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "overeating", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get pageDown():WrapButton {
            return this._858987473pageDown;
        }

        public function set pageDown(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._858987473pageDown;
            if (_loc2_ !== param1) {
                this._858987473pageDown = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "pageDown", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get pageUp():WrapButton {
            return this._995752566pageUp;
        }

        public function set pageUp(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._995752566pageUp;
            if (_loc2_ !== param1) {
                this._995752566pageUp = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "pageUp", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get pitcherPlant():Locations {
            return this._1354094206pitcherPlant;
        }

        public function set pitcherPlant(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1354094206pitcherPlant;
            if (_loc2_ !== param1) {
                this._1354094206pitcherPlant = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "pitcherPlant", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get plentifulPeach():Items {
            return this._1121312206plentifulPeach;
        }

        public function set plentifulPeach(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1121312206plentifulPeach;
            if (_loc2_ !== param1) {
                this._1121312206plentifulPeach = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "plentifulPeach", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get polarBear():Species {
            return this._442492910polarBear;
        }

        public function set polarBear(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._442492910polarBear;
            if (_loc2_ !== param1) {
                this._442492910polarBear = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "polarBear", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get profusePumpkin():Items {
            return this._1115315194profusePumpkin;
        }

        public function set profusePumpkin(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1115315194profusePumpkin;
            if (_loc2_ !== param1) {
                this._1115315194profusePumpkin = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "profusePumpkin", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get pterodactyl():Species {
            return this._916010911pterodactyl;
        }

        public function set pterodactyl(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._916010911pterodactyl;
            if (_loc2_ !== param1) {
                this._916010911pterodactyl = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "pterodactyl", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get raccoonStore():Locations {
            return this._1637109442raccoonStore;
        }

        public function set raccoonStore(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1637109442raccoonStore;
            if (_loc2_ !== param1) {
                this._1637109442raccoonStore = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "raccoonStore", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get raptor():Species {
            return this._938210922raptor;
        }

        public function set raptor(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._938210922raptor;
            if (_loc2_ !== param1) {
                this._938210922raptor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "raptor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get redDragon():Species {
            return this._649916932redDragon;
        }

        public function set redDragon(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._649916932redDragon;
            if (_loc2_ !== param1) {
                this._649916932redDragon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "redDragon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get restLvlBtn():WrapButton {
            return this._1922002894restLvlBtn;
        }

        public function set restLvlBtn(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._1922002894restLvlBtn;
            if (_loc2_ !== param1) {
                this._1922002894restLvlBtn = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "restLvlBtn", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get riceBowl():Items {
            return this._1554840485riceBowl;
        }

        public function set riceBowl(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1554840485riceBowl;
            if (_loc2_ !== param1) {
                this._1554840485riceBowl = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "riceBowl", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get ridiculousRaspberry():Items {
            return this._1481230267ridiculousRaspberry;
        }

        public function set ridiculousRaspberry(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1481230267ridiculousRaspberry;
            if (_loc2_ !== param1) {
                this._1481230267ridiculousRaspberry = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ridiculousRaspberry", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get sceneImage():Image {
            return this._2060064815sceneImage;
        }

        public function set sceneImage(param1:Image):void {
            var _loc2_:Object = null;
            _loc2_ = this._2060064815sceneImage;
            if (_loc2_ !== param1) {
                this._2060064815sceneImage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sceneImage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get shamanBoss():Enemies {
            return this._2032664133shamanBoss;
        }

        public function set shamanBoss(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._2032664133shamanBoss;
            if (_loc2_ !== param1) {
                this._2032664133shamanBoss = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "shamanBoss", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get shamanBossFight():Locations {
            return this._131689707shamanBossFight;
        }

        public function set shamanBossFight(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._131689707shamanBossFight;
            if (_loc2_ !== param1) {
                this._131689707shamanBossFight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "shamanBossFight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get shamanBossNormal():Enemies {
            return this._447492738shamanBossNormal;
        }

        public function set shamanBossNormal(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._447492738shamanBossNormal;
            if (_loc2_ !== param1) {
                this._447492738shamanBossNormal = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "shamanBossNormal", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get sizableStrawberry():Items {
            return this._183810003sizableStrawberry;
        }

        public function set sizableStrawberry(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._183810003sizableStrawberry;
            if (_loc2_ !== param1) {
                this._183810003sizableStrawberry = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sizableStrawberry", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get slimeQuest1():Quests {
            return this._1817704567slimeQuest1;
        }

        public function set slimeQuest1(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1817704567slimeQuest1;
            if (_loc2_ !== param1) {
                this._1817704567slimeQuest1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "slimeQuest1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get slimeQuest2():Quests {
            return this._1817704568slimeQuest2;
        }

        public function set slimeQuest2(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1817704568slimeQuest2;
            if (_loc2_ !== param1) {
                this._1817704568slimeQuest2 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "slimeQuest2", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get slimeQuest3():Quests {
            return this._1817704569slimeQuest3;
        }

        public function set slimeQuest3(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1817704569slimeQuest3;
            if (_loc2_ !== param1) {
                this._1817704569slimeQuest3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "slimeQuest3", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get slimeQuest4():Quests {
            return this._1817704570slimeQuest4;
        }

        public function set slimeQuest4(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1817704570slimeQuest4;
            if (_loc2_ !== param1) {
                this._1817704570slimeQuest4 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "slimeQuest4", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get slimeQuest5():Quests {
            return this._1817704571slimeQuest5;
        }

        public function set slimeQuest5(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1817704571slimeQuest5;
            if (_loc2_ !== param1) {
                this._1817704571slimeQuest5 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "slimeQuest5", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get smithedArmor():Quests {
            return this._66272643smithedArmor;
        }

        public function set smithedArmor(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._66272643smithedArmor;
            if (_loc2_ !== param1) {
                this._66272643smithedArmor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "smithedArmor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get spearMap():Items {
            return this._2134478141spearMap;
        }

        public function set spearMap(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._2134478141spearMap;
            if (_loc2_ !== param1) {
                this._2134478141spearMap = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "spearMap", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get spearQuest():Quests {
            return this._1765157001spearQuest;
        }

        public function set spearQuest(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._1765157001spearQuest;
            if (_loc2_ !== param1) {
                this._1765157001spearQuest = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "spearQuest", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get speciesDescriptors():VGroup {
            return this._2057952248speciesDescriptors;
        }

        public function set speciesDescriptors(param1:VGroup):void {
            var _loc2_:Object = null;
            _loc2_ = this._2057952248speciesDescriptors;
            if (_loc2_ !== param1) {
                this._2057952248speciesDescriptors = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "speciesDescriptors", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get speciesDropDown():DropDownList {
            return this._965566861speciesDropDown;
        }

        public function set speciesDropDown(param1:DropDownList):void {
            var _loc2_:Object = null;
            _loc2_ = this._965566861speciesDropDown;
            if (_loc2_ !== param1) {
                this._965566861speciesDropDown = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "speciesDropDown", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get speedDownArrow():BitmapImage {
            return this._951487488speedDownArrow;
        }

        public function set speedDownArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._951487488speedDownArrow;
            if (_loc2_ !== param1) {
                this._951487488speedDownArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "speedDownArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get speedUpArrow():BitmapImage {
            return this._1612998631speedUpArrow;
        }

        public function set speedUpArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._1612998631speedUpArrow;
            if (_loc2_ !== param1) {
                this._1612998631speedUpArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "speedUpArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get spellList():WrapButton {
            return this._1434955290spellList;
        }

        public function set spellList(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._1434955290spellList;
            if (_loc2_ !== param1) {
                this._1434955290spellList = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "spellList", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get staminaBar():Rect {
            return this._2017368284staminaBar;
        }

        public function set staminaBar(param1:Rect):void {
            var _loc2_:Object = null;
            _loc2_ = this._2017368284staminaBar;
            if (_loc2_ !== param1) {
                this._2017368284staminaBar = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "staminaBar", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get staminaDownArrow():BitmapImage {
            return this._1542484264staminaDownArrow;
        }

        public function set staminaDownArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._1542484264staminaDownArrow;
            if (_loc2_ !== param1) {
                this._1542484264staminaDownArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "staminaDownArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get staminaUpArrow():BitmapImage {
            return this._1893947583staminaUpArrow;
        }

        public function set staminaUpArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._1893947583staminaUpArrow;
            if (_loc2_ !== param1) {
                this._1893947583staminaUpArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "staminaUpArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get statPanel():Grid {
            return this._2104891376statPanel;
        }

        public function set statPanel(param1:Grid):void {
            var _loc2_:Object = null;
            _loc2_ = this._2104891376statPanel;
            if (_loc2_ !== param1) {
                this._2104891376statPanel = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "statPanel", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get stegosaurus():Species {
            return this._1740948907stegosaurus;
        }

        public function set stegosaurus(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1740948907stegosaurus;
            if (_loc2_ !== param1) {
                this._1740948907stegosaurus = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "stegosaurus", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get store():LocationType {
            return this._109770977store;
        }

        public function set store(param1:LocationType):void {
            var _loc2_:Object = null;
            _loc2_ = this._109770977store;
            if (_loc2_ !== param1) {
                this._109770977store = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "store", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get strengthDownArrow():BitmapImage {
            return this._1607566010strengthDownArrow;
        }

        public function set strengthDownArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._1607566010strengthDownArrow;
            if (_loc2_ !== param1) {
                this._1607566010strengthDownArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "strengthDownArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get strengthUpArrow():BitmapImage {
            return this._282654035strengthUpArrow;
        }

        public function set strengthUpArrow(param1:BitmapImage):void {
            var _loc2_:Object = null;
            _loc2_ = this._282654035strengthUpArrow;
            if (_loc2_ !== param1) {
                this._282654035strengthUpArrow = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "strengthUpArrow", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get stufftext():WrapButton {
            return this._1914619615stufftext;
        }

        public function set stufftext(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._1914619615stufftext;
            if (_loc2_ !== param1) {
                this._1914619615stufftext = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "stufftext", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get surroundingstext():WrapButton {
            return this._2108153668surroundingstext;
        }

        public function set surroundingstext(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._2108153668surroundingstext;
            if (_loc2_ !== param1) {
                this._2108153668surroundingstext = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "surroundingstext", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get sushiRoll():Items {
            return this._1887791441sushiRoll;
        }

        public function set sushiRoll(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1887791441sushiRoll;
            if (_loc2_ !== param1) {
                this._1887791441sushiRoll = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sushiRoll", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get swordMap():Items {
            return this._84654623swordMap;
        }

        public function set swordMap(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._84654623swordMap;
            if (_loc2_ !== param1) {
                this._84654623swordMap = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "swordMap", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get swordQuest():Quests {
            return this._247002907swordQuest;
        }

        public function set swordQuest(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._247002907swordQuest;
            if (_loc2_ !== param1) {
                this._247002907swordQuest = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "swordQuest", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get takeoutTerror():Enemies {
            return this._347908517takeoutTerror;
        }

        public function set takeoutTerror(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._347908517takeoutTerror;
            if (_loc2_ !== param1) {
                this._347908517takeoutTerror = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "takeoutTerror", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get tempuraShrimp():Items {
            return this._105981727tempuraShrimp;
        }

        public function set tempuraShrimp(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._105981727tempuraShrimp;
            if (_loc2_ !== param1) {
                this._105981727tempuraShrimp = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "tempuraShrimp", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get tigerFight():Locations {
            return this._228890991tigerFight;
        }

        public function set tigerFight(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._228890991tigerFight;
            if (_loc2_ !== param1) {
                this._228890991tigerFight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "tigerFight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get transformed():Defeats {
            return this._1999549173transformed;
        }

        public function set transformed(param1:Defeats):void {
            var _loc2_:Object = null;
            _loc2_ = this._1999549173transformed;
            if (_loc2_ !== param1) {
                this._1999549173transformed = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "transformed", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get triceratops():Species {
            return this._479827462triceratops;
        }

        public function set triceratops(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._479827462triceratops;
            if (_loc2_ !== param1) {
                this._479827462triceratops = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "triceratops", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get tropicalShirt():Items {
            return this._1271542734tropicalShirt;
        }

        public function set tropicalShirt(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._1271542734tropicalShirt;
            if (_loc2_ !== param1) {
                this._1271542734tropicalShirt = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "tropicalShirt", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get tyrannosaurus():Species {
            return this._1513529404tyrannosaurus;
        }

        public function set tyrannosaurus(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1513529404tyrannosaurus;
            if (_loc2_ !== param1) {
                this._1513529404tyrannosaurus = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "tyrannosaurus", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get uncommonTaste():Quests {
            return this._589699789uncommonTaste;
        }

        public function set uncommonTaste(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._589699789uncommonTaste;
            if (_loc2_ !== param1) {
                this._589699789uncommonTaste = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "uncommonTaste", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get unequipToggle():WrapButton {
            return this._69454997unequipToggle;
        }

        public function set unequipToggle(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._69454997unequipToggle;
            if (_loc2_ !== param1) {
                this._69454997unequipToggle = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "unequipToggle", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get washedDishes():Quests {
            return this._382952678washedDishes;
        }

        public function set washedDishes(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._382952678washedDishes;
            if (_loc2_ !== param1) {
                this._382952678washedDishes = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "washedDishes", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get water1():Spells {
            return this._794960390water1;
        }

        public function set water1(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._794960390water1;
            if (_loc2_ !== param1) {
                this._794960390water1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "water1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get water3():Spells {
            return this._794960388water3;
        }

        public function set water3(param1:Spells):void {
            var _loc2_:Object = null;
            _loc2_ = this._794960388water3;
            if (_loc2_ !== param1) {
                this._794960388water3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "water3", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get waterDamage():DamageType {
            return this._116011162waterDamage;
        }

        public function set waterDamage(param1:DamageType):void {
            var _loc2_:Object = null;
            _loc2_ = this._116011162waterDamage;
            if (_loc2_ !== param1) {
                this._116011162waterDamage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "waterDamage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get whiteDragon():Species {
            return this._1349389412whiteDragon;
        }

        public function set whiteDragon(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._1349389412whiteDragon;
            if (_loc2_ !== param1) {
                this._1349389412whiteDragon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "whiteDragon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get whiteGoldChunk():Items {
            return this._219078596whiteGoldChunk;
        }

        public function set whiteGoldChunk(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._219078596whiteGoldChunk;
            if (_loc2_ !== param1) {
                this._219078596whiteGoldChunk = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "whiteGoldChunk", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get whoppingWatermelon():Items {
            return this._178787328whoppingWatermelon;
        }

        public function set whoppingWatermelon(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._178787328whoppingWatermelon;
            if (_loc2_ !== param1) {
                this._178787328whoppingWatermelon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "whoppingWatermelon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get wilderness():LocationType {
            return this._1913214770wilderness;
        }

        public function set wilderness(param1:LocationType):void {
            var _loc2_:Object = null;
            _loc2_ = this._1913214770wilderness;
            if (_loc2_ !== param1) {
                this._1913214770wilderness = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "wilderness", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get wildlingCaptive():Locations {
            return this._291844054wildlingCaptive;
        }

        public function set wildlingCaptive(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._291844054wildlingCaptive;
            if (_loc2_ !== param1) {
                this._291844054wildlingCaptive = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "wildlingCaptive", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get wildlingShaman():Enemies {
            return this._1743265778wildlingShaman;
        }

        public function set wildlingShaman(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1743265778wildlingShaman;
            if (_loc2_ !== param1) {
                this._1743265778wildlingShaman = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "wildlingShaman", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get wildlingShamanBoss():Enemies {
            return this._168614043wildlingShamanBoss;
        }

        public function set wildlingShamanBoss(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._168614043wildlingShamanBoss;
            if (_loc2_ !== param1) {
                this._168614043wildlingShamanBoss = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "wildlingShamanBoss", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get wine():Items {
            return this._3649545wine;
        }

        public function set wine(param1:Items):void {
            var _loc2_:Object = null;
            _loc2_ = this._3649545wine;
            if (_loc2_ !== param1) {
                this._3649545wine = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "wine", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get wishingWell():Locations {
            return this._1432452791wishingWell;
        }

        public function set wishingWell(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1432452791wishingWell;
            if (_loc2_ !== param1) {
                this._1432452791wishingWell = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "wishingWell", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get wizardNotebook():Quests {
            return this._55201690wizardNotebook;
        }

        public function set wizardNotebook(param1:Quests):void {
            var _loc2_:Object = null;
            _loc2_ = this._55201690wizardNotebook;
            if (_loc2_ !== param1) {
                this._55201690wizardNotebook = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "wizardNotebook", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get yourselftext():WrapButton {
            return this._625367980yourselftext;
        }

        public function set yourselftext(param1:WrapButton):void {
            var _loc2_:Object = null;
            _loc2_ = this._625367980yourselftext;
            if (_loc2_ !== param1) {
                this._625367980yourselftext = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "yourselftext", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get version():Number {
            return this._351608024version;
        }

        protected function set version(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._351608024version;
            if (_loc2_ !== param1) {
                this._351608024version = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "version", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconStore():Class {
            return this._1401507864iconStore;
        }

        public function set iconStore(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1401507864iconStore;
            if (_loc2_ !== param1) {
                this._1401507864iconStore = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconStore", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconHospital():Class {
            return this._1330582995iconHospital;
        }

        public function set iconHospital(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1330582995iconHospital;
            if (_loc2_ !== param1) {
                this._1330582995iconHospital = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconHospital", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconChurch():Class {
            return this._966040704iconChurch;
        }

        public function set iconChurch(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._966040704iconChurch;
            if (_loc2_ !== param1) {
                this._966040704iconChurch = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconChurch", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconRestaurant():Class {
            return this._1041948822iconRestaurant;
        }

        public function set iconRestaurant(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1041948822iconRestaurant;
            if (_loc2_ !== param1) {
                this._1041948822iconRestaurant = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconRestaurant", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconTailor():Class {
            return this._486172660iconTailor;
        }

        public function set iconTailor(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._486172660iconTailor;
            if (_loc2_ !== param1) {
                this._486172660iconTailor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconTailor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconInn():Class {
            return this._1638753456iconInn;
        }

        public function set iconInn(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1638753456iconInn;
            if (_loc2_ !== param1) {
                this._1638753456iconInn = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconInn", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconHome():Class {
            return this._738279176iconHome;
        }

        public function set iconHome(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._738279176iconHome;
            if (_loc2_ !== param1) {
                this._738279176iconHome = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconHome", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconBuilding():Class {
            return this._203565645iconBuilding;
        }

        public function set iconBuilding(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._203565645iconBuilding;
            if (_loc2_ !== param1) {
                this._203565645iconBuilding = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconBuilding", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconLeave():Class {
            return this._1408432706iconLeave;
        }

        public function set iconLeave(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1408432706iconLeave;
            if (_loc2_ !== param1) {
                this._1408432706iconLeave = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconLeave", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconTest():Class {
            return this._737931093iconTest;
        }

        public function set iconTest(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._737931093iconTest;
            if (_loc2_ !== param1) {
                this._737931093iconTest = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconTest", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconTrainingGround():Class {
            return this._1108376614iconTrainingGround;
        }

        public function set iconTrainingGround(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1108376614iconTrainingGround;
            if (_loc2_ !== param1) {
                this._1108376614iconTrainingGround = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconTrainingGround", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconWall():Class {
            return this._737845789iconWall;
        }

        public function set iconWall(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._737845789iconWall;
            if (_loc2_ !== param1) {
                this._737845789iconWall = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconWall", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconFence():Class {
            return this._1413961928iconFence;
        }

        public function set iconFence(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1413961928iconFence;
            if (_loc2_ !== param1) {
                this._1413961928iconFence = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconFence", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconFenceGate():Class {
            return this._1145310243iconFenceGate;
        }

        public function set iconFenceGate(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1145310243iconFenceGate;
            if (_loc2_ !== param1) {
                this._1145310243iconFenceGate = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconFenceGate", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconRoad():Class {
            return this._737981639iconRoad;
        }

        public function set iconRoad(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._737981639iconRoad;
            if (_loc2_ !== param1) {
                this._737981639iconRoad = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconRoad", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconUnknown():Class {
            return this._924861039iconUnknown;
        }

        public function set iconUnknown(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._924861039iconUnknown;
            if (_loc2_ !== param1) {
                this._924861039iconUnknown = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconUnknown", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconHills():Class {
            return this._1411997351iconHills;
        }

        public function set iconHills(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1411997351iconHills;
            if (_loc2_ !== param1) {
                this._1411997351iconHills = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconHills", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconForest():Class {
            return this._873789962iconForest;
        }

        public function set iconForest(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._873789962iconForest;
            if (_loc2_ !== param1) {
                this._873789962iconForest = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconForest", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconMountain():Class {
            return this._1510421030iconMountain;
        }

        public function set iconMountain(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1510421030iconMountain;
            if (_loc2_ !== param1) {
                this._1510421030iconMountain = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconMountain", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconGrasslands():Class {
            return this._505274037iconGrasslands;
        }

        public function set iconGrasslands(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._505274037iconGrasslands;
            if (_loc2_ !== param1) {
                this._505274037iconGrasslands = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconGrasslands", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconGate():Class {
            return this._738322204iconGate;
        }

        public function set iconGate(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._738322204iconGate;
            if (_loc2_ !== param1) {
                this._738322204iconGate = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconGate", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconBeach():Class {
            return this._1417668502iconBeach;
        }

        public function set iconBeach(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1417668502iconBeach;
            if (_loc2_ !== param1) {
                this._1417668502iconBeach = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconBeach", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconOcean():Class {
            return this._1405718523iconOcean;
        }

        public function set iconOcean(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1405718523iconOcean;
            if (_loc2_ !== param1) {
                this._1405718523iconOcean = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconOcean", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconMage():Class {
            return this._738143861iconMage;
        }

        public function set iconMage(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._738143861iconMage;
            if (_loc2_ !== param1) {
                this._738143861iconMage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconMage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconYes():Class {
            return this._1638768558iconYes;
        }

        public function set iconYes(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1638768558iconYes;
            if (_loc2_ !== param1) {
                this._1638768558iconYes = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconYes", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconNo():Class {
            return this._1194062822iconNo;
        }

        public function set iconNo(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1194062822iconNo;
            if (_loc2_ !== param1) {
                this._1194062822iconNo = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconNo", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconNext():Class {
            return this._738109684iconNext;
        }

        public function set iconNext(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._738109684iconNext;
            if (_loc2_ !== param1) {
                this._738109684iconNext = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconNext", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconReturn():Class {
            return this._539400439iconReturn;
        }

        public function set iconReturn(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._539400439iconReturn;
            if (_loc2_ !== param1) {
                this._539400439iconReturn = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconReturn", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconUp():Class {
            return this._1194062604iconUp;
        }

        public function set iconUp(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1194062604iconUp;
            if (_loc2_ !== param1) {
                this._1194062604iconUp = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconUp", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconDown():Class {
            return this._738398021iconDown;
        }

        public function set iconDown(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._738398021iconDown;
            if (_loc2_ !== param1) {
                this._738398021iconDown = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconDown", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconRest():Class {
            return this._737990675iconRest;
        }

        public function set iconRest(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._737990675iconRest;
            if (_loc2_ !== param1) {
                this._737990675iconRest = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconRest", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconArmor():Class {
            return this._1418192826iconArmor;
        }

        public function set iconArmor(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1418192826iconArmor;
            if (_loc2_ !== param1) {
                this._1418192826iconArmor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconArmor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconDrink():Class {
            return this._1415426145iconDrink;
        }

        public function set iconDrink(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1415426145iconDrink;
            if (_loc2_ !== param1) {
                this._1415426145iconDrink = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconDrink", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconFood():Class {
            return this._738338697iconFood;
        }

        public function set iconFood(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._738338697iconFood;
            if (_loc2_ !== param1) {
                this._738338697iconFood = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconFood", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconOther():Class {
            return this._1405209065iconOther;
        }

        public function set iconOther(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1405209065iconOther;
            if (_loc2_ !== param1) {
                this._1405209065iconOther = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconOther", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconHealthPotion():Class {
            return this._747657688iconHealthPotion;
        }

        public function set iconHealthPotion(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._747657688iconHealthPotion;
            if (_loc2_ !== param1) {
                this._747657688iconHealthPotion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconHealthPotion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconManaPotion():Class {
            return this._365412371iconManaPotion;
        }

        public function set iconManaPotion(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._365412371iconManaPotion;
            if (_loc2_ !== param1) {
                this._365412371iconManaPotion = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconManaPotion", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconShirt():Class {
            return this._1401871107iconShirt;
        }

        public function set iconShirt(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1401871107iconShirt;
            if (_loc2_ !== param1) {
                this._1401871107iconShirt = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconShirt", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconWeapon():Class {
            return this._396825611iconWeapon;
        }

        public function set iconWeapon(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._396825611iconWeapon;
            if (_loc2_ !== param1) {
                this._396825611iconWeapon = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconWeapon", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconPants():Class {
            return this._1404845341iconPants;
        }

        public function set iconPants(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1404845341iconPants;
            if (_loc2_ !== param1) {
                this._1404845341iconPants = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconPants", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconAttack():Class {
            return this._1012262879iconAttack;
        }

        public function set iconAttack(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1012262879iconAttack;
            if (_loc2_ !== param1) {
                this._1012262879iconAttack = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconAttack", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconDevour():Class {
            return this._940154640iconDevour;
        }

        public function set iconDevour(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._940154640iconDevour;
            if (_loc2_ !== param1) {
                this._940154640iconDevour = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconDevour", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconInventory():Class {
            return this._1395324131iconInventory;
        }

        public function set iconInventory(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1395324131iconInventory;
            if (_loc2_ !== param1) {
                this._1395324131iconInventory = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconInventory", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconRun():Class {
            return this._1638762322iconRun;
        }

        public function set iconRun(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1638762322iconRun;
            if (_loc2_ !== param1) {
                this._1638762322iconRun = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconRun", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconSpells():Class {
            return this._501068252iconSpells;
        }

        public function set iconSpells(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._501068252iconSpells;
            if (_loc2_ !== param1) {
                this._501068252iconSpells = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconSpells", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconSurrender():Class {
            return this._924049261iconSurrender;
        }

        public function set iconSurrender(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._924049261iconSurrender;
            if (_loc2_ !== param1) {
                this._924049261iconSurrender = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconSurrender", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconWait():Class {
            return this._737845874iconWait;
        }

        public function set iconWait(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._737845874iconWait;
            if (_loc2_ !== param1) {
                this._737845874iconWait = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconWait", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconBlackMagic():Class {
            return this._1159259719iconBlackMagic;
        }

        public function set iconBlackMagic(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1159259719iconBlackMagic;
            if (_loc2_ !== param1) {
                this._1159259719iconBlackMagic = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconBlackMagic", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconGreyMagic():Class {
            return this._1730411925iconGreyMagic;
        }

        public function set iconGreyMagic(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1730411925iconGreyMagic;
            if (_loc2_ !== param1) {
                this._1730411925iconGreyMagic = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconGreyMagic", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get iconWhiteMagic():Class {
            return this._1239174051iconWhiteMagic;
        }

        public function set iconWhiteMagic(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1239174051iconWhiteMagic;
            if (_loc2_ !== param1) {
                this._1239174051iconWhiteMagic = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "iconWhiteMagic", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get downButton():Class {
            return this._842839668downButton;
        }

        public function set downButton(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._842839668downButton;
            if (_loc2_ !== param1) {
                this._842839668downButton = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "downButton", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get hoverButton():Class {
            return this._1041236082hoverButton;
        }

        public function set hoverButton(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1041236082hoverButton;
            if (_loc2_ !== param1) {
                this._1041236082hoverButton = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "hoverButton", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get upButton():Class {
            return this._367690157upButton;
        }

        public function set upButton(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._367690157upButton;
            if (_loc2_ !== param1) {
                this._367690157upButton = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "upButton", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get enemyImageSource():Class {
            return this._857497426enemyImageSource;
        }

        protected function set enemyImageSource(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._857497426enemyImageSource;
            if (_loc2_ !== param1) {
                this._857497426enemyImageSource = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "enemyImageSource", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get defaultEnemyImage():Class {
            return this._2106913748defaultEnemyImage;
        }

        public function set defaultEnemyImage(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._2106913748defaultEnemyImage;
            if (_loc2_ !== param1) {
                this._2106913748defaultEnemyImage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "defaultEnemyImage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get lemonSlimeImage():Class {
            return this._1976105670lemonSlimeImage;
        }

        public function set lemonSlimeImage(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1976105670lemonSlimeImage;
            if (_loc2_ !== param1) {
                this._1976105670lemonSlimeImage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "lemonSlimeImage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get bearImage():Class {
            return this._1878665721bearImage;
        }

        public function set bearImage(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1878665721bearImage;
            if (_loc2_ !== param1) {
                this._1878665721bearImage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "bearImage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get lionImage():Class {
            return this._671434081lionImage;
        }

        public function set lionImage(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._671434081lionImage;
            if (_loc2_ !== param1) {
                this._671434081lionImage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "lionImage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cheetahImage():Class {
            return this._696877381cheetahImage;
        }

        public function set cheetahImage(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._696877381cheetahImage;
            if (_loc2_ !== param1) {
                this._696877381cheetahImage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cheetahImage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get wolfImage():Class {
            return this._103213527wolfImage;
        }

        public function set wolfImage(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._103213527wolfImage;
            if (_loc2_ !== param1) {
                this._103213527wolfImage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "wolfImage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get sphereSharkImage():Class {
            return this._1058392029sphereSharkImage;
        }

        public function set sphereSharkImage(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1058392029sphereSharkImage;
            if (_loc2_ !== param1) {
                this._1058392029sphereSharkImage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sphereSharkImage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get bubbleOrcaImage():Class {
            return this._874880302bubbleOrcaImage;
        }

        public function set bubbleOrcaImage(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._874880302bubbleOrcaImage;
            if (_loc2_ !== param1) {
                this._874880302bubbleOrcaImage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "bubbleOrcaImage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get milkMachineImage():Class {
            return this._1452486927milkMachineImage;
        }

        public function set milkMachineImage(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1452486927milkMachineImage;
            if (_loc2_ !== param1) {
                this._1452486927milkMachineImage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "milkMachineImage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get backgroundImageSource():Class {
            return this._1022740664backgroundImageSource;
        }

        protected function set backgroundImageSource(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1022740664backgroundImageSource;
            if (_loc2_ !== param1) {
                this._1022740664backgroundImageSource = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "backgroundImageSource", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get cityday():Class {
            return this._785444433cityday;
        }

        public function set cityday(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._785444433cityday;
            if (_loc2_ !== param1) {
                this._785444433cityday = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cityday", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get citynight():Class {
            return this._1092684403citynight;
        }

        public function set citynight(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1092684403citynight;
            if (_loc2_ !== param1) {
                this._1092684403citynight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "citynight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get grasslandsday():Class {
            return this._975299990grasslandsday;
        }

        public function set grasslandsday(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._975299990grasslandsday;
            if (_loc2_ !== param1) {
                this._975299990grasslandsday = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "grasslandsday", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get grasslandsnight():Class {
            return this._950960282grasslandsnight;
        }

        public function set grasslandsnight(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._950960282grasslandsnight;
            if (_loc2_ !== param1) {
                this._950960282grasslandsnight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "grasslandsnight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get forestDay():Class {
            return this._1599135295forestDay;
        }

        public function set forestDay(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1599135295forestDay;
            if (_loc2_ !== param1) {
                this._1599135295forestDay = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "forestDay", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get forestNight():Class {
            return this._819813893forestNight;
        }

        public function set forestNight(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._819813893forestNight;
            if (_loc2_ !== param1) {
                this._819813893forestNight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "forestNight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get hillsDay():Class {
            return this._1537529878hillsDay;
        }

        public function set hillsDay(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1537529878hillsDay;
            if (_loc2_ !== param1) {
                this._1537529878hillsDay = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "hillsDay", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get hillsNight():Class {
            return this._88003354hillsNight;
        }

        public function set hillsNight(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._88003354hillsNight;
            if (_loc2_ !== param1) {
                this._88003354hillsNight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "hillsNight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get beachDay():Class {
            return this._1311902521beachDay;
        }

        public function set beachDay(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1311902521beachDay;
            if (_loc2_ !== param1) {
                this._1311902521beachDay = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "beachDay", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get beachNight():Class {
            return this._1972602763beachNight;
        }

        public function set beachNight(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._1972602763beachNight;
            if (_loc2_ !== param1) {
                this._1972602763beachNight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "beachNight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get mountainsDay():Class {
            return this._125460022mountainsDay;
        }

        public function set mountainsDay(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._125460022mountainsDay;
            if (_loc2_ !== param1) {
                this._125460022mountainsDay = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "mountainsDay", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        public function get mountainsNight():Class {
            return this._317456434mountainsNight;
        }

        public function set mountainsNight(param1:Class):void {
            var _loc2_:Object = null;
            _loc2_ = this._317456434mountainsNight;
            if (_loc2_ !== param1) {
                this._317456434mountainsNight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "mountainsNight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get STR():Number {
            return this._82449STR;
        }

        protected function set STR(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._82449STR;
            if (_loc2_ !== param1) {
                this._82449STR = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "STR", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get AGI():Number {
            return this._64739AGI;
        }

        protected function set AGI(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._64739AGI;
            if (_loc2_ !== param1) {
                this._64739AGI = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "AGI", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get INT():Number {
            return this._72655INT;
        }

        protected function set INT(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._72655INT;
            if (_loc2_ !== param1) {
                this._72655INT = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "INT", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get STO():Number {
            return this._82446STO;
        }

        protected function set STO(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._82446STO;
            if (_loc2_ !== param1) {
                this._82446STO = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "STO", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get END():Number {
            return this._68795END;
        }

        protected function set END(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._68795END;
            if (_loc2_ !== param1) {
                this._68795END = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "END", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get bSTR():Number {
            return this._3001967bSTR;
        }

        protected function set bSTR(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._3001967bSTR;
            if (_loc2_ !== param1) {
                this._3001967bSTR = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "bSTR", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get tenemyFATdebuff():Number {
            return this._741782393tenemyFATdebuff;
        }

        protected function set tenemyFATdebuff(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._741782393tenemyFATdebuff;
            if (_loc2_ !== param1) {
                this._741782393tenemyFATdebuff = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "tenemyFATdebuff", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get strColor():uint {
            return this._1759950770strColor;
        }

        protected function set strColor(param1:uint):void {
            var _loc2_:Object = null;
            _loc2_ = this._1759950770strColor;
            if (_loc2_ !== param1) {
                this._1759950770strColor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "strColor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get agiColor():uint {
            return this._1543827488agiColor;
        }

        protected function set agiColor(param1:uint):void {
            var _loc2_:Object = null;
            _loc2_ = this._1543827488agiColor;
            if (_loc2_ !== param1) {
                this._1543827488agiColor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "agiColor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get endColor():uint {
            return this._1699546952endColor;
        }

        protected function set endColor(param1:uint):void {
            var _loc2_:Object = null;
            _loc2_ = this._1699546952endColor;
            if (_loc2_ !== param1) {
                this._1699546952endColor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "endColor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get intColor():uint {
            return this._538920116intColor;
        }

        protected function set intColor(param1:uint):void {
            var _loc2_:Object = null;
            _loc2_ = this._538920116intColor;
            if (_loc2_ !== param1) {
                this._538920116intColor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "intColor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get stoColor():uint {
            return this._1674063317stoColor;
        }

        protected function set stoColor(param1:uint):void {
            var _loc2_:Object = null;
            _loc2_ = this._1674063317stoColor;
            if (_loc2_ !== param1) {
                this._1674063317stoColor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "stoColor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get manaColor():uint {
            return this._506655396manaColor;
        }

        protected function set manaColor(param1:uint):void {
            var _loc2_:Object = null;
            _loc2_ = this._506655396manaColor;
            if (_loc2_ !== param1) {
                this._506655396manaColor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "manaColor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get healthColor():uint {
            return this._1937877401healthColor;
        }

        protected function set healthColor(param1:uint):void {
            var _loc2_:Object = null;
            _loc2_ = this._1937877401healthColor;
            if (_loc2_ !== param1) {
                this._1937877401healthColor = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "healthColor", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get maxFUL():int {
            return this._1081163399maxFUL;
        }

        protected function set maxFUL(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._1081163399maxFUL;
            if (_loc2_ !== param1) {
                this._1081163399maxFUL = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "maxFUL", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get maxHEA():int {
            return this._1081161984maxHEA;
        }

        protected function set maxHEA(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._1081161984maxHEA;
            if (_loc2_ !== param1) {
                this._1081161984maxHEA = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "maxHEA", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get bmaxHEA():int {
            return this._5147166bmaxHEA;
        }

        protected function set bmaxHEA(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._5147166bmaxHEA;
            if (_loc2_ !== param1) {
                this._5147166bmaxHEA = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "bmaxHEA", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get tmaxHEA():int {
            return this._1209950092tmaxHEA;
        }

        protected function set tmaxHEA(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._1209950092tmaxHEA;
            if (_loc2_ !== param1) {
                this._1209950092tmaxHEA = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "tmaxHEA", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get maxMANA():int {
            return this._843862443maxMANA;
        }

        protected function set maxMANA(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._843862443maxMANA;
            if (_loc2_ !== param1) {
                this._843862443maxMANA = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "maxMANA", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get tmaxMANA():int {
            return this._1146398391tmaxMANA;
        }

        protected function set tmaxMANA(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._1146398391tmaxMANA;
            if (_loc2_ !== param1) {
                this._1146398391tmaxMANA = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "tmaxMANA", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get HEA():int {
            return this._71396HEA;
        }

        protected function set HEA(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._71396HEA;
            if (_loc2_ !== param1) {
                this._71396HEA = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HEA", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get MANA():Number {
            return this._2358855MANA;
        }

        protected function set MANA(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._2358855MANA;
            if (_loc2_ !== param1) {
                this._2358855MANA = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MANA", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get FUL():int {
            return this._69981FUL;
        }

        protected function set FUL(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._69981FUL;
            if (_loc2_ !== param1) {
                this._69981FUL = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "FUL", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get FULbarScale():Number {
            return this._1844745556FULbarScale;
        }

        protected function set FULbarScale(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._1844745556FULbarScale;
            if (_loc2_ !== param1) {
                this._1844745556FULbarScale = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "FULbarScale", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get HEAbarScale():Number {
            return this._197778469HEAbarScale;
        }

        protected function set HEAbarScale(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._197778469HEAbarScale;
            if (_loc2_ !== param1) {
                this._197778469HEAbarScale = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "HEAbarScale", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get MANAbarScale():Number {
            return this._923207618MANAbarScale;
        }

        protected function set MANAbarScale(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._923207618MANAbarScale;
            if (_loc2_ !== param1) {
                this._923207618MANAbarScale = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "MANAbarScale", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get STA():Number {
            return this._82432STA;
        }

        protected function set STA(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._82432STA;
            if (_loc2_ !== param1) {
                this._82432STA = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "STA", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get ATE():Number {
            return this._65138ATE;
        }

        protected function set ATE(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._65138ATE;
            if (_loc2_ !== param1) {
                this._65138ATE = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "ATE", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get Eaten():Number {
            return this._66727393Eaten;
        }

        protected function set Eaten(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._66727393Eaten;
            if (_loc2_ !== param1) {
                this._66727393Eaten = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Eaten", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get Drank():Number {
            return this._66292336Drank;
        }

        protected function set Drank(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._66292336Drank;
            if (_loc2_ !== param1) {
                this._66292336Drank = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Drank", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get InflatedMass():Number {
            return this._347265009InflatedMass;
        }

        protected function set InflatedMass(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._347265009InflatedMass;
            if (_loc2_ !== param1) {
                this._347265009InflatedMass = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "InflatedMass", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get FAT():Number {
            return this._69369FAT;
        }

        protected function set FAT(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._69369FAT;
            if (_loc2_ !== param1) {
                this._69369FAT = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "FAT", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get playerHeight():int {
            return this._581260440playerHeight;
        }

        protected function set playerHeight(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._581260440playerHeight;
            if (_loc2_ !== param1) {
                this._581260440playerHeight = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "playerHeight", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get playerSpecies():Species {
            return this._644509467playerSpecies;
        }

        protected function set playerSpecies(param1:Species):void {
            var _loc2_:Object = null;
            _loc2_ = this._644509467playerSpecies;
            if (_loc2_ !== param1) {
                this._644509467playerSpecies = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "playerSpecies", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get playerName():String {
            return this._2095657228playerName;
        }

        protected function set playerName(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._2095657228playerName;
            if (_loc2_ !== param1) {
                this._2095657228playerName = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "playerName", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get playerGender():Gender {
            return this._609743614playerGender;
        }

        protected function set playerGender(param1:Gender):void {
            var _loc2_:Object = null;
            _loc2_ = this._609743614playerGender;
            if (_loc2_ !== param1) {
                this._609743614playerGender = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "playerGender", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get XP():int {
            return this._2808XP;
        }

        protected function set XP(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._2808XP;
            if (_loc2_ !== param1) {
                this._2808XP = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "XP", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get XPtoLevel():int {
            return this._671064017XPtoLevel;
        }

        protected function set XPtoLevel(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._671064017XPtoLevel;
            if (_loc2_ !== param1) {
                this._671064017XPtoLevel = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "XPtoLevel", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get LVL():int {
            return this._75778LVL;
        }

        protected function set LVL(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._75778LVL;
            if (_loc2_ !== param1) {
                this._75778LVL = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "LVL", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get day():int {
            return this._99228day;
        }

        protected function set day(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._99228day;
            if (_loc2_ !== param1) {
                this._99228day = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "day", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get AMPM():String {
            return this._2012969AMPM;
        }

        protected function set AMPM(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._2012969AMPM;
            if (_loc2_ !== param1) {
                this._2012969AMPM = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "AMPM", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get hour():int {
            return this._3208676hour;
        }

        protected function set hour(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._3208676hour;
            if (_loc2_ !== param1) {
                this._3208676hour = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "hour", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get displayHour():int {
            return this._1713983942displayHour;
        }

        protected function set displayHour(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._1713983942displayHour;
            if (_loc2_ !== param1) {
                this._1713983942displayHour = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "displayHour", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get tensMinute():int {
            return this._534087082tensMinute;
        }

        protected function set tensMinute(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._534087082tensMinute;
            if (_loc2_ !== param1) {
                this._534087082tensMinute = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "tensMinute", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get onesMinute():Number {
            return this._370957503onesMinute;
        }

        protected function set onesMinute(param1:Number):void {
            var _loc2_:Object = null;
            _loc2_ = this._370957503onesMinute;
            if (_loc2_ !== param1) {
                this._370957503onesMinute = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "onesMinute", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get mainText():String {
            return this._8439162mainText;
        }

        protected function set mainText(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._8439162mainText;
            if (_loc2_ !== param1) {
                this._8439162mainText = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "mainText", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get miscellaneousText():String {
            return this._1146800581miscellaneousText;
        }

        protected function set miscellaneousText(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._1146800581miscellaneousText;
            if (_loc2_ !== param1) {
                this._1146800581miscellaneousText = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "miscellaneousText", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get appButtonVisibility():Boolean {
            return this._390589477appButtonVisibility;
        }

        protected function set appButtonVisibility(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._390589477appButtonVisibility;
            if (_loc2_ !== param1) {
                this._390589477appButtonVisibility = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "appButtonVisibility", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get newGame():Boolean {
            return this._1844812210newGame;
        }

        protected function set newGame(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1844812210newGame;
            if (_loc2_ !== param1) {
                this._1844812210newGame = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "newGame", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get location():Locations {
            return this._1901043637location;
        }

        protected function set location(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._1901043637location;
            if (_loc2_ !== param1) {
                this._1901043637location = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "location", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get cameFrom():Locations {
            return this._150873280cameFrom;
        }

        protected function set cameFrom(param1:Locations):void {
            var _loc2_:Object = null;
            _loc2_ = this._150873280cameFrom;
            if (_loc2_ !== param1) {
                this._150873280cameFrom = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "cameFrom", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get invArray():Array {
            return this._594426088invArray;
        }

        protected function set invArray(param1:Array):void {
            var _loc2_:Object = null;
            _loc2_ = this._594426088invArray;
            if (_loc2_ !== param1) {
                this._594426088invArray = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "invArray", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get keyInvArray():Array {
            return this._667849625keyInvArray;
        }

        protected function set keyInvArray(param1:Array):void {
            var _loc2_:Object = null;
            _loc2_ = this._667849625keyInvArray;
            if (_loc2_ !== param1) {
                this._667849625keyInvArray = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "keyInvArray", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get invPage():int {
            return this._1959267872invPage;
        }

        protected function set invPage(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._1959267872invPage;
            if (_loc2_ !== param1) {
                this._1959267872invPage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "invPage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get maxInv():int {
            return this._1081159699maxInv;
        }

        protected function set maxInv(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._1081159699maxInv;
            if (_loc2_ !== param1) {
                this._1081159699maxInv = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "maxInv", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get GLD():int {
            return this._70655GLD;
        }

        protected function set GLD(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._70655GLD;
            if (_loc2_ !== param1) {
                this._70655GLD = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "GLD", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get spellPage():int {
            return this._1434844201spellPage;
        }

        protected function set spellPage(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._1434844201spellPage;
            if (_loc2_ !== param1) {
                this._1434844201spellPage = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "spellPage", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get enemy():Enemies {
            return this._96653192enemy;
        }

        protected function set enemy(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._96653192enemy;
            if (_loc2_ !== param1) {
                this._96653192enemy = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "enemy", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get enemyt():Enemies {
            return this._1298718228enemyt;
        }

        protected function set enemyt(param1:Enemies):void {
            var _loc2_:Object = null;
            _loc2_ = this._1298718228enemyt;
            if (_loc2_ !== param1) {
                this._1298718228enemyt = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "enemyt", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get eHEA():int {
            return this._3080287eHEA;
        }

        protected function set eHEA(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._3080287eHEA;
            if (_loc2_ !== param1) {
                this._3080287eHEA = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "eHEA", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get optionsMetric():Boolean {
            return this._1420985874optionsMetric;
        }

        protected function set optionsMetric(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1420985874optionsMetric;
            if (_loc2_ !== param1) {
                this._1420985874optionsMetric = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "optionsMetric", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get optionsImperial():Boolean {
            return this._234717945optionsImperial;
        }

        protected function set optionsImperial(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._234717945optionsImperial;
            if (_loc2_ !== param1) {
                this._234717945optionsImperial = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "optionsImperial", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get optionsPopping():Boolean {
            return this._1844160197optionsPopping;
        }

        protected function set optionsPopping(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1844160197optionsPopping;
            if (_loc2_ !== param1) {
                this._1844160197optionsPopping = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "optionsPopping", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get optionsMales():Boolean {
            return this._1985628152optionsMales;
        }

        protected function set optionsMales(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1985628152optionsMales;
            if (_loc2_ !== param1) {
                this._1985628152optionsMales = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "optionsMales", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get optionsFemales():Boolean {
            return this._1269551657optionsFemales;
        }

        protected function set optionsFemales(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1269551657optionsFemales;
            if (_loc2_ !== param1) {
                this._1269551657optionsFemales = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "optionsFemales", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get optionsDescription():Boolean {
            return this._1938617982optionsDescription;
        }

        protected function set optionsDescription(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1938617982optionsDescription;
            if (_loc2_ !== param1) {
                this._1938617982optionsDescription = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "optionsDescription", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get DMG():int {
            return this._67806DMG;
        }

        protected function set DMG(param1:int):void {
            var _loc2_:Object = null;
            _loc2_ = this._67806DMG;
            if (_loc2_ !== param1) {
                this._67806DMG = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "DMG", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get depositLabel():String {
            return this._273738486depositLabel;
        }

        protected function set depositLabel(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._273738486depositLabel;
            if (_loc2_ !== param1) {
                this._273738486depositLabel = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "depositLabel", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get discardLabel():String {
            return this._1065338634discardLabel;
        }

        protected function set discardLabel(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._1065338634discardLabel;
            if (_loc2_ !== param1) {
                this._1065338634discardLabel = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "discardLabel", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabel1():String {
            return this._731235727buttonLabel1;
        }

        protected function set buttonLabel1(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._731235727buttonLabel1;
            if (_loc2_ !== param1) {
                this._731235727buttonLabel1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabel1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabel2():String {
            return this._731235728buttonLabel2;
        }

        protected function set buttonLabel2(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._731235728buttonLabel2;
            if (_loc2_ !== param1) {
                this._731235728buttonLabel2 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabel2", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabel3():String {
            return this._731235729buttonLabel3;
        }

        protected function set buttonLabel3(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._731235729buttonLabel3;
            if (_loc2_ !== param1) {
                this._731235729buttonLabel3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabel3", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabel4():String {
            return this._731235730buttonLabel4;
        }

        protected function set buttonLabel4(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._731235730buttonLabel4;
            if (_loc2_ !== param1) {
                this._731235730buttonLabel4 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabel4", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabel5():String {
            return this._731235731buttonLabel5;
        }

        protected function set buttonLabel5(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._731235731buttonLabel5;
            if (_loc2_ !== param1) {
                this._731235731buttonLabel5 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabel5", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabel6():String {
            return this._731235732buttonLabel6;
        }

        protected function set buttonLabel6(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._731235732buttonLabel6;
            if (_loc2_ !== param1) {
                this._731235732buttonLabel6 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabel6", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabel7():String {
            return this._731235733buttonLabel7;
        }

        protected function set buttonLabel7(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._731235733buttonLabel7;
            if (_loc2_ !== param1) {
                this._731235733buttonLabel7 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabel7", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabel8():String {
            return this._731235734buttonLabel8;
        }

        protected function set buttonLabel8(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._731235734buttonLabel8;
            if (_loc2_ !== param1) {
                this._731235734buttonLabel8 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabel8", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabel9():String {
            return this._731235735buttonLabel9;
        }

        protected function set buttonLabel9(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._731235735buttonLabel9;
            if (_loc2_ !== param1) {
                this._731235735buttonLabel9 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabel9", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabeldec1():String {
            return this._171037265buttonLabeldec1;
        }

        protected function set buttonLabeldec1(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._171037265buttonLabeldec1;
            if (_loc2_ !== param1) {
                this._171037265buttonLabeldec1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabeldec1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabeldec2():String {
            return this._171037266buttonLabeldec2;
        }

        protected function set buttonLabeldec2(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._171037266buttonLabeldec2;
            if (_loc2_ !== param1) {
                this._171037266buttonLabeldec2 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabeldec2", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonLabeldec3():String {
            return this._171037267buttonLabeldec3;
        }

        protected function set buttonLabeldec3(param1:String):void {
            var _loc2_:Object = null;
            _loc2_ = this._171037267buttonLabeldec3;
            if (_loc2_ !== param1) {
                this._171037267buttonLabeldec3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonLabeldec3", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisible1():Boolean {
            return this._1886345041buttonVisible1;
        }

        protected function set buttonVisible1(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1886345041buttonVisible1;
            if (_loc2_ !== param1) {
                this._1886345041buttonVisible1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisible1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisible2():Boolean {
            return this._1886345042buttonVisible2;
        }

        protected function set buttonVisible2(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1886345042buttonVisible2;
            if (_loc2_ !== param1) {
                this._1886345042buttonVisible2 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisible2", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisible3():Boolean {
            return this._1886345043buttonVisible3;
        }

        protected function set buttonVisible3(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1886345043buttonVisible3;
            if (_loc2_ !== param1) {
                this._1886345043buttonVisible3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisible3", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisible4():Boolean {
            return this._1886345044buttonVisible4;
        }

        protected function set buttonVisible4(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1886345044buttonVisible4;
            if (_loc2_ !== param1) {
                this._1886345044buttonVisible4 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisible4", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisible5():Boolean {
            return this._1886345045buttonVisible5;
        }

        protected function set buttonVisible5(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1886345045buttonVisible5;
            if (_loc2_ !== param1) {
                this._1886345045buttonVisible5 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisible5", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisible6():Boolean {
            return this._1886345046buttonVisible6;
        }

        protected function set buttonVisible6(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1886345046buttonVisible6;
            if (_loc2_ !== param1) {
                this._1886345046buttonVisible6 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisible6", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisible7():Boolean {
            return this._1886345047buttonVisible7;
        }

        protected function set buttonVisible7(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1886345047buttonVisible7;
            if (_loc2_ !== param1) {
                this._1886345047buttonVisible7 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisible7", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisible8():Boolean {
            return this._1886345048buttonVisible8;
        }

        protected function set buttonVisible8(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1886345048buttonVisible8;
            if (_loc2_ !== param1) {
                this._1886345048buttonVisible8 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisible8", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisible9():Boolean {
            return this._1886345049buttonVisible9;
        }

        protected function set buttonVisible9(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._1886345049buttonVisible9;
            if (_loc2_ !== param1) {
                this._1886345049buttonVisible9 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisible9", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisibledec1():Boolean {
            return this._754635087buttonVisibledec1;
        }

        protected function set buttonVisibledec1(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._754635087buttonVisibledec1;
            if (_loc2_ !== param1) {
                this._754635087buttonVisibledec1 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisibledec1", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisibledec2():Boolean {
            return this._754635088buttonVisibledec2;
        }

        protected function set buttonVisibledec2(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._754635088buttonVisibledec2;
            if (_loc2_ !== param1) {
                this._754635088buttonVisibledec2 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisibledec2", _loc2_, param1));
                }
            }
        }

        [Bindable(event="propertyChange")]
        protected function get buttonVisibledec3():Boolean {
            return this._754635089buttonVisibledec3;
        }

        protected function set buttonVisibledec3(param1:Boolean):void {
            var _loc2_:Object = null;
            _loc2_ = this._754635089buttonVisibledec3;
            if (_loc2_ !== param1) {
                this._754635089buttonVisibledec3 = param1;
                if (this.hasEventListener("propertyChange")) {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "buttonVisibledec3", _loc2_, param1));
                }
            }
        }
    }
}
